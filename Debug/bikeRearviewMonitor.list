
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003878  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003abc  08003abc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac4  08003ac4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000070  08003b3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08003b3c  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3dd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca6  00000000  00000000  0002b47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171d2  00000000  00000000  0002e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008634  00000000  00000000  00045692  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cb08  00000000  00000000  0004dcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da7ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f2c  00000000  00000000  000da84c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080039f8 	.word	0x080039f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080039f8 	.word	0x080039f8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80004e0:	1d39      	adds	r1, r7, #4
 80004e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e6:	2201      	movs	r2, #1
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <__io_putchar+0x20>)
 80004ea:	f001 ff00 	bl	80022ee <HAL_UART_Transmit>
	return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200004ec 	.word	0x200004ec

080004fc <HAL_UART_RxCpltCallback>:
unsigned char UART2RxBuf[1024] = {0};
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_UART_RxCpltCallback+0x68>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d126      	bne.n	800055c <HAL_UART_RxCpltCallback+0x60>
		if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_UART_RxCpltCallback+0x6c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000516:	d20d      	bcs.n	8000534 <HAL_UART_RxCpltCallback+0x38>
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <HAL_UART_RxCpltCallback+0x6c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	4912      	ldr	r1, [pc, #72]	; (8000568 <HAL_UART_RxCpltCallback+0x6c>)
 8000520:	600a      	str	r2, [r1, #0]
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <HAL_UART_RxCpltCallback+0x70>)
 8000524:	7811      	ldrb	r1, [r2, #0]
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <HAL_UART_RxCpltCallback+0x74>)
 8000528:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		if ((!(UART2Rxtmp[0]^0x0A)) || (!(UART2Rxtmp[0]^0x0D))) {
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <HAL_UART_RxCpltCallback+0x70>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b0a      	cmp	r3, #10
 8000530:	d00b      	beq.n	800054a <HAL_UART_RxCpltCallback+0x4e>
 8000532:	e006      	b.n	8000542 <HAL_UART_RxCpltCallback+0x46>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_UART_RxCpltCallback+0x78>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <HAL_UART_RxCpltCallback+0x7c>)
 800053c:	f002 fe50 	bl	80031e0 <puts>
 8000540:	e00c      	b.n	800055c <HAL_UART_RxCpltCallback+0x60>
		if ((!(UART2Rxtmp[0]^0x0A)) || (!(UART2Rxtmp[0]^0x0D))) {
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_UART_RxCpltCallback+0x70>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b0d      	cmp	r3, #13
 8000548:	d103      	bne.n	8000552 <HAL_UART_RxCpltCallback+0x56>
			UART2RxFlg = 1; return;
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <HAL_UART_RxCpltCallback+0x78>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e004      	b.n	800055c <HAL_UART_RxCpltCallback+0x60>
		} HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4905      	ldr	r1, [pc, #20]	; (800056c <HAL_UART_RxCpltCallback+0x70>)
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <HAL_UART_RxCpltCallback+0x80>)
 8000558:	f001 ff62 	bl	8002420 <HAL_UART_Receive_IT>
	}
}
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40004400 	.word	0x40004400
 8000568:	20000490 	.word	0x20000490
 800056c:	20000494 	.word	0x20000494
 8000570:	2000008c 	.word	0x2000008c
 8000574:	2000048c 	.word	0x2000048c
 8000578:	08003a10 	.word	0x08003a10
 800057c:	20000584 	.word	0x20000584

08000580 <UART2_Clear>:

void UART2_Clear() {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	// memset(UART2RxBuf, 0, sizeof UART2RxBuf);
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	e007      	b.n	800059c <UART2_Clear+0x1c>
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <UART2_Clear+0x40>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <UART2_Clear+0x44>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3f2      	bcc.n	800058c <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = 0;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <UART2_Clear+0x44>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <UART2_Clear+0x48>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	20000490 	.word	0x20000490
 80005c8:	2000048c 	.word	0x2000048c

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fc06 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f82a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f966 	bl	80008a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 f90c 	bl	80007f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f938 	bl	8000854 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005e4:	f000 f880 	bl	80006e8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80005e8:	f000 f8d0 	bl	800078c <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4909      	ldr	r1, [pc, #36]	; (8000614 <main+0x48>)
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <main+0x4c>)
 80005f2:	f001 ff15 	bl	8002420 <HAL_UART_Receive_IT>
	  if (UART2RxFlg) {
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <main+0x50>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f6      	beq.n	80005ec <main+0x20>
		  HAL_UART_Transmit(&huart1, UART2RxBuf, UART2RxCnt, 0x10);
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <main+0x54>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	b29a      	uxth	r2, r3
 8000604:	2310      	movs	r3, #16
 8000606:	4907      	ldr	r1, [pc, #28]	; (8000624 <main+0x58>)
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <main+0x5c>)
 800060a:	f001 fe70 	bl	80022ee <HAL_UART_Transmit>
		  UART2_Clear();
 800060e:	f7ff ffb7 	bl	8000580 <UART2_Clear>
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 8000612:	e7eb      	b.n	80005ec <main+0x20>
 8000614:	20000494 	.word	0x20000494
 8000618:	20000584 	.word	0x20000584
 800061c:	2000048c 	.word	0x2000048c
 8000620:	20000490 	.word	0x20000490
 8000624:	2000008c 	.word	0x2000008c
 8000628:	200004ec 	.word	0x200004ec

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fd6c 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb8>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f939 	bl	8001914 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a8:	f000 f926 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fb94 	bl	8001df4 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d2:	f000 f911 	bl	80008f8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC1_Init+0x98>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_ADC1_Init+0x98>)
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_ADC1_Init+0xa0>)
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_ADC1_Init+0x98>)
 8000734:	2201      	movs	r2, #1
 8000736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <MX_ADC1_Init+0x98>)
 8000748:	f000 fbbc 	bl	8000ec4 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f8d1 	bl	80008f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000756:	2306      	movs	r3, #6
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC1_Init+0x98>)
 8000768:	f000 fbf0 	bl	8000f4c <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000772:	f000 f8c1 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200004a4 	.word	0x200004a4
 8000784:	40012000 	.word	0x40012000
 8000788:	0f000001 	.word	0x0f000001

0800078c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_SPI1_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_SPI1_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007d8:	220a      	movs	r2, #10
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_SPI1_Init+0x64>)
 80007de:	f001 fcd5 	bl	800218c <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f886 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000052c 	.word	0x2000052c
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_USART1_UART_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_USART1_UART_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART1_UART_Init+0x50>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART1_UART_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_USART1_UART_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART1_UART_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_USART1_UART_Init+0x50>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART1_UART_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_USART1_UART_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_USART1_UART_Init+0x50>)
 8000830:	f001 fd10 	bl	8002254 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f85d 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000840:	f002 fcce 	bl	80031e0 <puts>

  /* USER CODE END USART1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200004ec 	.word	0x200004ec
 800084c:	40011000 	.word	0x40011000
 8000850:	08003a2c 	.word	0x08003a2c

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f001 fce2 	bl	8002254 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f82f 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000584 	.word	0x20000584
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_GPIO_Init+0x4c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <MX_GPIO_Init+0x4c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_GPIO_Init+0x4c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_GPIO_Init+0x4c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <MX_GPIO_Init+0x4c>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_GPIO_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x6>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <HAL_ADC_MspInit+0x7c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d127      	bne.n	80009c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_ADC_MspInit+0x80>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <HAL_ADC_MspInit+0x80>)
 800097c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_ADC_MspInit+0x80>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_ADC_MspInit+0x80>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_ADC_MspInit+0x80>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_ADC_MspInit+0x80>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_ADC_MspInit+0x84>)
 80009be:	f000 fe27 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012000 	.word	0x40012000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <HAL_SPI_MspInit+0xc0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d149      	bne.n	8000a8e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_SPI_MspInit+0xc4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <HAL_SPI_MspInit+0xc8>)
 8000a6a:	f000 fdd1 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_SPI_MspInit+0xcc>)
 8000a8a:	f000 fdc1 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40013000 	.word	0x40013000
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a36      	ldr	r2, [pc, #216]	; (8000ba0 <HAL_UART_MspInit+0xf8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12d      	bne.n	8000b26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a34      	ldr	r2, [pc, #208]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b14:	2307      	movs	r3, #7
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <HAL_UART_MspInit+0x100>)
 8000b20:	f000 fd76 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b24:	e038      	b.n	8000b98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <HAL_UART_MspInit+0x104>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d133      	bne.n	8000b98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0xfc>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_UART_MspInit+0x100>)
 8000b84:	f000 fd44 	bl	8001610 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2026      	movs	r0, #38	; 0x26
 8000b8e:	f000 fce6 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b92:	2026      	movs	r0, #38	; 0x26
 8000b94:	f000 fcff 	bl	8001596 <HAL_NVIC_EnableIRQ>
}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40004400 	.word	0x40004400

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f942 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART2_IRQHandler+0x10>)
 8000c0a:	f001 fc5f 	bl	80024cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000584 	.word	0x20000584

08000c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
	}

return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fc33 	bl	80004d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
	}
	return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f002 f9ce 	bl	80030c4 <__errno>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20000498 	.word	0x20000498
 8000d5c:	200005d0 	.word	0x200005d0

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <SystemInit+0x28>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <SystemInit+0x28>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SystemInit+0x28>)
 8000d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
  ldr  r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd3 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f002 f989 	bl	80030d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc05 	bl	80005cc <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dc8:	08003acc 	.word	0x08003acc
  ldr  r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dd0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dd4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000dd8:	200005cc 	.word	0x200005cc

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 fb9d 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fd74 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fbb5 	bl	80015b2 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 fb7d 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200005c4 	.word	0x200005c4

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200005c4 	.word	0x200005c4

08000ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e033      	b.n	8000f42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fd34 	bl	8000950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f0a:	f023 0302 	bic.w	r3, r3, #2
 8000f0e:	f043 0202 	orr.w	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f94a 	bl	80011b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f023 0303 	bic.w	r3, r3, #3
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
 8000f32:	e001      	b.n	8000f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x1c>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e113      	b.n	8001190 <HAL_ADC_ConfigChannel+0x244>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	d925      	bls.n	8000fc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68d9      	ldr	r1, [r3, #12]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3b1e      	subs	r3, #30
 8000f8e:	2207      	movs	r2, #7
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43da      	mvns	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68d9      	ldr	r1, [r3, #12]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4403      	add	r3, r0
 8000fb6:	3b1e      	subs	r3, #30
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	e022      	b.n	800100a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6919      	ldr	r1, [r3, #16]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2207      	movs	r2, #7
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6919      	ldr	r1, [r3, #16]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4403      	add	r3, r0
 8001000:	409a      	lsls	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b06      	cmp	r3, #6
 8001010:	d824      	bhi.n	800105c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	3b05      	subs	r3, #5
 8001024:	221f      	movs	r2, #31
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	400a      	ands	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3b05      	subs	r3, #5
 800104e:	fa00 f203 	lsl.w	r2, r0, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
 800105a:	e04c      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d824      	bhi.n	80010ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b23      	subs	r3, #35	; 0x23
 8001076:	221f      	movs	r2, #31
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43da      	mvns	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	400a      	ands	r2, r1
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b23      	subs	r3, #35	; 0x23
 80010a0:	fa00 f203 	lsl.w	r2, r0, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
 80010ac:	e023      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b41      	subs	r3, #65	; 0x41
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	400a      	ands	r2, r1
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b41      	subs	r3, #65	; 0x41
 80010ea:	fa00 f203 	lsl.w	r2, r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <HAL_ADC_ConfigChannel+0x250>)
 80010f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_ADC_ConfigChannel+0x254>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d10f      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d8>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d10b      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_ADC_ConfigChannel+0x254>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12b      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x23a>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_ADC_ConfigChannel+0x258>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_ADC_ConfigChannel+0x1f4>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b11      	cmp	r3, #17
 800113e:	d122      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_ADC_ConfigChannel+0x258>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d111      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_ADC_ConfigChannel+0x260>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9a      	lsrs	r2, r3, #18
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001178:	e002      	b.n	8001180 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3b01      	subs	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f9      	bne.n	800117a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40012300 	.word	0x40012300
 80011a0:	40012000 	.word	0x40012000
 80011a4:	10000012 	.word	0x10000012
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b8:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <ADC_Init+0x1f0>)
 80011ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	021a      	lsls	r2, r3, #8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800122a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6899      	ldr	r1, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <ADC_Init+0x1f4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d022      	beq.n	800128e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001256:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6899      	ldr	r1, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6899      	ldr	r1, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e00f      	b.n	80012ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800129c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0202 	bic.w	r2, r2, #2
 80012bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	005a      	lsls	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	3b01      	subs	r3, #1
 8001308:	035a      	lsls	r2, r3, #13
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	e007      	b.n	8001324 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001322:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	3b01      	subs	r3, #1
 8001340:	051a      	lsls	r2, r3, #20
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6899      	ldr	r1, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001366:	025a      	lsls	r2, r3, #9
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800137e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6899      	ldr	r1, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	029a      	lsls	r2, r3, #10
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40012300 	.word	0x40012300
 80013a4:	0f000001 	.word	0x0f000001

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d004      	beq.n	80015e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00c      	b.n	8001602 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2205      	movs	r2, #5
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e159      	b.n	80018e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8148 	bne.w	80018da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d00b      	beq.n	800166a <HAL_GPIO_Init+0x5a>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165e:	2b11      	cmp	r3, #17
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b12      	cmp	r3, #18
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0xfc>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b12      	cmp	r3, #18
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a2 	beq.w	80018da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_GPIO_Init+0x2e4>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <HAL_GPIO_Init+0x2e4>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_GPIO_Init+0x2e4>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b2:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x202>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x1fe>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_GPIO_Init+0x2f4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x1fa>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a45      	ldr	r2, [pc, #276]	; (8001908 <HAL_GPIO_Init+0x2f8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x1f6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a44      	ldr	r2, [pc, #272]	; (800190c <HAL_GPIO_Init+0x2fc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x1f2>
 80017fe:	2304      	movs	r3, #4
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001802:	2307      	movs	r3, #7
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001812:	2300      	movs	r3, #0
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001824:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_GPIO_Init+0x300>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001856:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <HAL_GPIO_Init+0x300>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_GPIO_Init+0x300>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001880:	4a23      	ldr	r2, [pc, #140]	; (8001910 <HAL_GPIO_Init+0x300>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_GPIO_Init+0x300>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_GPIO_Init+0x300>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_GPIO_Init+0x300>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_GPIO_Init+0x300>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	f67f aea2 	bls.w	800162c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e8:	bf00      	nop
 80018ea:	3724      	adds	r7, #36	; 0x24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e25b      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d075      	beq.n	8001a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001932:	4ba3      	ldr	r3, [pc, #652]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4ba0      	ldr	r3, [pc, #640]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001946:	2b08      	cmp	r3, #8
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194a:	4b9d      	ldr	r3, [pc, #628]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001956:	d10b      	bne.n	8001970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	4b99      	ldr	r3, [pc, #612]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d05b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x108>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d157      	bne.n	8001a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e236      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d106      	bne.n	8001988 <HAL_RCC_OscConfig+0x74>
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e01d      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x98>
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a8a      	ldr	r2, [pc, #552]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a87      	ldr	r2, [pc, #540]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0xb0>
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a83      	ldr	r2, [pc, #524]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a80      	ldr	r2, [pc, #512]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa6e 	bl	8000eac <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fa6a 	bl	8000eac <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1fb      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0xc0>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fa5a 	bl	8000eac <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fa56 	bl	8000eac <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1e7      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0xe8>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a42:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e1bb      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4952      	ldr	r1, [pc, #328]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e03a      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a84:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_RCC_OscConfig+0x2b0>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fa0f 	bl	8000eac <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fa0b 	bl	8000eac <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e19c      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4940      	ldr	r1, [pc, #256]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x2b0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f9ee 	bl	8000eac <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f9ea 	bl	8000eac <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e17b      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d030      	beq.n	8001b60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d016      	beq.n	8001b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x2b4>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f9ce 	bl	8000eac <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff f9ca 	bl	8000eac <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e15b      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x200>
 8001b32:	e015      	b.n	8001b60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_OscConfig+0x2b4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f9b7 	bl	8000eac <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff f9b3 	bl	8000eac <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e144      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a0 	beq.w	8001cae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x2b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_RCC_OscConfig+0x2b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_RCC_OscConfig+0x2b8>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f979 	bl	8000eac <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e011      	b.n	8001be2 <HAL_RCC_OscConfig+0x2ce>
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
 8001bcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7ff f96c 	bl	8000eac <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0fd      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be2:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <HAL_RCC_OscConfig+0x4d4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f0>
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	; 0x70
 8001c02:	e01c      	b.n	8001c3e <HAL_RCC_OscConfig+0x32a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x312>
 8001c0c:	4b77      	ldr	r3, [pc, #476]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	4a76      	ldr	r2, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6713      	str	r3, [r2, #112]	; 0x70
 8001c18:	4b74      	ldr	r3, [pc, #464]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1c:	4a73      	ldr	r2, [pc, #460]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6713      	str	r3, [r2, #112]	; 0x70
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0x32a>
 8001c26:	4b71      	ldr	r3, [pc, #452]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a70      	ldr	r2, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	4b6e      	ldr	r3, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a6d      	ldr	r2, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d015      	beq.n	8001c72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f931 	bl	8000eac <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff f92d 	bl	8000eac <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0bc      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <HAL_RCC_OscConfig+0x33a>
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f91b 	bl	8000eac <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff f917 	bl	8000eac <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0a6      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	4b56      	ldr	r3, [pc, #344]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a51      	ldr	r2, [pc, #324]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8092 	beq.w	8001ddc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d05c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d141      	bne.n	8001d50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b48      	ldr	r3, [pc, #288]	; (8001df0 <HAL_RCC_OscConfig+0x4dc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f8eb 	bl	8000eac <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff f8e7 	bl	8000eac <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e078      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	019b      	lsls	r3, r3, #6
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	061b      	lsls	r3, r3, #24
 8001d1c:	4933      	ldr	r1, [pc, #204]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_RCC_OscConfig+0x4dc>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f8c0 	bl	8000eac <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f8bc 	bl	8000eac <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04d      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x41c>
 8001d4e:	e045      	b.n	8001ddc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_RCC_OscConfig+0x4dc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff f8a9 	bl	8000eac <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f8a5 	bl	8000eac <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x44a>
 8001d7c:	e02e      	b.n	8001ddc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e029      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x4d8>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d115      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	42470060 	.word	0x42470060

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0cc      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b68      	ldr	r3, [pc, #416]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d90c      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b65      	ldr	r3, [pc, #404]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0b8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	494d      	ldr	r1, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d044      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d119      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e067      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 0203 	bic.w	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4934      	ldr	r1, [pc, #208]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe ffe2 	bl	8000eac <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe ffde 	bl	8000eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e04f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 020c 	and.w	r2, r3, #12
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d1eb      	bne.n	8001eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d20c      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f7a:	f000 f821 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4601      	mov	r1, r0
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe ff42 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08003a40 	.word	0x08003a40
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d007      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x32>
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x38>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 808d 	bne.w	8002106 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fee:	60bb      	str	r3, [r7, #8]
       break;
 8001ff0:	e08c      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ff2:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ff4:	60bb      	str	r3, [r7, #8]
      break;
 8001ff6:	e089      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff8:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002000:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <HAL_RCC_GetSysClockFreq+0x158>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d023      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200e:	4b42      	ldr	r3, [pc, #264]	; (8002118 <HAL_RCC_GetSysClockFreq+0x158>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	f04f 0400 	mov.w	r4, #0
 8002018:	f240 11ff 	movw	r1, #511	; 0x1ff
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	ea03 0501 	and.w	r5, r3, r1
 8002024:	ea04 0602 	and.w	r6, r4, r2
 8002028:	4a3d      	ldr	r2, [pc, #244]	; (8002120 <HAL_RCC_GetSysClockFreq+0x160>)
 800202a:	fb02 f106 	mul.w	r1, r2, r6
 800202e:	2200      	movs	r2, #0
 8002030:	fb02 f205 	mul.w	r2, r2, r5
 8002034:	440a      	add	r2, r1
 8002036:	493a      	ldr	r1, [pc, #232]	; (8002120 <HAL_RCC_GetSysClockFreq+0x160>)
 8002038:	fba5 0101 	umull	r0, r1, r5, r1
 800203c:	1853      	adds	r3, r2, r1
 800203e:	4619      	mov	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f04f 0400 	mov.w	r4, #0
 8002046:	461a      	mov	r2, r3
 8002048:	4623      	mov	r3, r4
 800204a:	f7fe f8c5 	bl	80001d8 <__aeabi_uldivmod>
 800204e:	4603      	mov	r3, r0
 8002050:	460c      	mov	r4, r1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e049      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_GetSysClockFreq+0x158>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	f04f 0400 	mov.w	r4, #0
 8002060:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	ea03 0501 	and.w	r5, r3, r1
 800206c:	ea04 0602 	and.w	r6, r4, r2
 8002070:	4629      	mov	r1, r5
 8002072:	4632      	mov	r2, r6
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	0154      	lsls	r4, r2, #5
 800207e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002082:	014b      	lsls	r3, r1, #5
 8002084:	4619      	mov	r1, r3
 8002086:	4622      	mov	r2, r4
 8002088:	1b49      	subs	r1, r1, r5
 800208a:	eb62 0206 	sbc.w	r2, r2, r6
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	0194      	lsls	r4, r2, #6
 8002098:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800209c:	018b      	lsls	r3, r1, #6
 800209e:	1a5b      	subs	r3, r3, r1
 80020a0:	eb64 0402 	sbc.w	r4, r4, r2
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	00e2      	lsls	r2, r4, #3
 80020ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020b2:	00d9      	lsls	r1, r3, #3
 80020b4:	460b      	mov	r3, r1
 80020b6:	4614      	mov	r4, r2
 80020b8:	195b      	adds	r3, r3, r5
 80020ba:	eb44 0406 	adc.w	r4, r4, r6
 80020be:	f04f 0100 	mov.w	r1, #0
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	02a2      	lsls	r2, r4, #10
 80020c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020cc:	0299      	lsls	r1, r3, #10
 80020ce:	460b      	mov	r3, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	4621      	mov	r1, r4
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f04f 0400 	mov.w	r4, #0
 80020dc:	461a      	mov	r2, r3
 80020de:	4623      	mov	r3, r4
 80020e0:	f7fe f87a 	bl	80001d8 <__aeabi_uldivmod>
 80020e4:	4603      	mov	r3, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0x158>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	3301      	adds	r3, #1
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	60bb      	str	r3, [r7, #8]
      break;
 8002104:	e002      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002108:	60bb      	str	r3, [r7, #8]
      break;
 800210a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210c:	68bb      	ldr	r3, [r7, #8]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	00f42400 	.word	0x00f42400
 8002120:	017d7840 	.word	0x017d7840

08002124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4601      	mov	r1, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	08003a50 	.word	0x08003a50

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002168:	f7ff ffdc 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 800216c:	4601      	mov	r1, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0b5b      	lsrs	r3, r3, #13
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	08003a50 	.word	0x08003a50

0800218c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e056      	b.n	800224c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe fc0d 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	ea42 0103 	orr.w	r1, r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	f003 0104 	and.w	r1, r3, #4
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e03f      	b.n	80022e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fc14 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2224      	movs	r2, #36	; 0x24
 8002284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fb97 	bl	80029cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b088      	sub	sp, #32
 80022f2:	af02      	add	r7, sp, #8
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	f040 8083 	bne.w	8002416 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_UART_Transmit+0x2e>
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e07b      	b.n	8002418 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_UART_Transmit+0x40>
 800232a:	2302      	movs	r3, #2
 800232c:	e074      	b.n	8002418 <HAL_UART_Transmit+0x12a>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2221      	movs	r2, #33	; 0x21
 8002340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002344:	f7fe fdb2 	bl	8000eac <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800235e:	e042      	b.n	80023e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	d122      	bne.n	80023be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2200      	movs	r2, #0
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f9b6 	bl	80026f4 <UART_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e042      	b.n	8002418 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3302      	adds	r3, #2
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	e017      	b.n	80023e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	e013      	b.n	80023e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f993 	bl	80026f4 <UART_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e01f      	b.n	8002418 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	60ba      	str	r2, [r7, #8]
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1b7      	bne.n	8002360 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2140      	movs	r1, #64	; 0x40
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f97a 	bl	80026f4 <UART_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e006      	b.n	8002418 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	d140      	bne.n	80024bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_UART_Receive_IT+0x26>
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e039      	b.n	80024be <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_UART_Receive_IT+0x38>
 8002454:	2302      	movs	r3, #2
 8002456:	e032      	b.n	80024be <HAL_UART_Receive_IT+0x9e>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2222      	movs	r2, #34	; 0x22
 800247c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002496:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_UART_IRQHandler+0x52>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9d6 	bl	80028c8 <UART_Receive_IT>
      return;
 800251c:	e0d1      	b.n	80026c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80b0 	beq.w	8002686 <HAL_UART_IRQHandler+0x1ba>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_UART_IRQHandler+0x70>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80a5 	beq.w	8002686 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_UART_IRQHandler+0x90>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_UART_IRQHandler+0xb0>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	f043 0202 	orr.w	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_UART_IRQHandler+0xd0>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	f043 0204 	orr.w	r2, r3, #4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00f      	beq.n	80025c6 <HAL_UART_IRQHandler+0xfa>
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_UART_IRQHandler+0xee>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	f043 0208 	orr.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d078      	beq.n	80026c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_UART_IRQHandler+0x11c>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f970 	bl	80028c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <HAL_UART_IRQHandler+0x144>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d031      	beq.n	8002674 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8b9 	bl	8002788 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d123      	bne.n	800266c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002632:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_UART_IRQHandler+0x1fc>)
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe ffbe 	bl	80015ca <HAL_DMA_Abort_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d016      	beq.n	8002682 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800265e:	4610      	mov	r0, r2
 8002660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002662:	e00e      	b.n	8002682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f83b 	bl	80026e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266a:	e00a      	b.n	8002682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f837 	bl	80026e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002672:	e006      	b.n	8002682 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f833 	bl	80026e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002680:	e01e      	b.n	80026c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002682:	bf00      	nop
    return;
 8002684:	e01c      	b.n	80026c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_UART_IRQHandler+0x1d6>
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8a6 	bl	80027ec <UART_Transmit_IT>
    return;
 80026a0:	e00f      	b.n	80026c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_UART_IRQHandler+0x1f6>
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8ee 	bl	8002898 <UART_EndTransmit_IT>
    return;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80026c0:	bf00      	nop
  }
}
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	080027c5 	.word	0x080027c5

080026cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002704:	e02c      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d028      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <UART_WaitOnFlagUntilTimeout+0x30>
 8002714:	f7fe fbca 	bl	8000eac <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	429a      	cmp	r2, r3
 8002722:	d21d      	bcs.n	8002760 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002732:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e00f      	b.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d0c3      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800279e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff ff7e 	bl	80026e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b21      	cmp	r3, #33	; 0x21
 80027fe:	d144      	bne.n	800288a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002808:	d11a      	bne.n	8002840 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	1c9a      	adds	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	621a      	str	r2, [r3, #32]
 8002832:	e00e      	b.n	8002852 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	621a      	str	r2, [r3, #32]
 800283e:	e008      	b.n	8002852 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	1c59      	adds	r1, r3, #1
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6211      	str	r1, [r2, #32]
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29b      	uxth	r3, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4619      	mov	r1, r3
 8002860:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002884:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff07 	bl	80026cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b22      	cmp	r3, #34	; 0x22
 80028da:	d171      	bne.n	80029c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e4:	d123      	bne.n	800292e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10e      	bne.n	8002912 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
 8002910:	e029      	b.n	8002966 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
 800292c:	e01b      	b.n	8002966 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6858      	ldr	r0, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	1c59      	adds	r1, r3, #1
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6291      	str	r1, [r2, #40]	; 0x28
 8002946:	b2c2      	uxtb	r2, r0
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e00c      	b.n	8002966 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	1c58      	adds	r0, r3, #1
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	6288      	str	r0, [r1, #40]	; 0x28
 800295e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4619      	mov	r1, r3
 8002974:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002976:	2b00      	cmp	r3, #0
 8002978:	d120      	bne.n	80029bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0220 	bic.w	r2, r2, #32
 8002988:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002998:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd fda2 	bl	80004fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e002      	b.n	80029c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a0e:	f023 030c 	bic.w	r3, r3, #12
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3a:	f040 818b 	bne.w	8002d54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4ac1      	ldr	r2, [pc, #772]	; (8002d48 <UART_SetConfig+0x37c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d005      	beq.n	8002a54 <UART_SetConfig+0x88>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4abf      	ldr	r2, [pc, #764]	; (8002d4c <UART_SetConfig+0x380>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	f040 80bd 	bne.w	8002bce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff fb86 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8002a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	461d      	mov	r5, r3
 8002a5e:	f04f 0600 	mov.w	r6, #0
 8002a62:	46a8      	mov	r8, r5
 8002a64:	46b1      	mov	r9, r6
 8002a66:	eb18 0308 	adds.w	r3, r8, r8
 8002a6a:	eb49 0409 	adc.w	r4, r9, r9
 8002a6e:	4698      	mov	r8, r3
 8002a70:	46a1      	mov	r9, r4
 8002a72:	eb18 0805 	adds.w	r8, r8, r5
 8002a76:	eb49 0906 	adc.w	r9, r9, r6
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a8e:	4688      	mov	r8, r1
 8002a90:	4691      	mov	r9, r2
 8002a92:	eb18 0005 	adds.w	r0, r8, r5
 8002a96:	eb49 0106 	adc.w	r1, r9, r6
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	f04f 0600 	mov.w	r6, #0
 8002aa4:	196b      	adds	r3, r5, r5
 8002aa6:	eb46 0406 	adc.w	r4, r6, r6
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4623      	mov	r3, r4
 8002aae:	f7fd fb93 	bl	80001d8 <__aeabi_uldivmod>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4ba5      	ldr	r3, [pc, #660]	; (8002d50 <UART_SetConfig+0x384>)
 8002aba:	fba3 2302 	umull	r2, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	f04f 0600 	mov.w	r6, #0
 8002acc:	46a9      	mov	r9, r5
 8002ace:	46b2      	mov	sl, r6
 8002ad0:	eb19 0309 	adds.w	r3, r9, r9
 8002ad4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad8:	4699      	mov	r9, r3
 8002ada:	46a2      	mov	sl, r4
 8002adc:	eb19 0905 	adds.w	r9, r9, r5
 8002ae0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af8:	4689      	mov	r9, r1
 8002afa:	4692      	mov	sl, r2
 8002afc:	eb19 0005 	adds.w	r0, r9, r5
 8002b00:	eb4a 0106 	adc.w	r1, sl, r6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	461d      	mov	r5, r3
 8002b0a:	f04f 0600 	mov.w	r6, #0
 8002b0e:	196b      	adds	r3, r5, r5
 8002b10:	eb46 0406 	adc.w	r4, r6, r6
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	f7fd fb5e 	bl	80001d8 <__aeabi_uldivmod>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b8b      	ldr	r3, [pc, #556]	; (8002d50 <UART_SetConfig+0x384>)
 8002b24:	fba3 1302 	umull	r1, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	2164      	movs	r1, #100	; 0x64
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	3332      	adds	r3, #50	; 0x32
 8002b36:	4a86      	ldr	r2, [pc, #536]	; (8002d50 <UART_SetConfig+0x384>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b44:	4498      	add	r8, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	461d      	mov	r5, r3
 8002b4a:	f04f 0600 	mov.w	r6, #0
 8002b4e:	46a9      	mov	r9, r5
 8002b50:	46b2      	mov	sl, r6
 8002b52:	eb19 0309 	adds.w	r3, r9, r9
 8002b56:	eb4a 040a 	adc.w	r4, sl, sl
 8002b5a:	4699      	mov	r9, r3
 8002b5c:	46a2      	mov	sl, r4
 8002b5e:	eb19 0905 	adds.w	r9, r9, r5
 8002b62:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b7a:	4689      	mov	r9, r1
 8002b7c:	4692      	mov	sl, r2
 8002b7e:	eb19 0005 	adds.w	r0, r9, r5
 8002b82:	eb4a 0106 	adc.w	r1, sl, r6
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	461d      	mov	r5, r3
 8002b8c:	f04f 0600 	mov.w	r6, #0
 8002b90:	196b      	adds	r3, r5, r5
 8002b92:	eb46 0406 	adc.w	r4, r6, r6
 8002b96:	461a      	mov	r2, r3
 8002b98:	4623      	mov	r3, r4
 8002b9a:	f7fd fb1d 	bl	80001d8 <__aeabi_uldivmod>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <UART_SetConfig+0x384>)
 8002ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2164      	movs	r1, #100	; 0x64
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	3332      	adds	r3, #50	; 0x32
 8002bb8:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <UART_SetConfig+0x384>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	f003 0207 	and.w	r2, r3, #7
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4442      	add	r2, r8
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e26f      	b.n	80030ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff fab5 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002bd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	461d      	mov	r5, r3
 8002bd8:	f04f 0600 	mov.w	r6, #0
 8002bdc:	46a8      	mov	r8, r5
 8002bde:	46b1      	mov	r9, r6
 8002be0:	eb18 0308 	adds.w	r3, r8, r8
 8002be4:	eb49 0409 	adc.w	r4, r9, r9
 8002be8:	4698      	mov	r8, r3
 8002bea:	46a1      	mov	r9, r4
 8002bec:	eb18 0805 	adds.w	r8, r8, r5
 8002bf0:	eb49 0906 	adc.w	r9, r9, r6
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c08:	4688      	mov	r8, r1
 8002c0a:	4691      	mov	r9, r2
 8002c0c:	eb18 0005 	adds.w	r0, r8, r5
 8002c10:	eb49 0106 	adc.w	r1, r9, r6
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	461d      	mov	r5, r3
 8002c1a:	f04f 0600 	mov.w	r6, #0
 8002c1e:	196b      	adds	r3, r5, r5
 8002c20:	eb46 0406 	adc.w	r4, r6, r6
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	f7fd fad6 	bl	80001d8 <__aeabi_uldivmod>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <UART_SetConfig+0x384>)
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	461d      	mov	r5, r3
 8002c42:	f04f 0600 	mov.w	r6, #0
 8002c46:	46a9      	mov	r9, r5
 8002c48:	46b2      	mov	sl, r6
 8002c4a:	eb19 0309 	adds.w	r3, r9, r9
 8002c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c52:	4699      	mov	r9, r3
 8002c54:	46a2      	mov	sl, r4
 8002c56:	eb19 0905 	adds.w	r9, r9, r5
 8002c5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c72:	4689      	mov	r9, r1
 8002c74:	4692      	mov	sl, r2
 8002c76:	eb19 0005 	adds.w	r0, r9, r5
 8002c7a:	eb4a 0106 	adc.w	r1, sl, r6
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	461d      	mov	r5, r3
 8002c84:	f04f 0600 	mov.w	r6, #0
 8002c88:	196b      	adds	r3, r5, r5
 8002c8a:	eb46 0406 	adc.w	r4, r6, r6
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4623      	mov	r3, r4
 8002c92:	f7fd faa1 	bl	80001d8 <__aeabi_uldivmod>
 8002c96:	4603      	mov	r3, r0
 8002c98:	460c      	mov	r4, r1
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <UART_SetConfig+0x384>)
 8002c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2164      	movs	r1, #100	; 0x64
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	3332      	adds	r3, #50	; 0x32
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <UART_SetConfig+0x384>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cbe:	4498      	add	r8, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	461d      	mov	r5, r3
 8002cc4:	f04f 0600 	mov.w	r6, #0
 8002cc8:	46a9      	mov	r9, r5
 8002cca:	46b2      	mov	sl, r6
 8002ccc:	eb19 0309 	adds.w	r3, r9, r9
 8002cd0:	eb4a 040a 	adc.w	r4, sl, sl
 8002cd4:	4699      	mov	r9, r3
 8002cd6:	46a2      	mov	sl, r4
 8002cd8:	eb19 0905 	adds.w	r9, r9, r5
 8002cdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	4692      	mov	sl, r2
 8002cf8:	eb19 0005 	adds.w	r0, r9, r5
 8002cfc:	eb4a 0106 	adc.w	r1, sl, r6
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	461d      	mov	r5, r3
 8002d06:	f04f 0600 	mov.w	r6, #0
 8002d0a:	196b      	adds	r3, r5, r5
 8002d0c:	eb46 0406 	adc.w	r4, r6, r6
 8002d10:	461a      	mov	r2, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	f7fd fa60 	bl	80001d8 <__aeabi_uldivmod>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <UART_SetConfig+0x384>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	2164      	movs	r1, #100	; 0x64
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	3332      	adds	r3, #50	; 0x32
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <UART_SetConfig+0x384>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	f003 0207 	and.w	r2, r3, #7
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4442      	add	r2, r8
 8002d44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d46:	e1b2      	b.n	80030ae <UART_SetConfig+0x6e2>
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4ad7      	ldr	r2, [pc, #860]	; (80030b8 <UART_SetConfig+0x6ec>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d005      	beq.n	8002d6a <UART_SetConfig+0x39e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4ad6      	ldr	r2, [pc, #856]	; (80030bc <UART_SetConfig+0x6f0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	f040 80d1 	bne.w	8002f0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d6a:	f7ff f9fb 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8002d6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	469a      	mov	sl, r3
 8002d74:	f04f 0b00 	mov.w	fp, #0
 8002d78:	46d0      	mov	r8, sl
 8002d7a:	46d9      	mov	r9, fp
 8002d7c:	eb18 0308 	adds.w	r3, r8, r8
 8002d80:	eb49 0409 	adc.w	r4, r9, r9
 8002d84:	4698      	mov	r8, r3
 8002d86:	46a1      	mov	r9, r4
 8002d88:	eb18 080a 	adds.w	r8, r8, sl
 8002d8c:	eb49 090b 	adc.w	r9, r9, fp
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002da0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002da4:	4688      	mov	r8, r1
 8002da6:	4691      	mov	r9, r2
 8002da8:	eb1a 0508 	adds.w	r5, sl, r8
 8002dac:	eb4b 0609 	adc.w	r6, fp, r9
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	f04f 0400 	mov.w	r4, #0
 8002dc2:	0094      	lsls	r4, r2, #2
 8002dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dc8:	008b      	lsls	r3, r1, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4623      	mov	r3, r4
 8002dce:	4628      	mov	r0, r5
 8002dd0:	4631      	mov	r1, r6
 8002dd2:	f7fd fa01 	bl	80001d8 <__aeabi_uldivmod>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460c      	mov	r4, r1
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4bb8      	ldr	r3, [pc, #736]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	469b      	mov	fp, r3
 8002dec:	f04f 0c00 	mov.w	ip, #0
 8002df0:	46d9      	mov	r9, fp
 8002df2:	46e2      	mov	sl, ip
 8002df4:	eb19 0309 	adds.w	r3, r9, r9
 8002df8:	eb4a 040a 	adc.w	r4, sl, sl
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	46a2      	mov	sl, r4
 8002e00:	eb19 090b 	adds.w	r9, r9, fp
 8002e04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e1c:	4689      	mov	r9, r1
 8002e1e:	4692      	mov	sl, r2
 8002e20:	eb1b 0509 	adds.w	r5, fp, r9
 8002e24:	eb4c 060a 	adc.w	r6, ip, sl
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	0094      	lsls	r4, r2, #2
 8002e3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e40:	008b      	lsls	r3, r1, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	4628      	mov	r0, r5
 8002e48:	4631      	mov	r1, r6
 8002e4a:	f7fd f9c5 	bl	80001d8 <__aeabi_uldivmod>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	460c      	mov	r4, r1
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b9a      	ldr	r3, [pc, #616]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002e56:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2164      	movs	r1, #100	; 0x64
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a95      	ldr	r2, [pc, #596]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	4498      	add	r8, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	469b      	mov	fp, r3
 8002e7a:	f04f 0c00 	mov.w	ip, #0
 8002e7e:	46d9      	mov	r9, fp
 8002e80:	46e2      	mov	sl, ip
 8002e82:	eb19 0309 	adds.w	r3, r9, r9
 8002e86:	eb4a 040a 	adc.w	r4, sl, sl
 8002e8a:	4699      	mov	r9, r3
 8002e8c:	46a2      	mov	sl, r4
 8002e8e:	eb19 090b 	adds.w	r9, r9, fp
 8002e92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ea2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ea6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eaa:	4689      	mov	r9, r1
 8002eac:	4692      	mov	sl, r2
 8002eae:	eb1b 0509 	adds.w	r5, fp, r9
 8002eb2:	eb4c 060a 	adc.w	r6, ip, sl
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	f04f 0400 	mov.w	r4, #0
 8002ec8:	0094      	lsls	r4, r2, #2
 8002eca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ece:	008b      	lsls	r3, r1, #2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	f7fd f97e 	bl	80001d8 <__aeabi_uldivmod>
 8002edc:	4603      	mov	r3, r0
 8002ede:	460c      	mov	r4, r1
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b77      	ldr	r3, [pc, #476]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	; 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	3332      	adds	r3, #50	; 0x32
 8002ef6:	4a72      	ldr	r2, [pc, #456]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4442      	add	r2, r8
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	e0d0      	b.n	80030ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f7ff f916 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8002f10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	469a      	mov	sl, r3
 8002f16:	f04f 0b00 	mov.w	fp, #0
 8002f1a:	46d0      	mov	r8, sl
 8002f1c:	46d9      	mov	r9, fp
 8002f1e:	eb18 0308 	adds.w	r3, r8, r8
 8002f22:	eb49 0409 	adc.w	r4, r9, r9
 8002f26:	4698      	mov	r8, r3
 8002f28:	46a1      	mov	r9, r4
 8002f2a:	eb18 080a 	adds.w	r8, r8, sl
 8002f2e:	eb49 090b 	adc.w	r9, r9, fp
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f46:	4688      	mov	r8, r1
 8002f48:	4691      	mov	r9, r2
 8002f4a:	eb1a 0508 	adds.w	r5, sl, r8
 8002f4e:	eb4b 0609 	adc.w	r6, fp, r9
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	0094      	lsls	r4, r2, #2
 8002f66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f6a:	008b      	lsls	r3, r1, #2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	4628      	mov	r0, r5
 8002f72:	4631      	mov	r1, r6
 8002f74:	f7fd f930 	bl	80001d8 <__aeabi_uldivmod>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002f80:	fba3 2302 	umull	r2, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	469b      	mov	fp, r3
 8002f8e:	f04f 0c00 	mov.w	ip, #0
 8002f92:	46d9      	mov	r9, fp
 8002f94:	46e2      	mov	sl, ip
 8002f96:	eb19 0309 	adds.w	r3, r9, r9
 8002f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f9e:	4699      	mov	r9, r3
 8002fa0:	46a2      	mov	sl, r4
 8002fa2:	eb19 090b 	adds.w	r9, r9, fp
 8002fa6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fbe:	4689      	mov	r9, r1
 8002fc0:	4692      	mov	sl, r2
 8002fc2:	eb1b 0509 	adds.w	r5, fp, r9
 8002fc6:	eb4c 060a 	adc.w	r6, ip, sl
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f04f 0400 	mov.w	r4, #0
 8002fdc:	0094      	lsls	r4, r2, #2
 8002fde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fe2:	008b      	lsls	r3, r1, #2
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4623      	mov	r3, r4
 8002fe8:	4628      	mov	r0, r5
 8002fea:	4631      	mov	r1, r6
 8002fec:	f7fd f8f4 	bl	80001d8 <__aeabi_uldivmod>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <UART_SetConfig+0x6f4>)
 8002ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	2164      	movs	r1, #100	; 0x64
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	3332      	adds	r3, #50	; 0x32
 800300a:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <UART_SetConfig+0x6f4>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003016:	4498      	add	r8, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	469b      	mov	fp, r3
 800301c:	f04f 0c00 	mov.w	ip, #0
 8003020:	46d9      	mov	r9, fp
 8003022:	46e2      	mov	sl, ip
 8003024:	eb19 0309 	adds.w	r3, r9, r9
 8003028:	eb4a 040a 	adc.w	r4, sl, sl
 800302c:	4699      	mov	r9, r3
 800302e:	46a2      	mov	sl, r4
 8003030:	eb19 090b 	adds.w	r9, r9, fp
 8003034:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800304c:	4689      	mov	r9, r1
 800304e:	4692      	mov	sl, r2
 8003050:	eb1b 0509 	adds.w	r5, fp, r9
 8003054:	eb4c 060a 	adc.w	r6, ip, sl
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4619      	mov	r1, r3
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f04f 0400 	mov.w	r4, #0
 800306a:	0094      	lsls	r4, r2, #2
 800306c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003070:	008b      	lsls	r3, r1, #2
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	4628      	mov	r0, r5
 8003078:	4631      	mov	r1, r6
 800307a:	f7fd f8ad 	bl	80001d8 <__aeabi_uldivmod>
 800307e:	4603      	mov	r3, r0
 8003080:	460c      	mov	r4, r1
 8003082:	461a      	mov	r2, r3
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <UART_SetConfig+0x6f4>)
 8003086:	fba3 1302 	umull	r1, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2164      	movs	r1, #100	; 0x64
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	3332      	adds	r3, #50	; 0x32
 8003098:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <UART_SetConfig+0x6f4>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4442      	add	r2, r8
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	e7ff      	b.n	80030ae <UART_SetConfig+0x6e2>
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b8:	40011000 	.word	0x40011000
 80030bc:	40011400 	.word	0x40011400
 80030c0:	51eb851f 	.word	0x51eb851f

080030c4 <__errno>:
 80030c4:	4b01      	ldr	r3, [pc, #4]	; (80030cc <__errno+0x8>)
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	2000000c 	.word	0x2000000c

080030d0 <__libc_init_array>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4e0d      	ldr	r6, [pc, #52]	; (8003108 <__libc_init_array+0x38>)
 80030d4:	4c0d      	ldr	r4, [pc, #52]	; (800310c <__libc_init_array+0x3c>)
 80030d6:	1ba4      	subs	r4, r4, r6
 80030d8:	10a4      	asrs	r4, r4, #2
 80030da:	2500      	movs	r5, #0
 80030dc:	42a5      	cmp	r5, r4
 80030de:	d109      	bne.n	80030f4 <__libc_init_array+0x24>
 80030e0:	4e0b      	ldr	r6, [pc, #44]	; (8003110 <__libc_init_array+0x40>)
 80030e2:	4c0c      	ldr	r4, [pc, #48]	; (8003114 <__libc_init_array+0x44>)
 80030e4:	f000 fc88 	bl	80039f8 <_init>
 80030e8:	1ba4      	subs	r4, r4, r6
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	2500      	movs	r5, #0
 80030ee:	42a5      	cmp	r5, r4
 80030f0:	d105      	bne.n	80030fe <__libc_init_array+0x2e>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f8:	4798      	blx	r3
 80030fa:	3501      	adds	r5, #1
 80030fc:	e7ee      	b.n	80030dc <__libc_init_array+0xc>
 80030fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003102:	4798      	blx	r3
 8003104:	3501      	adds	r5, #1
 8003106:	e7f2      	b.n	80030ee <__libc_init_array+0x1e>
 8003108:	08003ac4 	.word	0x08003ac4
 800310c:	08003ac4 	.word	0x08003ac4
 8003110:	08003ac4 	.word	0x08003ac4
 8003114:	08003ac8 	.word	0x08003ac8

08003118 <memset>:
 8003118:	4402      	add	r2, r0
 800311a:	4603      	mov	r3, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <_puts_r>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	460e      	mov	r6, r1
 800312c:	4605      	mov	r5, r0
 800312e:	b118      	cbz	r0, 8003138 <_puts_r+0x10>
 8003130:	6983      	ldr	r3, [r0, #24]
 8003132:	b90b      	cbnz	r3, 8003138 <_puts_r+0x10>
 8003134:	f000 fa0c 	bl	8003550 <__sinit>
 8003138:	69ab      	ldr	r3, [r5, #24]
 800313a:	68ac      	ldr	r4, [r5, #8]
 800313c:	b913      	cbnz	r3, 8003144 <_puts_r+0x1c>
 800313e:	4628      	mov	r0, r5
 8003140:	f000 fa06 	bl	8003550 <__sinit>
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <_puts_r+0xac>)
 8003146:	429c      	cmp	r4, r3
 8003148:	d117      	bne.n	800317a <_puts_r+0x52>
 800314a:	686c      	ldr	r4, [r5, #4]
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	071b      	lsls	r3, r3, #28
 8003150:	d51d      	bpl.n	800318e <_puts_r+0x66>
 8003152:	6923      	ldr	r3, [r4, #16]
 8003154:	b1db      	cbz	r3, 800318e <_puts_r+0x66>
 8003156:	3e01      	subs	r6, #1
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800315e:	3b01      	subs	r3, #1
 8003160:	60a3      	str	r3, [r4, #8]
 8003162:	b9e9      	cbnz	r1, 80031a0 <_puts_r+0x78>
 8003164:	2b00      	cmp	r3, #0
 8003166:	da2e      	bge.n	80031c6 <_puts_r+0x9e>
 8003168:	4622      	mov	r2, r4
 800316a:	210a      	movs	r1, #10
 800316c:	4628      	mov	r0, r5
 800316e:	f000 f83f 	bl	80031f0 <__swbuf_r>
 8003172:	3001      	adds	r0, #1
 8003174:	d011      	beq.n	800319a <_puts_r+0x72>
 8003176:	200a      	movs	r0, #10
 8003178:	e011      	b.n	800319e <_puts_r+0x76>
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <_puts_r+0xb0>)
 800317c:	429c      	cmp	r4, r3
 800317e:	d101      	bne.n	8003184 <_puts_r+0x5c>
 8003180:	68ac      	ldr	r4, [r5, #8]
 8003182:	e7e3      	b.n	800314c <_puts_r+0x24>
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <_puts_r+0xb4>)
 8003186:	429c      	cmp	r4, r3
 8003188:	bf08      	it	eq
 800318a:	68ec      	ldreq	r4, [r5, #12]
 800318c:	e7de      	b.n	800314c <_puts_r+0x24>
 800318e:	4621      	mov	r1, r4
 8003190:	4628      	mov	r0, r5
 8003192:	f000 f87f 	bl	8003294 <__swsetup_r>
 8003196:	2800      	cmp	r0, #0
 8003198:	d0dd      	beq.n	8003156 <_puts_r+0x2e>
 800319a:	f04f 30ff 	mov.w	r0, #4294967295
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da04      	bge.n	80031ae <_puts_r+0x86>
 80031a4:	69a2      	ldr	r2, [r4, #24]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	dc06      	bgt.n	80031b8 <_puts_r+0x90>
 80031aa:	290a      	cmp	r1, #10
 80031ac:	d004      	beq.n	80031b8 <_puts_r+0x90>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	6022      	str	r2, [r4, #0]
 80031b4:	7019      	strb	r1, [r3, #0]
 80031b6:	e7cf      	b.n	8003158 <_puts_r+0x30>
 80031b8:	4622      	mov	r2, r4
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 f818 	bl	80031f0 <__swbuf_r>
 80031c0:	3001      	adds	r0, #1
 80031c2:	d1c9      	bne.n	8003158 <_puts_r+0x30>
 80031c4:	e7e9      	b.n	800319a <_puts_r+0x72>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	200a      	movs	r0, #10
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	6022      	str	r2, [r4, #0]
 80031ce:	7018      	strb	r0, [r3, #0]
 80031d0:	e7e5      	b.n	800319e <_puts_r+0x76>
 80031d2:	bf00      	nop
 80031d4:	08003a7c 	.word	0x08003a7c
 80031d8:	08003a9c 	.word	0x08003a9c
 80031dc:	08003a5c 	.word	0x08003a5c

080031e0 <puts>:
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <puts+0xc>)
 80031e2:	4601      	mov	r1, r0
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	f7ff bf9f 	b.w	8003128 <_puts_r>
 80031ea:	bf00      	nop
 80031ec:	2000000c 	.word	0x2000000c

080031f0 <__swbuf_r>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	460e      	mov	r6, r1
 80031f4:	4614      	mov	r4, r2
 80031f6:	4605      	mov	r5, r0
 80031f8:	b118      	cbz	r0, 8003202 <__swbuf_r+0x12>
 80031fa:	6983      	ldr	r3, [r0, #24]
 80031fc:	b90b      	cbnz	r3, 8003202 <__swbuf_r+0x12>
 80031fe:	f000 f9a7 	bl	8003550 <__sinit>
 8003202:	4b21      	ldr	r3, [pc, #132]	; (8003288 <__swbuf_r+0x98>)
 8003204:	429c      	cmp	r4, r3
 8003206:	d12a      	bne.n	800325e <__swbuf_r+0x6e>
 8003208:	686c      	ldr	r4, [r5, #4]
 800320a:	69a3      	ldr	r3, [r4, #24]
 800320c:	60a3      	str	r3, [r4, #8]
 800320e:	89a3      	ldrh	r3, [r4, #12]
 8003210:	071a      	lsls	r2, r3, #28
 8003212:	d52e      	bpl.n	8003272 <__swbuf_r+0x82>
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	b363      	cbz	r3, 8003272 <__swbuf_r+0x82>
 8003218:	6923      	ldr	r3, [r4, #16]
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	1ac0      	subs	r0, r0, r3
 800321e:	6963      	ldr	r3, [r4, #20]
 8003220:	b2f6      	uxtb	r6, r6
 8003222:	4283      	cmp	r3, r0
 8003224:	4637      	mov	r7, r6
 8003226:	dc04      	bgt.n	8003232 <__swbuf_r+0x42>
 8003228:	4621      	mov	r1, r4
 800322a:	4628      	mov	r0, r5
 800322c:	f000 f926 	bl	800347c <_fflush_r>
 8003230:	bb28      	cbnz	r0, 800327e <__swbuf_r+0x8e>
 8003232:	68a3      	ldr	r3, [r4, #8]
 8003234:	3b01      	subs	r3, #1
 8003236:	60a3      	str	r3, [r4, #8]
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	6022      	str	r2, [r4, #0]
 800323e:	701e      	strb	r6, [r3, #0]
 8003240:	6963      	ldr	r3, [r4, #20]
 8003242:	3001      	adds	r0, #1
 8003244:	4283      	cmp	r3, r0
 8003246:	d004      	beq.n	8003252 <__swbuf_r+0x62>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	07db      	lsls	r3, r3, #31
 800324c:	d519      	bpl.n	8003282 <__swbuf_r+0x92>
 800324e:	2e0a      	cmp	r6, #10
 8003250:	d117      	bne.n	8003282 <__swbuf_r+0x92>
 8003252:	4621      	mov	r1, r4
 8003254:	4628      	mov	r0, r5
 8003256:	f000 f911 	bl	800347c <_fflush_r>
 800325a:	b190      	cbz	r0, 8003282 <__swbuf_r+0x92>
 800325c:	e00f      	b.n	800327e <__swbuf_r+0x8e>
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <__swbuf_r+0x9c>)
 8003260:	429c      	cmp	r4, r3
 8003262:	d101      	bne.n	8003268 <__swbuf_r+0x78>
 8003264:	68ac      	ldr	r4, [r5, #8]
 8003266:	e7d0      	b.n	800320a <__swbuf_r+0x1a>
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <__swbuf_r+0xa0>)
 800326a:	429c      	cmp	r4, r3
 800326c:	bf08      	it	eq
 800326e:	68ec      	ldreq	r4, [r5, #12]
 8003270:	e7cb      	b.n	800320a <__swbuf_r+0x1a>
 8003272:	4621      	mov	r1, r4
 8003274:	4628      	mov	r0, r5
 8003276:	f000 f80d 	bl	8003294 <__swsetup_r>
 800327a:	2800      	cmp	r0, #0
 800327c:	d0cc      	beq.n	8003218 <__swbuf_r+0x28>
 800327e:	f04f 37ff 	mov.w	r7, #4294967295
 8003282:	4638      	mov	r0, r7
 8003284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003286:	bf00      	nop
 8003288:	08003a7c 	.word	0x08003a7c
 800328c:	08003a9c 	.word	0x08003a9c
 8003290:	08003a5c 	.word	0x08003a5c

08003294 <__swsetup_r>:
 8003294:	4b32      	ldr	r3, [pc, #200]	; (8003360 <__swsetup_r+0xcc>)
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	681d      	ldr	r5, [r3, #0]
 800329a:	4606      	mov	r6, r0
 800329c:	460c      	mov	r4, r1
 800329e:	b125      	cbz	r5, 80032aa <__swsetup_r+0x16>
 80032a0:	69ab      	ldr	r3, [r5, #24]
 80032a2:	b913      	cbnz	r3, 80032aa <__swsetup_r+0x16>
 80032a4:	4628      	mov	r0, r5
 80032a6:	f000 f953 	bl	8003550 <__sinit>
 80032aa:	4b2e      	ldr	r3, [pc, #184]	; (8003364 <__swsetup_r+0xd0>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d10f      	bne.n	80032d0 <__swsetup_r+0x3c>
 80032b0:	686c      	ldr	r4, [r5, #4]
 80032b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	0715      	lsls	r5, r2, #28
 80032ba:	d42c      	bmi.n	8003316 <__swsetup_r+0x82>
 80032bc:	06d0      	lsls	r0, r2, #27
 80032be:	d411      	bmi.n	80032e4 <__swsetup_r+0x50>
 80032c0:	2209      	movs	r2, #9
 80032c2:	6032      	str	r2, [r6, #0]
 80032c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
 80032ce:	e03e      	b.n	800334e <__swsetup_r+0xba>
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <__swsetup_r+0xd4>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	d101      	bne.n	80032da <__swsetup_r+0x46>
 80032d6:	68ac      	ldr	r4, [r5, #8]
 80032d8:	e7eb      	b.n	80032b2 <__swsetup_r+0x1e>
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <__swsetup_r+0xd8>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	bf08      	it	eq
 80032e0:	68ec      	ldreq	r4, [r5, #12]
 80032e2:	e7e6      	b.n	80032b2 <__swsetup_r+0x1e>
 80032e4:	0751      	lsls	r1, r2, #29
 80032e6:	d512      	bpl.n	800330e <__swsetup_r+0x7a>
 80032e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ea:	b141      	cbz	r1, 80032fe <__swsetup_r+0x6a>
 80032ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032f0:	4299      	cmp	r1, r3
 80032f2:	d002      	beq.n	80032fa <__swsetup_r+0x66>
 80032f4:	4630      	mov	r0, r6
 80032f6:	f000 fa19 	bl	800372c <_free_r>
 80032fa:	2300      	movs	r3, #0
 80032fc:	6363      	str	r3, [r4, #52]	; 0x34
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	2300      	movs	r3, #0
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	6923      	ldr	r3, [r4, #16]
 8003318:	b94b      	cbnz	r3, 800332e <__swsetup_r+0x9a>
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003324:	d003      	beq.n	800332e <__swsetup_r+0x9a>
 8003326:	4621      	mov	r1, r4
 8003328:	4630      	mov	r0, r6
 800332a:	f000 f9bf 	bl	80036ac <__smakebuf_r>
 800332e:	89a2      	ldrh	r2, [r4, #12]
 8003330:	f012 0301 	ands.w	r3, r2, #1
 8003334:	d00c      	beq.n	8003350 <__swsetup_r+0xbc>
 8003336:	2300      	movs	r3, #0
 8003338:	60a3      	str	r3, [r4, #8]
 800333a:	6963      	ldr	r3, [r4, #20]
 800333c:	425b      	negs	r3, r3
 800333e:	61a3      	str	r3, [r4, #24]
 8003340:	6923      	ldr	r3, [r4, #16]
 8003342:	b953      	cbnz	r3, 800335a <__swsetup_r+0xc6>
 8003344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003348:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800334c:	d1ba      	bne.n	80032c4 <__swsetup_r+0x30>
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	0792      	lsls	r2, r2, #30
 8003352:	bf58      	it	pl
 8003354:	6963      	ldrpl	r3, [r4, #20]
 8003356:	60a3      	str	r3, [r4, #8]
 8003358:	e7f2      	b.n	8003340 <__swsetup_r+0xac>
 800335a:	2000      	movs	r0, #0
 800335c:	e7f7      	b.n	800334e <__swsetup_r+0xba>
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c
 8003364:	08003a7c 	.word	0x08003a7c
 8003368:	08003a9c 	.word	0x08003a9c
 800336c:	08003a5c 	.word	0x08003a5c

08003370 <__sflush_r>:
 8003370:	898a      	ldrh	r2, [r1, #12]
 8003372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003376:	4605      	mov	r5, r0
 8003378:	0710      	lsls	r0, r2, #28
 800337a:	460c      	mov	r4, r1
 800337c:	d458      	bmi.n	8003430 <__sflush_r+0xc0>
 800337e:	684b      	ldr	r3, [r1, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	dc05      	bgt.n	8003390 <__sflush_r+0x20>
 8003384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	dc02      	bgt.n	8003390 <__sflush_r+0x20>
 800338a:	2000      	movs	r0, #0
 800338c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003392:	2e00      	cmp	r6, #0
 8003394:	d0f9      	beq.n	800338a <__sflush_r+0x1a>
 8003396:	2300      	movs	r3, #0
 8003398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800339c:	682f      	ldr	r7, [r5, #0]
 800339e:	6a21      	ldr	r1, [r4, #32]
 80033a0:	602b      	str	r3, [r5, #0]
 80033a2:	d032      	beq.n	800340a <__sflush_r+0x9a>
 80033a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	075a      	lsls	r2, r3, #29
 80033aa:	d505      	bpl.n	80033b8 <__sflush_r+0x48>
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	1ac0      	subs	r0, r0, r3
 80033b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033b2:	b10b      	cbz	r3, 80033b8 <__sflush_r+0x48>
 80033b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033b6:	1ac0      	subs	r0, r0, r3
 80033b8:	2300      	movs	r3, #0
 80033ba:	4602      	mov	r2, r0
 80033bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033be:	6a21      	ldr	r1, [r4, #32]
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b0      	blx	r6
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	d106      	bne.n	80033d8 <__sflush_r+0x68>
 80033ca:	6829      	ldr	r1, [r5, #0]
 80033cc:	291d      	cmp	r1, #29
 80033ce:	d848      	bhi.n	8003462 <__sflush_r+0xf2>
 80033d0:	4a29      	ldr	r2, [pc, #164]	; (8003478 <__sflush_r+0x108>)
 80033d2:	40ca      	lsrs	r2, r1
 80033d4:	07d6      	lsls	r6, r2, #31
 80033d6:	d544      	bpl.n	8003462 <__sflush_r+0xf2>
 80033d8:	2200      	movs	r2, #0
 80033da:	6062      	str	r2, [r4, #4]
 80033dc:	04d9      	lsls	r1, r3, #19
 80033de:	6922      	ldr	r2, [r4, #16]
 80033e0:	6022      	str	r2, [r4, #0]
 80033e2:	d504      	bpl.n	80033ee <__sflush_r+0x7e>
 80033e4:	1c42      	adds	r2, r0, #1
 80033e6:	d101      	bne.n	80033ec <__sflush_r+0x7c>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	b903      	cbnz	r3, 80033ee <__sflush_r+0x7e>
 80033ec:	6560      	str	r0, [r4, #84]	; 0x54
 80033ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033f0:	602f      	str	r7, [r5, #0]
 80033f2:	2900      	cmp	r1, #0
 80033f4:	d0c9      	beq.n	800338a <__sflush_r+0x1a>
 80033f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033fa:	4299      	cmp	r1, r3
 80033fc:	d002      	beq.n	8003404 <__sflush_r+0x94>
 80033fe:	4628      	mov	r0, r5
 8003400:	f000 f994 	bl	800372c <_free_r>
 8003404:	2000      	movs	r0, #0
 8003406:	6360      	str	r0, [r4, #52]	; 0x34
 8003408:	e7c0      	b.n	800338c <__sflush_r+0x1c>
 800340a:	2301      	movs	r3, #1
 800340c:	4628      	mov	r0, r5
 800340e:	47b0      	blx	r6
 8003410:	1c41      	adds	r1, r0, #1
 8003412:	d1c8      	bne.n	80033a6 <__sflush_r+0x36>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0c5      	beq.n	80033a6 <__sflush_r+0x36>
 800341a:	2b1d      	cmp	r3, #29
 800341c:	d001      	beq.n	8003422 <__sflush_r+0xb2>
 800341e:	2b16      	cmp	r3, #22
 8003420:	d101      	bne.n	8003426 <__sflush_r+0xb6>
 8003422:	602f      	str	r7, [r5, #0]
 8003424:	e7b1      	b.n	800338a <__sflush_r+0x1a>
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342c:	81a3      	strh	r3, [r4, #12]
 800342e:	e7ad      	b.n	800338c <__sflush_r+0x1c>
 8003430:	690f      	ldr	r7, [r1, #16]
 8003432:	2f00      	cmp	r7, #0
 8003434:	d0a9      	beq.n	800338a <__sflush_r+0x1a>
 8003436:	0793      	lsls	r3, r2, #30
 8003438:	680e      	ldr	r6, [r1, #0]
 800343a:	bf08      	it	eq
 800343c:	694b      	ldreq	r3, [r1, #20]
 800343e:	600f      	str	r7, [r1, #0]
 8003440:	bf18      	it	ne
 8003442:	2300      	movne	r3, #0
 8003444:	eba6 0807 	sub.w	r8, r6, r7
 8003448:	608b      	str	r3, [r1, #8]
 800344a:	f1b8 0f00 	cmp.w	r8, #0
 800344e:	dd9c      	ble.n	800338a <__sflush_r+0x1a>
 8003450:	4643      	mov	r3, r8
 8003452:	463a      	mov	r2, r7
 8003454:	6a21      	ldr	r1, [r4, #32]
 8003456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003458:	4628      	mov	r0, r5
 800345a:	47b0      	blx	r6
 800345c:	2800      	cmp	r0, #0
 800345e:	dc06      	bgt.n	800346e <__sflush_r+0xfe>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003466:	81a3      	strh	r3, [r4, #12]
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	e78e      	b.n	800338c <__sflush_r+0x1c>
 800346e:	4407      	add	r7, r0
 8003470:	eba8 0800 	sub.w	r8, r8, r0
 8003474:	e7e9      	b.n	800344a <__sflush_r+0xda>
 8003476:	bf00      	nop
 8003478:	20400001 	.word	0x20400001

0800347c <_fflush_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	690b      	ldr	r3, [r1, #16]
 8003480:	4605      	mov	r5, r0
 8003482:	460c      	mov	r4, r1
 8003484:	b1db      	cbz	r3, 80034be <_fflush_r+0x42>
 8003486:	b118      	cbz	r0, 8003490 <_fflush_r+0x14>
 8003488:	6983      	ldr	r3, [r0, #24]
 800348a:	b90b      	cbnz	r3, 8003490 <_fflush_r+0x14>
 800348c:	f000 f860 	bl	8003550 <__sinit>
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <_fflush_r+0x48>)
 8003492:	429c      	cmp	r4, r3
 8003494:	d109      	bne.n	80034aa <_fflush_r+0x2e>
 8003496:	686c      	ldr	r4, [r5, #4]
 8003498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800349c:	b17b      	cbz	r3, 80034be <_fflush_r+0x42>
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034a6:	f7ff bf63 	b.w	8003370 <__sflush_r>
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <_fflush_r+0x4c>)
 80034ac:	429c      	cmp	r4, r3
 80034ae:	d101      	bne.n	80034b4 <_fflush_r+0x38>
 80034b0:	68ac      	ldr	r4, [r5, #8]
 80034b2:	e7f1      	b.n	8003498 <_fflush_r+0x1c>
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <_fflush_r+0x50>)
 80034b6:	429c      	cmp	r4, r3
 80034b8:	bf08      	it	eq
 80034ba:	68ec      	ldreq	r4, [r5, #12]
 80034bc:	e7ec      	b.n	8003498 <_fflush_r+0x1c>
 80034be:	2000      	movs	r0, #0
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
 80034c2:	bf00      	nop
 80034c4:	08003a7c 	.word	0x08003a7c
 80034c8:	08003a9c 	.word	0x08003a9c
 80034cc:	08003a5c 	.word	0x08003a5c

080034d0 <std>:
 80034d0:	2300      	movs	r3, #0
 80034d2:	b510      	push	{r4, lr}
 80034d4:	4604      	mov	r4, r0
 80034d6:	e9c0 3300 	strd	r3, r3, [r0]
 80034da:	6083      	str	r3, [r0, #8]
 80034dc:	8181      	strh	r1, [r0, #12]
 80034de:	6643      	str	r3, [r0, #100]	; 0x64
 80034e0:	81c2      	strh	r2, [r0, #14]
 80034e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034e6:	6183      	str	r3, [r0, #24]
 80034e8:	4619      	mov	r1, r3
 80034ea:	2208      	movs	r2, #8
 80034ec:	305c      	adds	r0, #92	; 0x5c
 80034ee:	f7ff fe13 	bl	8003118 <memset>
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <std+0x38>)
 80034f4:	6263      	str	r3, [r4, #36]	; 0x24
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <std+0x3c>)
 80034f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <std+0x40>)
 80034fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <std+0x44>)
 8003500:	6224      	str	r4, [r4, #32]
 8003502:	6323      	str	r3, [r4, #48]	; 0x30
 8003504:	bd10      	pop	{r4, pc}
 8003506:	bf00      	nop
 8003508:	0800389d 	.word	0x0800389d
 800350c:	080038bf 	.word	0x080038bf
 8003510:	080038f7 	.word	0x080038f7
 8003514:	0800391b 	.word	0x0800391b

08003518 <_cleanup_r>:
 8003518:	4901      	ldr	r1, [pc, #4]	; (8003520 <_cleanup_r+0x8>)
 800351a:	f000 b885 	b.w	8003628 <_fwalk_reent>
 800351e:	bf00      	nop
 8003520:	0800347d 	.word	0x0800347d

08003524 <__sfmoreglue>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	1e4a      	subs	r2, r1, #1
 8003528:	2568      	movs	r5, #104	; 0x68
 800352a:	4355      	muls	r5, r2
 800352c:	460e      	mov	r6, r1
 800352e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003532:	f000 f949 	bl	80037c8 <_malloc_r>
 8003536:	4604      	mov	r4, r0
 8003538:	b140      	cbz	r0, 800354c <__sfmoreglue+0x28>
 800353a:	2100      	movs	r1, #0
 800353c:	e9c0 1600 	strd	r1, r6, [r0]
 8003540:	300c      	adds	r0, #12
 8003542:	60a0      	str	r0, [r4, #8]
 8003544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003548:	f7ff fde6 	bl	8003118 <memset>
 800354c:	4620      	mov	r0, r4
 800354e:	bd70      	pop	{r4, r5, r6, pc}

08003550 <__sinit>:
 8003550:	6983      	ldr	r3, [r0, #24]
 8003552:	b510      	push	{r4, lr}
 8003554:	4604      	mov	r4, r0
 8003556:	bb33      	cbnz	r3, 80035a6 <__sinit+0x56>
 8003558:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800355c:	6503      	str	r3, [r0, #80]	; 0x50
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <__sinit+0x58>)
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <__sinit+0x5c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6282      	str	r2, [r0, #40]	; 0x28
 8003566:	4298      	cmp	r0, r3
 8003568:	bf04      	itt	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	6183      	streq	r3, [r0, #24]
 800356e:	f000 f81f 	bl	80035b0 <__sfp>
 8003572:	6060      	str	r0, [r4, #4]
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f81b 	bl	80035b0 <__sfp>
 800357a:	60a0      	str	r0, [r4, #8]
 800357c:	4620      	mov	r0, r4
 800357e:	f000 f817 	bl	80035b0 <__sfp>
 8003582:	2200      	movs	r2, #0
 8003584:	60e0      	str	r0, [r4, #12]
 8003586:	2104      	movs	r1, #4
 8003588:	6860      	ldr	r0, [r4, #4]
 800358a:	f7ff ffa1 	bl	80034d0 <std>
 800358e:	2201      	movs	r2, #1
 8003590:	2109      	movs	r1, #9
 8003592:	68a0      	ldr	r0, [r4, #8]
 8003594:	f7ff ff9c 	bl	80034d0 <std>
 8003598:	2202      	movs	r2, #2
 800359a:	2112      	movs	r1, #18
 800359c:	68e0      	ldr	r0, [r4, #12]
 800359e:	f7ff ff97 	bl	80034d0 <std>
 80035a2:	2301      	movs	r3, #1
 80035a4:	61a3      	str	r3, [r4, #24]
 80035a6:	bd10      	pop	{r4, pc}
 80035a8:	08003a58 	.word	0x08003a58
 80035ac:	08003519 	.word	0x08003519

080035b0 <__sfp>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <__sfp+0x70>)
 80035b4:	681e      	ldr	r6, [r3, #0]
 80035b6:	69b3      	ldr	r3, [r6, #24]
 80035b8:	4607      	mov	r7, r0
 80035ba:	b913      	cbnz	r3, 80035c2 <__sfp+0x12>
 80035bc:	4630      	mov	r0, r6
 80035be:	f7ff ffc7 	bl	8003550 <__sinit>
 80035c2:	3648      	adds	r6, #72	; 0x48
 80035c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	d503      	bpl.n	80035d4 <__sfp+0x24>
 80035cc:	6833      	ldr	r3, [r6, #0]
 80035ce:	b133      	cbz	r3, 80035de <__sfp+0x2e>
 80035d0:	6836      	ldr	r6, [r6, #0]
 80035d2:	e7f7      	b.n	80035c4 <__sfp+0x14>
 80035d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035d8:	b16d      	cbz	r5, 80035f6 <__sfp+0x46>
 80035da:	3468      	adds	r4, #104	; 0x68
 80035dc:	e7f4      	b.n	80035c8 <__sfp+0x18>
 80035de:	2104      	movs	r1, #4
 80035e0:	4638      	mov	r0, r7
 80035e2:	f7ff ff9f 	bl	8003524 <__sfmoreglue>
 80035e6:	6030      	str	r0, [r6, #0]
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d1f1      	bne.n	80035d0 <__sfp+0x20>
 80035ec:	230c      	movs	r3, #12
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4604      	mov	r4, r0
 80035f2:	4620      	mov	r0, r4
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <__sfp+0x74>)
 80035f8:	6665      	str	r5, [r4, #100]	; 0x64
 80035fa:	e9c4 5500 	strd	r5, r5, [r4]
 80035fe:	60a5      	str	r5, [r4, #8]
 8003600:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003604:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003608:	2208      	movs	r2, #8
 800360a:	4629      	mov	r1, r5
 800360c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003610:	f7ff fd82 	bl	8003118 <memset>
 8003614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800361c:	e7e9      	b.n	80035f2 <__sfp+0x42>
 800361e:	bf00      	nop
 8003620:	08003a58 	.word	0x08003a58
 8003624:	ffff0001 	.word	0xffff0001

08003628 <_fwalk_reent>:
 8003628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800362c:	4680      	mov	r8, r0
 800362e:	4689      	mov	r9, r1
 8003630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003634:	2600      	movs	r6, #0
 8003636:	b914      	cbnz	r4, 800363e <_fwalk_reent+0x16>
 8003638:	4630      	mov	r0, r6
 800363a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800363e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003642:	3f01      	subs	r7, #1
 8003644:	d501      	bpl.n	800364a <_fwalk_reent+0x22>
 8003646:	6824      	ldr	r4, [r4, #0]
 8003648:	e7f5      	b.n	8003636 <_fwalk_reent+0xe>
 800364a:	89ab      	ldrh	r3, [r5, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d907      	bls.n	8003660 <_fwalk_reent+0x38>
 8003650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003654:	3301      	adds	r3, #1
 8003656:	d003      	beq.n	8003660 <_fwalk_reent+0x38>
 8003658:	4629      	mov	r1, r5
 800365a:	4640      	mov	r0, r8
 800365c:	47c8      	blx	r9
 800365e:	4306      	orrs	r6, r0
 8003660:	3568      	adds	r5, #104	; 0x68
 8003662:	e7ee      	b.n	8003642 <_fwalk_reent+0x1a>

08003664 <__swhatbuf_r>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	460e      	mov	r6, r1
 8003668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800366c:	2900      	cmp	r1, #0
 800366e:	b096      	sub	sp, #88	; 0x58
 8003670:	4614      	mov	r4, r2
 8003672:	461d      	mov	r5, r3
 8003674:	da07      	bge.n	8003686 <__swhatbuf_r+0x22>
 8003676:	2300      	movs	r3, #0
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	89b3      	ldrh	r3, [r6, #12]
 800367c:	061a      	lsls	r2, r3, #24
 800367e:	d410      	bmi.n	80036a2 <__swhatbuf_r+0x3e>
 8003680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003684:	e00e      	b.n	80036a4 <__swhatbuf_r+0x40>
 8003686:	466a      	mov	r2, sp
 8003688:	f000 f96e 	bl	8003968 <_fstat_r>
 800368c:	2800      	cmp	r0, #0
 800368e:	dbf2      	blt.n	8003676 <__swhatbuf_r+0x12>
 8003690:	9a01      	ldr	r2, [sp, #4]
 8003692:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003696:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800369a:	425a      	negs	r2, r3
 800369c:	415a      	adcs	r2, r3
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	e7ee      	b.n	8003680 <__swhatbuf_r+0x1c>
 80036a2:	2340      	movs	r3, #64	; 0x40
 80036a4:	2000      	movs	r0, #0
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	b016      	add	sp, #88	; 0x58
 80036aa:	bd70      	pop	{r4, r5, r6, pc}

080036ac <__smakebuf_r>:
 80036ac:	898b      	ldrh	r3, [r1, #12]
 80036ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036b0:	079d      	lsls	r5, r3, #30
 80036b2:	4606      	mov	r6, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	d507      	bpl.n	80036c8 <__smakebuf_r+0x1c>
 80036b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	6123      	str	r3, [r4, #16]
 80036c0:	2301      	movs	r3, #1
 80036c2:	6163      	str	r3, [r4, #20]
 80036c4:	b002      	add	sp, #8
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	ab01      	add	r3, sp, #4
 80036ca:	466a      	mov	r2, sp
 80036cc:	f7ff ffca 	bl	8003664 <__swhatbuf_r>
 80036d0:	9900      	ldr	r1, [sp, #0]
 80036d2:	4605      	mov	r5, r0
 80036d4:	4630      	mov	r0, r6
 80036d6:	f000 f877 	bl	80037c8 <_malloc_r>
 80036da:	b948      	cbnz	r0, 80036f0 <__smakebuf_r+0x44>
 80036dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e0:	059a      	lsls	r2, r3, #22
 80036e2:	d4ef      	bmi.n	80036c4 <__smakebuf_r+0x18>
 80036e4:	f023 0303 	bic.w	r3, r3, #3
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	e7e3      	b.n	80036b8 <__smakebuf_r+0xc>
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <__smakebuf_r+0x7c>)
 80036f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	6020      	str	r0, [r4, #0]
 80036f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	9b00      	ldr	r3, [sp, #0]
 8003700:	6163      	str	r3, [r4, #20]
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	6120      	str	r0, [r4, #16]
 8003706:	b15b      	cbz	r3, 8003720 <__smakebuf_r+0x74>
 8003708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800370c:	4630      	mov	r0, r6
 800370e:	f000 f93d 	bl	800398c <_isatty_r>
 8003712:	b128      	cbz	r0, 8003720 <__smakebuf_r+0x74>
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	81a3      	strh	r3, [r4, #12]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	431d      	orrs	r5, r3
 8003724:	81a5      	strh	r5, [r4, #12]
 8003726:	e7cd      	b.n	80036c4 <__smakebuf_r+0x18>
 8003728:	08003519 	.word	0x08003519

0800372c <_free_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	2900      	cmp	r1, #0
 8003732:	d045      	beq.n	80037c0 <_free_r+0x94>
 8003734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003738:	1f0c      	subs	r4, r1, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	bfb8      	it	lt
 800373e:	18e4      	addlt	r4, r4, r3
 8003740:	f000 f946 	bl	80039d0 <__malloc_lock>
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <_free_r+0x98>)
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	4610      	mov	r0, r2
 800374a:	b933      	cbnz	r3, 800375a <_free_r+0x2e>
 800374c:	6063      	str	r3, [r4, #4]
 800374e:	6014      	str	r4, [r2, #0]
 8003750:	4628      	mov	r0, r5
 8003752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003756:	f000 b93c 	b.w	80039d2 <__malloc_unlock>
 800375a:	42a3      	cmp	r3, r4
 800375c:	d90c      	bls.n	8003778 <_free_r+0x4c>
 800375e:	6821      	ldr	r1, [r4, #0]
 8003760:	1862      	adds	r2, r4, r1
 8003762:	4293      	cmp	r3, r2
 8003764:	bf04      	itt	eq
 8003766:	681a      	ldreq	r2, [r3, #0]
 8003768:	685b      	ldreq	r3, [r3, #4]
 800376a:	6063      	str	r3, [r4, #4]
 800376c:	bf04      	itt	eq
 800376e:	1852      	addeq	r2, r2, r1
 8003770:	6022      	streq	r2, [r4, #0]
 8003772:	6004      	str	r4, [r0, #0]
 8003774:	e7ec      	b.n	8003750 <_free_r+0x24>
 8003776:	4613      	mov	r3, r2
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	b10a      	cbz	r2, 8003780 <_free_r+0x54>
 800377c:	42a2      	cmp	r2, r4
 800377e:	d9fa      	bls.n	8003776 <_free_r+0x4a>
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	1858      	adds	r0, r3, r1
 8003784:	42a0      	cmp	r0, r4
 8003786:	d10b      	bne.n	80037a0 <_free_r+0x74>
 8003788:	6820      	ldr	r0, [r4, #0]
 800378a:	4401      	add	r1, r0
 800378c:	1858      	adds	r0, r3, r1
 800378e:	4282      	cmp	r2, r0
 8003790:	6019      	str	r1, [r3, #0]
 8003792:	d1dd      	bne.n	8003750 <_free_r+0x24>
 8003794:	6810      	ldr	r0, [r2, #0]
 8003796:	6852      	ldr	r2, [r2, #4]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	4401      	add	r1, r0
 800379c:	6019      	str	r1, [r3, #0]
 800379e:	e7d7      	b.n	8003750 <_free_r+0x24>
 80037a0:	d902      	bls.n	80037a8 <_free_r+0x7c>
 80037a2:	230c      	movs	r3, #12
 80037a4:	602b      	str	r3, [r5, #0]
 80037a6:	e7d3      	b.n	8003750 <_free_r+0x24>
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	1821      	adds	r1, r4, r0
 80037ac:	428a      	cmp	r2, r1
 80037ae:	bf04      	itt	eq
 80037b0:	6811      	ldreq	r1, [r2, #0]
 80037b2:	6852      	ldreq	r2, [r2, #4]
 80037b4:	6062      	str	r2, [r4, #4]
 80037b6:	bf04      	itt	eq
 80037b8:	1809      	addeq	r1, r1, r0
 80037ba:	6021      	streq	r1, [r4, #0]
 80037bc:	605c      	str	r4, [r3, #4]
 80037be:	e7c7      	b.n	8003750 <_free_r+0x24>
 80037c0:	bd38      	pop	{r3, r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	2000049c 	.word	0x2000049c

080037c8 <_malloc_r>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	1ccd      	adds	r5, r1, #3
 80037cc:	f025 0503 	bic.w	r5, r5, #3
 80037d0:	3508      	adds	r5, #8
 80037d2:	2d0c      	cmp	r5, #12
 80037d4:	bf38      	it	cc
 80037d6:	250c      	movcc	r5, #12
 80037d8:	2d00      	cmp	r5, #0
 80037da:	4606      	mov	r6, r0
 80037dc:	db01      	blt.n	80037e2 <_malloc_r+0x1a>
 80037de:	42a9      	cmp	r1, r5
 80037e0:	d903      	bls.n	80037ea <_malloc_r+0x22>
 80037e2:	230c      	movs	r3, #12
 80037e4:	6033      	str	r3, [r6, #0]
 80037e6:	2000      	movs	r0, #0
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	f000 f8f1 	bl	80039d0 <__malloc_lock>
 80037ee:	4a21      	ldr	r2, [pc, #132]	; (8003874 <_malloc_r+0xac>)
 80037f0:	6814      	ldr	r4, [r2, #0]
 80037f2:	4621      	mov	r1, r4
 80037f4:	b991      	cbnz	r1, 800381c <_malloc_r+0x54>
 80037f6:	4c20      	ldr	r4, [pc, #128]	; (8003878 <_malloc_r+0xb0>)
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	b91b      	cbnz	r3, 8003804 <_malloc_r+0x3c>
 80037fc:	4630      	mov	r0, r6
 80037fe:	f000 f83d 	bl	800387c <_sbrk_r>
 8003802:	6020      	str	r0, [r4, #0]
 8003804:	4629      	mov	r1, r5
 8003806:	4630      	mov	r0, r6
 8003808:	f000 f838 	bl	800387c <_sbrk_r>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d124      	bne.n	800385a <_malloc_r+0x92>
 8003810:	230c      	movs	r3, #12
 8003812:	6033      	str	r3, [r6, #0]
 8003814:	4630      	mov	r0, r6
 8003816:	f000 f8dc 	bl	80039d2 <__malloc_unlock>
 800381a:	e7e4      	b.n	80037e6 <_malloc_r+0x1e>
 800381c:	680b      	ldr	r3, [r1, #0]
 800381e:	1b5b      	subs	r3, r3, r5
 8003820:	d418      	bmi.n	8003854 <_malloc_r+0x8c>
 8003822:	2b0b      	cmp	r3, #11
 8003824:	d90f      	bls.n	8003846 <_malloc_r+0x7e>
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	50cd      	str	r5, [r1, r3]
 800382a:	18cc      	adds	r4, r1, r3
 800382c:	4630      	mov	r0, r6
 800382e:	f000 f8d0 	bl	80039d2 <__malloc_unlock>
 8003832:	f104 000b 	add.w	r0, r4, #11
 8003836:	1d23      	adds	r3, r4, #4
 8003838:	f020 0007 	bic.w	r0, r0, #7
 800383c:	1ac3      	subs	r3, r0, r3
 800383e:	d0d3      	beq.n	80037e8 <_malloc_r+0x20>
 8003840:	425a      	negs	r2, r3
 8003842:	50e2      	str	r2, [r4, r3]
 8003844:	e7d0      	b.n	80037e8 <_malloc_r+0x20>
 8003846:	428c      	cmp	r4, r1
 8003848:	684b      	ldr	r3, [r1, #4]
 800384a:	bf16      	itet	ne
 800384c:	6063      	strne	r3, [r4, #4]
 800384e:	6013      	streq	r3, [r2, #0]
 8003850:	460c      	movne	r4, r1
 8003852:	e7eb      	b.n	800382c <_malloc_r+0x64>
 8003854:	460c      	mov	r4, r1
 8003856:	6849      	ldr	r1, [r1, #4]
 8003858:	e7cc      	b.n	80037f4 <_malloc_r+0x2c>
 800385a:	1cc4      	adds	r4, r0, #3
 800385c:	f024 0403 	bic.w	r4, r4, #3
 8003860:	42a0      	cmp	r0, r4
 8003862:	d005      	beq.n	8003870 <_malloc_r+0xa8>
 8003864:	1a21      	subs	r1, r4, r0
 8003866:	4630      	mov	r0, r6
 8003868:	f000 f808 	bl	800387c <_sbrk_r>
 800386c:	3001      	adds	r0, #1
 800386e:	d0cf      	beq.n	8003810 <_malloc_r+0x48>
 8003870:	6025      	str	r5, [r4, #0]
 8003872:	e7db      	b.n	800382c <_malloc_r+0x64>
 8003874:	2000049c 	.word	0x2000049c
 8003878:	200004a0 	.word	0x200004a0

0800387c <_sbrk_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4c06      	ldr	r4, [pc, #24]	; (8003898 <_sbrk_r+0x1c>)
 8003880:	2300      	movs	r3, #0
 8003882:	4605      	mov	r5, r0
 8003884:	4608      	mov	r0, r1
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	f7fd fa34 	bl	8000cf4 <_sbrk>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_sbrk_r+0x1a>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	b103      	cbz	r3, 8003896 <_sbrk_r+0x1a>
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	200005c8 	.word	0x200005c8

0800389c <__sread>:
 800389c:	b510      	push	{r4, lr}
 800389e:	460c      	mov	r4, r1
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	f000 f896 	bl	80039d4 <_read_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	bfab      	itete	ge
 80038ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038ae:	89a3      	ldrhlt	r3, [r4, #12]
 80038b0:	181b      	addge	r3, r3, r0
 80038b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038b6:	bfac      	ite	ge
 80038b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80038ba:	81a3      	strhlt	r3, [r4, #12]
 80038bc:	bd10      	pop	{r4, pc}

080038be <__swrite>:
 80038be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c2:	461f      	mov	r7, r3
 80038c4:	898b      	ldrh	r3, [r1, #12]
 80038c6:	05db      	lsls	r3, r3, #23
 80038c8:	4605      	mov	r5, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	4616      	mov	r6, r2
 80038ce:	d505      	bpl.n	80038dc <__swrite+0x1e>
 80038d0:	2302      	movs	r3, #2
 80038d2:	2200      	movs	r2, #0
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	f000 f868 	bl	80039ac <_lseek_r>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	4632      	mov	r2, r6
 80038ea:	463b      	mov	r3, r7
 80038ec:	4628      	mov	r0, r5
 80038ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f2:	f000 b817 	b.w	8003924 <_write_r>

080038f6 <__sseek>:
 80038f6:	b510      	push	{r4, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fe:	f000 f855 	bl	80039ac <_lseek_r>
 8003902:	1c43      	adds	r3, r0, #1
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	bf15      	itete	ne
 8003908:	6560      	strne	r0, [r4, #84]	; 0x54
 800390a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800390e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003912:	81a3      	strheq	r3, [r4, #12]
 8003914:	bf18      	it	ne
 8003916:	81a3      	strhne	r3, [r4, #12]
 8003918:	bd10      	pop	{r4, pc}

0800391a <__sclose>:
 800391a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391e:	f000 b813 	b.w	8003948 <_close_r>
	...

08003924 <_write_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4c07      	ldr	r4, [pc, #28]	; (8003944 <_write_r+0x20>)
 8003928:	4605      	mov	r5, r0
 800392a:	4608      	mov	r0, r1
 800392c:	4611      	mov	r1, r2
 800392e:	2200      	movs	r2, #0
 8003930:	6022      	str	r2, [r4, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	f7fd f98d 	bl	8000c52 <_write>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_write_r+0x1e>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	b103      	cbz	r3, 8003942 <_write_r+0x1e>
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	200005c8 	.word	0x200005c8

08003948 <_close_r>:
 8003948:	b538      	push	{r3, r4, r5, lr}
 800394a:	4c06      	ldr	r4, [pc, #24]	; (8003964 <_close_r+0x1c>)
 800394c:	2300      	movs	r3, #0
 800394e:	4605      	mov	r5, r0
 8003950:	4608      	mov	r0, r1
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	f7fd f999 	bl	8000c8a <_close>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_close_r+0x1a>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	b103      	cbz	r3, 8003962 <_close_r+0x1a>
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	200005c8 	.word	0x200005c8

08003968 <_fstat_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4c07      	ldr	r4, [pc, #28]	; (8003988 <_fstat_r+0x20>)
 800396c:	2300      	movs	r3, #0
 800396e:	4605      	mov	r5, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	f7fd f994 	bl	8000ca2 <_fstat>
 800397a:	1c43      	adds	r3, r0, #1
 800397c:	d102      	bne.n	8003984 <_fstat_r+0x1c>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	b103      	cbz	r3, 8003984 <_fstat_r+0x1c>
 8003982:	602b      	str	r3, [r5, #0]
 8003984:	bd38      	pop	{r3, r4, r5, pc}
 8003986:	bf00      	nop
 8003988:	200005c8 	.word	0x200005c8

0800398c <_isatty_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4c06      	ldr	r4, [pc, #24]	; (80039a8 <_isatty_r+0x1c>)
 8003990:	2300      	movs	r3, #0
 8003992:	4605      	mov	r5, r0
 8003994:	4608      	mov	r0, r1
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	f7fd f993 	bl	8000cc2 <_isatty>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_isatty_r+0x1a>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_isatty_r+0x1a>
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	200005c8 	.word	0x200005c8

080039ac <_lseek_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4c07      	ldr	r4, [pc, #28]	; (80039cc <_lseek_r+0x20>)
 80039b0:	4605      	mov	r5, r0
 80039b2:	4608      	mov	r0, r1
 80039b4:	4611      	mov	r1, r2
 80039b6:	2200      	movs	r2, #0
 80039b8:	6022      	str	r2, [r4, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7fd f98c 	bl	8000cd8 <_lseek>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_lseek_r+0x1e>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_lseek_r+0x1e>
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	200005c8 	.word	0x200005c8

080039d0 <__malloc_lock>:
 80039d0:	4770      	bx	lr

080039d2 <__malloc_unlock>:
 80039d2:	4770      	bx	lr

080039d4 <_read_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4c07      	ldr	r4, [pc, #28]	; (80039f4 <_read_r+0x20>)
 80039d8:	4605      	mov	r5, r0
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	6022      	str	r2, [r4, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fd f918 	bl	8000c18 <_read>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_read_r+0x1e>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_read_r+0x1e>
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	200005c8 	.word	0x200005c8

080039f8 <_init>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	bf00      	nop
 80039fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fe:	bc08      	pop	{r3}
 8003a00:	469e      	mov	lr, r3
 8003a02:	4770      	bx	lr

08003a04 <_fini>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr
