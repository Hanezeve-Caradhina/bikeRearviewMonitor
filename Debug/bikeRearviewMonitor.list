
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005620  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f20  08005f20  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f20  08005f20  00015f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f28  08005f28  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f2c  08005f2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08005f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027b0  2000019c  080060cc  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  080060cc  0002294c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f85f  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002526  00000000  00000000  0002fa2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  00031f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018167  00000000  00000000  00033540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa70  00000000  00000000  0004b6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cebd  00000000  00000000  00056117  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2fd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  000e3050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000019c 	.word	0x2000019c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057a8 	.word	0x080057a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	080057a8 	.word	0x080057a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <str_Capitalized>:
	{NULL, NULL , NULL}
};

char Buff[2048];

void str_Capitalized (char *dest, char *str) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	int pos = 0, len = strlen (str);
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	6838      	ldr	r0, [r7, #0]
 80005c0:	f7ff fe18 	bl	80001f4 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
	for (; pos<len; ++ pos) {
 80005c8:	e021      	b.n	800060e <str_Capitalized+0x5e>
		if (str[pos]<='z' && str[pos]>='a') dest[pos]=str[pos]-32;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b7a      	cmp	r3, #122	; 0x7a
 80005d4:	d810      	bhi.n	80005f8 <str_Capitalized+0x48>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b60      	cmp	r3, #96	; 0x60
 80005e0:	d90a      	bls.n	80005f8 <str_Capitalized+0x48>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	3a20      	subs	r2, #32
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e007      	b.n	8000608 <str_Capitalized+0x58>
		else dest[pos] = str[pos];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	441a      	add	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	440b      	add	r3, r1
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	701a      	strb	r2, [r3, #0]
	for (; pos<len; ++ pos) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbd9      	blt.n	80005ca <str_Capitalized+0x1a>
	} dest[pos] = '\0';
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <AT_CMD_Dispose>:

u8 AT_CMD_Dispose(struct tok *tok) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	struct at_cmd_hanld_t *atcmd, *match = NULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	char name[32];
	atcmd = at_cmd_hanld;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <AT_CMD_Dispose+0x6c>)
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	str_Capitalized(name, tok->name);
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <str_Capitalized>
	while(atcmd->atcmd) {
 8000646:	e010      	b.n	800066a <AT_CMD_Dispose+0x42>
		if(strcmp(atcmd->atcmd, name) == 0) {
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <AT_CMD_Dispose+0x3c>
			match = atcmd; break;
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
 8000662:	e006      	b.n	8000672 <AT_CMD_Dispose+0x4a>
		} atcmd ++;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	330c      	adds	r3, #12
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(atcmd->atcmd) {
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ea      	bne.n	8000648 <AT_CMD_Dispose+0x20>
	} if(match) return match->send_hanld(match->atcmd, tok);
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <AT_CMD_Dispose+0x62>
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4610      	mov	r0, r2
 8000684:	4798      	blx	r3
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <AT_CMD_Dispose+0x64>
	else {return 1;}
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <CMD_Send>:

void CMD_Send(char *buff, char *atcmd, struct tok *tok) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b0c6      	sub	sp, #280	; 0x118
 800069c:	af00      	add	r7, sp, #0
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	6019      	str	r1, [r3, #0]
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	601a      	str	r2, [r3, #0]
	int i = 0; char temp[256];
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sprintf (buff, "%s", atcmd);
 80006b4:	f107 0208 	add.w	r2, r7, #8
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f003 ffdf 	bl	8004682 <strcpy>
	if (tok->num != 0) {
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d071      	beq.n	80007b4 <CMD_Send+0x11c>
		for (i=0; i<tok->num; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006d6:	e064      	b.n	80007a2 <CMD_Send+0x10a>
			if(i == 0 && tok->sendstr[i][0] == '?') {
 80006d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d120      	bne.n	8000722 <CMD_Send+0x8a>
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	4413      	add	r3, r2
 80006ec:	3321      	adds	r3, #33	; 0x21
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b3f      	cmp	r3, #63	; 0x3f
 80006f2:	d116      	bne.n	8000722 <CMD_Send+0x8a>
				sprintf(temp,"=%s",tok->sendstr[i]);
 80006f4:	1d3a      	adds	r2, r7, #4
 80006f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	3320      	adds	r3, #32
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	4413      	add	r3, r2
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4935      	ldr	r1, [pc, #212]	; (80007e0 <CMD_Send+0x148>)
 800070a:	4618      	mov	r0, r3
 800070c:	f003 ff8a 	bl	8004624 <siprintf>
				strcat(buff,temp);
 8000710:	f107 0214 	add.w	r2, r7, #20
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4611      	mov	r1, r2
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	f003 ffa2 	bl	8004664 <strcat>
 8000720:	e03a      	b.n	8000798 <CMD_Send+0x100>
			} else if(i == 0 && tok->sendstr[i][0] != '?') {
 8000722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000726:	2b00      	cmp	r3, #0
 8000728:	d120      	bne.n	800076c <CMD_Send+0xd4>
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	4413      	add	r3, r2
 8000736:	3321      	adds	r3, #33	; 0x21
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b3f      	cmp	r3, #63	; 0x3f
 800073c:	d016      	beq.n	800076c <CMD_Send+0xd4>
				sprintf(temp,"=%s",tok->sendstr[i]);
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	3320      	adds	r3, #32
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4923      	ldr	r1, [pc, #140]	; (80007e0 <CMD_Send+0x148>)
 8000754:	4618      	mov	r0, r3
 8000756:	f003 ff65 	bl	8004624 <siprintf>
				strcat(buff,temp);
 800075a:	f107 0214 	add.w	r2, r7, #20
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4611      	mov	r1, r2
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	f003 ff7d 	bl	8004664 <strcat>
 800076a:	e015      	b.n	8000798 <CMD_Send+0x100>
			} else {
				sprintf(temp,",%s",tok->sendstr[i]);
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	3320      	adds	r3, #32
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	4413      	add	r3, r2
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4918      	ldr	r1, [pc, #96]	; (80007e4 <CMD_Send+0x14c>)
 8000782:	4618      	mov	r0, r3
 8000784:	f003 ff4e 	bl	8004624 <siprintf>
				strcat(buff,temp);
 8000788:	f107 0214 	add.w	r2, r7, #20
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4611      	mov	r1, r2
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	f003 ff66 	bl	8004664 <strcat>
		for (i=0; i<tok->num; i++) {
 8000798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b0:	4293      	cmp	r3, r2
 80007b2:	db91      	blt.n	80006d8 <CMD_Send+0x40>
			}
		}
	} strcat(buff,"\r\n");
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f7ff fd1b 	bl	80001f4 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <CMD_Send+0x150>)
 80007cc:	8811      	ldrh	r1, [r2, #0]
 80007ce:	7892      	ldrb	r2, [r2, #2]
 80007d0:	8019      	strh	r1, [r3, #0]
 80007d2:	709a      	strb	r2, [r3, #2]
}
 80007d4:	bf00      	nop
 80007d6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08005884 	.word	0x08005884
 80007e4:	08005888 	.word	0x08005888
 80007e8:	0800588c 	.word	0x0800588c

080007ec <AT_Send>:

u8 AT_Send(char *atcmd, struct tok *tok) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0c4      	sub	sp, #272	; 0x110
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	6018      	str	r0, [r3, #0]
 80007f6:	463b      	mov	r3, r7
 80007f8:	6019      	str	r1, [r3, #0]
	int i; char buff[256];
	for(i=0; i<Retime; ++ i) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000800:	e027      	b.n	8000852 <AT_Send+0x66>
		CMD_Send(buff, atcmd, tok);
 8000802:	463a      	mov	r2, r7
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	f107 000c 	add.w	r0, r7, #12
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	f7ff ff43 	bl	8000698 <CMD_Send>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)buff, strlen(buff));
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcec 	bl	80001f4 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <AT_Send+0x7c>)
 8000828:	f002 ffb8 	bl	800379c <HAL_UART_Transmit_IT>
		if(!AT_Return(tok->ret, 1)) {return 0;}
 800082c:	463b      	mov	r3, r7
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000834:	3301      	adds	r3, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f817 	bl	800086c <AT_Return>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <AT_Send+0x5c>
 8000844:	2300      	movs	r3, #0
 8000846:	e009      	b.n	800085c <AT_Send+0x70>
	for(i=0; i<Retime; ++ i) {
 8000848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800084c:	3301      	adds	r3, #1
 800084e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000856:	2b01      	cmp	r3, #1
 8000858:	ddd3      	ble.n	8000802 <AT_Send+0x16>
	} return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000e18 	.word	0x20000e18

0800086c <AT_Return>:

u8 AT_Return(char *str, int flag) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t Time_count = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
	Time_count = Timeout;
 800087a:	230a      	movs	r3, #10
 800087c:	60fb      	str	r3, [r7, #12]
	memset(Buff, 0, sizeof Buff);
 800087e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <AT_Return+0x60>)
 8000886:	f003 fe49 	bl	800451c <memset>
	while(Time_count --) {
 800088a:	e015      	b.n	80008b8 <AT_Return+0x4c>
		if (flag) HAL_UART_Receive(&huart2, (uint8_t *)Buff, sizeof Buff, 100);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <AT_Return+0x34>
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <AT_Return+0x60>)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <AT_Return+0x64>)
 800089c:	f002 fed8 	bl	8003650 <HAL_UART_Receive>
		if(strstr((const char *)Buff,str)!=NULL) {return 0;}
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <AT_Return+0x60>)
 80008a4:	f003 fef5 	bl	8004692 <strstr>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <AT_Return+0x46>
 80008ae:	2300      	movs	r3, #0
 80008b0:	e008      	b.n	80008c4 <AT_Return+0x58>
		HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f001 fac4 	bl	8001e40 <HAL_Delay>
	while(Time_count --) {
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	60fa      	str	r2, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1e4      	bne.n	800088c <AT_Return+0x20>
	} return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000618 	.word	0x20000618
 80008d0:	20000e18 	.word	0x20000e18

080008d4 <Buff_clear>:

void Buff_clear(struct tok *tok) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	tok->num = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
	memset(tok->sendstr, 0, sizeof(tok->sendstr));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3321      	adds	r3, #33	; 0x21
 80008e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fe14 	bl	800451c <memset>
	memset(tok->ret, 0, sizeof(tok->ret));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80008fa:	3301      	adds	r3, #1
 80008fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fe0a 	bl	800451c <memset>
	memset(Buff, 0, sizeof(Buff));
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	2100      	movs	r1, #0
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <Buff_clear+0x48>)
 8000910:	f003 fe04 	bl	800451c <memset>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000618 	.word	0x20000618

08000920 <ADC_Calibration>:

u32 adcVal;
u8  batVal;
u16 adcBase = 1<<6;

void ADC_Calibration() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	// HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f001 fa8b 	bl	8001e40 <HAL_Delay>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <ADC_Read_Data>:

u32 ADC_Read_Data() {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <ADC_Read_Data+0x20>)
 8000936:	f001 fae9 	bl	8001f0c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 50);
 800093a:	2132      	movs	r1, #50	; 0x32
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <ADC_Read_Data+0x20>)
 800093e:	f001 fb8b 	bl	8002058 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <ADC_Read_Data+0x20>)
 8000944:	f001 fc0c 	bl	8002160 <HAL_ADC_GetValue>
 8000948:	4603      	mov	r3, r0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200005d0 	.word	0x200005d0

08000954 <Read_Battery_Life>:

void Read_Battery_Life() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	adcVal = ADC_Read_Data(&hadc1);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <Read_Battery_Life+0x20>)
 800095a:	f7ff ffe9 	bl	8000930 <ADC_Read_Data>
 800095e:	4602      	mov	r2, r0
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Read_Battery_Life+0x24>)
 8000962:	601a      	str	r2, [r3, #0]
	// double RealVoltage = adcVal * (double)3.3 / (double) adcBase;
	printf("[ADC Voltage] %d\r\n", (int)adcVal);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <Read_Battery_Life+0x24>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <Read_Battery_Life+0x28>)
 800096c:	f003 fdde 	bl	800452c <iprintf>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200005d0 	.word	0x200005d0
 8000978:	2000237c 	.word	0x2000237c
 800097c:	08005890 	.word	0x08005890

08000980 <BLE_reboot>:
	if(ret) printf("[BLEINIT][ERR] set to default fail!\r\n");
	else printf("[BLEINIT][SUC] set to default.\r\n");
	return ret;
}

u8 BLE_reboot(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+RESET");
 8000986:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <BLE_reboot+0x58>)
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <BLE_reboot+0x5c>)
 800098a:	cb03      	ldmia	r3!, {r0, r1}
 800098c:	6010      	str	r0, [r2, #0]
 800098e:	6051      	str	r1, [r2, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	7213      	strb	r3, [r2, #8]
	tok.num = 0;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <BLE_reboot+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.ret, "OK");
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <BLE_reboot+0x60>)
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <BLE_reboot+0x64>)
 80009a0:	8811      	ldrh	r1, [r2, #0]
 80009a2:	7892      	ldrb	r2, [r2, #2]
 80009a4:	8019      	strh	r1, [r3, #0]
 80009a6:	709a      	strb	r2, [r3, #2]
	u8 ret = AT_CMD_Dispose(&tok);
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <BLE_reboot+0x58>)
 80009aa:	f7ff fe3d 	bl	8000628 <AT_CMD_Dispose>
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <BLE_reboot+0x58>)
 80009b4:	f7ff ff8e 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] restart fail!\r\n");
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <BLE_reboot+0x46>
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <BLE_reboot+0x68>)
 80009c0:	f003 fe28 	bl	8004614 <puts>
 80009c4:	e002      	b.n	80009cc <BLE_reboot+0x4c>
	else printf("[BLEINIT][SUC] restarted.\r\n");
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <BLE_reboot+0x6c>)
 80009c8:	f003 fe24 	bl	8004614 <puts>
	return ret;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000e58 	.word	0x20000e58
 80009dc:	080058fc 	.word	0x080058fc
 80009e0:	20002279 	.word	0x20002279
 80009e4:	080058b0 	.word	0x080058b0
 80009e8:	08005908 	.word	0x08005908
 80009ec:	08005928 	.word	0x08005928

080009f0 <Qst_UART_Baud>:

u8 Qst_UART_Baud(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BAUD");
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <Qst_UART_Baud+0x5c>)
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <Qst_UART_Baud+0x60>)
 80009fa:	cb03      	ldmia	r3!, {r0, r1}
 80009fc:	6010      	str	r0, [r2, #0]
 80009fe:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <Qst_UART_Baud+0x5c>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <Qst_UART_Baud+0x64>)
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <Qst_UART_Baud+0x68>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BAUD=%s,NONE", BAUD);
 8000a10:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <Qst_UART_Baud+0x6c>)
 8000a12:	4913      	ldr	r1, [pc, #76]	; (8000a60 <Qst_UART_Baud+0x70>)
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <Qst_UART_Baud+0x74>)
 8000a16:	f003 fe05 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <Qst_UART_Baud+0x5c>)
 8000a1c:	f7ff fe04 	bl	8000628 <AT_CMD_Dispose>
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <Qst_UART_Baud+0x5c>)
 8000a26:	f7ff ff55 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BAUD not correct\r\n");
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <Qst_UART_Baud+0x48>
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <Qst_UART_Baud+0x78>)
 8000a32:	f003 fdef 	bl	8004614 <puts>
 8000a36:	e003      	b.n	8000a40 <Qst_UART_Baud+0x50>
	else printf("[BLEINIT][SUC]Q: BAUD now is %s\r\n", BAUD);
 8000a38:	4908      	ldr	r1, [pc, #32]	; (8000a5c <Qst_UART_Baud+0x6c>)
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <Qst_UART_Baud+0x7c>)
 8000a3c:	f003 fd76 	bl	800452c <iprintf>
	return ret;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000e58 	.word	0x20000e58
 8000a50:	08005944 	.word	0x08005944
 8000a54:	20000e79 	.word	0x20000e79
 8000a58:	0800594c 	.word	0x0800594c
 8000a5c:	200000f0 	.word	0x200000f0
 8000a60:	08005950 	.word	0x08005950
 8000a64:	20002279 	.word	0x20002279
 8000a68:	08005960 	.word	0x08005960
 8000a6c:	08005984 	.word	0x08005984

08000a70 <Set_UART_Baud>:

u8 Set_UART_Baud(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	if (!Qst_UART_Baud()) return 0;
 8000a76:	f7ff ffbb 	bl	80009f0 <Qst_UART_Baud>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <Set_UART_Baud+0x14>
 8000a80:	2300      	movs	r3, #0
 8000a82:	e025      	b.n	8000ad0 <Set_UART_Baud+0x60>
	strcpy(tok.name, "AT+BAUD");
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <Set_UART_Baud+0x68>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <Set_UART_Baud+0x6c>)
 8000a88:	cb03      	ldmia	r3!, {r0, r1}
 8000a8a:	6010      	str	r0, [r2, #0]
 8000a8c:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <Set_UART_Baud+0x68>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], BAUD);
 8000a96:	4912      	ldr	r1, [pc, #72]	; (8000ae0 <Set_UART_Baud+0x70>)
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <Set_UART_Baud+0x74>)
 8000a9a:	f003 fdf2 	bl	8004682 <strcpy>
	sprintf(tok.ret, "OK+BAUD=%s", BAUD);
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <Set_UART_Baud+0x70>)
 8000aa0:	4911      	ldr	r1, [pc, #68]	; (8000ae8 <Set_UART_Baud+0x78>)
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <Set_UART_Baud+0x7c>)
 8000aa4:	f003 fdbe 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <Set_UART_Baud+0x68>)
 8000aaa:	f7ff fdbd 	bl	8000628 <AT_CMD_Dispose>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <Set_UART_Baud+0x68>)
 8000ab4:	f7ff ff0e 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BAUD set fail!\r\n");
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <Set_UART_Baud+0x56>
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <Set_UART_Baud+0x80>)
 8000ac0:	f003 fda8 	bl	8004614 <puts>
 8000ac4:	e003      	b.n	8000ace <Set_UART_Baud+0x5e>
	else printf("[BLEINIT][SUC] BAUD set as %s\r\n", BAUD);
 8000ac6:	4906      	ldr	r1, [pc, #24]	; (8000ae0 <Set_UART_Baud+0x70>)
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <Set_UART_Baud+0x84>)
 8000aca:	f003 fd2f 	bl	800452c <iprintf>
	return ret;
 8000ace:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000e58 	.word	0x20000e58
 8000adc:	08005944 	.word	0x08005944
 8000ae0:	200000f0 	.word	0x200000f0
 8000ae4:	20000e79 	.word	0x20000e79
 8000ae8:	080059a8 	.word	0x080059a8
 8000aec:	20002279 	.word	0x20002279
 8000af0:	080059b4 	.word	0x080059b4
 8000af4:	080059d4 	.word	0x080059d4

08000af8 <Qst_Role>:

u8 Qst_Role(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+ROLE");
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <Qst_Role+0x5c>)
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <Qst_Role+0x60>)
 8000b02:	cb03      	ldmia	r3!, {r0, r1}
 8000b04:	6010      	str	r0, [r2, #0]
 8000b06:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <Qst_Role+0x5c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <Qst_Role+0x64>)
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <Qst_Role+0x68>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <Qst_Role+0x6c>)
 8000b1a:	4913      	ldr	r1, [pc, #76]	; (8000b68 <Qst_Role+0x70>)
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <Qst_Role+0x74>)
 8000b1e:	f003 fd81 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000b22:	480c      	ldr	r0, [pc, #48]	; (8000b54 <Qst_Role+0x5c>)
 8000b24:	f7ff fd80 	bl	8000628 <AT_CMD_Dispose>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <Qst_Role+0x5c>)
 8000b2e:	f7ff fed1 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: ROLE not correct\r\n");
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <Qst_Role+0x48>
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <Qst_Role+0x78>)
 8000b3a:	f003 fd6b 	bl	8004614 <puts>
 8000b3e:	e003      	b.n	8000b48 <Qst_Role+0x50>
	else printf("[BLEINIT][SUC]Q: ROLE now is %s\r\n", ROLE[1]);
 8000b40:	4908      	ldr	r1, [pc, #32]	; (8000b64 <Qst_Role+0x6c>)
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <Qst_Role+0x7c>)
 8000b44:	f003 fcf2 	bl	800452c <iprintf>
	return ret;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000e58 	.word	0x20000e58
 8000b58:	080059f4 	.word	0x080059f4
 8000b5c:	20000e79 	.word	0x20000e79
 8000b60:	0800594c 	.word	0x0800594c
 8000b64:	200000ff 	.word	0x200000ff
 8000b68:	080059fc 	.word	0x080059fc
 8000b6c:	20002279 	.word	0x20002279
 8000b70:	08005a08 	.word	0x08005a08
 8000b74:	08005a2c 	.word	0x08005a2c

08000b78 <Set_Role>:

u8 Set_Role(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	if (!Qst_Role()) return 0;
 8000b7e:	f7ff ffbb 	bl	8000af8 <Qst_Role>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <Set_Role+0x14>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e025      	b.n	8000bd8 <Set_Role+0x60>
	strcpy(tok.name, "AT+ROLE");
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <Set_Role+0x68>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <Set_Role+0x6c>)
 8000b90:	cb03      	ldmia	r3!, {r0, r1}
 8000b92:	6010      	str	r0, [r2, #0]
 8000b94:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <Set_Role+0x68>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], ROLE[0]);
 8000b9e:	4912      	ldr	r1, [pc, #72]	; (8000be8 <Set_Role+0x70>)
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <Set_Role+0x74>)
 8000ba2:	f003 fd6e 	bl	8004682 <strcpy>
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <Set_Role+0x78>)
 8000ba8:	4912      	ldr	r1, [pc, #72]	; (8000bf4 <Set_Role+0x7c>)
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <Set_Role+0x80>)
 8000bac:	f003 fd3a 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <Set_Role+0x68>)
 8000bb2:	f7ff fd39 	bl	8000628 <AT_CMD_Dispose>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000bba:	4809      	ldr	r0, [pc, #36]	; (8000be0 <Set_Role+0x68>)
 8000bbc:	f7ff fe8a 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] ROLE set fail!\r\n");
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <Set_Role+0x56>
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <Set_Role+0x84>)
 8000bc8:	f003 fd24 	bl	8004614 <puts>
 8000bcc:	e003      	b.n	8000bd6 <Set_Role+0x5e>
	else printf("[BLEINIT][SUC] ROLE set as %s\r\n", ROLE[1]);
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <Set_Role+0x78>)
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <Set_Role+0x88>)
 8000bd2:	f003 fcab 	bl	800452c <iprintf>
	return ret;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000e58 	.word	0x20000e58
 8000be4:	080059f4 	.word	0x080059f4
 8000be8:	200000f8 	.word	0x200000f8
 8000bec:	20000e79 	.word	0x20000e79
 8000bf0:	200000ff 	.word	0x200000ff
 8000bf4:	080059fc 	.word	0x080059fc
 8000bf8:	20002279 	.word	0x20002279
 8000bfc:	08005a50 	.word	0x08005a50
 8000c00:	08005a70 	.word	0x08005a70

08000c04 <Qst_SPP_Name>:

u8 Qst_SPP_Name(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+NAME");
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <Qst_SPP_Name+0x5c>)
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <Qst_SPP_Name+0x60>)
 8000c0e:	cb03      	ldmia	r3!, {r0, r1}
 8000c10:	6010      	str	r0, [r2, #0]
 8000c12:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <Qst_SPP_Name+0x5c>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <Qst_SPP_Name+0x64>)
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <Qst_SPP_Name+0x68>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+NAME=%s", NAME[1]);
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <Qst_SPP_Name+0x6c>)
 8000c26:	4913      	ldr	r1, [pc, #76]	; (8000c74 <Qst_SPP_Name+0x70>)
 8000c28:	4813      	ldr	r0, [pc, #76]	; (8000c78 <Qst_SPP_Name+0x74>)
 8000c2a:	f003 fcfb 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <Qst_SPP_Name+0x5c>)
 8000c30:	f7ff fcfa 	bl	8000628 <AT_CMD_Dispose>
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <Qst_SPP_Name+0x5c>)
 8000c3a:	f7ff fe4b 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: SPP name not correct\r\n");
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <Qst_SPP_Name+0x48>
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <Qst_SPP_Name+0x78>)
 8000c46:	f003 fce5 	bl	8004614 <puts>
 8000c4a:	e003      	b.n	8000c54 <Qst_SPP_Name+0x50>
	else printf("[BLEINIT][SUC]Q: SPP name now is %s\r\n", NAME[1]);
 8000c4c:	4908      	ldr	r1, [pc, #32]	; (8000c70 <Qst_SPP_Name+0x6c>)
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <Qst_SPP_Name+0x7c>)
 8000c50:	f003 fc6c 	bl	800452c <iprintf>
	return ret;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000e58 	.word	0x20000e58
 8000c64:	08005a90 	.word	0x08005a90
 8000c68:	20000e79 	.word	0x20000e79
 8000c6c:	0800594c 	.word	0x0800594c
 8000c70:	20000112 	.word	0x20000112
 8000c74:	08005a98 	.word	0x08005a98
 8000c78:	20002279 	.word	0x20002279
 8000c7c:	08005aa4 	.word	0x08005aa4
 8000c80:	08005acc 	.word	0x08005acc

08000c84 <Set_SPP_Name>:

u8 Set_SPP_Name(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	if (!Qst_SPP_Name()) return 0;
 8000c8a:	f7ff ffbb 	bl	8000c04 <Qst_SPP_Name>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <Set_SPP_Name+0x14>
 8000c94:	2300      	movs	r3, #0
 8000c96:	e027      	b.n	8000ce8 <Set_SPP_Name+0x64>
	strcpy(tok.name, "AT+NAME");
 8000c98:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <Set_SPP_Name+0x6c>)
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <Set_SPP_Name+0x70>)
 8000c9c:	cb03      	ldmia	r3!, {r0, r1}
 8000c9e:	6010      	str	r0, [r2, #0]
 8000ca0:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <Set_SPP_Name+0x6c>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[1]);
 8000caa:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <Set_SPP_Name+0x74>)
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <Set_SPP_Name+0x78>)
 8000cae:	f003 fce8 	bl	8004682 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <Set_SPP_Name+0x7c>)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <Set_SPP_Name+0x80>)
 8000cb6:	cb03      	ldmia	r3!, {r0, r1}
 8000cb8:	6010      	str	r0, [r2, #0]
 8000cba:	6051      	str	r1, [r2, #4]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <Set_SPP_Name+0x6c>)
 8000cc2:	f7ff fcb1 	bl	8000628 <AT_CMD_Dispose>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <Set_SPP_Name+0x6c>)
 8000ccc:	f7ff fe02 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] SPP name set fail!\r\n");
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <Set_SPP_Name+0x5a>
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <Set_SPP_Name+0x84>)
 8000cd8:	f003 fc9c 	bl	8004614 <puts>
 8000cdc:	e003      	b.n	8000ce6 <Set_SPP_Name+0x62>
	else printf("[BLEINIT][SUC] SPP name set as %s\r\n", NAME[1]);
 8000cde:	4906      	ldr	r1, [pc, #24]	; (8000cf8 <Set_SPP_Name+0x74>)
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <Set_SPP_Name+0x88>)
 8000ce2:	f003 fc23 	bl	800452c <iprintf>
	return ret;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000e58 	.word	0x20000e58
 8000cf4:	08005a90 	.word	0x08005a90
 8000cf8:	20000112 	.word	0x20000112
 8000cfc:	20000e79 	.word	0x20000e79
 8000d00:	20002279 	.word	0x20002279
 8000d04:	08005af4 	.word	0x08005af4
 8000d08:	08005b00 	.word	0x08005b00
 8000d0c:	08005b24 	.word	0x08005b24

08000d10 <Qst_BLE_Name>:

u8 Qst_BLE_Name(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BNAME");
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <Qst_BLE_Name+0x60>)
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <Qst_BLE_Name+0x64>)
 8000d1a:	cb03      	ldmia	r3!, {r0, r1}
 8000d1c:	6010      	str	r0, [r2, #0]
 8000d1e:	6051      	str	r1, [r2, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <Qst_BLE_Name+0x60>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <Qst_BLE_Name+0x68>)
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <Qst_BLE_Name+0x6c>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BNAME=%s", NAME[0]);
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <Qst_BLE_Name+0x70>)
 8000d36:	4913      	ldr	r1, [pc, #76]	; (8000d84 <Qst_BLE_Name+0x74>)
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <Qst_BLE_Name+0x78>)
 8000d3a:	f003 fc73 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <Qst_BLE_Name+0x60>)
 8000d40:	f7ff fc72 	bl	8000628 <AT_CMD_Dispose>
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <Qst_BLE_Name+0x60>)
 8000d4a:	f7ff fdc3 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE name not correct\r\n");
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <Qst_BLE_Name+0x4c>
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <Qst_BLE_Name+0x7c>)
 8000d56:	f003 fc5d 	bl	8004614 <puts>
 8000d5a:	e003      	b.n	8000d64 <Qst_BLE_Name+0x54>
	else printf("[BLEINIT][SUC]Q: BLE name now is %s\r\n", NAME[0]);
 8000d5c:	4908      	ldr	r1, [pc, #32]	; (8000d80 <Qst_BLE_Name+0x70>)
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <Qst_BLE_Name+0x80>)
 8000d60:	f003 fbe4 	bl	800452c <iprintf>
	return ret;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000e58 	.word	0x20000e58
 8000d74:	08005b48 	.word	0x08005b48
 8000d78:	20000e79 	.word	0x20000e79
 8000d7c:	0800594c 	.word	0x0800594c
 8000d80:	20000108 	.word	0x20000108
 8000d84:	08005b54 	.word	0x08005b54
 8000d88:	20002279 	.word	0x20002279
 8000d8c:	08005b60 	.word	0x08005b60
 8000d90:	08005b88 	.word	0x08005b88

08000d94 <Set_BLE_Name>:

u8 Set_BLE_Name(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	if (!Qst_BLE_Name()) return 0;
 8000d9a:	f7ff ffb9 	bl	8000d10 <Qst_BLE_Name>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <Set_BLE_Name+0x14>
 8000da4:	2300      	movs	r3, #0
 8000da6:	e029      	b.n	8000dfc <Set_BLE_Name+0x68>
	strcpy(tok.name, "AT+BNAME");
 8000da8:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <Set_BLE_Name+0x70>)
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <Set_BLE_Name+0x74>)
 8000dac:	cb03      	ldmia	r3!, {r0, r1}
 8000dae:	6010      	str	r0, [r2, #0]
 8000db0:	6051      	str	r1, [r2, #4]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <Set_BLE_Name+0x70>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[0]);
 8000dbe:	4913      	ldr	r1, [pc, #76]	; (8000e0c <Set_BLE_Name+0x78>)
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <Set_BLE_Name+0x7c>)
 8000dc2:	f003 fc5e 	bl	8004682 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <Set_BLE_Name+0x80>)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <Set_BLE_Name+0x84>)
 8000dca:	cb03      	ldmia	r3!, {r0, r1}
 8000dcc:	6010      	str	r0, [r2, #0]
 8000dce:	6051      	str	r1, [r2, #4]
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <Set_BLE_Name+0x70>)
 8000dd6:	f7ff fc27 	bl	8000628 <AT_CMD_Dispose>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000dde:	4809      	ldr	r0, [pc, #36]	; (8000e04 <Set_BLE_Name+0x70>)
 8000de0:	f7ff fd78 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE name set fail!\r\n");
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <Set_BLE_Name+0x5e>
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <Set_BLE_Name+0x88>)
 8000dec:	f003 fc12 	bl	8004614 <puts>
 8000df0:	e003      	b.n	8000dfa <Set_BLE_Name+0x66>
	else printf("[BLEINIT][SUC] BLE name set as %s\r\n", NAME[0]);
 8000df2:	4906      	ldr	r1, [pc, #24]	; (8000e0c <Set_BLE_Name+0x78>)
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <Set_BLE_Name+0x8c>)
 8000df6:	f003 fb99 	bl	800452c <iprintf>
	return ret;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000e58 	.word	0x20000e58
 8000e08:	08005b48 	.word	0x08005b48
 8000e0c:	20000108 	.word	0x20000108
 8000e10:	20000e79 	.word	0x20000e79
 8000e14:	20002279 	.word	0x20002279
 8000e18:	08005af4 	.word	0x08005af4
 8000e1c:	08005bb0 	.word	0x08005bb0
 8000e20:	08005bd4 	.word	0x08005bd4

08000e24 <Qst_PIN>:

u8 Qst_PIN(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+PIN");
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <Qst_PIN+0x60>)
 8000e2c:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <Qst_PIN+0x64>)
 8000e2e:	6810      	ldr	r0, [r2, #0]
 8000e30:	6018      	str	r0, [r3, #0]
 8000e32:	8891      	ldrh	r1, [r2, #4]
 8000e34:	7992      	ldrb	r2, [r2, #6]
 8000e36:	8099      	strh	r1, [r3, #4]
 8000e38:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <Qst_PIN+0x60>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <Qst_PIN+0x68>)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <Qst_PIN+0x6c>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+PIN=%s", PIN);
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <Qst_PIN+0x70>)
 8000e4c:	4912      	ldr	r1, [pc, #72]	; (8000e98 <Qst_PIN+0x74>)
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <Qst_PIN+0x78>)
 8000e50:	f003 fbe8 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <Qst_PIN+0x60>)
 8000e56:	f7ff fbe7 	bl	8000628 <AT_CMD_Dispose>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <Qst_PIN+0x60>)
 8000e60:	f7ff fd38 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: PIN not correct\r\n");
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <Qst_PIN+0x4e>
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <Qst_PIN+0x7c>)
 8000e6c:	f003 fbd2 	bl	8004614 <puts>
 8000e70:	e003      	b.n	8000e7a <Qst_PIN+0x56>
	else printf("[BLEINIT][SUC]Q: PIN now is %s\r\n", PIN);
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <Qst_PIN+0x70>)
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <Qst_PIN+0x80>)
 8000e76:	f003 fb59 	bl	800452c <iprintf>
	return ret;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000e58 	.word	0x20000e58
 8000e88:	08005bf8 	.word	0x08005bf8
 8000e8c:	20000e79 	.word	0x20000e79
 8000e90:	0800594c 	.word	0x0800594c
 8000e94:	2000011c 	.word	0x2000011c
 8000e98:	08005c00 	.word	0x08005c00
 8000e9c:	20002279 	.word	0x20002279
 8000ea0:	08005c0c 	.word	0x08005c0c
 8000ea4:	08005c30 	.word	0x08005c30

08000ea8 <Set_PIN>:

u8 Set_PIN(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	if (!Qst_PIN()) return 0;
 8000eae:	f7ff ffb9 	bl	8000e24 <Qst_PIN>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <Set_PIN+0x14>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e02a      	b.n	8000f12 <Set_PIN+0x6a>
	strcpy(tok.name, "AT+PIN");
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <Set_PIN+0x74>)
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <Set_PIN+0x78>)
 8000ec0:	6810      	ldr	r0, [r2, #0]
 8000ec2:	6018      	str	r0, [r3, #0]
 8000ec4:	8891      	ldrh	r1, [r2, #4]
 8000ec6:	7992      	ldrb	r2, [r2, #6]
 8000ec8:	8099      	strh	r1, [r3, #4]
 8000eca:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <Set_PIN+0x74>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], PIN);
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <Set_PIN+0x7c>)
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <Set_PIN+0x80>)
 8000ed8:	f003 fbd3 	bl	8004682 <strcpy>
	strcpy(tok.ret, "OKsetPIN");
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <Set_PIN+0x84>)
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <Set_PIN+0x88>)
 8000ee0:	cb03      	ldmia	r3!, {r0, r1}
 8000ee2:	6010      	str	r0, [r2, #0]
 8000ee4:	6051      	str	r1, [r2, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <Set_PIN+0x74>)
 8000eec:	f7ff fb9c 	bl	8000628 <AT_CMD_Dispose>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <Set_PIN+0x74>)
 8000ef6:	f7ff fced 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] PIN set fail!\r\n");
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <Set_PIN+0x60>
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <Set_PIN+0x8c>)
 8000f02:	f003 fb87 	bl	8004614 <puts>
 8000f06:	e003      	b.n	8000f10 <Set_PIN+0x68>
	else printf("[BLEINIT][SUC] PIN set as %s\r\n", PIN);
 8000f08:	4906      	ldr	r1, [pc, #24]	; (8000f24 <Set_PIN+0x7c>)
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <Set_PIN+0x90>)
 8000f0c:	f003 fb0e 	bl	800452c <iprintf>
	return ret;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000e58 	.word	0x20000e58
 8000f20:	08005bf8 	.word	0x08005bf8
 8000f24:	2000011c 	.word	0x2000011c
 8000f28:	20000e79 	.word	0x20000e79
 8000f2c:	20002279 	.word	0x20002279
 8000f30:	08005c54 	.word	0x08005c54
 8000f34:	08005c60 	.word	0x08005c60
 8000f38:	08005c80 	.word	0x08005c80

08000f3c <Qst_BLE>:

u8 Qst_BLE(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BLE");
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <Qst_BLE+0x64>)
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <Qst_BLE+0x68>)
 8000f46:	6810      	ldr	r0, [r2, #0]
 8000f48:	6018      	str	r0, [r3, #0]
 8000f4a:	8891      	ldrh	r1, [r2, #4]
 8000f4c:	7992      	ldrb	r2, [r2, #6]
 8000f4e:	8099      	strh	r1, [r3, #4]
 8000f50:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <Qst_BLE+0x64>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <Qst_BLE+0x6c>)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <Qst_BLE+0x70>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <Qst_BLE+0x74>)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <Qst_BLE+0x78>)
 8000f66:	cb03      	ldmia	r3!, {r0, r1}
 8000f68:	6010      	str	r0, [r2, #0]
 8000f6a:	6051      	str	r1, [r2, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <Qst_BLE+0x64>)
 8000f72:	f7ff fb59 	bl	8000628 <AT_CMD_Dispose>
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <Qst_BLE+0x64>)
 8000f7c:	f7ff fcaa 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE not correct\r\n");
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <Qst_BLE+0x52>
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <Qst_BLE+0x7c>)
 8000f88:	f003 fb44 	bl	8004614 <puts>
 8000f8c:	e003      	b.n	8000f96 <Qst_BLE+0x5a>
	else printf("[BLEINIT][SUC]Q: BLE now is %s\r\n", "0");
 8000f8e:	490b      	ldr	r1, [pc, #44]	; (8000fbc <Qst_BLE+0x80>)
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <Qst_BLE+0x84>)
 8000f92:	f003 facb 	bl	800452c <iprintf>
	return ret;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000e58 	.word	0x20000e58
 8000fa4:	08005ca0 	.word	0x08005ca0
 8000fa8:	20000e79 	.word	0x20000e79
 8000fac:	0800594c 	.word	0x0800594c
 8000fb0:	20002279 	.word	0x20002279
 8000fb4:	08005ca8 	.word	0x08005ca8
 8000fb8:	08005cb4 	.word	0x08005cb4
 8000fbc:	08005cd8 	.word	0x08005cd8
 8000fc0:	08005cdc 	.word	0x08005cdc

08000fc4 <Set_BLE>:

u8 Set_BLE(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	if (!Qst_BLE()) return 0;
 8000fca:	f7ff ffb7 	bl	8000f3c <Qst_BLE>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <Set_BLE+0x14>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e02a      	b.n	800102e <Set_BLE+0x6a>
	strcpy(tok.name, "AT+BLE");
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <Set_BLE+0x74>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <Set_BLE+0x78>)
 8000fdc:	6810      	ldr	r0, [r2, #0]
 8000fde:	6018      	str	r0, [r3, #0]
 8000fe0:	8891      	ldrh	r1, [r2, #4]
 8000fe2:	7992      	ldrb	r2, [r2, #6]
 8000fe4:	8099      	strh	r1, [r3, #4]
 8000fe6:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <Set_BLE+0x74>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "0");
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <Set_BLE+0x7c>)
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <Set_BLE+0x80>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <Set_BLE+0x84>)
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <Set_BLE+0x88>)
 8000ffc:	cb03      	ldmia	r3!, {r0, r1}
 8000ffe:	6010      	str	r0, [r2, #0]
 8001000:	6051      	str	r1, [r2, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <Set_BLE+0x74>)
 8001008:	f7ff fb0e 	bl	8000628 <AT_CMD_Dispose>
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <Set_BLE+0x74>)
 8001012:	f7ff fc5f 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE set fail!\r\n");
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <Set_BLE+0x60>
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <Set_BLE+0x8c>)
 800101e:	f003 faf9 	bl	8004614 <puts>
 8001022:	e003      	b.n	800102c <Set_BLE+0x68>
	else printf("[BLEINIT][SUC] BLE set as %s\r\n", "0");
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <Set_BLE+0x80>)
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <Set_BLE+0x90>)
 8001028:	f003 fa80 	bl	800452c <iprintf>
	return ret;
 800102c:	79fb      	ldrb	r3, [r7, #7]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000e58 	.word	0x20000e58
 800103c:	08005ca0 	.word	0x08005ca0
 8001040:	20000e79 	.word	0x20000e79
 8001044:	08005cd8 	.word	0x08005cd8
 8001048:	20002279 	.word	0x20002279
 800104c:	08005ca8 	.word	0x08005ca8
 8001050:	08005d00 	.word	0x08005d00
 8001054:	08005d20 	.word	0x08005d20

08001058 <Qst_TUUID>:

u8 Qst_TUUID(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+TUUID");
 800105e:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <Qst_TUUID+0x60>)
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <Qst_TUUID+0x64>)
 8001062:	cb03      	ldmia	r3!, {r0, r1}
 8001064:	6010      	str	r0, [r2, #0]
 8001066:	6051      	str	r1, [r2, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <Qst_TUUID+0x60>)
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <Qst_TUUID+0x68>)
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <Qst_TUUID+0x6c>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <Qst_TUUID+0x70>)
 800107e:	4913      	ldr	r1, [pc, #76]	; (80010cc <Qst_TUUID+0x74>)
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <Qst_TUUID+0x78>)
 8001082:	f003 facf 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <Qst_TUUID+0x60>)
 8001088:	f7ff face 	bl	8000628 <AT_CMD_Dispose>
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <Qst_TUUID+0x60>)
 8001092:	f7ff fc1f 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: TUUID not correct\r\n");
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <Qst_TUUID+0x4c>
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <Qst_TUUID+0x7c>)
 800109e:	f003 fab9 	bl	8004614 <puts>
 80010a2:	e003      	b.n	80010ac <Qst_TUUID+0x54>
	else printf("[BLEINIT][SUC]Q: TUUID now is %s\r\n", TUUID);
 80010a4:	4908      	ldr	r1, [pc, #32]	; (80010c8 <Qst_TUUID+0x70>)
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <Qst_TUUID+0x80>)
 80010a8:	f003 fa40 	bl	800452c <iprintf>
	return ret;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000e58 	.word	0x20000e58
 80010bc:	08005d40 	.word	0x08005d40
 80010c0:	20000e79 	.word	0x20000e79
 80010c4:	0800594c 	.word	0x0800594c
 80010c8:	20000124 	.word	0x20000124
 80010cc:	08005d4c 	.word	0x08005d4c
 80010d0:	20002279 	.word	0x20002279
 80010d4:	08005d58 	.word	0x08005d58
 80010d8:	08005d7c 	.word	0x08005d7c

080010dc <Set_TUUID>:

u8 Set_TUUID(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
	if (!Qst_TUUID()) return 0;
 80010e2:	f7ff ffb9 	bl	8001058 <Qst_TUUID>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <Set_TUUID+0x14>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e027      	b.n	8001140 <Set_TUUID+0x64>
	strcpy(tok.name, "AT+TUUID");
 80010f0:	4a15      	ldr	r2, [pc, #84]	; (8001148 <Set_TUUID+0x6c>)
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <Set_TUUID+0x70>)
 80010f4:	cb03      	ldmia	r3!, {r0, r1}
 80010f6:	6010      	str	r0, [r2, #0]
 80010f8:	6051      	str	r1, [r2, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Set_TUUID+0x6c>)
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], TUUID);
 8001106:	4912      	ldr	r1, [pc, #72]	; (8001150 <Set_TUUID+0x74>)
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <Set_TUUID+0x78>)
 800110a:	f003 faba 	bl	8004682 <strcpy>
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <Set_TUUID+0x74>)
 8001110:	4911      	ldr	r1, [pc, #68]	; (8001158 <Set_TUUID+0x7c>)
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <Set_TUUID+0x80>)
 8001114:	f003 fa86 	bl	8004624 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <Set_TUUID+0x6c>)
 800111a:	f7ff fa85 	bl	8000628 <AT_CMD_Dispose>
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001122:	4809      	ldr	r0, [pc, #36]	; (8001148 <Set_TUUID+0x6c>)
 8001124:	f7ff fbd6 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] TUUID set fail!\r\n");
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <Set_TUUID+0x5a>
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <Set_TUUID+0x84>)
 8001130:	f003 fa70 	bl	8004614 <puts>
 8001134:	e003      	b.n	800113e <Set_TUUID+0x62>
	else printf("[BLEINIT][SUC] TUUID set as %s\r\n", TUUID);
 8001136:	4906      	ldr	r1, [pc, #24]	; (8001150 <Set_TUUID+0x74>)
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <Set_TUUID+0x88>)
 800113a:	f003 f9f7 	bl	800452c <iprintf>
	return ret;
 800113e:	79fb      	ldrb	r3, [r7, #7]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000e58 	.word	0x20000e58
 800114c:	08005d40 	.word	0x08005d40
 8001150:	20000124 	.word	0x20000124
 8001154:	20000e79 	.word	0x20000e79
 8001158:	08005d4c 	.word	0x08005d4c
 800115c:	20002279 	.word	0x20002279
 8001160:	08005da0 	.word	0x08005da0
 8001164:	08005dc0 	.word	0x08005dc0

08001168 <BLE_INIT>:
#define NAN_NAN   0
#define CONN_OK   1
#define PARA_OK   2
#define ALL_GREEN 3

void BLE_INIT() {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	switch(BLE_state) {
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <BLE_INIT+0x9c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d012      	beq.n	800119a <BLE_INIT+0x32>
 8001174:	2b02      	cmp	r3, #2
 8001176:	d023      	beq.n	80011c0 <BLE_INIT+0x58>
 8001178:	2b00      	cmp	r3, #0
 800117a:	d142      	bne.n	8001202 <BLE_INIT+0x9a>
	case NAN_NAN:
		BLE_reboot();
 800117c:	f7ff fc00 	bl	8000980 <BLE_reboot>
		HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f000 fe5c 	bl	8001e40 <HAL_Delay>
		if(Set_UART_Baud()) return;
 8001188:	f7ff fc72 	bl	8000a70 <Set_UART_Baud>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d12a      	bne.n	80011e8 <BLE_INIT+0x80>
		BLE_state = CONN_OK;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <BLE_INIT+0x9c>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
		break;
 8001198:	e033      	b.n	8001202 <BLE_INIT+0x9a>
	case CONN_OK:
		if(Set_Role()) return;
 800119a:	f7ff fced 	bl	8000b78 <Set_Role>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d123      	bne.n	80011ec <BLE_INIT+0x84>
		if(Set_PIN()) return;
 80011a4:	f7ff fe80 	bl	8000ea8 <Set_PIN>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d120      	bne.n	80011f0 <BLE_INIT+0x88>
		if(Set_TUUID()) return;
 80011ae:	f7ff ff95 	bl	80010dc <Set_TUUID>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11d      	bne.n	80011f4 <BLE_INIT+0x8c>
		BLE_state = PARA_OK;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <BLE_INIT+0x9c>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	601a      	str	r2, [r3, #0]
		break;
 80011be:	e020      	b.n	8001202 <BLE_INIT+0x9a>
	case PARA_OK:
		if(Set_SPP_Name()) return;
 80011c0:	f7ff fd60 	bl	8000c84 <Set_SPP_Name>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d116      	bne.n	80011f8 <BLE_INIT+0x90>
		if(Set_BLE_Name()) return;
 80011ca:	f7ff fde3 	bl	8000d94 <Set_BLE_Name>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d113      	bne.n	80011fc <BLE_INIT+0x94>
		if(Set_BLE()) return;
 80011d4:	f7ff fef6 	bl	8000fc4 <Set_BLE>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d110      	bne.n	8001200 <BLE_INIT+0x98>
		BLE_state = ALL_GREEN;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <BLE_INIT+0x9c>)
 80011e0:	2203      	movs	r2, #3
 80011e2:	601a      	str	r2, [r3, #0]
		break;
 80011e4:	bf00      	nop
 80011e6:	e00c      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_UART_Baud()) return;
 80011e8:	bf00      	nop
 80011ea:	e00a      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_Role()) return;
 80011ec:	bf00      	nop
 80011ee:	e008      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_PIN()) return;
 80011f0:	bf00      	nop
 80011f2:	e006      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_TUUID()) return;
 80011f4:	bf00      	nop
 80011f6:	e004      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_SPP_Name()) return;
 80011f8:	bf00      	nop
 80011fa:	e002      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_BLE_Name()) return;
 80011fc:	bf00      	nop
 80011fe:	e000      	b.n	8001202 <BLE_INIT+0x9a>
		if(Set_BLE()) return;
 8001200:	bf00      	nop
	}
}
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20002384 	.word	0x20002384

08001208 <readNum>:
	u8  alt;
} data[MAX_VEHICLE_CNT];

u8 cnt;

u16 readNum (u8 **str) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	u16 ret = 0ll;
 8001210:	2300      	movs	r3, #0
 8001212:	81fb      	strh	r3, [r7, #14]
	while (**str< '0' || **str> '9') ++ *str;
 8001214:	e004      	b.n	8001220 <readNum+0x18>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b2f      	cmp	r3, #47	; 0x2f
 8001228:	d9f5      	bls.n	8001216 <readNum+0xe>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b39      	cmp	r3, #57	; 0x39
 8001232:	d8f0      	bhi.n	8001216 <readNum+0xe>
	while (**str>='0' && **str<='9') {
 8001234:	e015      	b.n	8001262 <readNum+0x5a>
		ret = (ret<<1) + (ret<<3) + ((**str)^'0');
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001250:	b2db      	uxtb	r3, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	81fb      	strh	r3, [r7, #14]
		++ *str;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
	while (**str>='0' && **str<='9') {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b2f      	cmp	r3, #47	; 0x2f
 800126a:	d904      	bls.n	8001276 <readNum+0x6e>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b39      	cmp	r3, #57	; 0x39
 8001274:	d9df      	bls.n	8001236 <readNum+0x2e>
	} return ret;
 8001276:	89fb      	ldrh	r3, [r7, #14]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <dispose>:

int dispose (unsigned char *str) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	u8 *p = (u8*) strstr((const char *) str, "-=t:");
 800128c:	4934      	ldr	r1, [pc, #208]	; (8001360 <dispose+0xdc>)
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f003 f9ff 	bl	8004692 <strstr>
 8001294:	4603      	mov	r3, r0
 8001296:	60bb      	str	r3, [r7, #8]
	cnt = readNum(&p);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffb3 	bl	8001208 <readNum>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <dispose+0xe0>)
 80012a8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<cnt; ++ i) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e04c      	b.n	800134a <dispose+0xc6>
		data[i].cat  = readNum(&p);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffa7 	bl	8001208 <readNum>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b2d9      	uxtb	r1, r3
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <dispose+0xe4>)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b2c      	cmp	r3, #44	; 0x2c
 80012cc:	d001      	beq.n	80012d2 <dispose+0x4e>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e042      	b.n	8001358 <dispose+0xd4>
		data[i].xVal = readNum(&p);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff96 	bl	8001208 <readNum>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <dispose+0xe4>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4413      	add	r3, r2
 80012e8:	460a      	mov	r2, r1
 80012ea:	805a      	strh	r2, [r3, #2]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b2c      	cmp	r3, #44	; 0x2c
 80012f2:	d001      	beq.n	80012f8 <dispose+0x74>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e02f      	b.n	8001358 <dispose+0xd4>
		data[i].yVal = readNum(&p);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff83 	bl	8001208 <readNum>
 8001302:	4603      	mov	r3, r0
 8001304:	4619      	mov	r1, r3
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <dispose+0xe4>)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	460a      	mov	r2, r1
 8001310:	809a      	strh	r2, [r3, #4]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b2c      	cmp	r3, #44	; 0x2c
 8001318:	d001      	beq.n	800131e <dispose+0x9a>
 800131a:	2301      	movs	r3, #1
 800131c:	e01c      	b.n	8001358 <dispose+0xd4>
		data[i].alt  = readNum(&p);
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff70 	bl	8001208 <readNum>
 8001328:	4603      	mov	r3, r0
 800132a:	b2d9      	uxtb	r1, r3
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <dispose+0xe4>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	460a      	mov	r2, r1
 8001336:	719a      	strb	r2, [r3, #6]
		// printf("[s]%s\r\n", p);
		if (*p ^ ';') return 1;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b3b      	cmp	r3, #59	; 0x3b
 800133e:	d001      	beq.n	8001344 <dispose+0xc0>
 8001340:	2301      	movs	r3, #1
 8001342:	e009      	b.n	8001358 <dispose+0xd4>
	for (int i=0; i<cnt; ++ i) {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <dispose+0xe0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4293      	cmp	r3, r2
 8001354:	dbac      	blt.n	80012b0 <dispose+0x2c>
	} return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08005de4 	.word	0x08005de4
 8001364:	20002588 	.word	0x20002588
 8001368:	2000258c 	.word	0x2000258c

0800136c <decoderDebugOutput>:

void decoderDebugOutput () {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	printf("n=%d\r\n", cnt);
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <decoderDebugOutput+0x74>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	481a      	ldr	r0, [pc, #104]	; (80013e4 <decoderDebugOutput+0x78>)
 800137a:	f003 f8d7 	bl	800452c <iprintf>
	for (int i=0; i<cnt; ++ i) {
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e023      	b.n	80013cc <decoderDebugOutput+0x60>
		printf("[%d] ALT: %d\r\n", i, data[i].alt);
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <decoderDebugOutput+0x7c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	799b      	ldrb	r3, [r3, #6]
 800138e:	461a      	mov	r2, r3
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4816      	ldr	r0, [pc, #88]	; (80013ec <decoderDebugOutput+0x80>)
 8001394:	f003 f8ca 	bl	800452c <iprintf>
		printf("cat = %d\r\n", data[i].cat);
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <decoderDebugOutput+0x7c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <decoderDebugOutput+0x84>)
 80013a4:	f003 f8c2 	bl	800452c <iprintf>
		printf("map = %d, %d\r\n", data[i].xVal, data[i].yVal);
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <decoderDebugOutput+0x7c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	885b      	ldrh	r3, [r3, #2]
 80013b2:	4619      	mov	r1, r3
 80013b4:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <decoderDebugOutput+0x7c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	461a      	mov	r2, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <decoderDebugOutput+0x88>)
 80013c2:	f003 f8b3 	bl	800452c <iprintf>
	for (int i=0; i<cnt; ++ i) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <decoderDebugOutput+0x74>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4293      	cmp	r3, r2
 80013d6:	dbd5      	blt.n	8001384 <decoderDebugOutput+0x18>
	}
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20002588 	.word	0x20002588
 80013e4:	08005dec 	.word	0x08005dec
 80013e8:	2000258c 	.word	0x2000258c
 80013ec:	08005df4 	.word	0x08005df4
 80013f0:	08005e04 	.word	0x08005e04
 80013f4:	08005e10 	.word	0x08005e10

080013f8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001400:	1d39      	adds	r1, r7, #4
 8001402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <__io_putchar+0x20>)
 800140a:	f002 f888 	bl	800351e <HAL_UART_Transmit>
	return ch;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200028ac 	.word	0x200028ac

0800141c <HAL_UART_RxCpltCallback>:
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};
unsigned char UART2RxUklRdFlg  = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && UART2RxUklRdFlg) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_UART_RxCpltCallback+0x78>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12f      	bne.n	800148e <HAL_UART_RxCpltCallback+0x72>
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_UART_RxCpltCallback+0x7c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d02b      	beq.n	800148e <HAL_UART_RxCpltCallback+0x72>
		if (!(UART2Rxtmp[0]^0x0A) || !(UART2Rxtmp[0]^0x0D)) {
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_UART_RxCpltCallback+0x80>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d003      	beq.n	8001446 <HAL_UART_RxCpltCallback+0x2a>
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_UART_RxCpltCallback+0x80>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b0d      	cmp	r3, #13
 8001444:	d107      	bne.n	8001456 <HAL_UART_RxCpltCallback+0x3a>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_UART_RxCpltCallback+0x84>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01e      	beq.n	800148c <HAL_UART_RxCpltCallback+0x70>
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_UART_RxCpltCallback+0x88>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e01a      	b.n	800148c <HAL_UART_RxCpltCallback+0x70>
		} if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_UART_RxCpltCallback+0x84>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145e:	d20e      	bcs.n	800147e <HAL_UART_RxCpltCallback+0x62>
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_UART_RxCpltCallback+0x84>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <HAL_UART_RxCpltCallback+0x84>)
 8001468:	600a      	str	r2, [r1, #0]
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_UART_RxCpltCallback+0x80>)
 800146c:	7811      	ldrb	r1, [r2, #0]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_UART_RxCpltCallback+0x8c>)
 8001470:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	4909      	ldr	r1, [pc, #36]	; (800149c <HAL_UART_RxCpltCallback+0x80>)
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <HAL_UART_RxCpltCallback+0x90>)
 8001478:	f002 f9d5 	bl	8003826 <HAL_UART_Receive_IT>
 800147c:	e007      	b.n	800148e <HAL_UART_RxCpltCallback+0x72>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_UART_RxCpltCallback+0x88>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <HAL_UART_RxCpltCallback+0x94>)
 8001486:	f003 f8c5 	bl	8004614 <puts>
 800148a:	e000      	b.n	800148e <HAL_UART_RxCpltCallback+0x72>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 800148c:	bf00      	nop
	}
}
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004400 	.word	0x40004400
 8001498:	200005c1 	.word	0x200005c1
 800149c:	200005c0 	.word	0x200005c0
 80014a0:	200005bc 	.word	0x200005bc
 80014a4:	200005b8 	.word	0x200005b8
 80014a8:	200001b8 	.word	0x200001b8
 80014ac:	20000e18 	.word	0x20000e18
 80014b0:	08005e20 	.word	0x08005e20

080014b4 <UART2_Clear>:

void UART2_Clear() {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e007      	b.n	80014d0 <UART2_Clear+0x1c>
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <UART2_Clear+0x48>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <UART2_Clear+0x4c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3f2      	bcc.n	80014c0 <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = UART2RxUklRdFlg = 0;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <UART2_Clear+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <UART2_Clear+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <UART2_Clear+0x4c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <UART2_Clear+0x54>)
 80014ee:	701a      	strb	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	200001b8 	.word	0x200001b8
 8001500:	200005bc 	.word	0x200005bc
 8001504:	200005c1 	.word	0x200005c1
 8001508:	200005b8 	.word	0x200005b8

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f000 fc24 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f848 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 f984 	bl	8001824 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800151c:	f000 f92a 	bl	8001774 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001520:	f000 f956 	bl	80017d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001524:	f000 f89e 	bl	8001664 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001528:	f000 f8ee 	bl	8001708 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UART2RxUklRdFlg = 0;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <main+0x7c>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
  ADC_Calibration();
 8001532:	f7ff f9f5 	bl	8000920 <ADC_Calibration>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (BLE_state^ALL_GREEN) BLE_INIT();
 8001536:	e001      	b.n	800153c <main+0x30>
 8001538:	f7ff fe16 	bl	8001168 <BLE_INIT>
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <main+0x80>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d1f9      	bne.n	8001538 <main+0x2c>
  printf("[BLEINIT] SUCCESS.\r\n");
 8001544:	4812      	ldr	r0, [pc, #72]	; (8001590 <main+0x84>)
 8001546:	f003 f865 	bl	8004614 <puts>

  //UART2RxUklRd();
  while (1)
  {
	  UART2RxUklRd();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <main+0x7c>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	4910      	ldr	r1, [pc, #64]	; (8001594 <main+0x88>)
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <main+0x8c>)
 8001556:	f002 f966 	bl	8003826 <HAL_UART_Receive_IT>
	  if (UART2RxFlg) {
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <main+0x90>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f3      	beq.n	800154a <main+0x3e>
		  Read_Battery_Life();
 8001562:	f7ff f9f7 	bl	8000954 <Read_Battery_Life>
		  printf("[%d]%s\r\n", TIME_TO_PRINT, UART2RxBuf);
 8001566:	f000 fc5f 	bl	8001e28 <HAL_GetTick>
 800156a:	4603      	mov	r3, r0
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <main+0x94>)
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <main+0x98>)
 8001572:	f002 ffdb 	bl	800452c <iprintf>
		  dispose(UART2RxBuf);
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <main+0x94>)
 8001578:	f7ff fe84 	bl	8001284 <dispose>
		  decoderDebugOutput();
 800157c:	f7ff fef6 	bl	800136c <decoderDebugOutput>
		  UART2_Clear();
 8001580:	f7ff ff98 	bl	80014b4 <UART2_Clear>
	  UART2RxUklRd();
 8001584:	e7e1      	b.n	800154a <main+0x3e>
 8001586:	bf00      	nop
 8001588:	200005c1 	.word	0x200005c1
 800158c:	20002384 	.word	0x20002384
 8001590:	08005e3c 	.word	0x08005e3c
 8001594:	200005c0 	.word	0x200005c0
 8001598:	20000e18 	.word	0x20000e18
 800159c:	200005b8 	.word	0x200005b8
 80015a0:	200001b8 	.word	0x200001b8
 80015a4:	08005e50 	.word	0x08005e50

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 ffb0 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <SystemClock_Config+0xb4>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <SystemClock_Config+0xb4>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <SystemClock_Config+0xb4>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <SystemClock_Config+0xb8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <SystemClock_Config+0xb8>)
 80015f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <SystemClock_Config+0xb8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160c:	2310      	movs	r3, #16
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001610:	2300      	movs	r3, #0
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fa93 	bl	8002b44 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001624:	f000 f926 	bl	8001874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	230f      	movs	r3, #15
 800162a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fcee 	bl	8003024 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800164e:	f000 f911 	bl	8001874 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3750      	adds	r7, #80	; 0x50
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000

08001664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_ADC1_Init+0x98>)
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <MX_ADC1_Init+0x9c>)
 800167a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_ADC1_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_ADC1_Init+0x98>)
 8001684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_ADC1_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_ADC1_Init+0x98>)
 8001692:	2201      	movs	r2, #1
 8001694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_ADC1_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_ADC1_Init+0x98>)
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <MX_ADC1_Init+0xa0>)
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_ADC1_Init+0x98>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_ADC1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_ADC1_Init+0x98>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_ADC1_Init+0x98>)
 80016c6:	f000 fbdd 	bl	8001e84 <HAL_ADC_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016d0:	f000 f8d0 	bl	8001874 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016d4:	2306      	movs	r3, #6
 80016d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016d8:	2301      	movs	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_ADC1_Init+0x98>)
 80016e6:	f000 fd49 	bl	800217c <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016f0:	f000 f8c0 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200005d0 	.word	0x200005d0
 8001700:	40012000 	.word	0x40012000
 8001704:	0f000001 	.word	0x0f000001

08001708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_SPI1_Init+0x64>)
 800170e:	4a18      	ldr	r2, [pc, #96]	; (8001770 <MX_SPI1_Init+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_SPI1_Init+0x64>)
 8001714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_SPI1_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_SPI1_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_SPI1_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_SPI1_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_SPI1_Init+0x64>)
 8001734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001738:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_SPI1_Init+0x64>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_SPI1_Init+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_SPI1_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_SPI1_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_SPI1_Init+0x64>)
 8001754:	220a      	movs	r2, #10
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_SPI1_Init+0x64>)
 800175a:	f001 fe2f 	bl	80033bc <HAL_SPI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001764:	f000 f886 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200028ec 	.word	0x200028ec
 8001770:	40013000 	.word	0x40013000

08001774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <MX_USART1_UART_Init+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <MX_USART1_UART_Init+0x50>)
 80017ac:	f001 fe6a 	bl	8003484 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 f85d 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_USART1_UART_Init+0x58>)
 80017bc:	f002 ff2a 	bl	8004614 <puts>

  /* USER CODE END USART1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200028ac 	.word	0x200028ac
 80017c8:	40011000 	.word	0x40011000
 80017cc:	08005e5c 	.word	0x08005e5c

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f001 fe3c 	bl	8003484 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 f82f 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000e18 	.word	0x20000e18
 8001820:	40004400 	.word	0x40004400

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_GPIO_Init+0x4c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <MX_GPIO_Init+0x4c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_GPIO_Init+0x4c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_GPIO_Init+0x4c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <MX_GPIO_Init+0x4c>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_GPIO_Init+0x4c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187a:	e7fe      	b.n	800187a <Error_Handler+0x6>

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_MspInit+0x4c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_MspInit+0x4c>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_MspInit+0x4c>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_ADC_MspInit+0x7c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d127      	bne.n	800193e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_ADC_MspInit+0x80>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_ADC_MspInit+0x80>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_ADC_MspInit+0x80>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_ADC_MspInit+0x80>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_ADC_MspInit+0x80>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_ADC_MspInit+0x80>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192a:	2303      	movs	r3, #3
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_ADC_MspInit+0x84>)
 800193a:	f000 ff81 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40012000 	.word	0x40012000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_SPI_MspInit+0xc0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d149      	bne.n	8001a0a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_SPI_MspInit+0xc4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019ca:	23a0      	movs	r3, #160	; 0xa0
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019da:	2305      	movs	r3, #5
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <HAL_SPI_MspInit+0xc8>)
 80019e6:	f000 ff2b 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ea:	2310      	movs	r3, #16
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <HAL_SPI_MspInit+0xcc>)
 8001a06:	f000 ff1b 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <HAL_UART_MspInit+0xf8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12d      	bne.n	8001aa2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a90:	2307      	movs	r3, #7
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <HAL_UART_MspInit+0x100>)
 8001a9c:	f000 fed0 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aa0:	e038      	b.n	8001b14 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <HAL_UART_MspInit+0x104>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d133      	bne.n	8001b14 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aba:	6413      	str	r3, [r2, #64]	; 0x40
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_UART_MspInit+0xfc>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af4:	2307      	movs	r3, #7
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <HAL_UART_MspInit+0x100>)
 8001b00:	f000 fe9e 	bl	8002840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2026      	movs	r0, #38	; 0x26
 8001b0a:	f000 fe40 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0e:	2026      	movs	r0, #38	; 0x26
 8001b10:	f000 fe59 	bl	80027c6 <HAL_NVIC_EnableIRQ>
}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40004400 	.word	0x40004400

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f000 f942 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART2_IRQHandler+0x10>)
 8001b86:	f001 fea3 	bl	80038d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000e18 	.word	0x20000e18

08001b94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
	}

return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e009      	b.n	8001bf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fc05 	bl	80013f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf1      	blt.n	8001be0 <_write+0x12>
	}
	return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_close>:

int _close(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_isatty>:

int _isatty(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	return 1;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f002 fc12 	bl	80044c8 <__errno>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20020000 	.word	0x20020000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	200005c4 	.word	0x200005c4
 8001cd8:	20002950 	.word	0x20002950

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <SystemInit+0x28>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <SystemInit+0x28>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <SystemInit+0x28>)
 8001cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d0e:	e003      	b.n	8001d18 <LoopCopyDataInit>

08001d10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d16:	3104      	adds	r1, #4

08001d18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d20:	d3f6      	bcc.n	8001d10 <CopyDataInit>
  ldr  r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d24:	e002      	b.n	8001d2c <LoopFillZerobss>

08001d26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d28:	f842 3b04 	str.w	r3, [r2], #4

08001d2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d30:	d3f9      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d32:	f7ff ffd3 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f002 fbcd 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff fbe7 	bl	800150c <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d44:	08005f30 	.word	0x08005f30
  ldr  r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d4c:	2000019c 	.word	0x2000019c
  ldr  r2, =_sbss
 8001d50:	2000019c 	.word	0x2000019c
  ldr  r3, = _ebss
 8001d54:	2000294c 	.word	0x2000294c

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_Init+0x40>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_Init+0x40>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_Init+0x40>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 fcf7 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fd74 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fd0f 	bl	80027e2 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 fcd7 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000012c 	.word	0x2000012c
 8001df8:	20000134 	.word	0x20000134
 8001dfc:	20000130 	.word	0x20000130

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000134 	.word	0x20000134
 8001e24:	20002944 	.word	0x20002944

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20002944 	.word	0x20002944

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_Delay+0x40>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000134 	.word	0x20000134

08001e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e033      	b.n	8001f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fd12 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d118      	bne.n	8001ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eca:	f023 0302 	bic.w	r3, r3, #2
 8001ece:	f043 0202 	orr.w	r2, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa82 	bl	80023e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f023 0303 	bic.w	r3, r3, #3
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	e001      	b.n	8001ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Start+0x1a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e08a      	b.n	800203c <HAL_ADC_Start+0x130>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d018      	beq.n	8001f6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_ADC_Start+0x13c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3e      	ldr	r2, [pc, #248]	; (800204c <HAL_ADC_Start+0x140>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9a      	lsrs	r2, r3, #18
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d15e      	bne.n	800203a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fba:	d106      	bne.n	8001fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	f023 0206 	bic.w	r2, r3, #6
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_ADC_Start+0x144>)
 8001fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11c      	bne.n	800203a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e013      	b.n	800203a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_ADC_Start+0x148>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d10e      	bne.n	800203a <HAL_ADC_Start+0x12e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d107      	bne.n	800203a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002038:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	2000012c 	.word	0x2000012c
 800204c:	431bde83 	.word	0x431bde83
 8002050:	40012300 	.word	0x40012300
 8002054:	40012000 	.word	0x40012000

08002058 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d113      	bne.n	800209e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002084:	d10b      	bne.n	800209e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e05c      	b.n	8002158 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800209e:	f7ff fec3 	bl	8001e28 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020a4:	e01a      	b.n	80020dc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d016      	beq.n	80020dc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_ADC_PollForConversion+0x6c>
 80020b4:	f7ff feb8 	bl	8001e28 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d20b      	bcs.n	80020dc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e03d      	b.n	8002158 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d1dd      	bne.n	80020a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f06f 0212 	mvn.w	r2, #18
 80020f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d123      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11f      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1c>
 8002194:	2302      	movs	r3, #2
 8002196:	e113      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x244>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d925      	bls.n	80021f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	3b1e      	subs	r3, #30
 80021be:	2207      	movs	r2, #7
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43da      	mvns	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	400a      	ands	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68d9      	ldr	r1, [r3, #12]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4403      	add	r3, r0
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	409a      	lsls	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	e022      	b.n	800223a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	2207      	movs	r2, #7
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6919      	ldr	r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	4603      	mov	r3, r0
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4403      	add	r3, r0
 8002230:	409a      	lsls	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d824      	bhi.n	800228c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b05      	subs	r3, #5
 8002254:	221f      	movs	r2, #31
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	4618      	mov	r0, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b05      	subs	r3, #5
 800227e:	fa00 f203 	lsl.w	r2, r0, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
 800228a:	e04c      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d824      	bhi.n	80022de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b23      	subs	r3, #35	; 0x23
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b23      	subs	r3, #35	; 0x23
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
 80022dc:	e023      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b41      	subs	r3, #65	; 0x41
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b41      	subs	r3, #65	; 0x41
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_ADC_ConfigChannel+0x250>)
 8002328:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <HAL_ADC_ConfigChannel+0x254>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10f      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d8>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d10b      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_ADC_ConfigChannel+0x254>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12b      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x23a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_ADC_ConfigChannel+0x258>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <HAL_ADC_ConfigChannel+0x1f4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b11      	cmp	r3, #17
 800236e:	d122      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_ADC_ConfigChannel+0x258>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d111      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_ADC_ConfigChannel+0x260>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9a      	lsrs	r2, r3, #18
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012300 	.word	0x40012300
 80023d0:	40012000 	.word	0x40012000
 80023d4:	10000012 	.word	0x10000012
 80023d8:	2000012c 	.word	0x2000012c
 80023dc:	431bde83 	.word	0x431bde83

080023e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <ADC_Init+0x1f0>)
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <ADC_Init+0x1f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d022      	beq.n	80024be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	e00f      	b.n	80024de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0202 	bic.w	r2, r2, #2
 80024ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e1b      	ldrb	r3, [r3, #24]
 80024f8:	005a      	lsls	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800252a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	3b01      	subs	r3, #1
 8002538:	035a      	lsls	r2, r3, #13
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e007      	b.n	8002554 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	3b01      	subs	r3, #1
 8002570:	051a      	lsls	r2, r3, #20
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002596:	025a      	lsls	r2, r3, #9
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	029a      	lsls	r2, r3, #10
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40012300 	.word	0x40012300
 80025d4:	0f000001 	.word	0x0f000001

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff29 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff3e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff31 	bl	800263c <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d004      	beq.n	8002818 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e00c      	b.n	8002832 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2205      	movs	r2, #5
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e159      	b.n	8002b10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	f040 8148 	bne.w	8002b0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00b      	beq.n	800289a <HAL_GPIO_Init+0x5a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800288e:	2b11      	cmp	r3, #17
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b12      	cmp	r3, #18
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0xfc>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b12      	cmp	r3, #18
 800293a:	d123      	bne.n	8002984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a2 	beq.w	8002b0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b56      	ldr	r3, [pc, #344]	; (8002b24 <HAL_GPIO_Init+0x2e4>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a55      	ldr	r2, [pc, #340]	; (8002b24 <HAL_GPIO_Init+0x2e4>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_GPIO_Init+0x2e4>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e2:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_GPIO_Init+0x2e8>)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_GPIO_Init+0x2ec>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x202>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a47      	ldr	r2, [pc, #284]	; (8002b30 <HAL_GPIO_Init+0x2f0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x1fe>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a46      	ldr	r2, [pc, #280]	; (8002b34 <HAL_GPIO_Init+0x2f4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x1fa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a45      	ldr	r2, [pc, #276]	; (8002b38 <HAL_GPIO_Init+0x2f8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x1f6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a44      	ldr	r2, [pc, #272]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x1f2>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a32:	2307      	movs	r3, #7
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x204>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4934      	ldr	r1, [pc, #208]	; (8002b28 <HAL_GPIO_Init+0x2e8>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a86:	4a2e      	ldr	r2, [pc, #184]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f aea2 	bls.w	800285c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3724      	adds	r7, #36	; 0x24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e25b      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d075      	beq.n	8002c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b62:	4ba3      	ldr	r3, [pc, #652]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d00c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4ba0      	ldr	r3, [pc, #640]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d112      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4b9d      	ldr	r3, [pc, #628]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	4b99      	ldr	r3, [pc, #612]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d05b      	beq.n	8002c4c <HAL_RCC_OscConfig+0x108>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d157      	bne.n	8002c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e236      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x74>
 8002baa:	4b91      	ldr	r3, [pc, #580]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a90      	ldr	r2, [pc, #576]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e01d      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x98>
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a8a      	ldr	r2, [pc, #552]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e00b      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	4b84      	ldr	r3, [pc, #528]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a83      	ldr	r2, [pc, #524]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a80      	ldr	r2, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff f914 	bl	8001e28 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c04:	f7ff f910 	bl	8001e28 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e1fb      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0xc0>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7ff f900 	bl	8001e28 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7ff f8fc 	bl	8001e28 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e1e7      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0xe8>
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5a:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b5f      	ldr	r3, [pc, #380]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b5c      	ldr	r3, [pc, #368]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x152>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1bb      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4952      	ldr	r1, [pc, #328]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7ff f8b5 	bl	8001e28 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7ff f8b1 	bl	8001e28 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e19c      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4940      	ldr	r1, [pc, #256]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f894 	bl	8001e28 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7ff f890 	bl	8001e28 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e17b      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d030      	beq.n	8002d90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_OscConfig+0x2b4>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7ff f874 	bl	8001e28 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d44:	f7ff f870 	bl	8001e28 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e15b      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x200>
 8002d62:	e015      	b.n	8002d90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x2b4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff f85d 	bl	8001e28 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d72:	f7ff f859 	bl	8001e28 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e144      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a0 	beq.w	8002ede <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x2b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d121      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_RCC_OscConfig+0x2b8>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f81f 	bl	8001e28 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e011      	b.n	8002e12 <HAL_RCC_OscConfig+0x2ce>
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
 8002dfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7ff f812 	bl	8001e28 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e0fd      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCC_OscConfig+0x4d4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d106      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2f0>
 8002e26:	4b7d      	ldr	r3, [pc, #500]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	e01c      	b.n	8002e6e <HAL_RCC_OscConfig+0x32a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b77      	ldr	r3, [pc, #476]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a76      	ldr	r2, [pc, #472]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b74      	ldr	r3, [pc, #464]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a73      	ldr	r2, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e00b      	b.n	8002e6e <HAL_RCC_OscConfig+0x32a>
 8002e56:	4b71      	ldr	r3, [pc, #452]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a70      	ldr	r2, [pc, #448]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	4b6e      	ldr	r3, [pc, #440]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a6d      	ldr	r2, [pc, #436]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d015      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe ffd7 	bl	8001e28 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe ffd3 	bl	8001e28 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0bc      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	4b61      	ldr	r3, [pc, #388]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCC_OscConfig+0x33a>
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe ffc1 	bl	8001e28 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe ffbd 	bl	8001e28 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0a6      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	4b56      	ldr	r3, [pc, #344]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ee      	bne.n	8002eaa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed2:	4b52      	ldr	r3, [pc, #328]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8092 	beq.w	800300c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee8:	4b4c      	ldr	r3, [pc, #304]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d05c      	beq.n	8002fae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d141      	bne.n	8002f80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efc:	4b48      	ldr	r3, [pc, #288]	; (8003020 <HAL_RCC_OscConfig+0x4dc>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe ff91 	bl	8001e28 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe ff8d 	bl	8001e28 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e078      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	019b      	lsls	r3, r3, #6
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	061b      	lsls	r3, r3, #24
 8002f4c:	4933      	ldr	r1, [pc, #204]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_RCC_OscConfig+0x4dc>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe ff66 	bl	8001e28 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe ff62 	bl	8001e28 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e04d      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x41c>
 8002f7e:	e045      	b.n	800300c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x4dc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe ff4f 	bl	8001e28 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe ff4b 	bl	8001e28 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e036      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x44a>
 8002fac:	e02e      	b.n	800300c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e029      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_RCC_OscConfig+0x4d8>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d115      	bne.n	8003008 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10d      	bne.n	8003008 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000
 800301c:	40023800 	.word	0x40023800
 8003020:	42470060 	.word	0x42470060

08003024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0cc      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d90c      	bls.n	8003060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0b8      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003078:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003082:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800309a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	494d      	ldr	r1, [pc, #308]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d044      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e067      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4934      	ldr	r1, [pc, #208]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe fe88 	bl	8001e28 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe fe84 	bl	8001e28 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e04f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20c      	bcs.n	800316c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e032      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4916      	ldr	r1, [pc, #88]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	490e      	ldr	r1, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031aa:	f000 f821 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80031ae:	4601      	mov	r1, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	fa21 f303 	lsr.w	r3, r1, r3
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fde8 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023c00 	.word	0x40023c00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08005e70 	.word	0x08005e70
 80031e8:	2000012c 	.word	0x2000012c
 80031ec:	20000130 	.word	0x20000130

080031f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	2300      	movs	r3, #0
 8003200:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003206:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_GetSysClockFreq+0x158>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d007      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x32>
 8003212:	2b08      	cmp	r3, #8
 8003214:	d008      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x38>
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 808d 	bne.w	8003336 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b4b      	ldr	r3, [pc, #300]	; (800334c <HAL_RCC_GetSysClockFreq+0x15c>)
 800321e:	60bb      	str	r3, [r7, #8]
       break;
 8003220:	e08c      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003222:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <HAL_RCC_GetSysClockFreq+0x160>)
 8003224:	60bb      	str	r3, [r7, #8]
      break;
 8003226:	e089      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003228:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_GetSysClockFreq+0x158>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003230:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003232:	4b45      	ldr	r3, [pc, #276]	; (8003348 <HAL_RCC_GetSysClockFreq+0x158>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d023      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <HAL_RCC_GetSysClockFreq+0x158>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	f04f 0400 	mov.w	r4, #0
 8003248:	f240 11ff 	movw	r1, #511	; 0x1ff
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	ea03 0501 	and.w	r5, r3, r1
 8003254:	ea04 0602 	and.w	r6, r4, r2
 8003258:	4a3d      	ldr	r2, [pc, #244]	; (8003350 <HAL_RCC_GetSysClockFreq+0x160>)
 800325a:	fb02 f106 	mul.w	r1, r2, r6
 800325e:	2200      	movs	r2, #0
 8003260:	fb02 f205 	mul.w	r2, r2, r5
 8003264:	440a      	add	r2, r1
 8003266:	493a      	ldr	r1, [pc, #232]	; (8003350 <HAL_RCC_GetSysClockFreq+0x160>)
 8003268:	fba5 0101 	umull	r0, r1, r5, r1
 800326c:	1853      	adds	r3, r2, r1
 800326e:	4619      	mov	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 0400 	mov.w	r4, #0
 8003276:	461a      	mov	r2, r3
 8003278:	4623      	mov	r3, r4
 800327a:	f7fd f819 	bl	80002b0 <__aeabi_uldivmod>
 800327e:	4603      	mov	r3, r0
 8003280:	460c      	mov	r4, r1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e049      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_RCC_GetSysClockFreq+0x158>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea03 0501 	and.w	r5, r3, r1
 800329c:	ea04 0602 	and.w	r6, r4, r2
 80032a0:	4629      	mov	r1, r5
 80032a2:	4632      	mov	r2, r6
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0154      	lsls	r4, r2, #5
 80032ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	4619      	mov	r1, r3
 80032b6:	4622      	mov	r2, r4
 80032b8:	1b49      	subs	r1, r1, r5
 80032ba:	eb62 0206 	sbc.w	r2, r2, r6
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	0194      	lsls	r4, r2, #6
 80032c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032cc:	018b      	lsls	r3, r1, #6
 80032ce:	1a5b      	subs	r3, r3, r1
 80032d0:	eb64 0402 	sbc.w	r4, r4, r2
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	00e2      	lsls	r2, r4, #3
 80032de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032e2:	00d9      	lsls	r1, r3, #3
 80032e4:	460b      	mov	r3, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	195b      	adds	r3, r3, r5
 80032ea:	eb44 0406 	adc.w	r4, r4, r6
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	02a2      	lsls	r2, r4, #10
 80032f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032fc:	0299      	lsls	r1, r3, #10
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	4618      	mov	r0, r3
 8003304:	4621      	mov	r1, r4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	461a      	mov	r2, r3
 800330e:	4623      	mov	r3, r4
 8003310:	f7fc ffce 	bl	80002b0 <__aeabi_uldivmod>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0x158>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	3301      	adds	r3, #1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	60bb      	str	r3, [r7, #8]
      break;
 8003334:	e002      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003338:	60bb      	str	r3, [r7, #8]
      break;
 800333a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333c:	68bb      	ldr	r3, [r7, #8]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	00f42400 	.word	0x00f42400
 8003350:	017d7840 	.word	0x017d7840

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	2000012c 	.word	0x2000012c

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4601      	mov	r1, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	08005e80 	.word	0x08005e80

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4a03      	ldr	r2, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08005e80 	.word	0x08005e80

080033bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e056      	b.n	800347c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7fe fab3 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003404:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	ea42 0103 	orr.w	r1, r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	f003 0104 	and.w	r1, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe faba 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fc81 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b088      	sub	sp, #32
 8003522:	af02      	add	r7, sp, #8
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b20      	cmp	r3, #32
 800353c:	f040 8083 	bne.w	8003646 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_Transmit+0x2e>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e07b      	b.n	8003648 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Transmit+0x40>
 800355a:	2302      	movs	r3, #2
 800355c:	e074      	b.n	8003648 <HAL_UART_Transmit+0x12a>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2221      	movs	r2, #33	; 0x21
 8003570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003574:	f7fe fc58 	bl	8001e28 <HAL_GetTick>
 8003578:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	88fa      	ldrh	r2, [r7, #6]
 8003584:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800358e:	e042      	b.n	8003616 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a6:	d122      	bne.n	80035ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 faa0 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e042      	b.n	8003648 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	3302      	adds	r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	e017      	b.n	8003616 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	e013      	b.n	8003616 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa7d 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e01f      	b.n	8003648 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	60ba      	str	r2, [r7, #8]
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1b7      	bne.n	8003590 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fa64 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e006      	b.n	8003648 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	f040 8090 	bne.w	8003792 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_UART_Receive+0x2e>
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e088      	b.n	8003794 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UART_Receive+0x40>
 800368c:	2302      	movs	r3, #2
 800368e:	e081      	b.n	8003794 <HAL_UART_Receive+0x144>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2222      	movs	r2, #34	; 0x22
 80036a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036a6:	f7fe fbbf 	bl	8001e28 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80036c0:	e05c      	b.n	800377c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d8:	d12b      	bne.n	8003732 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2120      	movs	r1, #32
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fa07 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e04f      	b.n	8003794 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10c      	bne.n	800371a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370c:	b29a      	uxth	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3302      	adds	r3, #2
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	e030      	b.n	800377c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	b29a      	uxth	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	e024      	b.n	800377c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2120      	movs	r1, #32
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f9db 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e023      	b.n	8003794 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	60ba      	str	r2, [r7, #8]
 8003760:	b2ca      	uxtb	r2, r1
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e00a      	b.n	800377c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d19d      	bne.n	80036c2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d130      	bne.n	8003818 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_UART_Transmit_IT+0x26>
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e029      	b.n	800381a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_UART_Transmit_IT+0x38>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e022      	b.n	800381a <HAL_UART_Transmit_IT+0x7e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2221      	movs	r2, #33	; 0x21
 80037f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003812:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	4613      	mov	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	d140      	bne.n	80038c2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_UART_Receive_IT+0x26>
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e039      	b.n	80038c4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_UART_Receive_IT+0x38>
 800385a:	2302      	movs	r3, #2
 800385c:	e032      	b.n	80038c4 <HAL_UART_Receive_IT+0x9e>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2222      	movs	r2, #34	; 0x22
 8003882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_UART_IRQHandler+0x52>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9d6 	bl	8003ccc <UART_Receive_IT>
      return;
 8003920:	e0d1      	b.n	8003ac6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80b0 	beq.w	8003a8a <HAL_UART_IRQHandler+0x1ba>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_UART_IRQHandler+0x70>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a5 	beq.w	8003a8a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_UART_IRQHandler+0x90>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_UART_IRQHandler+0xb0>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	f043 0202 	orr.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_UART_IRQHandler+0xd0>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00f      	beq.n	80039ca <HAL_UART_IRQHandler+0xfa>
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_UART_IRQHandler+0xee>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	f043 0208 	orr.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d078      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_UART_IRQHandler+0x11c>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f970 	bl	8003ccc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_UART_IRQHandler+0x144>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d031      	beq.n	8003a78 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8b9 	bl	8003b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d123      	bne.n	8003a70 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a36:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_UART_IRQHandler+0x1fc>)
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fed4 	bl	80027fa <HAL_DMA_Abort_IT>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a62:	4610      	mov	r0, r2
 8003a64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a66:	e00e      	b.n	8003a86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f83b 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	e00a      	b.n	8003a86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f837 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a76:	e006      	b.n	8003a86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f833 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a84:	e01e      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a86:	bf00      	nop
    return;
 8003a88:	e01c      	b.n	8003ac4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x1d6>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8a6 	bl	8003bf0 <UART_Transmit_IT>
    return;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1f6>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8ee 	bl	8003c9c <UART_EndTransmit_IT>
    return;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003ac4:	bf00      	nop
  }
}
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08003bc9 	.word	0x08003bc9

08003ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	e02c      	b.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d028      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b18:	f7fe f986 	bl	8001e28 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d21d      	bcs.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00f      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d0c3      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ba2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff7e 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b21      	cmp	r3, #33	; 0x21
 8003c02:	d144      	bne.n	8003c8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d11a      	bne.n	8003c44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	1c9a      	adds	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]
 8003c36:	e00e      	b.n	8003c56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]
 8003c42:	e008      	b.n	8003c56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	1c59      	adds	r1, r3, #1
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6211      	str	r1, [r2, #32]
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4619      	mov	r1, r3
 8003c64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff07 	bl	8003ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b22      	cmp	r3, #34	; 0x22
 8003cde:	d171      	bne.n	8003dc4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d123      	bne.n	8003d32 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
 8003d14:	e029      	b.n	8003d6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d30:	e01b      	b.n	8003d6a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6858      	ldr	r0, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	1c59      	adds	r1, r3, #1
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6291      	str	r1, [r2, #40]	; 0x28
 8003d4a:	b2c2      	uxtb	r2, r0
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e00c      	b.n	8003d6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	1c58      	adds	r0, r3, #1
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	6288      	str	r0, [r1, #40]	; 0x28
 8003d62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d120      	bne.n	8003dc0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0220 	bic.w	r2, r2, #32
 8003d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fb30 	bl	800141c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e002      	b.n	8003dc6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e12:	f023 030c 	bic.w	r3, r3, #12
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3e:	f040 818b 	bne.w	8004158 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4ac1      	ldr	r2, [pc, #772]	; (800414c <UART_SetConfig+0x37c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d005      	beq.n	8003e58 <UART_SetConfig+0x88>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4abf      	ldr	r2, [pc, #764]	; (8004150 <UART_SetConfig+0x380>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	f040 80bd 	bne.w	8003fd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7ff fa9c 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	461d      	mov	r5, r3
 8003e62:	f04f 0600 	mov.w	r6, #0
 8003e66:	46a8      	mov	r8, r5
 8003e68:	46b1      	mov	r9, r6
 8003e6a:	eb18 0308 	adds.w	r3, r8, r8
 8003e6e:	eb49 0409 	adc.w	r4, r9, r9
 8003e72:	4698      	mov	r8, r3
 8003e74:	46a1      	mov	r9, r4
 8003e76:	eb18 0805 	adds.w	r8, r8, r5
 8003e7a:	eb49 0906 	adc.w	r9, r9, r6
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e92:	4688      	mov	r8, r1
 8003e94:	4691      	mov	r9, r2
 8003e96:	eb18 0005 	adds.w	r0, r8, r5
 8003e9a:	eb49 0106 	adc.w	r1, r9, r6
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	461d      	mov	r5, r3
 8003ea4:	f04f 0600 	mov.w	r6, #0
 8003ea8:	196b      	adds	r3, r5, r5
 8003eaa:	eb46 0406 	adc.w	r4, r6, r6
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4623      	mov	r3, r4
 8003eb2:	f7fc f9fd 	bl	80002b0 <__aeabi_uldivmod>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	460c      	mov	r4, r1
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4ba5      	ldr	r3, [pc, #660]	; (8004154 <UART_SetConfig+0x384>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	461d      	mov	r5, r3
 8003ecc:	f04f 0600 	mov.w	r6, #0
 8003ed0:	46a9      	mov	r9, r5
 8003ed2:	46b2      	mov	sl, r6
 8003ed4:	eb19 0309 	adds.w	r3, r9, r9
 8003ed8:	eb4a 040a 	adc.w	r4, sl, sl
 8003edc:	4699      	mov	r9, r3
 8003ede:	46a2      	mov	sl, r4
 8003ee0:	eb19 0905 	adds.w	r9, r9, r5
 8003ee4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efc:	4689      	mov	r9, r1
 8003efe:	4692      	mov	sl, r2
 8003f00:	eb19 0005 	adds.w	r0, r9, r5
 8003f04:	eb4a 0106 	adc.w	r1, sl, r6
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	f04f 0600 	mov.w	r6, #0
 8003f12:	196b      	adds	r3, r5, r5
 8003f14:	eb46 0406 	adc.w	r4, r6, r6
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	f7fc f9c8 	bl	80002b0 <__aeabi_uldivmod>
 8003f20:	4603      	mov	r3, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b8b      	ldr	r3, [pc, #556]	; (8004154 <UART_SetConfig+0x384>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a86      	ldr	r2, [pc, #536]	; (8004154 <UART_SetConfig+0x384>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f48:	4498      	add	r8, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	f04f 0600 	mov.w	r6, #0
 8003f52:	46a9      	mov	r9, r5
 8003f54:	46b2      	mov	sl, r6
 8003f56:	eb19 0309 	adds.w	r3, r9, r9
 8003f5a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f5e:	4699      	mov	r9, r3
 8003f60:	46a2      	mov	sl, r4
 8003f62:	eb19 0905 	adds.w	r9, r9, r5
 8003f66:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f7e:	4689      	mov	r9, r1
 8003f80:	4692      	mov	sl, r2
 8003f82:	eb19 0005 	adds.w	r0, r9, r5
 8003f86:	eb4a 0106 	adc.w	r1, sl, r6
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	461d      	mov	r5, r3
 8003f90:	f04f 0600 	mov.w	r6, #0
 8003f94:	196b      	adds	r3, r5, r5
 8003f96:	eb46 0406 	adc.w	r4, r6, r6
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4623      	mov	r3, r4
 8003f9e:	f7fc f987 	bl	80002b0 <__aeabi_uldivmod>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b6a      	ldr	r3, [pc, #424]	; (8004154 <UART_SetConfig+0x384>)
 8003faa:	fba3 1302 	umull	r1, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2164      	movs	r1, #100	; 0x64
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a65      	ldr	r2, [pc, #404]	; (8004154 <UART_SetConfig+0x384>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 0207 	and.w	r2, r3, #7
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4442      	add	r2, r8
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	e26f      	b.n	80044b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fd2:	f7ff f9cb 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8003fd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	461d      	mov	r5, r3
 8003fdc:	f04f 0600 	mov.w	r6, #0
 8003fe0:	46a8      	mov	r8, r5
 8003fe2:	46b1      	mov	r9, r6
 8003fe4:	eb18 0308 	adds.w	r3, r8, r8
 8003fe8:	eb49 0409 	adc.w	r4, r9, r9
 8003fec:	4698      	mov	r8, r3
 8003fee:	46a1      	mov	r9, r4
 8003ff0:	eb18 0805 	adds.w	r8, r8, r5
 8003ff4:	eb49 0906 	adc.w	r9, r9, r6
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004004:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004008:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800400c:	4688      	mov	r8, r1
 800400e:	4691      	mov	r9, r2
 8004010:	eb18 0005 	adds.w	r0, r8, r5
 8004014:	eb49 0106 	adc.w	r1, r9, r6
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	461d      	mov	r5, r3
 800401e:	f04f 0600 	mov.w	r6, #0
 8004022:	196b      	adds	r3, r5, r5
 8004024:	eb46 0406 	adc.w	r4, r6, r6
 8004028:	461a      	mov	r2, r3
 800402a:	4623      	mov	r3, r4
 800402c:	f7fc f940 	bl	80002b0 <__aeabi_uldivmod>
 8004030:	4603      	mov	r3, r0
 8004032:	460c      	mov	r4, r1
 8004034:	461a      	mov	r2, r3
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <UART_SetConfig+0x384>)
 8004038:	fba3 2302 	umull	r2, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	461d      	mov	r5, r3
 8004046:	f04f 0600 	mov.w	r6, #0
 800404a:	46a9      	mov	r9, r5
 800404c:	46b2      	mov	sl, r6
 800404e:	eb19 0309 	adds.w	r3, r9, r9
 8004052:	eb4a 040a 	adc.w	r4, sl, sl
 8004056:	4699      	mov	r9, r3
 8004058:	46a2      	mov	sl, r4
 800405a:	eb19 0905 	adds.w	r9, r9, r5
 800405e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004076:	4689      	mov	r9, r1
 8004078:	4692      	mov	sl, r2
 800407a:	eb19 0005 	adds.w	r0, r9, r5
 800407e:	eb4a 0106 	adc.w	r1, sl, r6
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	461d      	mov	r5, r3
 8004088:	f04f 0600 	mov.w	r6, #0
 800408c:	196b      	adds	r3, r5, r5
 800408e:	eb46 0406 	adc.w	r4, r6, r6
 8004092:	461a      	mov	r2, r3
 8004094:	4623      	mov	r3, r4
 8004096:	f7fc f90b 	bl	80002b0 <__aeabi_uldivmod>
 800409a:	4603      	mov	r3, r0
 800409c:	460c      	mov	r4, r1
 800409e:	461a      	mov	r2, r3
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <UART_SetConfig+0x384>)
 80040a2:	fba3 1302 	umull	r1, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2164      	movs	r1, #100	; 0x64
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <UART_SetConfig+0x384>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c2:	4498      	add	r8, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	461d      	mov	r5, r3
 80040c8:	f04f 0600 	mov.w	r6, #0
 80040cc:	46a9      	mov	r9, r5
 80040ce:	46b2      	mov	sl, r6
 80040d0:	eb19 0309 	adds.w	r3, r9, r9
 80040d4:	eb4a 040a 	adc.w	r4, sl, sl
 80040d8:	4699      	mov	r9, r3
 80040da:	46a2      	mov	sl, r4
 80040dc:	eb19 0905 	adds.w	r9, r9, r5
 80040e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f8:	4689      	mov	r9, r1
 80040fa:	4692      	mov	sl, r2
 80040fc:	eb19 0005 	adds.w	r0, r9, r5
 8004100:	eb4a 0106 	adc.w	r1, sl, r6
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	461d      	mov	r5, r3
 800410a:	f04f 0600 	mov.w	r6, #0
 800410e:	196b      	adds	r3, r5, r5
 8004110:	eb46 0406 	adc.w	r4, r6, r6
 8004114:	461a      	mov	r2, r3
 8004116:	4623      	mov	r3, r4
 8004118:	f7fc f8ca 	bl	80002b0 <__aeabi_uldivmod>
 800411c:	4603      	mov	r3, r0
 800411e:	460c      	mov	r4, r1
 8004120:	461a      	mov	r2, r3
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <UART_SetConfig+0x384>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	2164      	movs	r1, #100	; 0x64
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3332      	adds	r3, #50	; 0x32
 8004136:	4a07      	ldr	r2, [pc, #28]	; (8004154 <UART_SetConfig+0x384>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f003 0207 	and.w	r2, r3, #7
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4442      	add	r2, r8
 8004148:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800414a:	e1b2      	b.n	80044b2 <UART_SetConfig+0x6e2>
 800414c:	40011000 	.word	0x40011000
 8004150:	40011400 	.word	0x40011400
 8004154:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4ad7      	ldr	r2, [pc, #860]	; (80044bc <UART_SetConfig+0x6ec>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d005      	beq.n	800416e <UART_SetConfig+0x39e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4ad6      	ldr	r2, [pc, #856]	; (80044c0 <UART_SetConfig+0x6f0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	f040 80d1 	bne.w	8004310 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800416e:	f7ff f911 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8004172:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	469a      	mov	sl, r3
 8004178:	f04f 0b00 	mov.w	fp, #0
 800417c:	46d0      	mov	r8, sl
 800417e:	46d9      	mov	r9, fp
 8004180:	eb18 0308 	adds.w	r3, r8, r8
 8004184:	eb49 0409 	adc.w	r4, r9, r9
 8004188:	4698      	mov	r8, r3
 800418a:	46a1      	mov	r9, r4
 800418c:	eb18 080a 	adds.w	r8, r8, sl
 8004190:	eb49 090b 	adc.w	r9, r9, fp
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041a8:	4688      	mov	r8, r1
 80041aa:	4691      	mov	r9, r2
 80041ac:	eb1a 0508 	adds.w	r5, sl, r8
 80041b0:	eb4b 0609 	adc.w	r6, fp, r9
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	0094      	lsls	r4, r2, #2
 80041c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041cc:	008b      	lsls	r3, r1, #2
 80041ce:	461a      	mov	r2, r3
 80041d0:	4623      	mov	r3, r4
 80041d2:	4628      	mov	r0, r5
 80041d4:	4631      	mov	r1, r6
 80041d6:	f7fc f86b 	bl	80002b0 <__aeabi_uldivmod>
 80041da:	4603      	mov	r3, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	461a      	mov	r2, r3
 80041e0:	4bb8      	ldr	r3, [pc, #736]	; (80044c4 <UART_SetConfig+0x6f4>)
 80041e2:	fba3 2302 	umull	r2, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	469b      	mov	fp, r3
 80041f0:	f04f 0c00 	mov.w	ip, #0
 80041f4:	46d9      	mov	r9, fp
 80041f6:	46e2      	mov	sl, ip
 80041f8:	eb19 0309 	adds.w	r3, r9, r9
 80041fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004200:	4699      	mov	r9, r3
 8004202:	46a2      	mov	sl, r4
 8004204:	eb19 090b 	adds.w	r9, r9, fp
 8004208:	eb4a 0a0c 	adc.w	sl, sl, ip
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800421c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004220:	4689      	mov	r9, r1
 8004222:	4692      	mov	sl, r2
 8004224:	eb1b 0509 	adds.w	r5, fp, r9
 8004228:	eb4c 060a 	adc.w	r6, ip, sl
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	0094      	lsls	r4, r2, #2
 8004240:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004244:	008b      	lsls	r3, r1, #2
 8004246:	461a      	mov	r2, r3
 8004248:	4623      	mov	r3, r4
 800424a:	4628      	mov	r0, r5
 800424c:	4631      	mov	r1, r6
 800424e:	f7fc f82f 	bl	80002b0 <__aeabi_uldivmod>
 8004252:	4603      	mov	r3, r0
 8004254:	460c      	mov	r4, r1
 8004256:	461a      	mov	r2, r3
 8004258:	4b9a      	ldr	r3, [pc, #616]	; (80044c4 <UART_SetConfig+0x6f4>)
 800425a:	fba3 1302 	umull	r1, r3, r3, r2
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2164      	movs	r1, #100	; 0x64
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	3332      	adds	r3, #50	; 0x32
 800426c:	4a95      	ldr	r2, [pc, #596]	; (80044c4 <UART_SetConfig+0x6f4>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004278:	4498      	add	r8, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	469b      	mov	fp, r3
 800427e:	f04f 0c00 	mov.w	ip, #0
 8004282:	46d9      	mov	r9, fp
 8004284:	46e2      	mov	sl, ip
 8004286:	eb19 0309 	adds.w	r3, r9, r9
 800428a:	eb4a 040a 	adc.w	r4, sl, sl
 800428e:	4699      	mov	r9, r3
 8004290:	46a2      	mov	sl, r4
 8004292:	eb19 090b 	adds.w	r9, r9, fp
 8004296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ae:	4689      	mov	r9, r1
 80042b0:	4692      	mov	sl, r2
 80042b2:	eb1b 0509 	adds.w	r5, fp, r9
 80042b6:	eb4c 060a 	adc.w	r6, ip, sl
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f04f 0400 	mov.w	r4, #0
 80042cc:	0094      	lsls	r4, r2, #2
 80042ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d2:	008b      	lsls	r3, r1, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	4631      	mov	r1, r6
 80042dc:	f7fb ffe8 	bl	80002b0 <__aeabi_uldivmod>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b77      	ldr	r3, [pc, #476]	; (80044c4 <UART_SetConfig+0x6f4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a72      	ldr	r2, [pc, #456]	; (80044c4 <UART_SetConfig+0x6f4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 020f 	and.w	r2, r3, #15
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4442      	add	r2, r8
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	e0d0      	b.n	80044b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7ff f82c 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8004314:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	469a      	mov	sl, r3
 800431a:	f04f 0b00 	mov.w	fp, #0
 800431e:	46d0      	mov	r8, sl
 8004320:	46d9      	mov	r9, fp
 8004322:	eb18 0308 	adds.w	r3, r8, r8
 8004326:	eb49 0409 	adc.w	r4, r9, r9
 800432a:	4698      	mov	r8, r3
 800432c:	46a1      	mov	r9, r4
 800432e:	eb18 080a 	adds.w	r8, r8, sl
 8004332:	eb49 090b 	adc.w	r9, r9, fp
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004342:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004346:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800434a:	4688      	mov	r8, r1
 800434c:	4691      	mov	r9, r2
 800434e:	eb1a 0508 	adds.w	r5, sl, r8
 8004352:	eb4b 0609 	adc.w	r6, fp, r9
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4619      	mov	r1, r3
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0094      	lsls	r4, r2, #2
 800436a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	461a      	mov	r2, r3
 8004372:	4623      	mov	r3, r4
 8004374:	4628      	mov	r0, r5
 8004376:	4631      	mov	r1, r6
 8004378:	f7fb ff9a 	bl	80002b0 <__aeabi_uldivmod>
 800437c:	4603      	mov	r3, r0
 800437e:	460c      	mov	r4, r1
 8004380:	461a      	mov	r2, r3
 8004382:	4b50      	ldr	r3, [pc, #320]	; (80044c4 <UART_SetConfig+0x6f4>)
 8004384:	fba3 2302 	umull	r2, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	469b      	mov	fp, r3
 8004392:	f04f 0c00 	mov.w	ip, #0
 8004396:	46d9      	mov	r9, fp
 8004398:	46e2      	mov	sl, ip
 800439a:	eb19 0309 	adds.w	r3, r9, r9
 800439e:	eb4a 040a 	adc.w	r4, sl, sl
 80043a2:	4699      	mov	r9, r3
 80043a4:	46a2      	mov	sl, r4
 80043a6:	eb19 090b 	adds.w	r9, r9, fp
 80043aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c2:	4689      	mov	r9, r1
 80043c4:	4692      	mov	sl, r2
 80043c6:	eb1b 0509 	adds.w	r5, fp, r9
 80043ca:	eb4c 060a 	adc.w	r6, ip, sl
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4619      	mov	r1, r3
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	0094      	lsls	r4, r2, #2
 80043e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043e6:	008b      	lsls	r3, r1, #2
 80043e8:	461a      	mov	r2, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	4628      	mov	r0, r5
 80043ee:	4631      	mov	r1, r6
 80043f0:	f7fb ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80043f4:	4603      	mov	r3, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <UART_SetConfig+0x6f4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	; 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	; 0x32
 800440e:	4a2d      	ldr	r2, [pc, #180]	; (80044c4 <UART_SetConfig+0x6f4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441a:	4498      	add	r8, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	469b      	mov	fp, r3
 8004420:	f04f 0c00 	mov.w	ip, #0
 8004424:	46d9      	mov	r9, fp
 8004426:	46e2      	mov	sl, ip
 8004428:	eb19 0309 	adds.w	r3, r9, r9
 800442c:	eb4a 040a 	adc.w	r4, sl, sl
 8004430:	4699      	mov	r9, r3
 8004432:	46a2      	mov	sl, r4
 8004434:	eb19 090b 	adds.w	r9, r9, fp
 8004438:	eb4a 0a0c 	adc.w	sl, sl, ip
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004448:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800444c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004450:	4689      	mov	r9, r1
 8004452:	4692      	mov	sl, r2
 8004454:	eb1b 0509 	adds.w	r5, fp, r9
 8004458:	eb4c 060a 	adc.w	r6, ip, sl
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4619      	mov	r1, r3
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	f04f 0400 	mov.w	r4, #0
 800446e:	0094      	lsls	r4, r2, #2
 8004470:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004474:	008b      	lsls	r3, r1, #2
 8004476:	461a      	mov	r2, r3
 8004478:	4623      	mov	r3, r4
 800447a:	4628      	mov	r0, r5
 800447c:	4631      	mov	r1, r6
 800447e:	f7fb ff17 	bl	80002b0 <__aeabi_uldivmod>
 8004482:	4603      	mov	r3, r0
 8004484:	460c      	mov	r4, r1
 8004486:	461a      	mov	r2, r3
 8004488:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <UART_SetConfig+0x6f4>)
 800448a:	fba3 1302 	umull	r1, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2164      	movs	r1, #100	; 0x64
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	3332      	adds	r3, #50	; 0x32
 800449c:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <UART_SetConfig+0x6f4>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4442      	add	r2, r8
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	e7ff      	b.n	80044b2 <UART_SetConfig+0x6e2>
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	51eb851f 	.word	0x51eb851f

080044c8 <__errno>:
 80044c8:	4b01      	ldr	r3, [pc, #4]	; (80044d0 <__errno+0x8>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000138 	.word	0x20000138

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4e0d      	ldr	r6, [pc, #52]	; (800450c <__libc_init_array+0x38>)
 80044d8:	4c0d      	ldr	r4, [pc, #52]	; (8004510 <__libc_init_array+0x3c>)
 80044da:	1ba4      	subs	r4, r4, r6
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	2500      	movs	r5, #0
 80044e0:	42a5      	cmp	r5, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	4e0b      	ldr	r6, [pc, #44]	; (8004514 <__libc_init_array+0x40>)
 80044e6:	4c0c      	ldr	r4, [pc, #48]	; (8004518 <__libc_init_array+0x44>)
 80044e8:	f001 f95e 	bl	80057a8 <_init>
 80044ec:	1ba4      	subs	r4, r4, r6
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	2500      	movs	r5, #0
 80044f2:	42a5      	cmp	r5, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044fc:	4798      	blx	r3
 80044fe:	3501      	adds	r5, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004506:	4798      	blx	r3
 8004508:	3501      	adds	r5, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	08005f28 	.word	0x08005f28
 8004510:	08005f28 	.word	0x08005f28
 8004514:	08005f28 	.word	0x08005f28
 8004518:	08005f2c 	.word	0x08005f2c

0800451c <memset>:
 800451c:	4402      	add	r2, r0
 800451e:	4603      	mov	r3, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <iprintf>:
 800452c:	b40f      	push	{r0, r1, r2, r3}
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <iprintf+0x2c>)
 8004530:	b513      	push	{r0, r1, r4, lr}
 8004532:	681c      	ldr	r4, [r3, #0]
 8004534:	b124      	cbz	r4, 8004540 <iprintf+0x14>
 8004536:	69a3      	ldr	r3, [r4, #24]
 8004538:	b913      	cbnz	r3, 8004540 <iprintf+0x14>
 800453a:	4620      	mov	r0, r4
 800453c:	f000 fa74 	bl	8004a28 <__sinit>
 8004540:	ab05      	add	r3, sp, #20
 8004542:	9a04      	ldr	r2, [sp, #16]
 8004544:	68a1      	ldr	r1, [r4, #8]
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	4620      	mov	r0, r4
 800454a:	f000 fd7f 	bl	800504c <_vfiprintf_r>
 800454e:	b002      	add	sp, #8
 8004550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004554:	b004      	add	sp, #16
 8004556:	4770      	bx	lr
 8004558:	20000138 	.word	0x20000138

0800455c <_puts_r>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	460e      	mov	r6, r1
 8004560:	4605      	mov	r5, r0
 8004562:	b118      	cbz	r0, 800456c <_puts_r+0x10>
 8004564:	6983      	ldr	r3, [r0, #24]
 8004566:	b90b      	cbnz	r3, 800456c <_puts_r+0x10>
 8004568:	f000 fa5e 	bl	8004a28 <__sinit>
 800456c:	69ab      	ldr	r3, [r5, #24]
 800456e:	68ac      	ldr	r4, [r5, #8]
 8004570:	b913      	cbnz	r3, 8004578 <_puts_r+0x1c>
 8004572:	4628      	mov	r0, r5
 8004574:	f000 fa58 	bl	8004a28 <__sinit>
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <_puts_r+0xac>)
 800457a:	429c      	cmp	r4, r3
 800457c:	d117      	bne.n	80045ae <_puts_r+0x52>
 800457e:	686c      	ldr	r4, [r5, #4]
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	071b      	lsls	r3, r3, #28
 8004584:	d51d      	bpl.n	80045c2 <_puts_r+0x66>
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b1db      	cbz	r3, 80045c2 <_puts_r+0x66>
 800458a:	3e01      	subs	r6, #1
 800458c:	68a3      	ldr	r3, [r4, #8]
 800458e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004592:	3b01      	subs	r3, #1
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	b9e9      	cbnz	r1, 80045d4 <_puts_r+0x78>
 8004598:	2b00      	cmp	r3, #0
 800459a:	da2e      	bge.n	80045fa <_puts_r+0x9e>
 800459c:	4622      	mov	r2, r4
 800459e:	210a      	movs	r1, #10
 80045a0:	4628      	mov	r0, r5
 80045a2:	f000 f891 	bl	80046c8 <__swbuf_r>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d011      	beq.n	80045ce <_puts_r+0x72>
 80045aa:	200a      	movs	r0, #10
 80045ac:	e011      	b.n	80045d2 <_puts_r+0x76>
 80045ae:	4b17      	ldr	r3, [pc, #92]	; (800460c <_puts_r+0xb0>)
 80045b0:	429c      	cmp	r4, r3
 80045b2:	d101      	bne.n	80045b8 <_puts_r+0x5c>
 80045b4:	68ac      	ldr	r4, [r5, #8]
 80045b6:	e7e3      	b.n	8004580 <_puts_r+0x24>
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <_puts_r+0xb4>)
 80045ba:	429c      	cmp	r4, r3
 80045bc:	bf08      	it	eq
 80045be:	68ec      	ldreq	r4, [r5, #12]
 80045c0:	e7de      	b.n	8004580 <_puts_r+0x24>
 80045c2:	4621      	mov	r1, r4
 80045c4:	4628      	mov	r0, r5
 80045c6:	f000 f8d1 	bl	800476c <__swsetup_r>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0dd      	beq.n	800458a <_puts_r+0x2e>
 80045ce:	f04f 30ff 	mov.w	r0, #4294967295
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	da04      	bge.n	80045e2 <_puts_r+0x86>
 80045d8:	69a2      	ldr	r2, [r4, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	dc06      	bgt.n	80045ec <_puts_r+0x90>
 80045de:	290a      	cmp	r1, #10
 80045e0:	d004      	beq.n	80045ec <_puts_r+0x90>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	7019      	strb	r1, [r3, #0]
 80045ea:	e7cf      	b.n	800458c <_puts_r+0x30>
 80045ec:	4622      	mov	r2, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f86a 	bl	80046c8 <__swbuf_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d1c9      	bne.n	800458c <_puts_r+0x30>
 80045f8:	e7e9      	b.n	80045ce <_puts_r+0x72>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	200a      	movs	r0, #10
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	6022      	str	r2, [r4, #0]
 8004602:	7018      	strb	r0, [r3, #0]
 8004604:	e7e5      	b.n	80045d2 <_puts_r+0x76>
 8004606:	bf00      	nop
 8004608:	08005eac 	.word	0x08005eac
 800460c:	08005ecc 	.word	0x08005ecc
 8004610:	08005e8c 	.word	0x08005e8c

08004614 <puts>:
 8004614:	4b02      	ldr	r3, [pc, #8]	; (8004620 <puts+0xc>)
 8004616:	4601      	mov	r1, r0
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	f7ff bf9f 	b.w	800455c <_puts_r>
 800461e:	bf00      	nop
 8004620:	20000138 	.word	0x20000138

08004624 <siprintf>:
 8004624:	b40e      	push	{r1, r2, r3}
 8004626:	b500      	push	{lr}
 8004628:	b09c      	sub	sp, #112	; 0x70
 800462a:	ab1d      	add	r3, sp, #116	; 0x74
 800462c:	9002      	str	r0, [sp, #8]
 800462e:	9006      	str	r0, [sp, #24]
 8004630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004634:	4809      	ldr	r0, [pc, #36]	; (800465c <siprintf+0x38>)
 8004636:	9107      	str	r1, [sp, #28]
 8004638:	9104      	str	r1, [sp, #16]
 800463a:	4909      	ldr	r1, [pc, #36]	; (8004660 <siprintf+0x3c>)
 800463c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004640:	9105      	str	r1, [sp, #20]
 8004642:	6800      	ldr	r0, [r0, #0]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	a902      	add	r1, sp, #8
 8004648:	f000 fbde 	bl	8004e08 <_svfiprintf_r>
 800464c:	9b02      	ldr	r3, [sp, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	b01c      	add	sp, #112	; 0x70
 8004654:	f85d eb04 	ldr.w	lr, [sp], #4
 8004658:	b003      	add	sp, #12
 800465a:	4770      	bx	lr
 800465c:	20000138 	.word	0x20000138
 8004660:	ffff0208 	.word	0xffff0208

08004664 <strcat>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4603      	mov	r3, r0
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	1c5c      	adds	r4, r3, #1
 800466c:	b93a      	cbnz	r2, 800467e <strcat+0x1a>
 800466e:	3b01      	subs	r3, #1
 8004670:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004674:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004678:	2a00      	cmp	r2, #0
 800467a:	d1f9      	bne.n	8004670 <strcat+0xc>
 800467c:	bd10      	pop	{r4, pc}
 800467e:	4623      	mov	r3, r4
 8004680:	e7f2      	b.n	8004668 <strcat+0x4>

08004682 <strcpy>:
 8004682:	4603      	mov	r3, r0
 8004684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004688:	f803 2b01 	strb.w	r2, [r3], #1
 800468c:	2a00      	cmp	r2, #0
 800468e:	d1f9      	bne.n	8004684 <strcpy+0x2>
 8004690:	4770      	bx	lr

08004692 <strstr>:
 8004692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004694:	7803      	ldrb	r3, [r0, #0]
 8004696:	b17b      	cbz	r3, 80046b8 <strstr+0x26>
 8004698:	4604      	mov	r4, r0
 800469a:	7823      	ldrb	r3, [r4, #0]
 800469c:	4620      	mov	r0, r4
 800469e:	1c66      	adds	r6, r4, #1
 80046a0:	b17b      	cbz	r3, 80046c2 <strstr+0x30>
 80046a2:	1e4a      	subs	r2, r1, #1
 80046a4:	1e63      	subs	r3, r4, #1
 80046a6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80046aa:	b14d      	cbz	r5, 80046c0 <strstr+0x2e>
 80046ac:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80046b0:	42af      	cmp	r7, r5
 80046b2:	4634      	mov	r4, r6
 80046b4:	d0f7      	beq.n	80046a6 <strstr+0x14>
 80046b6:	e7f0      	b.n	800469a <strstr+0x8>
 80046b8:	780b      	ldrb	r3, [r1, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf18      	it	ne
 80046be:	2000      	movne	r0, #0
 80046c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c2:	4618      	mov	r0, r3
 80046c4:	e7fc      	b.n	80046c0 <strstr+0x2e>
	...

080046c8 <__swbuf_r>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	460e      	mov	r6, r1
 80046cc:	4614      	mov	r4, r2
 80046ce:	4605      	mov	r5, r0
 80046d0:	b118      	cbz	r0, 80046da <__swbuf_r+0x12>
 80046d2:	6983      	ldr	r3, [r0, #24]
 80046d4:	b90b      	cbnz	r3, 80046da <__swbuf_r+0x12>
 80046d6:	f000 f9a7 	bl	8004a28 <__sinit>
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <__swbuf_r+0x98>)
 80046dc:	429c      	cmp	r4, r3
 80046de:	d12a      	bne.n	8004736 <__swbuf_r+0x6e>
 80046e0:	686c      	ldr	r4, [r5, #4]
 80046e2:	69a3      	ldr	r3, [r4, #24]
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	071a      	lsls	r2, r3, #28
 80046ea:	d52e      	bpl.n	800474a <__swbuf_r+0x82>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	b363      	cbz	r3, 800474a <__swbuf_r+0x82>
 80046f0:	6923      	ldr	r3, [r4, #16]
 80046f2:	6820      	ldr	r0, [r4, #0]
 80046f4:	1ac0      	subs	r0, r0, r3
 80046f6:	6963      	ldr	r3, [r4, #20]
 80046f8:	b2f6      	uxtb	r6, r6
 80046fa:	4283      	cmp	r3, r0
 80046fc:	4637      	mov	r7, r6
 80046fe:	dc04      	bgt.n	800470a <__swbuf_r+0x42>
 8004700:	4621      	mov	r1, r4
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f926 	bl	8004954 <_fflush_r>
 8004708:	bb28      	cbnz	r0, 8004756 <__swbuf_r+0x8e>
 800470a:	68a3      	ldr	r3, [r4, #8]
 800470c:	3b01      	subs	r3, #1
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	701e      	strb	r6, [r3, #0]
 8004718:	6963      	ldr	r3, [r4, #20]
 800471a:	3001      	adds	r0, #1
 800471c:	4283      	cmp	r3, r0
 800471e:	d004      	beq.n	800472a <__swbuf_r+0x62>
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	07db      	lsls	r3, r3, #31
 8004724:	d519      	bpl.n	800475a <__swbuf_r+0x92>
 8004726:	2e0a      	cmp	r6, #10
 8004728:	d117      	bne.n	800475a <__swbuf_r+0x92>
 800472a:	4621      	mov	r1, r4
 800472c:	4628      	mov	r0, r5
 800472e:	f000 f911 	bl	8004954 <_fflush_r>
 8004732:	b190      	cbz	r0, 800475a <__swbuf_r+0x92>
 8004734:	e00f      	b.n	8004756 <__swbuf_r+0x8e>
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <__swbuf_r+0x9c>)
 8004738:	429c      	cmp	r4, r3
 800473a:	d101      	bne.n	8004740 <__swbuf_r+0x78>
 800473c:	68ac      	ldr	r4, [r5, #8]
 800473e:	e7d0      	b.n	80046e2 <__swbuf_r+0x1a>
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <__swbuf_r+0xa0>)
 8004742:	429c      	cmp	r4, r3
 8004744:	bf08      	it	eq
 8004746:	68ec      	ldreq	r4, [r5, #12]
 8004748:	e7cb      	b.n	80046e2 <__swbuf_r+0x1a>
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 f80d 	bl	800476c <__swsetup_r>
 8004752:	2800      	cmp	r0, #0
 8004754:	d0cc      	beq.n	80046f0 <__swbuf_r+0x28>
 8004756:	f04f 37ff 	mov.w	r7, #4294967295
 800475a:	4638      	mov	r0, r7
 800475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475e:	bf00      	nop
 8004760:	08005eac 	.word	0x08005eac
 8004764:	08005ecc 	.word	0x08005ecc
 8004768:	08005e8c 	.word	0x08005e8c

0800476c <__swsetup_r>:
 800476c:	4b32      	ldr	r3, [pc, #200]	; (8004838 <__swsetup_r+0xcc>)
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	681d      	ldr	r5, [r3, #0]
 8004772:	4606      	mov	r6, r0
 8004774:	460c      	mov	r4, r1
 8004776:	b125      	cbz	r5, 8004782 <__swsetup_r+0x16>
 8004778:	69ab      	ldr	r3, [r5, #24]
 800477a:	b913      	cbnz	r3, 8004782 <__swsetup_r+0x16>
 800477c:	4628      	mov	r0, r5
 800477e:	f000 f953 	bl	8004a28 <__sinit>
 8004782:	4b2e      	ldr	r3, [pc, #184]	; (800483c <__swsetup_r+0xd0>)
 8004784:	429c      	cmp	r4, r3
 8004786:	d10f      	bne.n	80047a8 <__swsetup_r+0x3c>
 8004788:	686c      	ldr	r4, [r5, #4]
 800478a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800478e:	b29a      	uxth	r2, r3
 8004790:	0715      	lsls	r5, r2, #28
 8004792:	d42c      	bmi.n	80047ee <__swsetup_r+0x82>
 8004794:	06d0      	lsls	r0, r2, #27
 8004796:	d411      	bmi.n	80047bc <__swsetup_r+0x50>
 8004798:	2209      	movs	r2, #9
 800479a:	6032      	str	r2, [r6, #0]
 800479c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	f04f 30ff 	mov.w	r0, #4294967295
 80047a6:	e03e      	b.n	8004826 <__swsetup_r+0xba>
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <__swsetup_r+0xd4>)
 80047aa:	429c      	cmp	r4, r3
 80047ac:	d101      	bne.n	80047b2 <__swsetup_r+0x46>
 80047ae:	68ac      	ldr	r4, [r5, #8]
 80047b0:	e7eb      	b.n	800478a <__swsetup_r+0x1e>
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <__swsetup_r+0xd8>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	bf08      	it	eq
 80047b8:	68ec      	ldreq	r4, [r5, #12]
 80047ba:	e7e6      	b.n	800478a <__swsetup_r+0x1e>
 80047bc:	0751      	lsls	r1, r2, #29
 80047be:	d512      	bpl.n	80047e6 <__swsetup_r+0x7a>
 80047c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047c2:	b141      	cbz	r1, 80047d6 <__swsetup_r+0x6a>
 80047c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047c8:	4299      	cmp	r1, r3
 80047ca:	d002      	beq.n	80047d2 <__swsetup_r+0x66>
 80047cc:	4630      	mov	r0, r6
 80047ce:	f000 fa19 	bl	8004c04 <_free_r>
 80047d2:	2300      	movs	r3, #0
 80047d4:	6363      	str	r3, [r4, #52]	; 0x34
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	2300      	movs	r3, #0
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	b94b      	cbnz	r3, 8004806 <__swsetup_r+0x9a>
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fc:	d003      	beq.n	8004806 <__swsetup_r+0x9a>
 80047fe:	4621      	mov	r1, r4
 8004800:	4630      	mov	r0, r6
 8004802:	f000 f9bf 	bl	8004b84 <__smakebuf_r>
 8004806:	89a2      	ldrh	r2, [r4, #12]
 8004808:	f012 0301 	ands.w	r3, r2, #1
 800480c:	d00c      	beq.n	8004828 <__swsetup_r+0xbc>
 800480e:	2300      	movs	r3, #0
 8004810:	60a3      	str	r3, [r4, #8]
 8004812:	6963      	ldr	r3, [r4, #20]
 8004814:	425b      	negs	r3, r3
 8004816:	61a3      	str	r3, [r4, #24]
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	b953      	cbnz	r3, 8004832 <__swsetup_r+0xc6>
 800481c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004820:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004824:	d1ba      	bne.n	800479c <__swsetup_r+0x30>
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	0792      	lsls	r2, r2, #30
 800482a:	bf58      	it	pl
 800482c:	6963      	ldrpl	r3, [r4, #20]
 800482e:	60a3      	str	r3, [r4, #8]
 8004830:	e7f2      	b.n	8004818 <__swsetup_r+0xac>
 8004832:	2000      	movs	r0, #0
 8004834:	e7f7      	b.n	8004826 <__swsetup_r+0xba>
 8004836:	bf00      	nop
 8004838:	20000138 	.word	0x20000138
 800483c:	08005eac 	.word	0x08005eac
 8004840:	08005ecc 	.word	0x08005ecc
 8004844:	08005e8c 	.word	0x08005e8c

08004848 <__sflush_r>:
 8004848:	898a      	ldrh	r2, [r1, #12]
 800484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	0710      	lsls	r0, r2, #28
 8004852:	460c      	mov	r4, r1
 8004854:	d458      	bmi.n	8004908 <__sflush_r+0xc0>
 8004856:	684b      	ldr	r3, [r1, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	dc05      	bgt.n	8004868 <__sflush_r+0x20>
 800485c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	dc02      	bgt.n	8004868 <__sflush_r+0x20>
 8004862:	2000      	movs	r0, #0
 8004864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800486a:	2e00      	cmp	r6, #0
 800486c:	d0f9      	beq.n	8004862 <__sflush_r+0x1a>
 800486e:	2300      	movs	r3, #0
 8004870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004874:	682f      	ldr	r7, [r5, #0]
 8004876:	6a21      	ldr	r1, [r4, #32]
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	d032      	beq.n	80048e2 <__sflush_r+0x9a>
 800487c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	075a      	lsls	r2, r3, #29
 8004882:	d505      	bpl.n	8004890 <__sflush_r+0x48>
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	1ac0      	subs	r0, r0, r3
 8004888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800488a:	b10b      	cbz	r3, 8004890 <__sflush_r+0x48>
 800488c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800488e:	1ac0      	subs	r0, r0, r3
 8004890:	2300      	movs	r3, #0
 8004892:	4602      	mov	r2, r0
 8004894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004896:	6a21      	ldr	r1, [r4, #32]
 8004898:	4628      	mov	r0, r5
 800489a:	47b0      	blx	r6
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	d106      	bne.n	80048b0 <__sflush_r+0x68>
 80048a2:	6829      	ldr	r1, [r5, #0]
 80048a4:	291d      	cmp	r1, #29
 80048a6:	d848      	bhi.n	800493a <__sflush_r+0xf2>
 80048a8:	4a29      	ldr	r2, [pc, #164]	; (8004950 <__sflush_r+0x108>)
 80048aa:	40ca      	lsrs	r2, r1
 80048ac:	07d6      	lsls	r6, r2, #31
 80048ae:	d544      	bpl.n	800493a <__sflush_r+0xf2>
 80048b0:	2200      	movs	r2, #0
 80048b2:	6062      	str	r2, [r4, #4]
 80048b4:	04d9      	lsls	r1, r3, #19
 80048b6:	6922      	ldr	r2, [r4, #16]
 80048b8:	6022      	str	r2, [r4, #0]
 80048ba:	d504      	bpl.n	80048c6 <__sflush_r+0x7e>
 80048bc:	1c42      	adds	r2, r0, #1
 80048be:	d101      	bne.n	80048c4 <__sflush_r+0x7c>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b903      	cbnz	r3, 80048c6 <__sflush_r+0x7e>
 80048c4:	6560      	str	r0, [r4, #84]	; 0x54
 80048c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c8:	602f      	str	r7, [r5, #0]
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d0c9      	beq.n	8004862 <__sflush_r+0x1a>
 80048ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d2:	4299      	cmp	r1, r3
 80048d4:	d002      	beq.n	80048dc <__sflush_r+0x94>
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f994 	bl	8004c04 <_free_r>
 80048dc:	2000      	movs	r0, #0
 80048de:	6360      	str	r0, [r4, #52]	; 0x34
 80048e0:	e7c0      	b.n	8004864 <__sflush_r+0x1c>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b0      	blx	r6
 80048e8:	1c41      	adds	r1, r0, #1
 80048ea:	d1c8      	bne.n	800487e <__sflush_r+0x36>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0c5      	beq.n	800487e <__sflush_r+0x36>
 80048f2:	2b1d      	cmp	r3, #29
 80048f4:	d001      	beq.n	80048fa <__sflush_r+0xb2>
 80048f6:	2b16      	cmp	r3, #22
 80048f8:	d101      	bne.n	80048fe <__sflush_r+0xb6>
 80048fa:	602f      	str	r7, [r5, #0]
 80048fc:	e7b1      	b.n	8004862 <__sflush_r+0x1a>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	e7ad      	b.n	8004864 <__sflush_r+0x1c>
 8004908:	690f      	ldr	r7, [r1, #16]
 800490a:	2f00      	cmp	r7, #0
 800490c:	d0a9      	beq.n	8004862 <__sflush_r+0x1a>
 800490e:	0793      	lsls	r3, r2, #30
 8004910:	680e      	ldr	r6, [r1, #0]
 8004912:	bf08      	it	eq
 8004914:	694b      	ldreq	r3, [r1, #20]
 8004916:	600f      	str	r7, [r1, #0]
 8004918:	bf18      	it	ne
 800491a:	2300      	movne	r3, #0
 800491c:	eba6 0807 	sub.w	r8, r6, r7
 8004920:	608b      	str	r3, [r1, #8]
 8004922:	f1b8 0f00 	cmp.w	r8, #0
 8004926:	dd9c      	ble.n	8004862 <__sflush_r+0x1a>
 8004928:	4643      	mov	r3, r8
 800492a:	463a      	mov	r2, r7
 800492c:	6a21      	ldr	r1, [r4, #32]
 800492e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004930:	4628      	mov	r0, r5
 8004932:	47b0      	blx	r6
 8004934:	2800      	cmp	r0, #0
 8004936:	dc06      	bgt.n	8004946 <__sflush_r+0xfe>
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	e78e      	b.n	8004864 <__sflush_r+0x1c>
 8004946:	4407      	add	r7, r0
 8004948:	eba8 0800 	sub.w	r8, r8, r0
 800494c:	e7e9      	b.n	8004922 <__sflush_r+0xda>
 800494e:	bf00      	nop
 8004950:	20400001 	.word	0x20400001

08004954 <_fflush_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	4605      	mov	r5, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b1db      	cbz	r3, 8004996 <_fflush_r+0x42>
 800495e:	b118      	cbz	r0, 8004968 <_fflush_r+0x14>
 8004960:	6983      	ldr	r3, [r0, #24]
 8004962:	b90b      	cbnz	r3, 8004968 <_fflush_r+0x14>
 8004964:	f000 f860 	bl	8004a28 <__sinit>
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <_fflush_r+0x48>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d109      	bne.n	8004982 <_fflush_r+0x2e>
 800496e:	686c      	ldr	r4, [r5, #4]
 8004970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004974:	b17b      	cbz	r3, 8004996 <_fflush_r+0x42>
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800497e:	f7ff bf63 	b.w	8004848 <__sflush_r>
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <_fflush_r+0x4c>)
 8004984:	429c      	cmp	r4, r3
 8004986:	d101      	bne.n	800498c <_fflush_r+0x38>
 8004988:	68ac      	ldr	r4, [r5, #8]
 800498a:	e7f1      	b.n	8004970 <_fflush_r+0x1c>
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <_fflush_r+0x50>)
 800498e:	429c      	cmp	r4, r3
 8004990:	bf08      	it	eq
 8004992:	68ec      	ldreq	r4, [r5, #12]
 8004994:	e7ec      	b.n	8004970 <_fflush_r+0x1c>
 8004996:	2000      	movs	r0, #0
 8004998:	bd38      	pop	{r3, r4, r5, pc}
 800499a:	bf00      	nop
 800499c:	08005eac 	.word	0x08005eac
 80049a0:	08005ecc 	.word	0x08005ecc
 80049a4:	08005e8c 	.word	0x08005e8c

080049a8 <std>:
 80049a8:	2300      	movs	r3, #0
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	e9c0 3300 	strd	r3, r3, [r0]
 80049b2:	6083      	str	r3, [r0, #8]
 80049b4:	8181      	strh	r1, [r0, #12]
 80049b6:	6643      	str	r3, [r0, #100]	; 0x64
 80049b8:	81c2      	strh	r2, [r0, #14]
 80049ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049be:	6183      	str	r3, [r0, #24]
 80049c0:	4619      	mov	r1, r3
 80049c2:	2208      	movs	r2, #8
 80049c4:	305c      	adds	r0, #92	; 0x5c
 80049c6:	f7ff fda9 	bl	800451c <memset>
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <std+0x38>)
 80049cc:	6263      	str	r3, [r4, #36]	; 0x24
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <std+0x3c>)
 80049d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <std+0x40>)
 80049d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x44>)
 80049d8:	6224      	str	r4, [r4, #32]
 80049da:	6323      	str	r3, [r4, #48]	; 0x30
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	080055a9 	.word	0x080055a9
 80049e4:	080055cb 	.word	0x080055cb
 80049e8:	08005603 	.word	0x08005603
 80049ec:	08005627 	.word	0x08005627

080049f0 <_cleanup_r>:
 80049f0:	4901      	ldr	r1, [pc, #4]	; (80049f8 <_cleanup_r+0x8>)
 80049f2:	f000 b885 	b.w	8004b00 <_fwalk_reent>
 80049f6:	bf00      	nop
 80049f8:	08004955 	.word	0x08004955

080049fc <__sfmoreglue>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	1e4a      	subs	r2, r1, #1
 8004a00:	2568      	movs	r5, #104	; 0x68
 8004a02:	4355      	muls	r5, r2
 8004a04:	460e      	mov	r6, r1
 8004a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a0a:	f000 f949 	bl	8004ca0 <_malloc_r>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	b140      	cbz	r0, 8004a24 <__sfmoreglue+0x28>
 8004a12:	2100      	movs	r1, #0
 8004a14:	e9c0 1600 	strd	r1, r6, [r0]
 8004a18:	300c      	adds	r0, #12
 8004a1a:	60a0      	str	r0, [r4, #8]
 8004a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a20:	f7ff fd7c 	bl	800451c <memset>
 8004a24:	4620      	mov	r0, r4
 8004a26:	bd70      	pop	{r4, r5, r6, pc}

08004a28 <__sinit>:
 8004a28:	6983      	ldr	r3, [r0, #24]
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	bb33      	cbnz	r3, 8004a7e <__sinit+0x56>
 8004a30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a34:	6503      	str	r3, [r0, #80]	; 0x50
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <__sinit+0x58>)
 8004a38:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <__sinit+0x5c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6282      	str	r2, [r0, #40]	; 0x28
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	bf04      	itt	eq
 8004a42:	2301      	moveq	r3, #1
 8004a44:	6183      	streq	r3, [r0, #24]
 8004a46:	f000 f81f 	bl	8004a88 <__sfp>
 8004a4a:	6060      	str	r0, [r4, #4]
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 f81b 	bl	8004a88 <__sfp>
 8004a52:	60a0      	str	r0, [r4, #8]
 8004a54:	4620      	mov	r0, r4
 8004a56:	f000 f817 	bl	8004a88 <__sfp>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	60e0      	str	r0, [r4, #12]
 8004a5e:	2104      	movs	r1, #4
 8004a60:	6860      	ldr	r0, [r4, #4]
 8004a62:	f7ff ffa1 	bl	80049a8 <std>
 8004a66:	2201      	movs	r2, #1
 8004a68:	2109      	movs	r1, #9
 8004a6a:	68a0      	ldr	r0, [r4, #8]
 8004a6c:	f7ff ff9c 	bl	80049a8 <std>
 8004a70:	2202      	movs	r2, #2
 8004a72:	2112      	movs	r1, #18
 8004a74:	68e0      	ldr	r0, [r4, #12]
 8004a76:	f7ff ff97 	bl	80049a8 <std>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61a3      	str	r3, [r4, #24]
 8004a7e:	bd10      	pop	{r4, pc}
 8004a80:	08005e88 	.word	0x08005e88
 8004a84:	080049f1 	.word	0x080049f1

08004a88 <__sfp>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <__sfp+0x70>)
 8004a8c:	681e      	ldr	r6, [r3, #0]
 8004a8e:	69b3      	ldr	r3, [r6, #24]
 8004a90:	4607      	mov	r7, r0
 8004a92:	b913      	cbnz	r3, 8004a9a <__sfp+0x12>
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7ff ffc7 	bl	8004a28 <__sinit>
 8004a9a:	3648      	adds	r6, #72	; 0x48
 8004a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	d503      	bpl.n	8004aac <__sfp+0x24>
 8004aa4:	6833      	ldr	r3, [r6, #0]
 8004aa6:	b133      	cbz	r3, 8004ab6 <__sfp+0x2e>
 8004aa8:	6836      	ldr	r6, [r6, #0]
 8004aaa:	e7f7      	b.n	8004a9c <__sfp+0x14>
 8004aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ab0:	b16d      	cbz	r5, 8004ace <__sfp+0x46>
 8004ab2:	3468      	adds	r4, #104	; 0x68
 8004ab4:	e7f4      	b.n	8004aa0 <__sfp+0x18>
 8004ab6:	2104      	movs	r1, #4
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7ff ff9f 	bl	80049fc <__sfmoreglue>
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d1f1      	bne.n	8004aa8 <__sfp+0x20>
 8004ac4:	230c      	movs	r3, #12
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4620      	mov	r0, r4
 8004acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <__sfp+0x74>)
 8004ad0:	6665      	str	r5, [r4, #100]	; 0x64
 8004ad2:	e9c4 5500 	strd	r5, r5, [r4]
 8004ad6:	60a5      	str	r5, [r4, #8]
 8004ad8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004adc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ae8:	f7ff fd18 	bl	800451c <memset>
 8004aec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004af0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004af4:	e7e9      	b.n	8004aca <__sfp+0x42>
 8004af6:	bf00      	nop
 8004af8:	08005e88 	.word	0x08005e88
 8004afc:	ffff0001 	.word	0xffff0001

08004b00 <_fwalk_reent>:
 8004b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b04:	4680      	mov	r8, r0
 8004b06:	4689      	mov	r9, r1
 8004b08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b0c:	2600      	movs	r6, #0
 8004b0e:	b914      	cbnz	r4, 8004b16 <_fwalk_reent+0x16>
 8004b10:	4630      	mov	r0, r6
 8004b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b1a:	3f01      	subs	r7, #1
 8004b1c:	d501      	bpl.n	8004b22 <_fwalk_reent+0x22>
 8004b1e:	6824      	ldr	r4, [r4, #0]
 8004b20:	e7f5      	b.n	8004b0e <_fwalk_reent+0xe>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d907      	bls.n	8004b38 <_fwalk_reent+0x38>
 8004b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	d003      	beq.n	8004b38 <_fwalk_reent+0x38>
 8004b30:	4629      	mov	r1, r5
 8004b32:	4640      	mov	r0, r8
 8004b34:	47c8      	blx	r9
 8004b36:	4306      	orrs	r6, r0
 8004b38:	3568      	adds	r5, #104	; 0x68
 8004b3a:	e7ee      	b.n	8004b1a <_fwalk_reent+0x1a>

08004b3c <__swhatbuf_r>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	460e      	mov	r6, r1
 8004b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b44:	2900      	cmp	r1, #0
 8004b46:	b096      	sub	sp, #88	; 0x58
 8004b48:	4614      	mov	r4, r2
 8004b4a:	461d      	mov	r5, r3
 8004b4c:	da07      	bge.n	8004b5e <__swhatbuf_r+0x22>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	89b3      	ldrh	r3, [r6, #12]
 8004b54:	061a      	lsls	r2, r3, #24
 8004b56:	d410      	bmi.n	8004b7a <__swhatbuf_r+0x3e>
 8004b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b5c:	e00e      	b.n	8004b7c <__swhatbuf_r+0x40>
 8004b5e:	466a      	mov	r2, sp
 8004b60:	f000 fd88 	bl	8005674 <_fstat_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	dbf2      	blt.n	8004b4e <__swhatbuf_r+0x12>
 8004b68:	9a01      	ldr	r2, [sp, #4]
 8004b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b72:	425a      	negs	r2, r3
 8004b74:	415a      	adcs	r2, r3
 8004b76:	602a      	str	r2, [r5, #0]
 8004b78:	e7ee      	b.n	8004b58 <__swhatbuf_r+0x1c>
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	6023      	str	r3, [r4, #0]
 8004b80:	b016      	add	sp, #88	; 0x58
 8004b82:	bd70      	pop	{r4, r5, r6, pc}

08004b84 <__smakebuf_r>:
 8004b84:	898b      	ldrh	r3, [r1, #12]
 8004b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b88:	079d      	lsls	r5, r3, #30
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	d507      	bpl.n	8004ba0 <__smakebuf_r+0x1c>
 8004b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	6163      	str	r3, [r4, #20]
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	ab01      	add	r3, sp, #4
 8004ba2:	466a      	mov	r2, sp
 8004ba4:	f7ff ffca 	bl	8004b3c <__swhatbuf_r>
 8004ba8:	9900      	ldr	r1, [sp, #0]
 8004baa:	4605      	mov	r5, r0
 8004bac:	4630      	mov	r0, r6
 8004bae:	f000 f877 	bl	8004ca0 <_malloc_r>
 8004bb2:	b948      	cbnz	r0, 8004bc8 <__smakebuf_r+0x44>
 8004bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb8:	059a      	lsls	r2, r3, #22
 8004bba:	d4ef      	bmi.n	8004b9c <__smakebuf_r+0x18>
 8004bbc:	f023 0303 	bic.w	r3, r3, #3
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	e7e3      	b.n	8004b90 <__smakebuf_r+0xc>
 8004bc8:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <__smakebuf_r+0x7c>)
 8004bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	6020      	str	r0, [r4, #0]
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	6163      	str	r3, [r4, #20]
 8004bda:	9b01      	ldr	r3, [sp, #4]
 8004bdc:	6120      	str	r0, [r4, #16]
 8004bde:	b15b      	cbz	r3, 8004bf8 <__smakebuf_r+0x74>
 8004be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 fd57 	bl	8005698 <_isatty_r>
 8004bea:	b128      	cbz	r0, 8004bf8 <__smakebuf_r+0x74>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	431d      	orrs	r5, r3
 8004bfc:	81a5      	strh	r5, [r4, #12]
 8004bfe:	e7cd      	b.n	8004b9c <__smakebuf_r+0x18>
 8004c00:	080049f1 	.word	0x080049f1

08004c04 <_free_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4605      	mov	r5, r0
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	d045      	beq.n	8004c98 <_free_r+0x94>
 8004c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c10:	1f0c      	subs	r4, r1, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bfb8      	it	lt
 8004c16:	18e4      	addlt	r4, r4, r3
 8004c18:	f000 fd84 	bl	8005724 <__malloc_lock>
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <_free_r+0x98>)
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	4610      	mov	r0, r2
 8004c22:	b933      	cbnz	r3, 8004c32 <_free_r+0x2e>
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	6014      	str	r4, [r2, #0]
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c2e:	f000 bd7a 	b.w	8005726 <__malloc_unlock>
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	d90c      	bls.n	8004c50 <_free_r+0x4c>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	1862      	adds	r2, r4, r1
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bf04      	itt	eq
 8004c3e:	681a      	ldreq	r2, [r3, #0]
 8004c40:	685b      	ldreq	r3, [r3, #4]
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	bf04      	itt	eq
 8004c46:	1852      	addeq	r2, r2, r1
 8004c48:	6022      	streq	r2, [r4, #0]
 8004c4a:	6004      	str	r4, [r0, #0]
 8004c4c:	e7ec      	b.n	8004c28 <_free_r+0x24>
 8004c4e:	4613      	mov	r3, r2
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	b10a      	cbz	r2, 8004c58 <_free_r+0x54>
 8004c54:	42a2      	cmp	r2, r4
 8004c56:	d9fa      	bls.n	8004c4e <_free_r+0x4a>
 8004c58:	6819      	ldr	r1, [r3, #0]
 8004c5a:	1858      	adds	r0, r3, r1
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d10b      	bne.n	8004c78 <_free_r+0x74>
 8004c60:	6820      	ldr	r0, [r4, #0]
 8004c62:	4401      	add	r1, r0
 8004c64:	1858      	adds	r0, r3, r1
 8004c66:	4282      	cmp	r2, r0
 8004c68:	6019      	str	r1, [r3, #0]
 8004c6a:	d1dd      	bne.n	8004c28 <_free_r+0x24>
 8004c6c:	6810      	ldr	r0, [r2, #0]
 8004c6e:	6852      	ldr	r2, [r2, #4]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	4401      	add	r1, r0
 8004c74:	6019      	str	r1, [r3, #0]
 8004c76:	e7d7      	b.n	8004c28 <_free_r+0x24>
 8004c78:	d902      	bls.n	8004c80 <_free_r+0x7c>
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	e7d3      	b.n	8004c28 <_free_r+0x24>
 8004c80:	6820      	ldr	r0, [r4, #0]
 8004c82:	1821      	adds	r1, r4, r0
 8004c84:	428a      	cmp	r2, r1
 8004c86:	bf04      	itt	eq
 8004c88:	6811      	ldreq	r1, [r2, #0]
 8004c8a:	6852      	ldreq	r2, [r2, #4]
 8004c8c:	6062      	str	r2, [r4, #4]
 8004c8e:	bf04      	itt	eq
 8004c90:	1809      	addeq	r1, r1, r0
 8004c92:	6021      	streq	r1, [r4, #0]
 8004c94:	605c      	str	r4, [r3, #4]
 8004c96:	e7c7      	b.n	8004c28 <_free_r+0x24>
 8004c98:	bd38      	pop	{r3, r4, r5, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200005c8 	.word	0x200005c8

08004ca0 <_malloc_r>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	1ccd      	adds	r5, r1, #3
 8004ca4:	f025 0503 	bic.w	r5, r5, #3
 8004ca8:	3508      	adds	r5, #8
 8004caa:	2d0c      	cmp	r5, #12
 8004cac:	bf38      	it	cc
 8004cae:	250c      	movcc	r5, #12
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	db01      	blt.n	8004cba <_malloc_r+0x1a>
 8004cb6:	42a9      	cmp	r1, r5
 8004cb8:	d903      	bls.n	8004cc2 <_malloc_r+0x22>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	f000 fd2f 	bl	8005724 <__malloc_lock>
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <_malloc_r+0xac>)
 8004cc8:	6814      	ldr	r4, [r2, #0]
 8004cca:	4621      	mov	r1, r4
 8004ccc:	b991      	cbnz	r1, 8004cf4 <_malloc_r+0x54>
 8004cce:	4c20      	ldr	r4, [pc, #128]	; (8004d50 <_malloc_r+0xb0>)
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	b91b      	cbnz	r3, 8004cdc <_malloc_r+0x3c>
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 fc57 	bl	8005588 <_sbrk_r>
 8004cda:	6020      	str	r0, [r4, #0]
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f000 fc52 	bl	8005588 <_sbrk_r>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d124      	bne.n	8004d32 <_malloc_r+0x92>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	6033      	str	r3, [r6, #0]
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 fd1a 	bl	8005726 <__malloc_unlock>
 8004cf2:	e7e4      	b.n	8004cbe <_malloc_r+0x1e>
 8004cf4:	680b      	ldr	r3, [r1, #0]
 8004cf6:	1b5b      	subs	r3, r3, r5
 8004cf8:	d418      	bmi.n	8004d2c <_malloc_r+0x8c>
 8004cfa:	2b0b      	cmp	r3, #11
 8004cfc:	d90f      	bls.n	8004d1e <_malloc_r+0x7e>
 8004cfe:	600b      	str	r3, [r1, #0]
 8004d00:	50cd      	str	r5, [r1, r3]
 8004d02:	18cc      	adds	r4, r1, r3
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 fd0e 	bl	8005726 <__malloc_unlock>
 8004d0a:	f104 000b 	add.w	r0, r4, #11
 8004d0e:	1d23      	adds	r3, r4, #4
 8004d10:	f020 0007 	bic.w	r0, r0, #7
 8004d14:	1ac3      	subs	r3, r0, r3
 8004d16:	d0d3      	beq.n	8004cc0 <_malloc_r+0x20>
 8004d18:	425a      	negs	r2, r3
 8004d1a:	50e2      	str	r2, [r4, r3]
 8004d1c:	e7d0      	b.n	8004cc0 <_malloc_r+0x20>
 8004d1e:	428c      	cmp	r4, r1
 8004d20:	684b      	ldr	r3, [r1, #4]
 8004d22:	bf16      	itet	ne
 8004d24:	6063      	strne	r3, [r4, #4]
 8004d26:	6013      	streq	r3, [r2, #0]
 8004d28:	460c      	movne	r4, r1
 8004d2a:	e7eb      	b.n	8004d04 <_malloc_r+0x64>
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	6849      	ldr	r1, [r1, #4]
 8004d30:	e7cc      	b.n	8004ccc <_malloc_r+0x2c>
 8004d32:	1cc4      	adds	r4, r0, #3
 8004d34:	f024 0403 	bic.w	r4, r4, #3
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d005      	beq.n	8004d48 <_malloc_r+0xa8>
 8004d3c:	1a21      	subs	r1, r4, r0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 fc22 	bl	8005588 <_sbrk_r>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d0cf      	beq.n	8004ce8 <_malloc_r+0x48>
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	e7db      	b.n	8004d04 <_malloc_r+0x64>
 8004d4c:	200005c8 	.word	0x200005c8
 8004d50:	200005cc 	.word	0x200005cc

08004d54 <__ssputs_r>:
 8004d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	688e      	ldr	r6, [r1, #8]
 8004d5a:	429e      	cmp	r6, r3
 8004d5c:	4682      	mov	sl, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	4690      	mov	r8, r2
 8004d62:	4699      	mov	r9, r3
 8004d64:	d837      	bhi.n	8004dd6 <__ssputs_r+0x82>
 8004d66:	898a      	ldrh	r2, [r1, #12]
 8004d68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d6c:	d031      	beq.n	8004dd2 <__ssputs_r+0x7e>
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	6909      	ldr	r1, [r1, #16]
 8004d72:	1a6f      	subs	r7, r5, r1
 8004d74:	6965      	ldr	r5, [r4, #20]
 8004d76:	2302      	movs	r3, #2
 8004d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d80:	f109 0301 	add.w	r3, r9, #1
 8004d84:	443b      	add	r3, r7
 8004d86:	429d      	cmp	r5, r3
 8004d88:	bf38      	it	cc
 8004d8a:	461d      	movcc	r5, r3
 8004d8c:	0553      	lsls	r3, r2, #21
 8004d8e:	d530      	bpl.n	8004df2 <__ssputs_r+0x9e>
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7ff ff85 	bl	8004ca0 <_malloc_r>
 8004d96:	4606      	mov	r6, r0
 8004d98:	b950      	cbnz	r0, 8004db0 <__ssputs_r+0x5c>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	f8ca 3000 	str.w	r3, [sl]
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da6:	81a3      	strh	r3, [r4, #12]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	463a      	mov	r2, r7
 8004db2:	6921      	ldr	r1, [r4, #16]
 8004db4:	f000 fc92 	bl	80056dc <memcpy>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	6126      	str	r6, [r4, #16]
 8004dc6:	6165      	str	r5, [r4, #20]
 8004dc8:	443e      	add	r6, r7
 8004dca:	1bed      	subs	r5, r5, r7
 8004dcc:	6026      	str	r6, [r4, #0]
 8004dce:	60a5      	str	r5, [r4, #8]
 8004dd0:	464e      	mov	r6, r9
 8004dd2:	454e      	cmp	r6, r9
 8004dd4:	d900      	bls.n	8004dd8 <__ssputs_r+0x84>
 8004dd6:	464e      	mov	r6, r9
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4641      	mov	r1, r8
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	f000 fc88 	bl	80056f2 <memmove>
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	1b9b      	subs	r3, r3, r6
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	441e      	add	r6, r3
 8004dec:	6026      	str	r6, [r4, #0]
 8004dee:	2000      	movs	r0, #0
 8004df0:	e7dc      	b.n	8004dac <__ssputs_r+0x58>
 8004df2:	462a      	mov	r2, r5
 8004df4:	f000 fc98 	bl	8005728 <_realloc_r>
 8004df8:	4606      	mov	r6, r0
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d1e2      	bne.n	8004dc4 <__ssputs_r+0x70>
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	4650      	mov	r0, sl
 8004e02:	f7ff feff 	bl	8004c04 <_free_r>
 8004e06:	e7c8      	b.n	8004d9a <__ssputs_r+0x46>

08004e08 <_svfiprintf_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	898b      	ldrh	r3, [r1, #12]
 8004e10:	061f      	lsls	r7, r3, #24
 8004e12:	b09d      	sub	sp, #116	; 0x74
 8004e14:	4680      	mov	r8, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4616      	mov	r6, r2
 8004e1a:	d50f      	bpl.n	8004e3c <_svfiprintf_r+0x34>
 8004e1c:	690b      	ldr	r3, [r1, #16]
 8004e1e:	b96b      	cbnz	r3, 8004e3c <_svfiprintf_r+0x34>
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	f7ff ff3d 	bl	8004ca0 <_malloc_r>
 8004e26:	6020      	str	r0, [r4, #0]
 8004e28:	6120      	str	r0, [r4, #16]
 8004e2a:	b928      	cbnz	r0, 8004e38 <_svfiprintf_r+0x30>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	f8c8 3000 	str.w	r3, [r8]
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295
 8004e36:	e0c8      	b.n	8004fca <_svfiprintf_r+0x1c2>
 8004e38:	2340      	movs	r3, #64	; 0x40
 8004e3a:	6163      	str	r3, [r4, #20]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	2320      	movs	r3, #32
 8004e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e46:	2330      	movs	r3, #48	; 0x30
 8004e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e4c:	9503      	str	r5, [sp, #12]
 8004e4e:	f04f 0b01 	mov.w	fp, #1
 8004e52:	4637      	mov	r7, r6
 8004e54:	463d      	mov	r5, r7
 8004e56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e5a:	b10b      	cbz	r3, 8004e60 <_svfiprintf_r+0x58>
 8004e5c:	2b25      	cmp	r3, #37	; 0x25
 8004e5e:	d13e      	bne.n	8004ede <_svfiprintf_r+0xd6>
 8004e60:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e64:	d00b      	beq.n	8004e7e <_svfiprintf_r+0x76>
 8004e66:	4653      	mov	r3, sl
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	f7ff ff71 	bl	8004d54 <__ssputs_r>
 8004e72:	3001      	adds	r0, #1
 8004e74:	f000 80a4 	beq.w	8004fc0 <_svfiprintf_r+0x1b8>
 8004e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7a:	4453      	add	r3, sl
 8004e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7e:	783b      	ldrb	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 809d 	beq.w	8004fc0 <_svfiprintf_r+0x1b8>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e90:	9304      	str	r3, [sp, #16]
 8004e92:	9307      	str	r3, [sp, #28]
 8004e94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e98:	931a      	str	r3, [sp, #104]	; 0x68
 8004e9a:	462f      	mov	r7, r5
 8004e9c:	2205      	movs	r2, #5
 8004e9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004ea2:	4850      	ldr	r0, [pc, #320]	; (8004fe4 <_svfiprintf_r+0x1dc>)
 8004ea4:	f7fb f9b4 	bl	8000210 <memchr>
 8004ea8:	9b04      	ldr	r3, [sp, #16]
 8004eaa:	b9d0      	cbnz	r0, 8004ee2 <_svfiprintf_r+0xda>
 8004eac:	06d9      	lsls	r1, r3, #27
 8004eae:	bf44      	itt	mi
 8004eb0:	2220      	movmi	r2, #32
 8004eb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004eb6:	071a      	lsls	r2, r3, #28
 8004eb8:	bf44      	itt	mi
 8004eba:	222b      	movmi	r2, #43	; 0x2b
 8004ebc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ec0:	782a      	ldrb	r2, [r5, #0]
 8004ec2:	2a2a      	cmp	r2, #42	; 0x2a
 8004ec4:	d015      	beq.n	8004ef2 <_svfiprintf_r+0xea>
 8004ec6:	9a07      	ldr	r2, [sp, #28]
 8004ec8:	462f      	mov	r7, r5
 8004eca:	2000      	movs	r0, #0
 8004ecc:	250a      	movs	r5, #10
 8004ece:	4639      	mov	r1, r7
 8004ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ed4:	3b30      	subs	r3, #48	; 0x30
 8004ed6:	2b09      	cmp	r3, #9
 8004ed8:	d94d      	bls.n	8004f76 <_svfiprintf_r+0x16e>
 8004eda:	b1b8      	cbz	r0, 8004f0c <_svfiprintf_r+0x104>
 8004edc:	e00f      	b.n	8004efe <_svfiprintf_r+0xf6>
 8004ede:	462f      	mov	r7, r5
 8004ee0:	e7b8      	b.n	8004e54 <_svfiprintf_r+0x4c>
 8004ee2:	4a40      	ldr	r2, [pc, #256]	; (8004fe4 <_svfiprintf_r+0x1dc>)
 8004ee4:	1a80      	subs	r0, r0, r2
 8004ee6:	fa0b f000 	lsl.w	r0, fp, r0
 8004eea:	4318      	orrs	r0, r3
 8004eec:	9004      	str	r0, [sp, #16]
 8004eee:	463d      	mov	r5, r7
 8004ef0:	e7d3      	b.n	8004e9a <_svfiprintf_r+0x92>
 8004ef2:	9a03      	ldr	r2, [sp, #12]
 8004ef4:	1d11      	adds	r1, r2, #4
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	9103      	str	r1, [sp, #12]
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	db01      	blt.n	8004f02 <_svfiprintf_r+0xfa>
 8004efe:	9207      	str	r2, [sp, #28]
 8004f00:	e004      	b.n	8004f0c <_svfiprintf_r+0x104>
 8004f02:	4252      	negs	r2, r2
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	9207      	str	r2, [sp, #28]
 8004f0a:	9304      	str	r3, [sp, #16]
 8004f0c:	783b      	ldrb	r3, [r7, #0]
 8004f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f10:	d10c      	bne.n	8004f2c <_svfiprintf_r+0x124>
 8004f12:	787b      	ldrb	r3, [r7, #1]
 8004f14:	2b2a      	cmp	r3, #42	; 0x2a
 8004f16:	d133      	bne.n	8004f80 <_svfiprintf_r+0x178>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9203      	str	r2, [sp, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bfb8      	it	lt
 8004f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f28:	3702      	adds	r7, #2
 8004f2a:	9305      	str	r3, [sp, #20]
 8004f2c:	4d2e      	ldr	r5, [pc, #184]	; (8004fe8 <_svfiprintf_r+0x1e0>)
 8004f2e:	7839      	ldrb	r1, [r7, #0]
 8004f30:	2203      	movs	r2, #3
 8004f32:	4628      	mov	r0, r5
 8004f34:	f7fb f96c 	bl	8000210 <memchr>
 8004f38:	b138      	cbz	r0, 8004f4a <_svfiprintf_r+0x142>
 8004f3a:	2340      	movs	r3, #64	; 0x40
 8004f3c:	1b40      	subs	r0, r0, r5
 8004f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f42:	9b04      	ldr	r3, [sp, #16]
 8004f44:	4303      	orrs	r3, r0
 8004f46:	3701      	adds	r7, #1
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	7839      	ldrb	r1, [r7, #0]
 8004f4c:	4827      	ldr	r0, [pc, #156]	; (8004fec <_svfiprintf_r+0x1e4>)
 8004f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f52:	2206      	movs	r2, #6
 8004f54:	1c7e      	adds	r6, r7, #1
 8004f56:	f7fb f95b 	bl	8000210 <memchr>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d038      	beq.n	8004fd0 <_svfiprintf_r+0x1c8>
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <_svfiprintf_r+0x1e8>)
 8004f60:	bb13      	cbnz	r3, 8004fa8 <_svfiprintf_r+0x1a0>
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	3307      	adds	r3, #7
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	9303      	str	r3, [sp, #12]
 8004f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f70:	444b      	add	r3, r9
 8004f72:	9309      	str	r3, [sp, #36]	; 0x24
 8004f74:	e76d      	b.n	8004e52 <_svfiprintf_r+0x4a>
 8004f76:	fb05 3202 	mla	r2, r5, r2, r3
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	460f      	mov	r7, r1
 8004f7e:	e7a6      	b.n	8004ece <_svfiprintf_r+0xc6>
 8004f80:	2300      	movs	r3, #0
 8004f82:	3701      	adds	r7, #1
 8004f84:	9305      	str	r3, [sp, #20]
 8004f86:	4619      	mov	r1, r3
 8004f88:	250a      	movs	r5, #10
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f90:	3a30      	subs	r2, #48	; 0x30
 8004f92:	2a09      	cmp	r2, #9
 8004f94:	d903      	bls.n	8004f9e <_svfiprintf_r+0x196>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0c8      	beq.n	8004f2c <_svfiprintf_r+0x124>
 8004f9a:	9105      	str	r1, [sp, #20]
 8004f9c:	e7c6      	b.n	8004f2c <_svfiprintf_r+0x124>
 8004f9e:	fb05 2101 	mla	r1, r5, r1, r2
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	e7f0      	b.n	8004f8a <_svfiprintf_r+0x182>
 8004fa8:	ab03      	add	r3, sp, #12
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4622      	mov	r2, r4
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004fb0:	a904      	add	r1, sp, #16
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fbc:	4681      	mov	r9, r0
 8004fbe:	d1d6      	bne.n	8004f6e <_svfiprintf_r+0x166>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	065b      	lsls	r3, r3, #25
 8004fc4:	f53f af35 	bmi.w	8004e32 <_svfiprintf_r+0x2a>
 8004fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fca:	b01d      	add	sp, #116	; 0x74
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	ab03      	add	r3, sp, #12
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004fd8:	a904      	add	r1, sp, #16
 8004fda:	4640      	mov	r0, r8
 8004fdc:	f000 f9c2 	bl	8005364 <_printf_i>
 8004fe0:	e7ea      	b.n	8004fb8 <_svfiprintf_r+0x1b0>
 8004fe2:	bf00      	nop
 8004fe4:	08005eec 	.word	0x08005eec
 8004fe8:	08005ef2 	.word	0x08005ef2
 8004fec:	08005ef6 	.word	0x08005ef6
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	08004d55 	.word	0x08004d55

08004ff8 <__sfputc_r>:
 8004ff8:	6893      	ldr	r3, [r2, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	b410      	push	{r4}
 8005000:	6093      	str	r3, [r2, #8]
 8005002:	da08      	bge.n	8005016 <__sfputc_r+0x1e>
 8005004:	6994      	ldr	r4, [r2, #24]
 8005006:	42a3      	cmp	r3, r4
 8005008:	db01      	blt.n	800500e <__sfputc_r+0x16>
 800500a:	290a      	cmp	r1, #10
 800500c:	d103      	bne.n	8005016 <__sfputc_r+0x1e>
 800500e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005012:	f7ff bb59 	b.w	80046c8 <__swbuf_r>
 8005016:	6813      	ldr	r3, [r2, #0]
 8005018:	1c58      	adds	r0, r3, #1
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	7019      	strb	r1, [r3, #0]
 800501e:	4608      	mov	r0, r1
 8005020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005024:	4770      	bx	lr

08005026 <__sfputs_r>:
 8005026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005028:	4606      	mov	r6, r0
 800502a:	460f      	mov	r7, r1
 800502c:	4614      	mov	r4, r2
 800502e:	18d5      	adds	r5, r2, r3
 8005030:	42ac      	cmp	r4, r5
 8005032:	d101      	bne.n	8005038 <__sfputs_r+0x12>
 8005034:	2000      	movs	r0, #0
 8005036:	e007      	b.n	8005048 <__sfputs_r+0x22>
 8005038:	463a      	mov	r2, r7
 800503a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff ffda 	bl	8004ff8 <__sfputc_r>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d1f3      	bne.n	8005030 <__sfputs_r+0xa>
 8005048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800504c <_vfiprintf_r>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	460c      	mov	r4, r1
 8005052:	b09d      	sub	sp, #116	; 0x74
 8005054:	4617      	mov	r7, r2
 8005056:	461d      	mov	r5, r3
 8005058:	4606      	mov	r6, r0
 800505a:	b118      	cbz	r0, 8005064 <_vfiprintf_r+0x18>
 800505c:	6983      	ldr	r3, [r0, #24]
 800505e:	b90b      	cbnz	r3, 8005064 <_vfiprintf_r+0x18>
 8005060:	f7ff fce2 	bl	8004a28 <__sinit>
 8005064:	4b7c      	ldr	r3, [pc, #496]	; (8005258 <_vfiprintf_r+0x20c>)
 8005066:	429c      	cmp	r4, r3
 8005068:	d158      	bne.n	800511c <_vfiprintf_r+0xd0>
 800506a:	6874      	ldr	r4, [r6, #4]
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	0718      	lsls	r0, r3, #28
 8005070:	d55e      	bpl.n	8005130 <_vfiprintf_r+0xe4>
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d05b      	beq.n	8005130 <_vfiprintf_r+0xe4>
 8005078:	2300      	movs	r3, #0
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	2320      	movs	r3, #32
 800507e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005082:	2330      	movs	r3, #48	; 0x30
 8005084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005088:	9503      	str	r5, [sp, #12]
 800508a:	f04f 0b01 	mov.w	fp, #1
 800508e:	46b8      	mov	r8, r7
 8005090:	4645      	mov	r5, r8
 8005092:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005096:	b10b      	cbz	r3, 800509c <_vfiprintf_r+0x50>
 8005098:	2b25      	cmp	r3, #37	; 0x25
 800509a:	d154      	bne.n	8005146 <_vfiprintf_r+0xfa>
 800509c:	ebb8 0a07 	subs.w	sl, r8, r7
 80050a0:	d00b      	beq.n	80050ba <_vfiprintf_r+0x6e>
 80050a2:	4653      	mov	r3, sl
 80050a4:	463a      	mov	r2, r7
 80050a6:	4621      	mov	r1, r4
 80050a8:	4630      	mov	r0, r6
 80050aa:	f7ff ffbc 	bl	8005026 <__sfputs_r>
 80050ae:	3001      	adds	r0, #1
 80050b0:	f000 80c2 	beq.w	8005238 <_vfiprintf_r+0x1ec>
 80050b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b6:	4453      	add	r3, sl
 80050b8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ba:	f898 3000 	ldrb.w	r3, [r8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80ba 	beq.w	8005238 <_vfiprintf_r+0x1ec>
 80050c4:	2300      	movs	r3, #0
 80050c6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050d6:	931a      	str	r3, [sp, #104]	; 0x68
 80050d8:	46a8      	mov	r8, r5
 80050da:	2205      	movs	r2, #5
 80050dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050e0:	485e      	ldr	r0, [pc, #376]	; (800525c <_vfiprintf_r+0x210>)
 80050e2:	f7fb f895 	bl	8000210 <memchr>
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	bb78      	cbnz	r0, 800514a <_vfiprintf_r+0xfe>
 80050ea:	06d9      	lsls	r1, r3, #27
 80050ec:	bf44      	itt	mi
 80050ee:	2220      	movmi	r2, #32
 80050f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050f4:	071a      	lsls	r2, r3, #28
 80050f6:	bf44      	itt	mi
 80050f8:	222b      	movmi	r2, #43	; 0x2b
 80050fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050fe:	782a      	ldrb	r2, [r5, #0]
 8005100:	2a2a      	cmp	r2, #42	; 0x2a
 8005102:	d02a      	beq.n	800515a <_vfiprintf_r+0x10e>
 8005104:	9a07      	ldr	r2, [sp, #28]
 8005106:	46a8      	mov	r8, r5
 8005108:	2000      	movs	r0, #0
 800510a:	250a      	movs	r5, #10
 800510c:	4641      	mov	r1, r8
 800510e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005112:	3b30      	subs	r3, #48	; 0x30
 8005114:	2b09      	cmp	r3, #9
 8005116:	d969      	bls.n	80051ec <_vfiprintf_r+0x1a0>
 8005118:	b360      	cbz	r0, 8005174 <_vfiprintf_r+0x128>
 800511a:	e024      	b.n	8005166 <_vfiprintf_r+0x11a>
 800511c:	4b50      	ldr	r3, [pc, #320]	; (8005260 <_vfiprintf_r+0x214>)
 800511e:	429c      	cmp	r4, r3
 8005120:	d101      	bne.n	8005126 <_vfiprintf_r+0xda>
 8005122:	68b4      	ldr	r4, [r6, #8]
 8005124:	e7a2      	b.n	800506c <_vfiprintf_r+0x20>
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <_vfiprintf_r+0x218>)
 8005128:	429c      	cmp	r4, r3
 800512a:	bf08      	it	eq
 800512c:	68f4      	ldreq	r4, [r6, #12]
 800512e:	e79d      	b.n	800506c <_vfiprintf_r+0x20>
 8005130:	4621      	mov	r1, r4
 8005132:	4630      	mov	r0, r6
 8005134:	f7ff fb1a 	bl	800476c <__swsetup_r>
 8005138:	2800      	cmp	r0, #0
 800513a:	d09d      	beq.n	8005078 <_vfiprintf_r+0x2c>
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b01d      	add	sp, #116	; 0x74
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	46a8      	mov	r8, r5
 8005148:	e7a2      	b.n	8005090 <_vfiprintf_r+0x44>
 800514a:	4a44      	ldr	r2, [pc, #272]	; (800525c <_vfiprintf_r+0x210>)
 800514c:	1a80      	subs	r0, r0, r2
 800514e:	fa0b f000 	lsl.w	r0, fp, r0
 8005152:	4318      	orrs	r0, r3
 8005154:	9004      	str	r0, [sp, #16]
 8005156:	4645      	mov	r5, r8
 8005158:	e7be      	b.n	80050d8 <_vfiprintf_r+0x8c>
 800515a:	9a03      	ldr	r2, [sp, #12]
 800515c:	1d11      	adds	r1, r2, #4
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	9103      	str	r1, [sp, #12]
 8005162:	2a00      	cmp	r2, #0
 8005164:	db01      	blt.n	800516a <_vfiprintf_r+0x11e>
 8005166:	9207      	str	r2, [sp, #28]
 8005168:	e004      	b.n	8005174 <_vfiprintf_r+0x128>
 800516a:	4252      	negs	r2, r2
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	9207      	str	r2, [sp, #28]
 8005172:	9304      	str	r3, [sp, #16]
 8005174:	f898 3000 	ldrb.w	r3, [r8]
 8005178:	2b2e      	cmp	r3, #46	; 0x2e
 800517a:	d10e      	bne.n	800519a <_vfiprintf_r+0x14e>
 800517c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005180:	2b2a      	cmp	r3, #42	; 0x2a
 8005182:	d138      	bne.n	80051f6 <_vfiprintf_r+0x1aa>
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	9203      	str	r2, [sp, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	bfb8      	it	lt
 8005190:	f04f 33ff 	movlt.w	r3, #4294967295
 8005194:	f108 0802 	add.w	r8, r8, #2
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	4d33      	ldr	r5, [pc, #204]	; (8005268 <_vfiprintf_r+0x21c>)
 800519c:	f898 1000 	ldrb.w	r1, [r8]
 80051a0:	2203      	movs	r2, #3
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7fb f834 	bl	8000210 <memchr>
 80051a8:	b140      	cbz	r0, 80051bc <_vfiprintf_r+0x170>
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	1b40      	subs	r0, r0, r5
 80051ae:	fa03 f000 	lsl.w	r0, r3, r0
 80051b2:	9b04      	ldr	r3, [sp, #16]
 80051b4:	4303      	orrs	r3, r0
 80051b6:	f108 0801 	add.w	r8, r8, #1
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	f898 1000 	ldrb.w	r1, [r8]
 80051c0:	482a      	ldr	r0, [pc, #168]	; (800526c <_vfiprintf_r+0x220>)
 80051c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c6:	2206      	movs	r2, #6
 80051c8:	f108 0701 	add.w	r7, r8, #1
 80051cc:	f7fb f820 	bl	8000210 <memchr>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d037      	beq.n	8005244 <_vfiprintf_r+0x1f8>
 80051d4:	4b26      	ldr	r3, [pc, #152]	; (8005270 <_vfiprintf_r+0x224>)
 80051d6:	bb1b      	cbnz	r3, 8005220 <_vfiprintf_r+0x1d4>
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	3307      	adds	r3, #7
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	3308      	adds	r3, #8
 80051e2:	9303      	str	r3, [sp, #12]
 80051e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e6:	444b      	add	r3, r9
 80051e8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ea:	e750      	b.n	800508e <_vfiprintf_r+0x42>
 80051ec:	fb05 3202 	mla	r2, r5, r2, r3
 80051f0:	2001      	movs	r0, #1
 80051f2:	4688      	mov	r8, r1
 80051f4:	e78a      	b.n	800510c <_vfiprintf_r+0xc0>
 80051f6:	2300      	movs	r3, #0
 80051f8:	f108 0801 	add.w	r8, r8, #1
 80051fc:	9305      	str	r3, [sp, #20]
 80051fe:	4619      	mov	r1, r3
 8005200:	250a      	movs	r5, #10
 8005202:	4640      	mov	r0, r8
 8005204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005208:	3a30      	subs	r2, #48	; 0x30
 800520a:	2a09      	cmp	r2, #9
 800520c:	d903      	bls.n	8005216 <_vfiprintf_r+0x1ca>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0c3      	beq.n	800519a <_vfiprintf_r+0x14e>
 8005212:	9105      	str	r1, [sp, #20]
 8005214:	e7c1      	b.n	800519a <_vfiprintf_r+0x14e>
 8005216:	fb05 2101 	mla	r1, r5, r1, r2
 800521a:	2301      	movs	r3, #1
 800521c:	4680      	mov	r8, r0
 800521e:	e7f0      	b.n	8005202 <_vfiprintf_r+0x1b6>
 8005220:	ab03      	add	r3, sp, #12
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4622      	mov	r2, r4
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <_vfiprintf_r+0x228>)
 8005228:	a904      	add	r1, sp, #16
 800522a:	4630      	mov	r0, r6
 800522c:	f3af 8000 	nop.w
 8005230:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005234:	4681      	mov	r9, r0
 8005236:	d1d5      	bne.n	80051e4 <_vfiprintf_r+0x198>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	065b      	lsls	r3, r3, #25
 800523c:	f53f af7e 	bmi.w	800513c <_vfiprintf_r+0xf0>
 8005240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005242:	e77d      	b.n	8005140 <_vfiprintf_r+0xf4>
 8005244:	ab03      	add	r3, sp, #12
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4622      	mov	r2, r4
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <_vfiprintf_r+0x228>)
 800524c:	a904      	add	r1, sp, #16
 800524e:	4630      	mov	r0, r6
 8005250:	f000 f888 	bl	8005364 <_printf_i>
 8005254:	e7ec      	b.n	8005230 <_vfiprintf_r+0x1e4>
 8005256:	bf00      	nop
 8005258:	08005eac 	.word	0x08005eac
 800525c:	08005eec 	.word	0x08005eec
 8005260:	08005ecc 	.word	0x08005ecc
 8005264:	08005e8c 	.word	0x08005e8c
 8005268:	08005ef2 	.word	0x08005ef2
 800526c:	08005ef6 	.word	0x08005ef6
 8005270:	00000000 	.word	0x00000000
 8005274:	08005027 	.word	0x08005027

08005278 <_printf_common>:
 8005278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	4691      	mov	r9, r2
 800527e:	461f      	mov	r7, r3
 8005280:	688a      	ldr	r2, [r1, #8]
 8005282:	690b      	ldr	r3, [r1, #16]
 8005284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005288:	4293      	cmp	r3, r2
 800528a:	bfb8      	it	lt
 800528c:	4613      	movlt	r3, r2
 800528e:	f8c9 3000 	str.w	r3, [r9]
 8005292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005296:	4606      	mov	r6, r0
 8005298:	460c      	mov	r4, r1
 800529a:	b112      	cbz	r2, 80052a2 <_printf_common+0x2a>
 800529c:	3301      	adds	r3, #1
 800529e:	f8c9 3000 	str.w	r3, [r9]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	0699      	lsls	r1, r3, #26
 80052a6:	bf42      	ittt	mi
 80052a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052ac:	3302      	addmi	r3, #2
 80052ae:	f8c9 3000 	strmi.w	r3, [r9]
 80052b2:	6825      	ldr	r5, [r4, #0]
 80052b4:	f015 0506 	ands.w	r5, r5, #6
 80052b8:	d107      	bne.n	80052ca <_printf_common+0x52>
 80052ba:	f104 0a19 	add.w	sl, r4, #25
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	f8d9 2000 	ldr.w	r2, [r9]
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	42ab      	cmp	r3, r5
 80052c8:	dc28      	bgt.n	800531c <_printf_common+0xa4>
 80052ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	3300      	adds	r3, #0
 80052d2:	bf18      	it	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	0692      	lsls	r2, r2, #26
 80052d8:	d42d      	bmi.n	8005336 <_printf_common+0xbe>
 80052da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052de:	4639      	mov	r1, r7
 80052e0:	4630      	mov	r0, r6
 80052e2:	47c0      	blx	r8
 80052e4:	3001      	adds	r0, #1
 80052e6:	d020      	beq.n	800532a <_printf_common+0xb2>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	68e5      	ldr	r5, [r4, #12]
 80052ec:	f8d9 2000 	ldr.w	r2, [r9]
 80052f0:	f003 0306 	and.w	r3, r3, #6
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	bf08      	it	eq
 80052f8:	1aad      	subeq	r5, r5, r2
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	bf0c      	ite	eq
 8005300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005304:	2500      	movne	r5, #0
 8005306:	4293      	cmp	r3, r2
 8005308:	bfc4      	itt	gt
 800530a:	1a9b      	subgt	r3, r3, r2
 800530c:	18ed      	addgt	r5, r5, r3
 800530e:	f04f 0900 	mov.w	r9, #0
 8005312:	341a      	adds	r4, #26
 8005314:	454d      	cmp	r5, r9
 8005316:	d11a      	bne.n	800534e <_printf_common+0xd6>
 8005318:	2000      	movs	r0, #0
 800531a:	e008      	b.n	800532e <_printf_common+0xb6>
 800531c:	2301      	movs	r3, #1
 800531e:	4652      	mov	r2, sl
 8005320:	4639      	mov	r1, r7
 8005322:	4630      	mov	r0, r6
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d103      	bne.n	8005332 <_printf_common+0xba>
 800532a:	f04f 30ff 	mov.w	r0, #4294967295
 800532e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005332:	3501      	adds	r5, #1
 8005334:	e7c3      	b.n	80052be <_printf_common+0x46>
 8005336:	18e1      	adds	r1, r4, r3
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	2030      	movs	r0, #48	; 0x30
 800533c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005340:	4422      	add	r2, r4
 8005342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005346:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800534a:	3302      	adds	r3, #2
 800534c:	e7c5      	b.n	80052da <_printf_common+0x62>
 800534e:	2301      	movs	r3, #1
 8005350:	4622      	mov	r2, r4
 8005352:	4639      	mov	r1, r7
 8005354:	4630      	mov	r0, r6
 8005356:	47c0      	blx	r8
 8005358:	3001      	adds	r0, #1
 800535a:	d0e6      	beq.n	800532a <_printf_common+0xb2>
 800535c:	f109 0901 	add.w	r9, r9, #1
 8005360:	e7d8      	b.n	8005314 <_printf_common+0x9c>
	...

08005364 <_printf_i>:
 8005364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005368:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800536c:	460c      	mov	r4, r1
 800536e:	7e09      	ldrb	r1, [r1, #24]
 8005370:	b085      	sub	sp, #20
 8005372:	296e      	cmp	r1, #110	; 0x6e
 8005374:	4617      	mov	r7, r2
 8005376:	4606      	mov	r6, r0
 8005378:	4698      	mov	r8, r3
 800537a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800537c:	f000 80b3 	beq.w	80054e6 <_printf_i+0x182>
 8005380:	d822      	bhi.n	80053c8 <_printf_i+0x64>
 8005382:	2963      	cmp	r1, #99	; 0x63
 8005384:	d036      	beq.n	80053f4 <_printf_i+0x90>
 8005386:	d80a      	bhi.n	800539e <_printf_i+0x3a>
 8005388:	2900      	cmp	r1, #0
 800538a:	f000 80b9 	beq.w	8005500 <_printf_i+0x19c>
 800538e:	2958      	cmp	r1, #88	; 0x58
 8005390:	f000 8083 	beq.w	800549a <_printf_i+0x136>
 8005394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005398:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800539c:	e032      	b.n	8005404 <_printf_i+0xa0>
 800539e:	2964      	cmp	r1, #100	; 0x64
 80053a0:	d001      	beq.n	80053a6 <_printf_i+0x42>
 80053a2:	2969      	cmp	r1, #105	; 0x69
 80053a4:	d1f6      	bne.n	8005394 <_printf_i+0x30>
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	6813      	ldr	r3, [r2, #0]
 80053aa:	0605      	lsls	r5, r0, #24
 80053ac:	f103 0104 	add.w	r1, r3, #4
 80053b0:	d52a      	bpl.n	8005408 <_printf_i+0xa4>
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da03      	bge.n	80053c2 <_printf_i+0x5e>
 80053ba:	222d      	movs	r2, #45	; 0x2d
 80053bc:	425b      	negs	r3, r3
 80053be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053c2:	486f      	ldr	r0, [pc, #444]	; (8005580 <_printf_i+0x21c>)
 80053c4:	220a      	movs	r2, #10
 80053c6:	e039      	b.n	800543c <_printf_i+0xd8>
 80053c8:	2973      	cmp	r1, #115	; 0x73
 80053ca:	f000 809d 	beq.w	8005508 <_printf_i+0x1a4>
 80053ce:	d808      	bhi.n	80053e2 <_printf_i+0x7e>
 80053d0:	296f      	cmp	r1, #111	; 0x6f
 80053d2:	d020      	beq.n	8005416 <_printf_i+0xb2>
 80053d4:	2970      	cmp	r1, #112	; 0x70
 80053d6:	d1dd      	bne.n	8005394 <_printf_i+0x30>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	f043 0320 	orr.w	r3, r3, #32
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	e003      	b.n	80053ea <_printf_i+0x86>
 80053e2:	2975      	cmp	r1, #117	; 0x75
 80053e4:	d017      	beq.n	8005416 <_printf_i+0xb2>
 80053e6:	2978      	cmp	r1, #120	; 0x78
 80053e8:	d1d4      	bne.n	8005394 <_printf_i+0x30>
 80053ea:	2378      	movs	r3, #120	; 0x78
 80053ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f0:	4864      	ldr	r0, [pc, #400]	; (8005584 <_printf_i+0x220>)
 80053f2:	e055      	b.n	80054a0 <_printf_i+0x13c>
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	1d19      	adds	r1, r3, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6011      	str	r1, [r2, #0]
 80053fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005404:	2301      	movs	r3, #1
 8005406:	e08c      	b.n	8005522 <_printf_i+0x1be>
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6011      	str	r1, [r2, #0]
 800540c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005410:	bf18      	it	ne
 8005412:	b21b      	sxthne	r3, r3
 8005414:	e7cf      	b.n	80053b6 <_printf_i+0x52>
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	6825      	ldr	r5, [r4, #0]
 800541a:	1d18      	adds	r0, r3, #4
 800541c:	6010      	str	r0, [r2, #0]
 800541e:	0628      	lsls	r0, r5, #24
 8005420:	d501      	bpl.n	8005426 <_printf_i+0xc2>
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	e002      	b.n	800542c <_printf_i+0xc8>
 8005426:	0668      	lsls	r0, r5, #25
 8005428:	d5fb      	bpl.n	8005422 <_printf_i+0xbe>
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	4854      	ldr	r0, [pc, #336]	; (8005580 <_printf_i+0x21c>)
 800542e:	296f      	cmp	r1, #111	; 0x6f
 8005430:	bf14      	ite	ne
 8005432:	220a      	movne	r2, #10
 8005434:	2208      	moveq	r2, #8
 8005436:	2100      	movs	r1, #0
 8005438:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800543c:	6865      	ldr	r5, [r4, #4]
 800543e:	60a5      	str	r5, [r4, #8]
 8005440:	2d00      	cmp	r5, #0
 8005442:	f2c0 8095 	blt.w	8005570 <_printf_i+0x20c>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	f021 0104 	bic.w	r1, r1, #4
 800544c:	6021      	str	r1, [r4, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d13d      	bne.n	80054ce <_printf_i+0x16a>
 8005452:	2d00      	cmp	r5, #0
 8005454:	f040 808e 	bne.w	8005574 <_printf_i+0x210>
 8005458:	4665      	mov	r5, ip
 800545a:	2a08      	cmp	r2, #8
 800545c:	d10b      	bne.n	8005476 <_printf_i+0x112>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	07db      	lsls	r3, r3, #31
 8005462:	d508      	bpl.n	8005476 <_printf_i+0x112>
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	bfde      	ittt	le
 800546c:	2330      	movle	r3, #48	; 0x30
 800546e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005476:	ebac 0305 	sub.w	r3, ip, r5
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	f8cd 8000 	str.w	r8, [sp]
 8005480:	463b      	mov	r3, r7
 8005482:	aa03      	add	r2, sp, #12
 8005484:	4621      	mov	r1, r4
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff fef6 	bl	8005278 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	d14d      	bne.n	800552c <_printf_i+0x1c8>
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	b005      	add	sp, #20
 8005496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800549a:	4839      	ldr	r0, [pc, #228]	; (8005580 <_printf_i+0x21c>)
 800549c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054a0:	6813      	ldr	r3, [r2, #0]
 80054a2:	6821      	ldr	r1, [r4, #0]
 80054a4:	1d1d      	adds	r5, r3, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6015      	str	r5, [r2, #0]
 80054aa:	060a      	lsls	r2, r1, #24
 80054ac:	d50b      	bpl.n	80054c6 <_printf_i+0x162>
 80054ae:	07ca      	lsls	r2, r1, #31
 80054b0:	bf44      	itt	mi
 80054b2:	f041 0120 	orrmi.w	r1, r1, #32
 80054b6:	6021      	strmi	r1, [r4, #0]
 80054b8:	b91b      	cbnz	r3, 80054c2 <_printf_i+0x15e>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	f022 0220 	bic.w	r2, r2, #32
 80054c0:	6022      	str	r2, [r4, #0]
 80054c2:	2210      	movs	r2, #16
 80054c4:	e7b7      	b.n	8005436 <_printf_i+0xd2>
 80054c6:	064d      	lsls	r5, r1, #25
 80054c8:	bf48      	it	mi
 80054ca:	b29b      	uxthmi	r3, r3
 80054cc:	e7ef      	b.n	80054ae <_printf_i+0x14a>
 80054ce:	4665      	mov	r5, ip
 80054d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80054d4:	fb02 3311 	mls	r3, r2, r1, r3
 80054d8:	5cc3      	ldrb	r3, [r0, r3]
 80054da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054de:	460b      	mov	r3, r1
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d1f5      	bne.n	80054d0 <_printf_i+0x16c>
 80054e4:	e7b9      	b.n	800545a <_printf_i+0xf6>
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	6825      	ldr	r5, [r4, #0]
 80054ea:	6961      	ldr	r1, [r4, #20]
 80054ec:	1d18      	adds	r0, r3, #4
 80054ee:	6010      	str	r0, [r2, #0]
 80054f0:	0628      	lsls	r0, r5, #24
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	d501      	bpl.n	80054fa <_printf_i+0x196>
 80054f6:	6019      	str	r1, [r3, #0]
 80054f8:	e002      	b.n	8005500 <_printf_i+0x19c>
 80054fa:	066a      	lsls	r2, r5, #25
 80054fc:	d5fb      	bpl.n	80054f6 <_printf_i+0x192>
 80054fe:	8019      	strh	r1, [r3, #0]
 8005500:	2300      	movs	r3, #0
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	4665      	mov	r5, ip
 8005506:	e7b9      	b.n	800547c <_printf_i+0x118>
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	1d19      	adds	r1, r3, #4
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	681d      	ldr	r5, [r3, #0]
 8005510:	6862      	ldr	r2, [r4, #4]
 8005512:	2100      	movs	r1, #0
 8005514:	4628      	mov	r0, r5
 8005516:	f7fa fe7b 	bl	8000210 <memchr>
 800551a:	b108      	cbz	r0, 8005520 <_printf_i+0x1bc>
 800551c:	1b40      	subs	r0, r0, r5
 800551e:	6060      	str	r0, [r4, #4]
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	2300      	movs	r3, #0
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552a:	e7a7      	b.n	800547c <_printf_i+0x118>
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	462a      	mov	r2, r5
 8005530:	4639      	mov	r1, r7
 8005532:	4630      	mov	r0, r6
 8005534:	47c0      	blx	r8
 8005536:	3001      	adds	r0, #1
 8005538:	d0aa      	beq.n	8005490 <_printf_i+0x12c>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	079b      	lsls	r3, r3, #30
 800553e:	d413      	bmi.n	8005568 <_printf_i+0x204>
 8005540:	68e0      	ldr	r0, [r4, #12]
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	4298      	cmp	r0, r3
 8005546:	bfb8      	it	lt
 8005548:	4618      	movlt	r0, r3
 800554a:	e7a3      	b.n	8005494 <_printf_i+0x130>
 800554c:	2301      	movs	r3, #1
 800554e:	464a      	mov	r2, r9
 8005550:	4639      	mov	r1, r7
 8005552:	4630      	mov	r0, r6
 8005554:	47c0      	blx	r8
 8005556:	3001      	adds	r0, #1
 8005558:	d09a      	beq.n	8005490 <_printf_i+0x12c>
 800555a:	3501      	adds	r5, #1
 800555c:	68e3      	ldr	r3, [r4, #12]
 800555e:	9a03      	ldr	r2, [sp, #12]
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	42ab      	cmp	r3, r5
 8005564:	dcf2      	bgt.n	800554c <_printf_i+0x1e8>
 8005566:	e7eb      	b.n	8005540 <_printf_i+0x1dc>
 8005568:	2500      	movs	r5, #0
 800556a:	f104 0919 	add.w	r9, r4, #25
 800556e:	e7f5      	b.n	800555c <_printf_i+0x1f8>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ac      	bne.n	80054ce <_printf_i+0x16a>
 8005574:	7803      	ldrb	r3, [r0, #0]
 8005576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800557a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557e:	e76c      	b.n	800545a <_printf_i+0xf6>
 8005580:	08005efd 	.word	0x08005efd
 8005584:	08005f0e 	.word	0x08005f0e

08005588 <_sbrk_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4c06      	ldr	r4, [pc, #24]	; (80055a4 <_sbrk_r+0x1c>)
 800558c:	2300      	movs	r3, #0
 800558e:	4605      	mov	r5, r0
 8005590:	4608      	mov	r0, r1
 8005592:	6023      	str	r3, [r4, #0]
 8005594:	f7fc fb6c 	bl	8001c70 <_sbrk>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_sbrk_r+0x1a>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_sbrk_r+0x1a>
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	20002948 	.word	0x20002948

080055a8 <__sread>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	f000 f8e0 	bl	8005774 <_read_r>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	bfab      	itete	ge
 80055b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055ba:	89a3      	ldrhlt	r3, [r4, #12]
 80055bc:	181b      	addge	r3, r3, r0
 80055be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055c2:	bfac      	ite	ge
 80055c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80055c6:	81a3      	strhlt	r3, [r4, #12]
 80055c8:	bd10      	pop	{r4, pc}

080055ca <__swrite>:
 80055ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	461f      	mov	r7, r3
 80055d0:	898b      	ldrh	r3, [r1, #12]
 80055d2:	05db      	lsls	r3, r3, #23
 80055d4:	4605      	mov	r5, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4616      	mov	r6, r2
 80055da:	d505      	bpl.n	80055e8 <__swrite+0x1e>
 80055dc:	2302      	movs	r3, #2
 80055de:	2200      	movs	r2, #0
 80055e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e4:	f000 f868 	bl	80056b8 <_lseek_r>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	4628      	mov	r0, r5
 80055fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055fe:	f000 b817 	b.w	8005630 <_write_r>

08005602 <__sseek>:
 8005602:	b510      	push	{r4, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560a:	f000 f855 	bl	80056b8 <_lseek_r>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	bf15      	itete	ne
 8005614:	6560      	strne	r0, [r4, #84]	; 0x54
 8005616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800561a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800561e:	81a3      	strheq	r3, [r4, #12]
 8005620:	bf18      	it	ne
 8005622:	81a3      	strhne	r3, [r4, #12]
 8005624:	bd10      	pop	{r4, pc}

08005626 <__sclose>:
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f000 b813 	b.w	8005654 <_close_r>
	...

08005630 <_write_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4c07      	ldr	r4, [pc, #28]	; (8005650 <_write_r+0x20>)
 8005634:	4605      	mov	r5, r0
 8005636:	4608      	mov	r0, r1
 8005638:	4611      	mov	r1, r2
 800563a:	2200      	movs	r2, #0
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f7fc fac5 	bl	8001bce <_write>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_write_r+0x1e>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	b103      	cbz	r3, 800564e <_write_r+0x1e>
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	20002948 	.word	0x20002948

08005654 <_close_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4c06      	ldr	r4, [pc, #24]	; (8005670 <_close_r+0x1c>)
 8005658:	2300      	movs	r3, #0
 800565a:	4605      	mov	r5, r0
 800565c:	4608      	mov	r0, r1
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	f7fc fad1 	bl	8001c06 <_close>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_close_r+0x1a>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	b103      	cbz	r3, 800566e <_close_r+0x1a>
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	20002948 	.word	0x20002948

08005674 <_fstat_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4c07      	ldr	r4, [pc, #28]	; (8005694 <_fstat_r+0x20>)
 8005678:	2300      	movs	r3, #0
 800567a:	4605      	mov	r5, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	f7fc facc 	bl	8001c1e <_fstat>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d102      	bne.n	8005690 <_fstat_r+0x1c>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	b103      	cbz	r3, 8005690 <_fstat_r+0x1c>
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	20002948 	.word	0x20002948

08005698 <_isatty_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4c06      	ldr	r4, [pc, #24]	; (80056b4 <_isatty_r+0x1c>)
 800569c:	2300      	movs	r3, #0
 800569e:	4605      	mov	r5, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	6023      	str	r3, [r4, #0]
 80056a4:	f7fc facb 	bl	8001c3e <_isatty>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_isatty_r+0x1a>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_isatty_r+0x1a>
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20002948 	.word	0x20002948

080056b8 <_lseek_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4c07      	ldr	r4, [pc, #28]	; (80056d8 <_lseek_r+0x20>)
 80056bc:	4605      	mov	r5, r0
 80056be:	4608      	mov	r0, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fc fac4 	bl	8001c54 <_lseek>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_lseek_r+0x1e>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_lseek_r+0x1e>
 80056d4:	602b      	str	r3, [r5, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20002948 	.word	0x20002948

080056dc <memcpy>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	1e43      	subs	r3, r0, #1
 80056e0:	440a      	add	r2, r1
 80056e2:	4291      	cmp	r1, r2
 80056e4:	d100      	bne.n	80056e8 <memcpy+0xc>
 80056e6:	bd10      	pop	{r4, pc}
 80056e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f0:	e7f7      	b.n	80056e2 <memcpy+0x6>

080056f2 <memmove>:
 80056f2:	4288      	cmp	r0, r1
 80056f4:	b510      	push	{r4, lr}
 80056f6:	eb01 0302 	add.w	r3, r1, r2
 80056fa:	d807      	bhi.n	800570c <memmove+0x1a>
 80056fc:	1e42      	subs	r2, r0, #1
 80056fe:	4299      	cmp	r1, r3
 8005700:	d00a      	beq.n	8005718 <memmove+0x26>
 8005702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005706:	f802 4f01 	strb.w	r4, [r2, #1]!
 800570a:	e7f8      	b.n	80056fe <memmove+0xc>
 800570c:	4283      	cmp	r3, r0
 800570e:	d9f5      	bls.n	80056fc <memmove+0xa>
 8005710:	1881      	adds	r1, r0, r2
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	42d3      	cmn	r3, r2
 8005716:	d100      	bne.n	800571a <memmove+0x28>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800571e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005722:	e7f7      	b.n	8005714 <memmove+0x22>

08005724 <__malloc_lock>:
 8005724:	4770      	bx	lr

08005726 <__malloc_unlock>:
 8005726:	4770      	bx	lr

08005728 <_realloc_r>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	4607      	mov	r7, r0
 800572c:	4614      	mov	r4, r2
 800572e:	460e      	mov	r6, r1
 8005730:	b921      	cbnz	r1, 800573c <_realloc_r+0x14>
 8005732:	4611      	mov	r1, r2
 8005734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005738:	f7ff bab2 	b.w	8004ca0 <_malloc_r>
 800573c:	b922      	cbnz	r2, 8005748 <_realloc_r+0x20>
 800573e:	f7ff fa61 	bl	8004c04 <_free_r>
 8005742:	4625      	mov	r5, r4
 8005744:	4628      	mov	r0, r5
 8005746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005748:	f000 f826 	bl	8005798 <_malloc_usable_size_r>
 800574c:	42a0      	cmp	r0, r4
 800574e:	d20f      	bcs.n	8005770 <_realloc_r+0x48>
 8005750:	4621      	mov	r1, r4
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff faa4 	bl	8004ca0 <_malloc_r>
 8005758:	4605      	mov	r5, r0
 800575a:	2800      	cmp	r0, #0
 800575c:	d0f2      	beq.n	8005744 <_realloc_r+0x1c>
 800575e:	4631      	mov	r1, r6
 8005760:	4622      	mov	r2, r4
 8005762:	f7ff ffbb 	bl	80056dc <memcpy>
 8005766:	4631      	mov	r1, r6
 8005768:	4638      	mov	r0, r7
 800576a:	f7ff fa4b 	bl	8004c04 <_free_r>
 800576e:	e7e9      	b.n	8005744 <_realloc_r+0x1c>
 8005770:	4635      	mov	r5, r6
 8005772:	e7e7      	b.n	8005744 <_realloc_r+0x1c>

08005774 <_read_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4c07      	ldr	r4, [pc, #28]	; (8005794 <_read_r+0x20>)
 8005778:	4605      	mov	r5, r0
 800577a:	4608      	mov	r0, r1
 800577c:	4611      	mov	r1, r2
 800577e:	2200      	movs	r2, #0
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f7fc fa06 	bl	8001b94 <_read>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_read_r+0x1e>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	b103      	cbz	r3, 8005792 <_read_r+0x1e>
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20002948 	.word	0x20002948

08005798 <_malloc_usable_size_r>:
 8005798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800579c:	1f18      	subs	r0, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfbc      	itt	lt
 80057a2:	580b      	ldrlt	r3, [r1, r0]
 80057a4:	18c0      	addlt	r0, r0, r3
 80057a6:	4770      	bx	lr

080057a8 <_init>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr

080057b4 <_fini>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr
