
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c4  080076c4  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076cc  080076cc  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  080076d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027f0  200001a0  08007874  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002990  08007874  00022990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165ac  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd9  00000000  00000000  0003677c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001140  00000000  00000000  00039458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  0003a598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000192f4  00000000  00000000  0003b580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd6e  00000000  00000000  00054874  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094b34  00000000  00000000  000625e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c8  00000000  00000000  000f7194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f38 	.word	0x08006f38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	08006f38 	.word	0x08006f38

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <str_Capitalized>:
	{NULL, NULL , NULL}
};

char Buff[2048];

void str_Capitalized (char *dest, char *str) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	int pos = 0, len = strlen (str);
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	6838      	ldr	r0, [r7, #0]
 80005c0:	f7ff fe18 	bl	80001f4 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
	for (; pos<len; ++ pos) {
 80005c8:	e021      	b.n	800060e <str_Capitalized+0x5e>
		if (str[pos]<='z' && str[pos]>='a') dest[pos]=str[pos]-32;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b7a      	cmp	r3, #122	; 0x7a
 80005d4:	d810      	bhi.n	80005f8 <str_Capitalized+0x48>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b60      	cmp	r3, #96	; 0x60
 80005e0:	d90a      	bls.n	80005f8 <str_Capitalized+0x48>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	3a20      	subs	r2, #32
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e007      	b.n	8000608 <str_Capitalized+0x58>
		else dest[pos] = str[pos];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	441a      	add	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	440b      	add	r3, r1
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	701a      	strb	r2, [r3, #0]
	for (; pos<len; ++ pos) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbd9      	blt.n	80005ca <str_Capitalized+0x1a>
	} dest[pos] = '\0';
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <AT_CMD_Dispose>:

u8 AT_CMD_Dispose(struct tok *tok) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	struct at_cmd_hanld_t *atcmd, *match = NULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	char name[32];
	atcmd = at_cmd_hanld;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <AT_CMD_Dispose+0x6c>)
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	str_Capitalized(name, tok->name);
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <str_Capitalized>
	while(atcmd->atcmd) {
 8000646:	e010      	b.n	800066a <AT_CMD_Dispose+0x42>
		if(strcmp(atcmd->atcmd, name) == 0) {
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <AT_CMD_Dispose+0x3c>
			match = atcmd; break;
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
 8000662:	e006      	b.n	8000672 <AT_CMD_Dispose+0x4a>
		} atcmd ++;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	330c      	adds	r3, #12
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(atcmd->atcmd) {
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ea      	bne.n	8000648 <AT_CMD_Dispose+0x20>
	} if(match) return match->send_hanld(match->atcmd, tok);
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <AT_CMD_Dispose+0x62>
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4610      	mov	r0, r2
 8000684:	4798      	blx	r3
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <AT_CMD_Dispose+0x64>
	else {return 1;}
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <CMD_Send>:

void CMD_Send(char *buff, char *atcmd, struct tok *tok) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b0c6      	sub	sp, #280	; 0x118
 800069c:	af00      	add	r7, sp, #0
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	6019      	str	r1, [r3, #0]
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	601a      	str	r2, [r3, #0]
	int i = 0; char temp[256];
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sprintf (buff, "%s", atcmd);
 80006b4:	f107 0208 	add.w	r2, r7, #8
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f005 fba7 	bl	8005e12 <strcpy>
	if (tok->num != 0) {
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d071      	beq.n	80007b4 <CMD_Send+0x11c>
		for (i=0; i<tok->num; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006d6:	e064      	b.n	80007a2 <CMD_Send+0x10a>
			if(i == 0 && tok->sendstr[i][0] == '?') {
 80006d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d120      	bne.n	8000722 <CMD_Send+0x8a>
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	4413      	add	r3, r2
 80006ec:	3321      	adds	r3, #33	; 0x21
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b3f      	cmp	r3, #63	; 0x3f
 80006f2:	d116      	bne.n	8000722 <CMD_Send+0x8a>
				sprintf(temp,"=%s",tok->sendstr[i]);
 80006f4:	1d3a      	adds	r2, r7, #4
 80006f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	3320      	adds	r3, #32
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	4413      	add	r3, r2
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4935      	ldr	r1, [pc, #212]	; (80007e0 <CMD_Send+0x148>)
 800070a:	4618      	mov	r0, r3
 800070c:	f005 fb52 	bl	8005db4 <siprintf>
				strcat(buff,temp);
 8000710:	f107 0214 	add.w	r2, r7, #20
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4611      	mov	r1, r2
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	f005 fb6a 	bl	8005df4 <strcat>
 8000720:	e03a      	b.n	8000798 <CMD_Send+0x100>
			} else if(i == 0 && tok->sendstr[i][0] != '?') {
 8000722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000726:	2b00      	cmp	r3, #0
 8000728:	d120      	bne.n	800076c <CMD_Send+0xd4>
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	4413      	add	r3, r2
 8000736:	3321      	adds	r3, #33	; 0x21
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b3f      	cmp	r3, #63	; 0x3f
 800073c:	d016      	beq.n	800076c <CMD_Send+0xd4>
				sprintf(temp,"=%s",tok->sendstr[i]);
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	3320      	adds	r3, #32
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4923      	ldr	r1, [pc, #140]	; (80007e0 <CMD_Send+0x148>)
 8000754:	4618      	mov	r0, r3
 8000756:	f005 fb2d 	bl	8005db4 <siprintf>
				strcat(buff,temp);
 800075a:	f107 0214 	add.w	r2, r7, #20
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4611      	mov	r1, r2
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	f005 fb45 	bl	8005df4 <strcat>
 800076a:	e015      	b.n	8000798 <CMD_Send+0x100>
			} else {
				sprintf(temp,",%s",tok->sendstr[i]);
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	3320      	adds	r3, #32
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	4413      	add	r3, r2
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4918      	ldr	r1, [pc, #96]	; (80007e4 <CMD_Send+0x14c>)
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fb16 	bl	8005db4 <siprintf>
				strcat(buff,temp);
 8000788:	f107 0214 	add.w	r2, r7, #20
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4611      	mov	r1, r2
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	f005 fb2e 	bl	8005df4 <strcat>
		for (i=0; i<tok->num; i++) {
 8000798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b0:	4293      	cmp	r3, r2
 80007b2:	db91      	blt.n	80006d8 <CMD_Send+0x40>
			}
		}
	} strcat(buff,"\r\n");
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f7ff fd1b 	bl	80001f4 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <CMD_Send+0x150>)
 80007cc:	8811      	ldrh	r1, [r2, #0]
 80007ce:	7892      	ldrb	r2, [r2, #2]
 80007d0:	8019      	strh	r1, [r3, #0]
 80007d2:	709a      	strb	r2, [r3, #2]
}
 80007d4:	bf00      	nop
 80007d6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08007014 	.word	0x08007014
 80007e4:	08007018 	.word	0x08007018
 80007e8:	0800701c 	.word	0x0800701c

080007ec <AT_Send>:

u8 AT_Send(char *atcmd, struct tok *tok) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0c4      	sub	sp, #272	; 0x110
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	6018      	str	r0, [r3, #0]
 80007f6:	463b      	mov	r3, r7
 80007f8:	6019      	str	r1, [r3, #0]
	int i; char buff[256];
	for(i=0; i<Retime; ++ i) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000800:	e027      	b.n	8000852 <AT_Send+0x66>
		CMD_Send(buff, atcmd, tok);
 8000802:	463a      	mov	r2, r7
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	f107 000c 	add.w	r0, r7, #12
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	f7ff ff43 	bl	8000698 <CMD_Send>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)buff, strlen(buff));
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcec 	bl	80001f4 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <AT_Send+0x7c>)
 8000828:	f004 fb80 	bl	8004f2c <HAL_UART_Transmit_IT>
		if(!AT_Return(tok->ret, 1)) {return 0;}
 800082c:	463b      	mov	r3, r7
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000834:	3301      	adds	r3, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f817 	bl	800086c <AT_Return>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <AT_Send+0x5c>
 8000844:	2300      	movs	r3, #0
 8000846:	e009      	b.n	800085c <AT_Send+0x70>
	for(i=0; i<Retime; ++ i) {
 8000848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800084c:	3301      	adds	r3, #1
 800084e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000856:	2b01      	cmp	r3, #1
 8000858:	ddd3      	ble.n	8000802 <AT_Send+0x16>
	} return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000eb4 	.word	0x20000eb4

0800086c <AT_Return>:

u8 AT_Return(char *str, int flag) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t Time_count = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
	Time_count = Timeout;
 800087a:	230a      	movs	r3, #10
 800087c:	60fb      	str	r3, [r7, #12]
	memset(Buff, 0, sizeof Buff);
 800087e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <AT_Return+0x60>)
 8000886:	f005 fa11 	bl	8005cac <memset>
	while(Time_count --) {
 800088a:	e015      	b.n	80008b8 <AT_Return+0x4c>
		if (flag) HAL_UART_Receive(&huart2, (uint8_t *)Buff, sizeof Buff, 100);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <AT_Return+0x34>
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <AT_Return+0x60>)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <AT_Return+0x64>)
 800089c:	f004 faa0 	bl	8004de0 <HAL_UART_Receive>
		if(strstr((const char *)Buff,str)!=NULL) {return 0;}
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <AT_Return+0x60>)
 80008a4:	f005 fabd 	bl	8005e22 <strstr>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <AT_Return+0x46>
 80008ae:	2300      	movs	r3, #0
 80008b0:	e008      	b.n	80008c4 <AT_Return+0x58>
		HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f001 ff18 	bl	80026e8 <HAL_Delay>
	while(Time_count --) {
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	60fa      	str	r2, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1e4      	bne.n	800088c <AT_Return+0x20>
	} return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000061c 	.word	0x2000061c
 80008d0:	20000eb4 	.word	0x20000eb4

080008d4 <Buff_clear>:

void Buff_clear(struct tok *tok) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	tok->num = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
	memset(tok->sendstr, 0, sizeof(tok->sendstr));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3321      	adds	r3, #33	; 0x21
 80008e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 f9dc 	bl	8005cac <memset>
	memset(tok->ret, 0, sizeof(tok->ret));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80008fa:	3301      	adds	r3, #1
 80008fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 f9d2 	bl	8005cac <memset>
	memset(Buff, 0, sizeof(Buff));
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	2100      	movs	r1, #0
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <Buff_clear+0x48>)
 8000910:	f005 f9cc 	bl	8005cac <memset>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000061c 	.word	0x2000061c

08000920 <Set_TFT_Backlight_PWM>:

#define XMAX 240
#define YMAX 400
#define TTOT 96000

void Set_TFT_Backlight_PWM(u8 PWMtoSet) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, PWMtoSet);
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <Set_TFT_Backlight_PWM+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000e74 	.word	0x20000e74

08000944 <Cnange_TFT_Backlight>:

void Cnange_TFT_Backlight() {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	BgPWMLight = BgPWMLight<99? BgPWMLight+33:0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b62      	cmp	r3, #98	; 0x62
 800094e:	d804      	bhi.n	800095a <Cnange_TFT_Backlight+0x16>
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <Cnange_TFT_Backlight+0x38>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3321      	adds	r3, #33	; 0x21
 8000956:	b2db      	uxtb	r3, r3
 8000958:	e000      	b.n	800095c <Cnange_TFT_Backlight+0x18>
 800095a:	2300      	movs	r3, #0
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800095e:	7013      	strb	r3, [r2, #0]
	Set_TFT_Backlight_PWM(BgPWMLight);
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <Cnange_TFT_Backlight+0x38>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffdb 	bl	8000920 <Set_TFT_Backlight_PWM>
	printf("[INT0] BGLT: %d\r\n", BgPWMLight);
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <Cnange_TFT_Backlight+0x3c>)
 8000972:	f005 f9a3 	bl	8005cbc <iprintf>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000f0 	.word	0x200000f0
 8000980:	08007020 	.word	0x08007020

08000984 <SPI_WriteByte>:
#define	DISPLAY_RS_CLR  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET)

#define	DISPLAY_RST_SET  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET)
#define	DISPLAY_RST_CLR  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET)

u8 SPI_WriteByte(u8 *content, u16 size) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi1, content, size, 1000);
 8000990:	887a      	ldrh	r2, [r7, #2]
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <SPI_WriteByte+0x24>)
 800099a:	f003 fa11 	bl	8003dc0 <HAL_SPI_Transmit>
 800099e:	4603      	mov	r3, r0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000e1c 	.word	0x20000e1c

080009ac <SPI_WriteByte_u8>:

void SPI_WriteByte_u8(u8 content) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	SPI_WriteByte(&content, 1);
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffe2 	bl	8000984 <SPI_WriteByte>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <TFT_WriteComm>:

void TFT_WriteComm(u8 addr) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	DISPLAY_CS_CLR;
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <TFT_WriteComm+0x38>)
 80009d8:	f002 fd20 	bl	800341c <HAL_GPIO_WritePin>
	DISPLAY_RS_CLR;
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <TFT_WriteComm+0x38>)
 80009e2:	f002 fd1b 	bl	800341c <HAL_GPIO_WritePin>
	SPI_WriteByte_u8(addr);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffdf 	bl	80009ac <SPI_WriteByte_u8>
	DISPLAY_CS_SET;
 80009ee:	2201      	movs	r2, #1
 80009f0:	2120      	movs	r1, #32
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <TFT_WriteComm+0x38>)
 80009f4:	f002 fd12 	bl	800341c <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40020400 	.word	0x40020400

08000a04 <TFT_WriteData>:

void TFT_WriteData(u8 data) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	DISPLAY_CS_CLR;
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <TFT_WriteData+0x38>)
 8000a14:	f002 fd02 	bl	800341c <HAL_GPIO_WritePin>
	DISPLAY_RS_SET;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <TFT_WriteData+0x38>)
 8000a1e:	f002 fcfd 	bl	800341c <HAL_GPIO_WritePin>
	SPI_WriteByte_u8(data);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ffc1 	bl	80009ac <SPI_WriteByte_u8>
	DISPLAY_CS_SET;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <TFT_WriteData+0x38>)
 8000a30:	f002 fcf4 	bl	800341c <HAL_GPIO_WritePin>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40020400 	.word	0x40020400

08000a40 <TFT_WriteData_u16>:

void TFT_WriteData_u16(u16 data) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	DISPLAY_CS_CLR;
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <TFT_WriteData_u16+0x48>)
 8000a50:	f002 fce4 	bl	800341c <HAL_GPIO_WritePin>
	DISPLAY_RS_SET;
 8000a54:	2201      	movs	r2, #1
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <TFT_WriteData_u16+0x48>)
 8000a5a:	f002 fcdf 	bl	800341c <HAL_GPIO_WritePin>
	SPI_WriteByte_u8(data >> 8);
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffa0 	bl	80009ac <SPI_WriteByte_u8>
	SPI_WriteByte_u8(data&0xFF);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff9b 	bl	80009ac <SPI_WriteByte_u8>
	DISPLAY_CS_SET;
 8000a76:	2201      	movs	r2, #1
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <TFT_WriteData_u16+0x48>)
 8000a7c:	f002 fcce 	bl	800341c <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40020400 	.word	0x40020400

08000a8c <TFT_ReStart>:
void TFT_WriteRegi(u8 addr, u16 data) {
	TFT_WriteComm(addr);
	TFT_WriteData_u16(data);
}

void TFT_ReStart(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	DISPLAY_RST_CLR;
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <TFT_ReStart+0x28>)
 8000a96:	f002 fcc1 	bl	800341c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a9a:	20c8      	movs	r0, #200	; 0xc8
 8000a9c:	f001 fe24 	bl	80026e8 <HAL_Delay>
	DISPLAY_RST_SET;
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <TFT_ReStart+0x28>)
 8000aa6:	f002 fcb9 	bl	800341c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f001 fe1c 	bl	80026e8 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <TFT_SelectRange>:
	TFT_WriteComm(0x2B);
	TFT_WriteData_u16(ypos);
	TFT_WriteComm(0x2C);
}

void TFT_SelectRange(u16 xfr, u16 xto, u16 yfr, u16 yto) {
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	4603      	mov	r3, r0
 8000acc:	80bb      	strh	r3, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	807b      	strh	r3, [r7, #2]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	803b      	strh	r3, [r7, #0]
	TFT_WriteComm(0x02);
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff ff76 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(xfr>>8);
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff8d 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x03);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f7ff ff6c 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(xfr&0xFF);
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff85 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x04);
 8000afa:	2004      	movs	r0, #4
 8000afc:	f7ff ff64 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(xto>>8);
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff7b 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x05);
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f7ff ff5a 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(xto&0xFF);
 8000b14:	88bb      	ldrh	r3, [r7, #4]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff73 	bl	8000a04 <TFT_WriteData>

	TFT_WriteComm(0x06);
 8000b1e:	2006      	movs	r0, #6
 8000b20:	f7ff ff52 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(yfr>>8);
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff69 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x07);
 8000b32:	2007      	movs	r0, #7
 8000b34:	f7ff ff48 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(yfr&0xFF);
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff61 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x08);
 8000b42:	2008      	movs	r0, #8
 8000b44:	f7ff ff40 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(yto>>8);
 8000b48:	883b      	ldrh	r3, [r7, #0]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff57 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x09);
 8000b56:	2009      	movs	r0, #9
 8000b58:	f7ff ff36 	bl	80009c8 <TFT_WriteComm>
	TFT_WriteData(yto&0xFF);
 8000b5c:	883b      	ldrh	r3, [r7, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff4f 	bl	8000a04 <TFT_WriteData>

	TFT_WriteComm(0x22);
 8000b66:	2022      	movs	r0, #34	; 0x22
 8000b68:	f7ff ff2e 	bl	80009c8 <TFT_WriteComm>
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd90      	pop	{r4, r7, pc}

08000b74 <TFT_DrawRect>:

void TFT_DrawRect(u16 xpos, u16 ypos, u16 w, u16 h, u16 color) {
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4623      	mov	r3, r4
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	4603      	mov	r3, r0
 8000b88:	80bb      	strh	r3, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	807b      	strh	r3, [r7, #2]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	803b      	strh	r3, [r7, #0]
	TFT_SelectRange(xpos, xpos+w-1, ypos, ypos+h-1);
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	883b      	ldrh	r3, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	88f8      	ldrh	r0, [r7, #6]
 8000bae:	f7ff ff83 	bl	8000ab8 <TFT_SelectRange>
	TFT_WriteData_u16(color);
 8000bb2:	8b3b      	ldrh	r3, [r7, #24]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff43 	bl	8000a40 <TFT_WriteData_u16>
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}

08000bc2 <TFT_DrawPoint>:

void TFT_DrawPoint(u16 xpos, u16 ypos, u16 color) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	80bb      	strh	r3, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	807b      	strh	r3, [r7, #2]

	TFT_SelectRange(xpos, xpos, ypos, ypos);
 8000bd4:	88bb      	ldrh	r3, [r7, #4]
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	88f9      	ldrh	r1, [r7, #6]
 8000bda:	88f8      	ldrh	r0, [r7, #6]
 8000bdc:	f7ff ff6c 	bl	8000ab8 <TFT_SelectRange>
	TFT_WriteData_u16(color);
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff2c 	bl	8000a40 <TFT_WriteData_u16>
	//TFT_SelectPos(xpos, ypos);
	//TFT_WriteData_u16(color);
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <TFT_INIT>:
		SPI_WriteByte_u8(color >> 8);
		SPI_WriteByte_u8(color&0xFF);
	} DISPLAY_CS_SET;
}

void TFT_INIT(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	TFT_ReStart();
 8000bf4:	f7ff ff4a 	bl	8000a8c <TFT_ReStart>

	// HX8352B
	TFT_WriteComm(0x00E2); TFT_WriteData(0x0015);
 8000bf8:	20e2      	movs	r0, #226	; 0xe2
 8000bfa:	f7ff fee5 	bl	80009c8 <TFT_WriteComm>
 8000bfe:	2015      	movs	r0, #21
 8000c00:	f7ff ff00 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00E5); TFT_WriteData(0x0018);
 8000c04:	20e5      	movs	r0, #229	; 0xe5
 8000c06:	f7ff fedf 	bl	80009c8 <TFT_WriteComm>
 8000c0a:	2018      	movs	r0, #24
 8000c0c:	f7ff fefa 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00E7); TFT_WriteData(0x0018);
 8000c10:	20e7      	movs	r0, #231	; 0xe7
 8000c12:	f7ff fed9 	bl	80009c8 <TFT_WriteComm>
 8000c16:	2018      	movs	r0, #24
 8000c18:	f7ff fef4 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00E8); TFT_WriteData(0x0040);
 8000c1c:	20e8      	movs	r0, #232	; 0xe8
 8000c1e:	f7ff fed3 	bl	80009c8 <TFT_WriteComm>
 8000c22:	2040      	movs	r0, #64	; 0x40
 8000c24:	f7ff feee 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00EC); TFT_WriteData(0x0009);
 8000c28:	20ec      	movs	r0, #236	; 0xec
 8000c2a:	f7ff fecd 	bl	80009c8 <TFT_WriteComm>
 8000c2e:	2009      	movs	r0, #9
 8000c30:	f7ff fee8 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00ED); TFT_WriteData(0x0006);
 8000c34:	20ed      	movs	r0, #237	; 0xed
 8000c36:	f7ff fec7 	bl	80009c8 <TFT_WriteComm>
 8000c3a:	2006      	movs	r0, #6
 8000c3c:	f7ff fee2 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00EE); TFT_WriteData(0x0020); // 0x0020
 8000c40:	20ee      	movs	r0, #238	; 0xee
 8000c42:	f7ff fec1 	bl	80009c8 <TFT_WriteComm>
 8000c46:	2020      	movs	r0, #32
 8000c48:	f7ff fedc 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x00EF); TFT_WriteData(0x0050);
 8000c4c:	20ef      	movs	r0, #239	; 0xef
 8000c4e:	f7ff febb 	bl	80009c8 <TFT_WriteComm>
 8000c52:	2050      	movs	r0, #80	; 0x50
 8000c54:	f7ff fed6 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0029); TFT_WriteData(0x0001);
 8000c58:	2029      	movs	r0, #41	; 0x29
 8000c5a:	f7ff feb5 	bl	80009c8 <TFT_WriteComm>
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fed0 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x002B); TFT_WriteData(0x0003);
 8000c64:	202b      	movs	r0, #43	; 0x2b
 8000c66:	f7ff feaf 	bl	80009c8 <TFT_WriteComm>
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f7ff feca 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x002E); TFT_WriteData(0x0085);
 8000c70:	202e      	movs	r0, #46	; 0x2e
 8000c72:	f7ff fea9 	bl	80009c8 <TFT_WriteComm>
 8000c76:	2085      	movs	r0, #133	; 0x85
 8000c78:	f7ff fec4 	bl	8000a04 <TFT_WriteData>

	// Power on Setting
	TFT_WriteComm(0x0017); TFT_WriteData(0x0005); // 18BIT:0006,16BIT:0005,
 8000c7c:	2017      	movs	r0, #23
 8000c7e:	f7ff fea3 	bl	80009c8 <TFT_WriteComm>
 8000c82:	2005      	movs	r0, #5
 8000c84:	f7ff febe 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0023); TFT_WriteData(0x0076);
 8000c88:	2023      	movs	r0, #35	; 0x23
 8000c8a:	f7ff fe9d 	bl	80009c8 <TFT_WriteComm>
 8000c8e:	2076      	movs	r0, #118	; 0x76
 8000c90:	f7ff feb8 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0024); TFT_WriteData(0x0050); // 0x57,0x4e
 8000c94:	2024      	movs	r0, #36	; 0x24
 8000c96:	f7ff fe97 	bl	80009c8 <TFT_WriteComm>
 8000c9a:	2050      	movs	r0, #80	; 0x50
 8000c9c:	f7ff feb2 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0025); TFT_WriteData(0x0071); // 0x67
 8000ca0:	2025      	movs	r0, #37	; 0x25
 8000ca2:	f7ff fe91 	bl	80009c8 <TFT_WriteComm>
 8000ca6:	2071      	movs	r0, #113	; 0x71
 8000ca8:	f7ff feac 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x002f); TFT_WriteData(0x0001); // 1: 1_LINE INVERSION,0:FRAME INVERSION
 8000cac:	202f      	movs	r0, #47	; 0x2f
 8000cae:	f7ff fe8b 	bl	80009c8 <TFT_WriteComm>
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fea6 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x001B); TFT_WriteData(0x001E);
 8000cb8:	201b      	movs	r0, #27
 8000cba:	f7ff fe85 	bl	80009c8 <TFT_WriteComm>
 8000cbe:	201e      	movs	r0, #30
 8000cc0:	f7ff fea0 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0001); TFT_WriteData(0x0000);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fe7f 	bl	80009c8 <TFT_WriteComm>
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fe9a 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x001C); TFT_WriteData(0x0004);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f7ff fe79 	bl	80009c8 <TFT_WriteComm>
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f7ff fe94 	bl	8000a04 <TFT_WriteData>

	// Power on sequence
	TFT_WriteComm(0x0018); TFT_WriteData(0x00CC);
 8000cdc:	2018      	movs	r0, #24
 8000cde:	f7ff fe73 	bl	80009c8 <TFT_WriteComm>
 8000ce2:	20cc      	movs	r0, #204	; 0xcc
 8000ce4:	f7ff fe8e 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0019); TFT_WriteData(0x0001);
 8000ce8:	2019      	movs	r0, #25
 8000cea:	f7ff fe6d 	bl	80009c8 <TFT_WriteComm>
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fe88 	bl	8000a04 <TFT_WriteData>
	HAL_Delay(5);
 8000cf4:	2005      	movs	r0, #5
 8000cf6:	f001 fcf7 	bl	80026e8 <HAL_Delay>
	TFT_WriteComm(0x001F); TFT_WriteData(0x008C);
 8000cfa:	201f      	movs	r0, #31
 8000cfc:	f7ff fe64 	bl	80009c8 <TFT_WriteComm>
 8000d00:	208c      	movs	r0, #140	; 0x8c
 8000d02:	f7ff fe7f 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x001F); TFT_WriteData(0x0084);
 8000d06:	201f      	movs	r0, #31
 8000d08:	f7ff fe5e 	bl	80009c8 <TFT_WriteComm>
 8000d0c:	2084      	movs	r0, #132	; 0x84
 8000d0e:	f7ff fe79 	bl	8000a04 <TFT_WriteData>
	HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f001 fce8 	bl	80026e8 <HAL_Delay>
	TFT_WriteComm(0x001F); TFT_WriteData(0x0094);
 8000d18:	201f      	movs	r0, #31
 8000d1a:	f7ff fe55 	bl	80009c8 <TFT_WriteComm>
 8000d1e:	2094      	movs	r0, #148	; 0x94
 8000d20:	f7ff fe70 	bl	8000a04 <TFT_WriteData>
	HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 fcdf 	bl	80026e8 <HAL_Delay>
	TFT_WriteComm(0x001F); TFT_WriteData(0x00D4);
 8000d2a:	201f      	movs	r0, #31
 8000d2c:	f7ff fe4c 	bl	80009c8 <TFT_WriteComm>
 8000d30:	20d4      	movs	r0, #212	; 0xd4
 8000d32:	f7ff fe67 	bl	8000a04 <TFT_WriteData>
	HAL_Delay(5);
 8000d36:	2005      	movs	r0, #5
 8000d38:	f001 fcd6 	bl	80026e8 <HAL_Delay>

	// Gamma Setting
	TFT_WriteComm(0x0040); TFT_WriteData(0x0008);
 8000d3c:	2040      	movs	r0, #64	; 0x40
 8000d3e:	f7ff fe43 	bl	80009c8 <TFT_WriteComm>
 8000d42:	2008      	movs	r0, #8
 8000d44:	f7ff fe5e 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0041); TFT_WriteData(0x0031);
 8000d48:	2041      	movs	r0, #65	; 0x41
 8000d4a:	f7ff fe3d 	bl	80009c8 <TFT_WriteComm>
 8000d4e:	2031      	movs	r0, #49	; 0x31
 8000d50:	f7ff fe58 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0042); TFT_WriteData(0x002F);
 8000d54:	2042      	movs	r0, #66	; 0x42
 8000d56:	f7ff fe37 	bl	80009c8 <TFT_WriteComm>
 8000d5a:	202f      	movs	r0, #47	; 0x2f
 8000d5c:	f7ff fe52 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0043); TFT_WriteData(0x003E);
 8000d60:	2043      	movs	r0, #67	; 0x43
 8000d62:	f7ff fe31 	bl	80009c8 <TFT_WriteComm>
 8000d66:	203e      	movs	r0, #62	; 0x3e
 8000d68:	f7ff fe4c 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0044); TFT_WriteData(0x003D);
 8000d6c:	2044      	movs	r0, #68	; 0x44
 8000d6e:	f7ff fe2b 	bl	80009c8 <TFT_WriteComm>
 8000d72:	203d      	movs	r0, #61	; 0x3d
 8000d74:	f7ff fe46 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0045); TFT_WriteData(0x003F);
 8000d78:	2045      	movs	r0, #69	; 0x45
 8000d7a:	f7ff fe25 	bl	80009c8 <TFT_WriteComm>
 8000d7e:	203f      	movs	r0, #63	; 0x3f
 8000d80:	f7ff fe40 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0046); TFT_WriteData(0x002F);
 8000d84:	2046      	movs	r0, #70	; 0x46
 8000d86:	f7ff fe1f 	bl	80009c8 <TFT_WriteComm>
 8000d8a:	202f      	movs	r0, #47	; 0x2f
 8000d8c:	f7ff fe3a 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0047); TFT_WriteData(0x0079);
 8000d90:	2047      	movs	r0, #71	; 0x47
 8000d92:	f7ff fe19 	bl	80009c8 <TFT_WriteComm>
 8000d96:	2079      	movs	r0, #121	; 0x79
 8000d98:	f7ff fe34 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0048); TFT_WriteData(0x0008);
 8000d9c:	2048      	movs	r0, #72	; 0x48
 8000d9e:	f7ff fe13 	bl	80009c8 <TFT_WriteComm>
 8000da2:	2008      	movs	r0, #8
 8000da4:	f7ff fe2e 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0049); TFT_WriteData(0x0006);
 8000da8:	2049      	movs	r0, #73	; 0x49
 8000daa:	f7ff fe0d 	bl	80009c8 <TFT_WriteComm>
 8000dae:	2006      	movs	r0, #6
 8000db0:	f7ff fe28 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x004A); TFT_WriteData(0x0008);
 8000db4:	204a      	movs	r0, #74	; 0x4a
 8000db6:	f7ff fe07 	bl	80009c8 <TFT_WriteComm>
 8000dba:	2008      	movs	r0, #8
 8000dbc:	f7ff fe22 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x004B); TFT_WriteData(0x000E);
 8000dc0:	204b      	movs	r0, #75	; 0x4b
 8000dc2:	f7ff fe01 	bl	80009c8 <TFT_WriteComm>
 8000dc6:	200e      	movs	r0, #14
 8000dc8:	f7ff fe1c 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x004C); TFT_WriteData(0x0017);
 8000dcc:	204c      	movs	r0, #76	; 0x4c
 8000dce:	f7ff fdfb 	bl	80009c8 <TFT_WriteComm>
 8000dd2:	2017      	movs	r0, #23
 8000dd4:	f7ff fe16 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0050); TFT_WriteData(0x0000);
 8000dd8:	2050      	movs	r0, #80	; 0x50
 8000dda:	f7ff fdf5 	bl	80009c8 <TFT_WriteComm>
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fe10 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0051); TFT_WriteData(0x0002);
 8000de4:	2051      	movs	r0, #81	; 0x51
 8000de6:	f7ff fdef 	bl	80009c8 <TFT_WriteComm>
 8000dea:	2002      	movs	r0, #2
 8000dec:	f7ff fe0a 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0052); TFT_WriteData(0x0001);
 8000df0:	2052      	movs	r0, #82	; 0x52
 8000df2:	f7ff fde9 	bl	80009c8 <TFT_WriteComm>
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fe04 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0053); TFT_WriteData(0x0010);
 8000dfc:	2053      	movs	r0, #83	; 0x53
 8000dfe:	f7ff fde3 	bl	80009c8 <TFT_WriteComm>
 8000e02:	2010      	movs	r0, #16
 8000e04:	f7ff fdfe 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0054); TFT_WriteData(0x000E);
 8000e08:	2054      	movs	r0, #84	; 0x54
 8000e0a:	f7ff fddd 	bl	80009c8 <TFT_WriteComm>
 8000e0e:	200e      	movs	r0, #14
 8000e10:	f7ff fdf8 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0055); TFT_WriteData(0x0037);
 8000e14:	2055      	movs	r0, #85	; 0x55
 8000e16:	f7ff fdd7 	bl	80009c8 <TFT_WriteComm>
 8000e1a:	2037      	movs	r0, #55	; 0x37
 8000e1c:	f7ff fdf2 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0056); TFT_WriteData(0x0006);
 8000e20:	2056      	movs	r0, #86	; 0x56
 8000e22:	f7ff fdd1 	bl	80009c8 <TFT_WriteComm>
 8000e26:	2006      	movs	r0, #6
 8000e28:	f7ff fdec 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0057); TFT_WriteData(0x0050);
 8000e2c:	2057      	movs	r0, #87	; 0x57
 8000e2e:	f7ff fdcb 	bl	80009c8 <TFT_WriteComm>
 8000e32:	2050      	movs	r0, #80	; 0x50
 8000e34:	f7ff fde6 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0058); TFT_WriteData(0x0008);
 8000e38:	2058      	movs	r0, #88	; 0x58
 8000e3a:	f7ff fdc5 	bl	80009c8 <TFT_WriteComm>
 8000e3e:	2008      	movs	r0, #8
 8000e40:	f7ff fde0 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0059); TFT_WriteData(0x0011);
 8000e44:	2059      	movs	r0, #89	; 0x59
 8000e46:	f7ff fdbf 	bl	80009c8 <TFT_WriteComm>
 8000e4a:	2011      	movs	r0, #17
 8000e4c:	f7ff fdda 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x005A); TFT_WriteData(0x0017);
 8000e50:	205a      	movs	r0, #90	; 0x5a
 8000e52:	f7ff fdb9 	bl	80009c8 <TFT_WriteComm>
 8000e56:	2017      	movs	r0, #23
 8000e58:	f7ff fdd4 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x005B); TFT_WriteData(0x0019);
 8000e5c:	205b      	movs	r0, #91	; 0x5b
 8000e5e:	f7ff fdb3 	bl	80009c8 <TFT_WriteComm>
 8000e62:	2019      	movs	r0, #25
 8000e64:	f7ff fdce 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x005C); TFT_WriteData(0x0017);
 8000e68:	205c      	movs	r0, #92	; 0x5c
 8000e6a:	f7ff fdad 	bl	80009c8 <TFT_WriteComm>
 8000e6e:	2017      	movs	r0, #23
 8000e70:	f7ff fdc8 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x005D); TFT_WriteData(0x00FF);
 8000e74:	205d      	movs	r0, #93	; 0x5d
 8000e76:	f7ff fda7 	bl	80009c8 <TFT_WriteComm>
 8000e7a:	20ff      	movs	r0, #255	; 0xff
 8000e7c:	f7ff fdc2 	bl	8000a04 <TFT_WriteData>

	 //Window set
	TFT_WriteComm(0x0002); TFT_WriteData(0x0000); // Column Address Start Register, High 8 bit
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff fda1 	bl	80009c8 <TFT_WriteComm>
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fdbc 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0003); TFT_WriteData(0x0000); // Column Address Start Register, Low 8bit
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fd9b 	bl	80009c8 <TFT_WriteComm>
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fdb6 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0004); TFT_WriteData(0x0000); // Column Address end Register, High 8 bit
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff fd95 	bl	80009c8 <TFT_WriteComm>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fdb0 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0005); TFT_WriteData(0x00EF); // Column Address end Start Register, Low 8 bit
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f7ff fd8f 	bl	80009c8 <TFT_WriteComm>
 8000eaa:	20ef      	movs	r0, #239	; 0xef
 8000eac:	f7ff fdaa 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0006); TFT_WriteData(0x0000); // Row Address Start Register, High 8 bit
 8000eb0:	2006      	movs	r0, #6
 8000eb2:	f7ff fd89 	bl	80009c8 <TFT_WriteComm>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fda4 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0007); TFT_WriteData(0x0000); // Row Address Start Register, Low 8bit
 8000ebc:	2007      	movs	r0, #7
 8000ebe:	f7ff fd83 	bl	80009c8 <TFT_WriteComm>
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fd9e 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0008); TFT_WriteData(0x0001); // Row Address end Register, High 8 bit
 8000ec8:	2008      	movs	r0, #8
 8000eca:	f7ff fd7d 	bl	80009c8 <TFT_WriteComm>
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fd98 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0009); TFT_WriteData(0x008F); // Row Address end Register, Low 8bit
 8000ed4:	2009      	movs	r0, #9
 8000ed6:	f7ff fd77 	bl	80009c8 <TFT_WriteComm>
 8000eda:	208f      	movs	r0, #143	; 0x8f
 8000edc:	f7ff fd92 	bl	8000a04 <TFT_WriteData>

	// Set start address
	TFT_WriteComm(0x80); TFT_WriteData(0x00);
 8000ee0:	2080      	movs	r0, #128	; 0x80
 8000ee2:	f7ff fd71 	bl	80009c8 <TFT_WriteComm>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fd8c 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x81); TFT_WriteData(0x00); // CAC[8:0]
 8000eec:	2081      	movs	r0, #129	; 0x81
 8000eee:	f7ff fd6b 	bl	80009c8 <TFT_WriteComm>
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fd86 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x82); TFT_WriteData(0x00);
 8000ef8:	2082      	movs	r0, #130	; 0x82
 8000efa:	f7ff fd65 	bl	80009c8 <TFT_WriteComm>
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fd80 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x83); TFT_WriteData(0x00); // RAC[8:0]
 8000f04:	2083      	movs	r0, #131	; 0x83
 8000f06:	f7ff fd5f 	bl	80009c8 <TFT_WriteComm>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fd7a 	bl	8000a04 <TFT_WriteData>

	// Display ON Setting
	TFT_WriteComm(0x0016); TFT_WriteData(0x00C8); // 0x0B,0x09,0xC8
 8000f10:	2016      	movs	r0, #22
 8000f12:	f7ff fd59 	bl	80009c8 <TFT_WriteComm>
 8000f16:	20c8      	movs	r0, #200	; 0xc8
 8000f18:	f7ff fd74 	bl	8000a04 <TFT_WriteData>
	TFT_WriteComm(0x0028); TFT_WriteData(0x0020);
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f7ff fd53 	bl	80009c8 <TFT_WriteComm>
 8000f22:	2020      	movs	r0, #32
 8000f24:	f7ff fd6e 	bl	8000a04 <TFT_WriteData>
	HAL_Delay(40);
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	f001 fbdd 	bl	80026e8 <HAL_Delay>
	TFT_WriteComm(0x0028); TFT_WriteData(0x0038);
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f7ff fd4a 	bl	80009c8 <TFT_WriteComm>
 8000f34:	2038      	movs	r0, #56	; 0x38
 8000f36:	f7ff fd65 	bl	8000a04 <TFT_WriteData>
	HAL_Delay(40); // Waiting 2 frames al least
 8000f3a:	2028      	movs	r0, #40	; 0x28
 8000f3c:	f001 fbd4 	bl	80026e8 <HAL_Delay>
	TFT_WriteComm(0x0028); TFT_WriteData(0x003C);
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f7ff fd41 	bl	80009c8 <TFT_WriteComm>
 8000f46:	203c      	movs	r0, #60	; 0x3c
 8000f48:	f7ff fd5c 	bl	8000a04 <TFT_WriteData>

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <ADC_Calibration>:

u32 adcVal;
u8  batVal;
u16 adcBase = 1<<6;

void ADC_Calibration() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	// HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_Delay(100);
 8000f54:	2064      	movs	r0, #100	; 0x64
 8000f56:	f001 fbc7 	bl	80026e8 <HAL_Delay>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <ADC_Read_Data>:

u32 ADC_Read_Data() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <ADC_Read_Data+0x20>)
 8000f66:	f001 fc25 	bl	80027b4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 50);
 8000f6a:	2132      	movs	r1, #50	; 0x32
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <ADC_Read_Data+0x20>)
 8000f6e:	f001 fcc7 	bl	8002900 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <ADC_Read_Data+0x20>)
 8000f74:	f001 fd48 	bl	8002a08 <HAL_ADC_GetValue>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200005d4 	.word	0x200005d4

08000f84 <Read_Battery_Life>:

void Read_Battery_Life() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	adcVal = ADC_Read_Data(&hadc1);
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <Read_Battery_Life+0x20>)
 8000f8a:	f7ff ffe9 	bl	8000f60 <ADC_Read_Data>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <Read_Battery_Life+0x24>)
 8000f92:	601a      	str	r2, [r3, #0]
	// double RealVoltage = adcVal * (double)3.3 / (double) adcBase;
	printf("[ADC Voltage] %d\r\n", (int)adcVal);
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <Read_Battery_Life+0x24>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <Read_Battery_Life+0x28>)
 8000f9c:	f004 fe8e 	bl	8005cbc <iprintf>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200005d4 	.word	0x200005d4
 8000fa8:	20002418 	.word	0x20002418
 8000fac:	08007034 	.word	0x08007034

08000fb0 <BLE_reboot>:
	if(ret) printf("[BLEINIT][ERR] set to default fail!\r\n");
	else printf("[BLEINIT][SUC] set to default.\r\n");
	return ret;
}

u8 BLE_reboot(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+RESET");
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <BLE_reboot+0x58>)
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <BLE_reboot+0x5c>)
 8000fba:	cb03      	ldmia	r3!, {r0, r1}
 8000fbc:	6010      	str	r0, [r2, #0]
 8000fbe:	6051      	str	r1, [r2, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	7213      	strb	r3, [r2, #8]
	tok.num = 0;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <BLE_reboot+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.ret, "OK");
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <BLE_reboot+0x60>)
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <BLE_reboot+0x64>)
 8000fd0:	8811      	ldrh	r1, [r2, #0]
 8000fd2:	7892      	ldrb	r2, [r2, #2]
 8000fd4:	8019      	strh	r1, [r3, #0]
 8000fd6:	709a      	strb	r2, [r3, #2]
	u8 ret = AT_CMD_Dispose(&tok);
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <BLE_reboot+0x58>)
 8000fda:	f7ff fb25 	bl	8000628 <AT_CMD_Dispose>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <BLE_reboot+0x58>)
 8000fe4:	f7ff fc76 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] restart fail!\r\n");
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <BLE_reboot+0x46>
 8000fee:	480a      	ldr	r0, [pc, #40]	; (8001018 <BLE_reboot+0x68>)
 8000ff0:	f004 fed8 	bl	8005da4 <puts>
 8000ff4:	e002      	b.n	8000ffc <BLE_reboot+0x4c>
	else printf("[BLEINIT][SUC] restarted.\r\n");
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <BLE_reboot+0x6c>)
 8000ff8:	f004 fed4 	bl	8005da4 <puts>
	return ret;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000ef4 	.word	0x20000ef4
 800100c:	080070a0 	.word	0x080070a0
 8001010:	20002315 	.word	0x20002315
 8001014:	08007054 	.word	0x08007054
 8001018:	080070ac 	.word	0x080070ac
 800101c:	080070cc 	.word	0x080070cc

08001020 <Qst_UART_Baud>:

u8 Qst_UART_Baud(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BAUD");
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <Qst_UART_Baud+0x5c>)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <Qst_UART_Baud+0x60>)
 800102a:	cb03      	ldmia	r3!, {r0, r1}
 800102c:	6010      	str	r0, [r2, #0]
 800102e:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <Qst_UART_Baud+0x5c>)
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <Qst_UART_Baud+0x64>)
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <Qst_UART_Baud+0x68>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BAUD=%s,NONE", BAUD);
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <Qst_UART_Baud+0x6c>)
 8001042:	4913      	ldr	r1, [pc, #76]	; (8001090 <Qst_UART_Baud+0x70>)
 8001044:	4813      	ldr	r0, [pc, #76]	; (8001094 <Qst_UART_Baud+0x74>)
 8001046:	f004 feb5 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <Qst_UART_Baud+0x5c>)
 800104c:	f7ff faec 	bl	8000628 <AT_CMD_Dispose>
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <Qst_UART_Baud+0x5c>)
 8001056:	f7ff fc3d 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BAUD not correct\r\n");
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <Qst_UART_Baud+0x48>
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <Qst_UART_Baud+0x78>)
 8001062:	f004 fe9f 	bl	8005da4 <puts>
 8001066:	e003      	b.n	8001070 <Qst_UART_Baud+0x50>
	else printf("[BLEINIT][SUC]Q: BAUD now is %s\r\n", BAUD);
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <Qst_UART_Baud+0x6c>)
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <Qst_UART_Baud+0x7c>)
 800106c:	f004 fe26 	bl	8005cbc <iprintf>
	return ret;
 8001070:	79fb      	ldrb	r3, [r7, #7]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000ef4 	.word	0x20000ef4
 8001080:	080070e8 	.word	0x080070e8
 8001084:	20000f15 	.word	0x20000f15
 8001088:	080070f0 	.word	0x080070f0
 800108c:	200000f4 	.word	0x200000f4
 8001090:	080070f4 	.word	0x080070f4
 8001094:	20002315 	.word	0x20002315
 8001098:	08007104 	.word	0x08007104
 800109c:	08007128 	.word	0x08007128

080010a0 <Set_UART_Baud>:

u8 Set_UART_Baud(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	if (!Qst_UART_Baud()) return 0;
 80010a6:	f7ff ffbb 	bl	8001020 <Qst_UART_Baud>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <Set_UART_Baud+0x14>
 80010b0:	2300      	movs	r3, #0
 80010b2:	e025      	b.n	8001100 <Set_UART_Baud+0x60>
	strcpy(tok.name, "AT+BAUD");
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <Set_UART_Baud+0x68>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <Set_UART_Baud+0x6c>)
 80010b8:	cb03      	ldmia	r3!, {r0, r1}
 80010ba:	6010      	str	r0, [r2, #0]
 80010bc:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <Set_UART_Baud+0x68>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], BAUD);
 80010c6:	4912      	ldr	r1, [pc, #72]	; (8001110 <Set_UART_Baud+0x70>)
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <Set_UART_Baud+0x74>)
 80010ca:	f004 fea2 	bl	8005e12 <strcpy>
	sprintf(tok.ret, "OK+BAUD=%s", BAUD);
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <Set_UART_Baud+0x70>)
 80010d0:	4911      	ldr	r1, [pc, #68]	; (8001118 <Set_UART_Baud+0x78>)
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <Set_UART_Baud+0x7c>)
 80010d4:	f004 fe6e 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80010d8:	480b      	ldr	r0, [pc, #44]	; (8001108 <Set_UART_Baud+0x68>)
 80010da:	f7ff faa5 	bl	8000628 <AT_CMD_Dispose>
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <Set_UART_Baud+0x68>)
 80010e4:	f7ff fbf6 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BAUD set fail!\r\n");
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <Set_UART_Baud+0x56>
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <Set_UART_Baud+0x80>)
 80010f0:	f004 fe58 	bl	8005da4 <puts>
 80010f4:	e003      	b.n	80010fe <Set_UART_Baud+0x5e>
	else printf("[BLEINIT][SUC] BAUD set as %s\r\n", BAUD);
 80010f6:	4906      	ldr	r1, [pc, #24]	; (8001110 <Set_UART_Baud+0x70>)
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <Set_UART_Baud+0x84>)
 80010fa:	f004 fddf 	bl	8005cbc <iprintf>
	return ret;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000ef4 	.word	0x20000ef4
 800110c:	080070e8 	.word	0x080070e8
 8001110:	200000f4 	.word	0x200000f4
 8001114:	20000f15 	.word	0x20000f15
 8001118:	0800714c 	.word	0x0800714c
 800111c:	20002315 	.word	0x20002315
 8001120:	08007158 	.word	0x08007158
 8001124:	08007178 	.word	0x08007178

08001128 <Qst_Role>:

u8 Qst_Role(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+ROLE");
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <Qst_Role+0x5c>)
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <Qst_Role+0x60>)
 8001132:	cb03      	ldmia	r3!, {r0, r1}
 8001134:	6010      	str	r0, [r2, #0]
 8001136:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <Qst_Role+0x5c>)
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <Qst_Role+0x64>)
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <Qst_Role+0x68>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <Qst_Role+0x6c>)
 800114a:	4913      	ldr	r1, [pc, #76]	; (8001198 <Qst_Role+0x70>)
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <Qst_Role+0x74>)
 800114e:	f004 fe31 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <Qst_Role+0x5c>)
 8001154:	f7ff fa68 	bl	8000628 <AT_CMD_Dispose>
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <Qst_Role+0x5c>)
 800115e:	f7ff fbb9 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: ROLE not correct\r\n");
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <Qst_Role+0x48>
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <Qst_Role+0x78>)
 800116a:	f004 fe1b 	bl	8005da4 <puts>
 800116e:	e003      	b.n	8001178 <Qst_Role+0x50>
	else printf("[BLEINIT][SUC]Q: ROLE now is %s\r\n", ROLE[1]);
 8001170:	4908      	ldr	r1, [pc, #32]	; (8001194 <Qst_Role+0x6c>)
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <Qst_Role+0x7c>)
 8001174:	f004 fda2 	bl	8005cbc <iprintf>
	return ret;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000ef4 	.word	0x20000ef4
 8001188:	08007198 	.word	0x08007198
 800118c:	20000f15 	.word	0x20000f15
 8001190:	080070f0 	.word	0x080070f0
 8001194:	20000103 	.word	0x20000103
 8001198:	080071a0 	.word	0x080071a0
 800119c:	20002315 	.word	0x20002315
 80011a0:	080071ac 	.word	0x080071ac
 80011a4:	080071d0 	.word	0x080071d0

080011a8 <Set_Role>:

u8 Set_Role(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	if (!Qst_Role()) return 0;
 80011ae:	f7ff ffbb 	bl	8001128 <Qst_Role>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <Set_Role+0x14>
 80011b8:	2300      	movs	r3, #0
 80011ba:	e025      	b.n	8001208 <Set_Role+0x60>
	strcpy(tok.name, "AT+ROLE");
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <Set_Role+0x68>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <Set_Role+0x6c>)
 80011c0:	cb03      	ldmia	r3!, {r0, r1}
 80011c2:	6010      	str	r0, [r2, #0]
 80011c4:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <Set_Role+0x68>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], ROLE[0]);
 80011ce:	4912      	ldr	r1, [pc, #72]	; (8001218 <Set_Role+0x70>)
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <Set_Role+0x74>)
 80011d2:	f004 fe1e 	bl	8005e12 <strcpy>
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <Set_Role+0x78>)
 80011d8:	4912      	ldr	r1, [pc, #72]	; (8001224 <Set_Role+0x7c>)
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <Set_Role+0x80>)
 80011dc:	f004 fdea 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <Set_Role+0x68>)
 80011e2:	f7ff fa21 	bl	8000628 <AT_CMD_Dispose>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <Set_Role+0x68>)
 80011ec:	f7ff fb72 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] ROLE set fail!\r\n");
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <Set_Role+0x56>
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <Set_Role+0x84>)
 80011f8:	f004 fdd4 	bl	8005da4 <puts>
 80011fc:	e003      	b.n	8001206 <Set_Role+0x5e>
	else printf("[BLEINIT][SUC] ROLE set as %s\r\n", ROLE[1]);
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <Set_Role+0x78>)
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <Set_Role+0x88>)
 8001202:	f004 fd5b 	bl	8005cbc <iprintf>
	return ret;
 8001206:	79fb      	ldrb	r3, [r7, #7]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000ef4 	.word	0x20000ef4
 8001214:	08007198 	.word	0x08007198
 8001218:	200000fc 	.word	0x200000fc
 800121c:	20000f15 	.word	0x20000f15
 8001220:	20000103 	.word	0x20000103
 8001224:	080071a0 	.word	0x080071a0
 8001228:	20002315 	.word	0x20002315
 800122c:	080071f4 	.word	0x080071f4
 8001230:	08007214 	.word	0x08007214

08001234 <Qst_SPP_Name>:

u8 Qst_SPP_Name(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+NAME");
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <Qst_SPP_Name+0x5c>)
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <Qst_SPP_Name+0x60>)
 800123e:	cb03      	ldmia	r3!, {r0, r1}
 8001240:	6010      	str	r0, [r2, #0]
 8001242:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <Qst_SPP_Name+0x5c>)
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <Qst_SPP_Name+0x64>)
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <Qst_SPP_Name+0x68>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+NAME=%s", NAME[1]);
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <Qst_SPP_Name+0x6c>)
 8001256:	4913      	ldr	r1, [pc, #76]	; (80012a4 <Qst_SPP_Name+0x70>)
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <Qst_SPP_Name+0x74>)
 800125a:	f004 fdab 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <Qst_SPP_Name+0x5c>)
 8001260:	f7ff f9e2 	bl	8000628 <AT_CMD_Dispose>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <Qst_SPP_Name+0x5c>)
 800126a:	f7ff fb33 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: SPP name not correct\r\n");
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <Qst_SPP_Name+0x48>
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <Qst_SPP_Name+0x78>)
 8001276:	f004 fd95 	bl	8005da4 <puts>
 800127a:	e003      	b.n	8001284 <Qst_SPP_Name+0x50>
	else printf("[BLEINIT][SUC]Q: SPP name now is %s\r\n", NAME[1]);
 800127c:	4908      	ldr	r1, [pc, #32]	; (80012a0 <Qst_SPP_Name+0x6c>)
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <Qst_SPP_Name+0x7c>)
 8001280:	f004 fd1c 	bl	8005cbc <iprintf>
	return ret;
 8001284:	79fb      	ldrb	r3, [r7, #7]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000ef4 	.word	0x20000ef4
 8001294:	08007234 	.word	0x08007234
 8001298:	20000f15 	.word	0x20000f15
 800129c:	080070f0 	.word	0x080070f0
 80012a0:	20000116 	.word	0x20000116
 80012a4:	0800723c 	.word	0x0800723c
 80012a8:	20002315 	.word	0x20002315
 80012ac:	08007248 	.word	0x08007248
 80012b0:	08007270 	.word	0x08007270

080012b4 <Set_SPP_Name>:

u8 Set_SPP_Name(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	if (!Qst_SPP_Name()) return 0;
 80012ba:	f7ff ffbb 	bl	8001234 <Qst_SPP_Name>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <Set_SPP_Name+0x14>
 80012c4:	2300      	movs	r3, #0
 80012c6:	e027      	b.n	8001318 <Set_SPP_Name+0x64>
	strcpy(tok.name, "AT+NAME");
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <Set_SPP_Name+0x6c>)
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <Set_SPP_Name+0x70>)
 80012cc:	cb03      	ldmia	r3!, {r0, r1}
 80012ce:	6010      	str	r0, [r2, #0]
 80012d0:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <Set_SPP_Name+0x6c>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[1]);
 80012da:	4913      	ldr	r1, [pc, #76]	; (8001328 <Set_SPP_Name+0x74>)
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <Set_SPP_Name+0x78>)
 80012de:	f004 fd98 	bl	8005e12 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 80012e2:	4a13      	ldr	r2, [pc, #76]	; (8001330 <Set_SPP_Name+0x7c>)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <Set_SPP_Name+0x80>)
 80012e6:	cb03      	ldmia	r3!, {r0, r1}
 80012e8:	6010      	str	r0, [r2, #0]
 80012ea:	6051      	str	r1, [r2, #4]
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <Set_SPP_Name+0x6c>)
 80012f2:	f7ff f999 	bl	8000628 <AT_CMD_Dispose>
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80012fa:	4809      	ldr	r0, [pc, #36]	; (8001320 <Set_SPP_Name+0x6c>)
 80012fc:	f7ff faea 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] SPP name set fail!\r\n");
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <Set_SPP_Name+0x5a>
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <Set_SPP_Name+0x84>)
 8001308:	f004 fd4c 	bl	8005da4 <puts>
 800130c:	e003      	b.n	8001316 <Set_SPP_Name+0x62>
	else printf("[BLEINIT][SUC] SPP name set as %s\r\n", NAME[1]);
 800130e:	4906      	ldr	r1, [pc, #24]	; (8001328 <Set_SPP_Name+0x74>)
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <Set_SPP_Name+0x88>)
 8001312:	f004 fcd3 	bl	8005cbc <iprintf>
	return ret;
 8001316:	79fb      	ldrb	r3, [r7, #7]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000ef4 	.word	0x20000ef4
 8001324:	08007234 	.word	0x08007234
 8001328:	20000116 	.word	0x20000116
 800132c:	20000f15 	.word	0x20000f15
 8001330:	20002315 	.word	0x20002315
 8001334:	08007298 	.word	0x08007298
 8001338:	080072a4 	.word	0x080072a4
 800133c:	080072c8 	.word	0x080072c8

08001340 <Qst_BLE_Name>:

u8 Qst_BLE_Name(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BNAME");
 8001346:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <Qst_BLE_Name+0x60>)
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <Qst_BLE_Name+0x64>)
 800134a:	cb03      	ldmia	r3!, {r0, r1}
 800134c:	6010      	str	r0, [r2, #0]
 800134e:	6051      	str	r1, [r2, #4]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <Qst_BLE_Name+0x60>)
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <Qst_BLE_Name+0x68>)
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <Qst_BLE_Name+0x6c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BNAME=%s", NAME[0]);
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <Qst_BLE_Name+0x70>)
 8001366:	4913      	ldr	r1, [pc, #76]	; (80013b4 <Qst_BLE_Name+0x74>)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <Qst_BLE_Name+0x78>)
 800136a:	f004 fd23 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <Qst_BLE_Name+0x60>)
 8001370:	f7ff f95a 	bl	8000628 <AT_CMD_Dispose>
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <Qst_BLE_Name+0x60>)
 800137a:	f7ff faab 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE name not correct\r\n");
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <Qst_BLE_Name+0x4c>
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <Qst_BLE_Name+0x7c>)
 8001386:	f004 fd0d 	bl	8005da4 <puts>
 800138a:	e003      	b.n	8001394 <Qst_BLE_Name+0x54>
	else printf("[BLEINIT][SUC]Q: BLE name now is %s\r\n", NAME[0]);
 800138c:	4908      	ldr	r1, [pc, #32]	; (80013b0 <Qst_BLE_Name+0x70>)
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <Qst_BLE_Name+0x80>)
 8001390:	f004 fc94 	bl	8005cbc <iprintf>
	return ret;
 8001394:	79fb      	ldrb	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000ef4 	.word	0x20000ef4
 80013a4:	080072ec 	.word	0x080072ec
 80013a8:	20000f15 	.word	0x20000f15
 80013ac:	080070f0 	.word	0x080070f0
 80013b0:	2000010c 	.word	0x2000010c
 80013b4:	080072f8 	.word	0x080072f8
 80013b8:	20002315 	.word	0x20002315
 80013bc:	08007304 	.word	0x08007304
 80013c0:	0800732c 	.word	0x0800732c

080013c4 <Set_BLE_Name>:

u8 Set_BLE_Name(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	if (!Qst_BLE_Name()) return 0;
 80013ca:	f7ff ffb9 	bl	8001340 <Qst_BLE_Name>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <Set_BLE_Name+0x14>
 80013d4:	2300      	movs	r3, #0
 80013d6:	e029      	b.n	800142c <Set_BLE_Name+0x68>
	strcpy(tok.name, "AT+BNAME");
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <Set_BLE_Name+0x70>)
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <Set_BLE_Name+0x74>)
 80013dc:	cb03      	ldmia	r3!, {r0, r1}
 80013de:	6010      	str	r0, [r2, #0]
 80013e0:	6051      	str	r1, [r2, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <Set_BLE_Name+0x70>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[0]);
 80013ee:	4913      	ldr	r1, [pc, #76]	; (800143c <Set_BLE_Name+0x78>)
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <Set_BLE_Name+0x7c>)
 80013f2:	f004 fd0e 	bl	8005e12 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <Set_BLE_Name+0x80>)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <Set_BLE_Name+0x84>)
 80013fa:	cb03      	ldmia	r3!, {r0, r1}
 80013fc:	6010      	str	r0, [r2, #0]
 80013fe:	6051      	str	r1, [r2, #4]
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <Set_BLE_Name+0x70>)
 8001406:	f7ff f90f 	bl	8000628 <AT_CMD_Dispose>
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <Set_BLE_Name+0x70>)
 8001410:	f7ff fa60 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE name set fail!\r\n");
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <Set_BLE_Name+0x5e>
 800141a:	480c      	ldr	r0, [pc, #48]	; (800144c <Set_BLE_Name+0x88>)
 800141c:	f004 fcc2 	bl	8005da4 <puts>
 8001420:	e003      	b.n	800142a <Set_BLE_Name+0x66>
	else printf("[BLEINIT][SUC] BLE name set as %s\r\n", NAME[0]);
 8001422:	4906      	ldr	r1, [pc, #24]	; (800143c <Set_BLE_Name+0x78>)
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <Set_BLE_Name+0x8c>)
 8001426:	f004 fc49 	bl	8005cbc <iprintf>
	return ret;
 800142a:	79fb      	ldrb	r3, [r7, #7]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000ef4 	.word	0x20000ef4
 8001438:	080072ec 	.word	0x080072ec
 800143c:	2000010c 	.word	0x2000010c
 8001440:	20000f15 	.word	0x20000f15
 8001444:	20002315 	.word	0x20002315
 8001448:	08007298 	.word	0x08007298
 800144c:	08007354 	.word	0x08007354
 8001450:	08007378 	.word	0x08007378

08001454 <Qst_PIN>:

u8 Qst_PIN(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+PIN");
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <Qst_PIN+0x60>)
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <Qst_PIN+0x64>)
 800145e:	6810      	ldr	r0, [r2, #0]
 8001460:	6018      	str	r0, [r3, #0]
 8001462:	8891      	ldrh	r1, [r2, #4]
 8001464:	7992      	ldrb	r2, [r2, #6]
 8001466:	8099      	strh	r1, [r3, #4]
 8001468:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <Qst_PIN+0x60>)
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <Qst_PIN+0x68>)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <Qst_PIN+0x6c>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+PIN=%s", PIN);
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <Qst_PIN+0x70>)
 800147c:	4912      	ldr	r1, [pc, #72]	; (80014c8 <Qst_PIN+0x74>)
 800147e:	4813      	ldr	r0, [pc, #76]	; (80014cc <Qst_PIN+0x78>)
 8001480:	f004 fc98 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <Qst_PIN+0x60>)
 8001486:	f7ff f8cf 	bl	8000628 <AT_CMD_Dispose>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <Qst_PIN+0x60>)
 8001490:	f7ff fa20 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: PIN not correct\r\n");
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <Qst_PIN+0x4e>
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <Qst_PIN+0x7c>)
 800149c:	f004 fc82 	bl	8005da4 <puts>
 80014a0:	e003      	b.n	80014aa <Qst_PIN+0x56>
	else printf("[BLEINIT][SUC]Q: PIN now is %s\r\n", PIN);
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <Qst_PIN+0x70>)
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <Qst_PIN+0x80>)
 80014a6:	f004 fc09 	bl	8005cbc <iprintf>
	return ret;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000ef4 	.word	0x20000ef4
 80014b8:	0800739c 	.word	0x0800739c
 80014bc:	20000f15 	.word	0x20000f15
 80014c0:	080070f0 	.word	0x080070f0
 80014c4:	20000120 	.word	0x20000120
 80014c8:	080073a4 	.word	0x080073a4
 80014cc:	20002315 	.word	0x20002315
 80014d0:	080073b0 	.word	0x080073b0
 80014d4:	080073d4 	.word	0x080073d4

080014d8 <Set_PIN>:

u8 Set_PIN(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	if (!Qst_PIN()) return 0;
 80014de:	f7ff ffb9 	bl	8001454 <Qst_PIN>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <Set_PIN+0x14>
 80014e8:	2300      	movs	r3, #0
 80014ea:	e02a      	b.n	8001542 <Set_PIN+0x6a>
	strcpy(tok.name, "AT+PIN");
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <Set_PIN+0x74>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <Set_PIN+0x78>)
 80014f0:	6810      	ldr	r0, [r2, #0]
 80014f2:	6018      	str	r0, [r3, #0]
 80014f4:	8891      	ldrh	r1, [r2, #4]
 80014f6:	7992      	ldrb	r2, [r2, #6]
 80014f8:	8099      	strh	r1, [r3, #4]
 80014fa:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <Set_PIN+0x74>)
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], PIN);
 8001504:	4913      	ldr	r1, [pc, #76]	; (8001554 <Set_PIN+0x7c>)
 8001506:	4814      	ldr	r0, [pc, #80]	; (8001558 <Set_PIN+0x80>)
 8001508:	f004 fc83 	bl	8005e12 <strcpy>
	strcpy(tok.ret, "OKsetPIN");
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <Set_PIN+0x84>)
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <Set_PIN+0x88>)
 8001510:	cb03      	ldmia	r3!, {r0, r1}
 8001512:	6010      	str	r0, [r2, #0]
 8001514:	6051      	str	r1, [r2, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <Set_PIN+0x74>)
 800151c:	f7ff f884 	bl	8000628 <AT_CMD_Dispose>
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <Set_PIN+0x74>)
 8001526:	f7ff f9d5 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] PIN set fail!\r\n");
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <Set_PIN+0x60>
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <Set_PIN+0x8c>)
 8001532:	f004 fc37 	bl	8005da4 <puts>
 8001536:	e003      	b.n	8001540 <Set_PIN+0x68>
	else printf("[BLEINIT][SUC] PIN set as %s\r\n", PIN);
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <Set_PIN+0x7c>)
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <Set_PIN+0x90>)
 800153c:	f004 fbbe 	bl	8005cbc <iprintf>
	return ret;
 8001540:	79fb      	ldrb	r3, [r7, #7]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000ef4 	.word	0x20000ef4
 8001550:	0800739c 	.word	0x0800739c
 8001554:	20000120 	.word	0x20000120
 8001558:	20000f15 	.word	0x20000f15
 800155c:	20002315 	.word	0x20002315
 8001560:	080073f8 	.word	0x080073f8
 8001564:	08007404 	.word	0x08007404
 8001568:	08007424 	.word	0x08007424

0800156c <Qst_BLE>:

u8 Qst_BLE(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BLE");
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <Qst_BLE+0x64>)
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <Qst_BLE+0x68>)
 8001576:	6810      	ldr	r0, [r2, #0]
 8001578:	6018      	str	r0, [r3, #0]
 800157a:	8891      	ldrh	r1, [r2, #4]
 800157c:	7992      	ldrb	r2, [r2, #6]
 800157e:	8099      	strh	r1, [r3, #4]
 8001580:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <Qst_BLE+0x64>)
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <Qst_BLE+0x6c>)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <Qst_BLE+0x70>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <Qst_BLE+0x74>)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <Qst_BLE+0x78>)
 8001596:	cb03      	ldmia	r3!, {r0, r1}
 8001598:	6010      	str	r0, [r2, #0]
 800159a:	6051      	str	r1, [r2, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <Qst_BLE+0x64>)
 80015a2:	f7ff f841 	bl	8000628 <AT_CMD_Dispose>
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <Qst_BLE+0x64>)
 80015ac:	f7ff f992 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE not correct\r\n");
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <Qst_BLE+0x52>
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <Qst_BLE+0x7c>)
 80015b8:	f004 fbf4 	bl	8005da4 <puts>
 80015bc:	e003      	b.n	80015c6 <Qst_BLE+0x5a>
	else printf("[BLEINIT][SUC]Q: BLE now is %s\r\n", "0");
 80015be:	490b      	ldr	r1, [pc, #44]	; (80015ec <Qst_BLE+0x80>)
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <Qst_BLE+0x84>)
 80015c2:	f004 fb7b 	bl	8005cbc <iprintf>
	return ret;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000ef4 	.word	0x20000ef4
 80015d4:	08007444 	.word	0x08007444
 80015d8:	20000f15 	.word	0x20000f15
 80015dc:	080070f0 	.word	0x080070f0
 80015e0:	20002315 	.word	0x20002315
 80015e4:	0800744c 	.word	0x0800744c
 80015e8:	08007458 	.word	0x08007458
 80015ec:	0800747c 	.word	0x0800747c
 80015f0:	08007480 	.word	0x08007480

080015f4 <Set_BLE>:

u8 Set_BLE(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	if (!Qst_BLE()) return 0;
 80015fa:	f7ff ffb7 	bl	800156c <Qst_BLE>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <Set_BLE+0x14>
 8001604:	2300      	movs	r3, #0
 8001606:	e02a      	b.n	800165e <Set_BLE+0x6a>
	strcpy(tok.name, "AT+BLE");
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <Set_BLE+0x74>)
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <Set_BLE+0x78>)
 800160c:	6810      	ldr	r0, [r2, #0]
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	8891      	ldrh	r1, [r2, #4]
 8001612:	7992      	ldrb	r2, [r2, #6]
 8001614:	8099      	strh	r1, [r3, #4]
 8001616:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <Set_BLE+0x74>)
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "0");
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <Set_BLE+0x7c>)
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <Set_BLE+0x80>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 8001628:	4a13      	ldr	r2, [pc, #76]	; (8001678 <Set_BLE+0x84>)
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <Set_BLE+0x88>)
 800162c:	cb03      	ldmia	r3!, {r0, r1}
 800162e:	6010      	str	r0, [r2, #0]
 8001630:	6051      	str	r1, [r2, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <Set_BLE+0x74>)
 8001638:	f7fe fff6 	bl	8000628 <AT_CMD_Dispose>
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <Set_BLE+0x74>)
 8001642:	f7ff f947 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE set fail!\r\n");
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <Set_BLE+0x60>
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <Set_BLE+0x8c>)
 800164e:	f004 fba9 	bl	8005da4 <puts>
 8001652:	e003      	b.n	800165c <Set_BLE+0x68>
	else printf("[BLEINIT][SUC] BLE set as %s\r\n", "0");
 8001654:	4907      	ldr	r1, [pc, #28]	; (8001674 <Set_BLE+0x80>)
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <Set_BLE+0x90>)
 8001658:	f004 fb30 	bl	8005cbc <iprintf>
	return ret;
 800165c:	79fb      	ldrb	r3, [r7, #7]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000ef4 	.word	0x20000ef4
 800166c:	08007444 	.word	0x08007444
 8001670:	20000f15 	.word	0x20000f15
 8001674:	0800747c 	.word	0x0800747c
 8001678:	20002315 	.word	0x20002315
 800167c:	0800744c 	.word	0x0800744c
 8001680:	080074a4 	.word	0x080074a4
 8001684:	080074c4 	.word	0x080074c4

08001688 <Qst_TUUID>:

u8 Qst_TUUID(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+TUUID");
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <Qst_TUUID+0x60>)
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <Qst_TUUID+0x64>)
 8001692:	cb03      	ldmia	r3!, {r0, r1}
 8001694:	6010      	str	r0, [r2, #0]
 8001696:	6051      	str	r1, [r2, #4]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <Qst_TUUID+0x60>)
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <Qst_TUUID+0x68>)
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <Qst_TUUID+0x6c>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <Qst_TUUID+0x70>)
 80016ae:	4913      	ldr	r1, [pc, #76]	; (80016fc <Qst_TUUID+0x74>)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <Qst_TUUID+0x78>)
 80016b2:	f004 fb7f 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <Qst_TUUID+0x60>)
 80016b8:	f7fe ffb6 	bl	8000628 <AT_CMD_Dispose>
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <Qst_TUUID+0x60>)
 80016c2:	f7ff f907 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: TUUID not correct\r\n");
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <Qst_TUUID+0x4c>
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <Qst_TUUID+0x7c>)
 80016ce:	f004 fb69 	bl	8005da4 <puts>
 80016d2:	e003      	b.n	80016dc <Qst_TUUID+0x54>
	else printf("[BLEINIT][SUC]Q: TUUID now is %s\r\n", TUUID);
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <Qst_TUUID+0x70>)
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <Qst_TUUID+0x80>)
 80016d8:	f004 faf0 	bl	8005cbc <iprintf>
	return ret;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000ef4 	.word	0x20000ef4
 80016ec:	080074e4 	.word	0x080074e4
 80016f0:	20000f15 	.word	0x20000f15
 80016f4:	080070f0 	.word	0x080070f0
 80016f8:	20000128 	.word	0x20000128
 80016fc:	080074f0 	.word	0x080074f0
 8001700:	20002315 	.word	0x20002315
 8001704:	080074fc 	.word	0x080074fc
 8001708:	08007520 	.word	0x08007520

0800170c <Set_TUUID>:

u8 Set_TUUID(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	if (!Qst_TUUID()) return 0;
 8001712:	f7ff ffb9 	bl	8001688 <Qst_TUUID>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <Set_TUUID+0x14>
 800171c:	2300      	movs	r3, #0
 800171e:	e027      	b.n	8001770 <Set_TUUID+0x64>
	strcpy(tok.name, "AT+TUUID");
 8001720:	4a15      	ldr	r2, [pc, #84]	; (8001778 <Set_TUUID+0x6c>)
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <Set_TUUID+0x70>)
 8001724:	cb03      	ldmia	r3!, {r0, r1}
 8001726:	6010      	str	r0, [r2, #0]
 8001728:	6051      	str	r1, [r2, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <Set_TUUID+0x6c>)
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], TUUID);
 8001736:	4912      	ldr	r1, [pc, #72]	; (8001780 <Set_TUUID+0x74>)
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <Set_TUUID+0x78>)
 800173a:	f004 fb6a 	bl	8005e12 <strcpy>
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 800173e:	4a10      	ldr	r2, [pc, #64]	; (8001780 <Set_TUUID+0x74>)
 8001740:	4911      	ldr	r1, [pc, #68]	; (8001788 <Set_TUUID+0x7c>)
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <Set_TUUID+0x80>)
 8001744:	f004 fb36 	bl	8005db4 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <Set_TUUID+0x6c>)
 800174a:	f7fe ff6d 	bl	8000628 <AT_CMD_Dispose>
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001752:	4809      	ldr	r0, [pc, #36]	; (8001778 <Set_TUUID+0x6c>)
 8001754:	f7ff f8be 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] TUUID set fail!\r\n");
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <Set_TUUID+0x5a>
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <Set_TUUID+0x84>)
 8001760:	f004 fb20 	bl	8005da4 <puts>
 8001764:	e003      	b.n	800176e <Set_TUUID+0x62>
	else printf("[BLEINIT][SUC] TUUID set as %s\r\n", TUUID);
 8001766:	4906      	ldr	r1, [pc, #24]	; (8001780 <Set_TUUID+0x74>)
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <Set_TUUID+0x88>)
 800176a:	f004 faa7 	bl	8005cbc <iprintf>
	return ret;
 800176e:	79fb      	ldrb	r3, [r7, #7]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000ef4 	.word	0x20000ef4
 800177c:	080074e4 	.word	0x080074e4
 8001780:	20000128 	.word	0x20000128
 8001784:	20000f15 	.word	0x20000f15
 8001788:	080074f0 	.word	0x080074f0
 800178c:	20002315 	.word	0x20002315
 8001790:	08007544 	.word	0x08007544
 8001794:	08007564 	.word	0x08007564

08001798 <BLE_INIT>:
#define NAN_NAN   0
#define CONN_OK   1
#define PARA_OK   2
#define ALL_GREEN 3

void BLE_INIT() {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	switch(BLE_state) {
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <BLE_INIT+0x9c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d012      	beq.n	80017ca <BLE_INIT+0x32>
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d023      	beq.n	80017f0 <BLE_INIT+0x58>
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d142      	bne.n	8001832 <BLE_INIT+0x9a>
	case NAN_NAN:
		BLE_reboot();
 80017ac:	f7ff fc00 	bl	8000fb0 <BLE_reboot>
		HAL_Delay(1000);
 80017b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b4:	f000 ff98 	bl	80026e8 <HAL_Delay>
		if(Set_UART_Baud()) return;
 80017b8:	f7ff fc72 	bl	80010a0 <Set_UART_Baud>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12a      	bne.n	8001818 <BLE_INIT+0x80>
		BLE_state = CONN_OK;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <BLE_INIT+0x9c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
		break;
 80017c8:	e033      	b.n	8001832 <BLE_INIT+0x9a>
	case CONN_OK:
		if(Set_Role()) return;
 80017ca:	f7ff fced 	bl	80011a8 <Set_Role>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d123      	bne.n	800181c <BLE_INIT+0x84>
		if(Set_PIN()) return;
 80017d4:	f7ff fe80 	bl	80014d8 <Set_PIN>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d120      	bne.n	8001820 <BLE_INIT+0x88>
		if(Set_TUUID()) return;
 80017de:	f7ff ff95 	bl	800170c <Set_TUUID>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d11d      	bne.n	8001824 <BLE_INIT+0x8c>
		BLE_state = PARA_OK;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <BLE_INIT+0x9c>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
		break;
 80017ee:	e020      	b.n	8001832 <BLE_INIT+0x9a>
	case PARA_OK:
		if(Set_SPP_Name()) return;
 80017f0:	f7ff fd60 	bl	80012b4 <Set_SPP_Name>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <BLE_INIT+0x90>
		if(Set_BLE_Name()) return;
 80017fa:	f7ff fde3 	bl	80013c4 <Set_BLE_Name>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d113      	bne.n	800182c <BLE_INIT+0x94>
		if(Set_BLE()) return;
 8001804:	f7ff fef6 	bl	80015f4 <Set_BLE>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d110      	bne.n	8001830 <BLE_INIT+0x98>
		BLE_state = ALL_GREEN;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <BLE_INIT+0x9c>)
 8001810:	2203      	movs	r2, #3
 8001812:	601a      	str	r2, [r3, #0]
		break;
 8001814:	bf00      	nop
 8001816:	e00c      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_UART_Baud()) return;
 8001818:	bf00      	nop
 800181a:	e00a      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_Role()) return;
 800181c:	bf00      	nop
 800181e:	e008      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_PIN()) return;
 8001820:	bf00      	nop
 8001822:	e006      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_TUUID()) return;
 8001824:	bf00      	nop
 8001826:	e004      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_SPP_Name()) return;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_BLE_Name()) return;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <BLE_INIT+0x9a>
		if(Set_BLE()) return;
 8001830:	bf00      	nop
	}
}
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20002420 	.word	0x20002420

08001838 <readNum>:
	u8  alt;
} data[MAX_VEHICLE_CNT];

u8 cnt;

u16 readNum (u8 **str) {
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	u16 ret = 0ll;
 8001840:	2300      	movs	r3, #0
 8001842:	81fb      	strh	r3, [r7, #14]
	while (**str< '0' || **str> '9') ++ *str;
 8001844:	e004      	b.n	8001850 <readNum+0x18>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b2f      	cmp	r3, #47	; 0x2f
 8001858:	d9f5      	bls.n	8001846 <readNum+0xe>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b39      	cmp	r3, #57	; 0x39
 8001862:	d8f0      	bhi.n	8001846 <readNum+0xe>
	while (**str>='0' && **str<='9') {
 8001864:	e015      	b.n	8001892 <readNum+0x5a>
		ret = (ret<<1) + (ret<<3) + ((**str)^'0');
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001880:	b2db      	uxtb	r3, r3
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	81fb      	strh	r3, [r7, #14]
		++ *str;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
	while (**str>='0' && **str<='9') {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b2f      	cmp	r3, #47	; 0x2f
 800189a:	d904      	bls.n	80018a6 <readNum+0x6e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b39      	cmp	r3, #57	; 0x39
 80018a4:	d9df      	bls.n	8001866 <readNum+0x2e>
	} return ret;
 80018a6:	89fb      	ldrh	r3, [r7, #14]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <dispose>:

int dispose (unsigned char *str) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	u8 *p = (u8*) strstr((const char *) str, "-=t:");
 80018bc:	4934      	ldr	r1, [pc, #208]	; (8001990 <dispose+0xdc>)
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f004 faaf 	bl	8005e22 <strstr>
 80018c4:	4603      	mov	r3, r0
 80018c6:	60bb      	str	r3, [r7, #8]
	cnt = readNum(&p);
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffb3 	bl	8001838 <readNum>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <dispose+0xe0>)
 80018d8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<cnt; ++ i) {
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e04c      	b.n	800197a <dispose+0xc6>
		data[i].cat  = readNum(&p);
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ffa7 	bl	8001838 <readNum>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b2d9      	uxtb	r1, r3
 80018ee:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <dispose+0xe4>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b2c      	cmp	r3, #44	; 0x2c
 80018fc:	d001      	beq.n	8001902 <dispose+0x4e>
 80018fe:	2301      	movs	r3, #1
 8001900:	e042      	b.n	8001988 <dispose+0xd4>
		data[i].xVal = readNum(&p);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff96 	bl	8001838 <readNum>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <dispose+0xe4>)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	460a      	mov	r2, r1
 800191a:	805a      	strh	r2, [r3, #2]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b2c      	cmp	r3, #44	; 0x2c
 8001922:	d001      	beq.n	8001928 <dispose+0x74>
 8001924:	2301      	movs	r3, #1
 8001926:	e02f      	b.n	8001988 <dispose+0xd4>
		data[i].yVal = readNum(&p);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff83 	bl	8001838 <readNum>
 8001932:	4603      	mov	r3, r0
 8001934:	4619      	mov	r1, r3
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <dispose+0xe4>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	460a      	mov	r2, r1
 8001940:	809a      	strh	r2, [r3, #4]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b2c      	cmp	r3, #44	; 0x2c
 8001948:	d001      	beq.n	800194e <dispose+0x9a>
 800194a:	2301      	movs	r3, #1
 800194c:	e01c      	b.n	8001988 <dispose+0xd4>
		data[i].alt  = readNum(&p);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff70 	bl	8001838 <readNum>
 8001958:	4603      	mov	r3, r0
 800195a:	b2d9      	uxtb	r1, r3
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <dispose+0xe4>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	719a      	strb	r2, [r3, #6]
		// printf("[s]%s\r\n", p);
		if (*p ^ ';') return 1;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b3b      	cmp	r3, #59	; 0x3b
 800196e:	d001      	beq.n	8001974 <dispose+0xc0>
 8001970:	2301      	movs	r3, #1
 8001972:	e009      	b.n	8001988 <dispose+0xd4>
	for (int i=0; i<cnt; ++ i) {
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <dispose+0xe0>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4293      	cmp	r3, r2
 8001984:	dbac      	blt.n	80018e0 <dispose+0x2c>
	} return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	08007588 	.word	0x08007588
 8001994:	20002624 	.word	0x20002624
 8001998:	20002628 	.word	0x20002628

0800199c <decoderDebugOutput>:

void decoderDebugOutput () {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	printf("n=%d\r\n", cnt);
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <decoderDebugOutput+0x74>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	481a      	ldr	r0, [pc, #104]	; (8001a14 <decoderDebugOutput+0x78>)
 80019aa:	f004 f987 	bl	8005cbc <iprintf>
	for (int i=0; i<cnt; ++ i) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e023      	b.n	80019fc <decoderDebugOutput+0x60>
		printf("[%d] ALT: %d\r\n", i, data[i].alt);
 80019b4:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <decoderDebugOutput+0x7c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	799b      	ldrb	r3, [r3, #6]
 80019be:	461a      	mov	r2, r3
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4816      	ldr	r0, [pc, #88]	; (8001a1c <decoderDebugOutput+0x80>)
 80019c4:	f004 f97a 	bl	8005cbc <iprintf>
		printf("cat = %d\r\n", data[i].cat);
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <decoderDebugOutput+0x7c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4813      	ldr	r0, [pc, #76]	; (8001a20 <decoderDebugOutput+0x84>)
 80019d4:	f004 f972 	bl	8005cbc <iprintf>
		printf("map = %d, %d\r\n", data[i].xVal, data[i].yVal);
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <decoderDebugOutput+0x7c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	885b      	ldrh	r3, [r3, #2]
 80019e2:	4619      	mov	r1, r3
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <decoderDebugOutput+0x7c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <decoderDebugOutput+0x88>)
 80019f2:	f004 f963 	bl	8005cbc <iprintf>
	for (int i=0; i<cnt; ++ i) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <decoderDebugOutput+0x74>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	dbd5      	blt.n	80019b4 <decoderDebugOutput+0x18>
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20002624 	.word	0x20002624
 8001a14:	08007590 	.word	0x08007590
 8001a18:	20002628 	.word	0x20002628
 8001a1c:	08007598 	.word	0x08007598
 8001a20:	080075a8 	.word	0x080075a8
 8001a24:	080075b4 	.word	0x080075b4

08001a28 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001a30:	1d39      	adds	r1, r7, #4
 8001a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a36:	2201      	movs	r2, #1
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <__io_putchar+0x20>)
 8001a3a:	f003 f938 	bl	8004cae <HAL_UART_Transmit>
	return ch;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20002948 	.word	0x20002948

08001a4c <HAL_UART_RxCpltCallback>:
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};
unsigned char UART2RxUklRdFlg  = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && UART2RxUklRdFlg) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1a      	ldr	r2, [pc, #104]	; (8001ac4 <HAL_UART_RxCpltCallback+0x78>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12f      	bne.n	8001abe <HAL_UART_RxCpltCallback+0x72>
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_UART_RxCpltCallback+0x7c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d02b      	beq.n	8001abe <HAL_UART_RxCpltCallback+0x72>
		if (!(UART2Rxtmp[0]^0x0A) || !(UART2Rxtmp[0]^0x0D)) {
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_UART_RxCpltCallback+0x80>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b0a      	cmp	r3, #10
 8001a6c:	d003      	beq.n	8001a76 <HAL_UART_RxCpltCallback+0x2a>
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_UART_RxCpltCallback+0x80>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b0d      	cmp	r3, #13
 8001a74:	d107      	bne.n	8001a86 <HAL_UART_RxCpltCallback+0x3a>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_UART_RxCpltCallback+0x84>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01e      	beq.n	8001abc <HAL_UART_RxCpltCallback+0x70>
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_RxCpltCallback+0x88>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	e01a      	b.n	8001abc <HAL_UART_RxCpltCallback+0x70>
		} if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_UART_RxCpltCallback+0x84>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d20e      	bcs.n	8001aae <HAL_UART_RxCpltCallback+0x62>
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_UART_RxCpltCallback+0x84>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_UART_RxCpltCallback+0x84>)
 8001a98:	600a      	str	r2, [r1, #0]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <HAL_UART_RxCpltCallback+0x80>)
 8001a9c:	7811      	ldrb	r1, [r2, #0]
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_UART_RxCpltCallback+0x8c>)
 8001aa0:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4909      	ldr	r1, [pc, #36]	; (8001acc <HAL_UART_RxCpltCallback+0x80>)
 8001aa6:	480d      	ldr	r0, [pc, #52]	; (8001adc <HAL_UART_RxCpltCallback+0x90>)
 8001aa8:	f003 fa85 	bl	8004fb6 <HAL_UART_Receive_IT>
 8001aac:	e007      	b.n	8001abe <HAL_UART_RxCpltCallback+0x72>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_UART_RxCpltCallback+0x88>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <HAL_UART_RxCpltCallback+0x94>)
 8001ab6:	f004 f975 	bl	8005da4 <puts>
 8001aba:	e000      	b.n	8001abe <HAL_UART_RxCpltCallback+0x72>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 8001abc:	bf00      	nop
	}
}
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	200005c5 	.word	0x200005c5
 8001acc:	200005c4 	.word	0x200005c4
 8001ad0:	200005c0 	.word	0x200005c0
 8001ad4:	200005bc 	.word	0x200005bc
 8001ad8:	200001bc 	.word	0x200001bc
 8001adc:	20000eb4 	.word	0x20000eb4
 8001ae0:	080075c4 	.word	0x080075c4

08001ae4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
//				Cnange_TFT_Backlight();
//				while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
//			}
//		}
//	}
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <UART2_Clear>:

void UART2_Clear() {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	e007      	b.n	8001b18 <UART2_Clear+0x1c>
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <UART2_Clear+0x48>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <UART2_Clear+0x4c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3f2      	bcc.n	8001b08 <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = UART2RxUklRdFlg = 0;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <UART2_Clear+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <UART2_Clear+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <UART2_Clear+0x4c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <UART2_Clear+0x54>)
 8001b36:	701a      	strb	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	200001bc 	.word	0x200001bc
 8001b48:	200005c0 	.word	0x200005c0
 8001b4c:	200005c5 	.word	0x200005c5
 8001b50:	200005bc 	.word	0x200005bc

08001b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5a:	f000 fd53 	bl	8002604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5e:	f000 f86f 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b62:	f000 fa1f 	bl	8001fa4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b66:	f000 f9c5 	bl	8001ef4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b6a:	f000 f9f1 	bl	8001f50 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b6e:	f000 f8c5 	bl	8001cfc <MX_ADC1_Init>
  MX_SPI1_Init();
 8001b72:	f000 f915 	bl	8001da0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b76:	f000 f949 	bl	8001e0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  UART2RxUklRdFlg = 0;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <main+0xc8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
  ADC_Calibration();
 8001b80:	f7ff f9e6 	bl	8000f50 <ADC_Calibration>
  TFT_INIT();
 8001b84:	f7ff f834 	bl	8000bf0 <TFT_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4825      	ldr	r0, [pc, #148]	; (8001c20 <main+0xcc>)
 8001b8c:	f002 fb58 	bl	8004240 <HAL_TIM_PWM_Start>
  Set_TFT_Backlight_PWM(100);
 8001b90:	2064      	movs	r0, #100	; 0x64
 8001b92:	f7fe fec5 	bl	8000920 <Set_TFT_Backlight_PWM>
  while (BLE_state^ALL_GREEN) BLE_INIT();
 8001b96:	e001      	b.n	8001b9c <main+0x48>
 8001b98:	f7ff fdfe 	bl	8001798 <BLE_INIT>
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <main+0xd0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d1f9      	bne.n	8001b98 <main+0x44>
  printf("[BLEINIT] SUCCESS.\r\n");
 8001ba4:	4820      	ldr	r0, [pc, #128]	; (8001c28 <main+0xd4>)
 8001ba6:	f004 f8fd 	bl	8005da4 <puts>
		  } PWM_UP_CNTER = 0;
	  } HAL_Delay(0);
	  //printf("[PWMTEST] PWM: %d\r\n", PWM_TEST_STA);
#endif

	  UART2RxUklRd();
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <main+0xc8>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	491e      	ldr	r1, [pc, #120]	; (8001c2c <main+0xd8>)
 8001bb4:	481e      	ldr	r0, [pc, #120]	; (8001c30 <main+0xdc>)
 8001bb6:	f003 f9fe 	bl	8004fb6 <HAL_UART_Receive_IT>
	  if (UART2RxFlg) {
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <main+0xe0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <main+0x90>
		  Read_Battery_Life();
 8001bc2:	f7ff f9df 	bl	8000f84 <Read_Battery_Life>
		  printf("[%d]%s\r\n", TIME_TO_PRINT, UART2RxBuf);
 8001bc6:	f000 fd83 	bl	80026d0 <HAL_GetTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <main+0xe4>)
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481a      	ldr	r0, [pc, #104]	; (8001c3c <main+0xe8>)
 8001bd2:	f004 f873 	bl	8005cbc <iprintf>
		  dispose(UART2RxBuf);
 8001bd6:	4818      	ldr	r0, [pc, #96]	; (8001c38 <main+0xe4>)
 8001bd8:	f7ff fe6c 	bl	80018b4 <dispose>
		  decoderDebugOutput();
 8001bdc:	f7ff fede 	bl	800199c <decoderDebugOutput>
		  UART2_Clear();
 8001be0:	f7ff ff8c 	bl	8001afc <UART2_Clear>

//	  for (uint16_t i=0; i<0xFFFF; ++ i) {
//		  TFT_Clear(i); HAL_Delay(10);
//	  }

	  for (uint8_t i=40; i<=200; ++ i) {
 8001be4:	2328      	movs	r3, #40	; 0x28
 8001be6:	71bb      	strb	r3, [r7, #6]
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	2bc8      	cmp	r3, #200	; 0xc8
 8001bec:	d80d      	bhi.n	8001c0a <main+0xb6>
		  for (uint8_t j=50; j<=350; ++ j) {
 8001bee:	2332      	movs	r3, #50	; 0x32
 8001bf0:	71fb      	strb	r3, [r7, #7]
			  TFT_DrawPoint(i, j, 0x0);
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	b291      	uxth	r1, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe ffe0 	bl	8000bc2 <TFT_DrawPoint>
		  for (uint8_t j=50; j<=350; ++ j) {
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	3301      	adds	r3, #1
 8001c06:	71fb      	strb	r3, [r7, #7]
			  TFT_DrawPoint(i, j, 0x0);
 8001c08:	e7f3      	b.n	8001bf2 <main+0x9e>
		  }
	  }

	  TFT_DrawRect(50, 50, 100, 100, 0x00);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2364      	movs	r3, #100	; 0x64
 8001c10:	2264      	movs	r2, #100	; 0x64
 8001c12:	2132      	movs	r1, #50	; 0x32
 8001c14:	2032      	movs	r0, #50	; 0x32
 8001c16:	f7fe ffad 	bl	8000b74 <TFT_DrawRect>
	  UART2RxUklRd();
 8001c1a:	e7c6      	b.n	8001baa <main+0x56>
 8001c1c:	200005c5 	.word	0x200005c5
 8001c20:	20000e74 	.word	0x20000e74
 8001c24:	20002420 	.word	0x20002420
 8001c28:	080075e0 	.word	0x080075e0
 8001c2c:	200005c4 	.word	0x200005c4
 8001c30:	20000eb4 	.word	0x20000eb4
 8001c34:	200005bc 	.word	0x200005bc
 8001c38:	200001bc 	.word	0x200001bc
 8001c3c:	080075f4 	.word	0x080075f4

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	2230      	movs	r2, #48	; 0x30
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 f82c 	bl	8005cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <SystemClock_Config+0xb4>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <SystemClock_Config+0xb4>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <SystemClock_Config+0xb4>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <SystemClock_Config+0xb8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <SystemClock_Config+0xb8>)
 8001c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <SystemClock_Config+0xb8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 0320 	add.w	r3, r7, #32
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fbe5 	bl	8003480 <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001cbc:	f000 f9cc 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fe40 	bl	8003960 <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001ce6:	f000 f9b7 	bl	8002058 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3750      	adds	r7, #80	; 0x50
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000

08001cfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <MX_ADC1_Init+0x9c>)
 8001d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <MX_ADC1_Init+0xa0>)
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d5e:	f000 fce5 	bl	800272c <HAL_ADC_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d68:	f000 f976 	bl	8002058 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_ADC1_Init+0x98>)
 8001d7e:	f000 fe51 	bl	8002a24 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d88:	f000 f966 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200005d4 	.word	0x200005d4
 8001d98:	40012000 	.word	0x40012000
 8001d9c:	0f000001 	.word	0x0f000001

08001da0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <MX_SPI1_Init+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001df2:	f001 ff81 	bl	8003cf8 <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f000 f92c 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000e1c 	.word	0x20000e1c
 8001e08:	40013000 	.word	0x40013000

08001e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08e      	sub	sp, #56	; 0x38
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	615a      	str	r2, [r3, #20]
 8001e3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e46:	229f      	movs	r2, #159	; 0x9f
 8001e48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e52:	2263      	movs	r2, #99	; 0x63
 8001e54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e62:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e64:	f002 f98c 	bl	8004180 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001e6e:	f000 f8f3 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e80:	f002 fad6 	bl	8004430 <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001e8a:	f000 f8e5 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001e90:	f002 f9a1 	bl	80041d6 <HAL_TIM_PWM_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001e9a:	f000 f8dd 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001eae:	f002 fe43 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001eb8:	f000 f8ce 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ebc:	2360      	movs	r3, #96	; 0x60
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2208      	movs	r2, #8
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001ed4:	f002 f9e6 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001ede:	f000 f8bb 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ee2:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <MX_TIM2_Init+0xe4>)
 8001ee4:	f000 f990 	bl	8002208 <HAL_TIM_MspPostInit>

}
 8001ee8:	bf00      	nop
 8001eea:	3738      	adds	r7, #56	; 0x38
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000e74 	.word	0x20000e74

08001ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <MX_USART1_UART_Init+0x54>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001f2c:	f002 fe72 	bl	8004c14 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f36:	f000 f88f 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 8001f3a:	4804      	ldr	r0, [pc, #16]	; (8001f4c <MX_USART1_UART_Init+0x58>)
 8001f3c:	f003 ff32 	bl	8005da4 <puts>

  /* USER CODE END USART1_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20002948 	.word	0x20002948
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	08007600 	.word	0x08007600

08001f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_USART2_UART_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USART2_UART_Init+0x4c>)
 8001f88:	f002 fe44 	bl	8004c14 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f92:	f000 f861 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000eb4 	.word	0x20000eb4
 8001fa0:	40004400 	.word	0x40004400

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_GPIO_Init+0xa4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <MX_GPIO_Init+0xa4>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_GPIO_Init+0xa4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_GPIO_Init+0xa4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <MX_GPIO_Init+0xa4>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_GPIO_Init+0xa4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	21e0      	movs	r1, #224	; 0xe0
 8001ff6:	4815      	ldr	r0, [pc, #84]	; (800204c <MX_GPIO_Init+0xa8>)
 8001ff8:	f001 fa10 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_GPIO_Init+0xac>)
 8002002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4619      	mov	r1, r3
 800200e:	4811      	ldr	r0, [pc, #68]	; (8002054 <MX_GPIO_Init+0xb0>)
 8002010:	f001 f86a 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002014:	23e0      	movs	r3, #224	; 0xe0
 8002016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4619      	mov	r1, r3
 800202a:	4808      	ldr	r0, [pc, #32]	; (800204c <MX_GPIO_Init+0xa8>)
 800202c:	f001 f85c 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2101      	movs	r1, #1
 8002034:	2006      	movs	r0, #6
 8002036:	f000 fffe 	bl	8003036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800203a:	2006      	movs	r0, #6
 800203c:	f001 f817 	bl	800306e <HAL_NVIC_EnableIRQ>

}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400
 8002050:	10210000 	.word	0x10210000
 8002054:	40020000 	.word	0x40020000

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205e:	e7fe      	b.n	800205e <Error_Handler+0x6>

08002060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <HAL_MspInit+0x4c>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_MspInit+0x4c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_MspInit+0x4c>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_MspInit+0x4c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_ADC_MspInit+0x7c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d127      	bne.n	8002122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_ADC_MspInit+0x80>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_ADC_MspInit+0x80>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800210a:	2340      	movs	r3, #64	; 0x40
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210e:	2303      	movs	r3, #3
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_ADC_MspInit+0x84>)
 800211e:	f000 ffe3 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012000 	.word	0x40012000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_SPI_MspInit+0x84>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12b      	bne.n	80021b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002192:	23a0      	movs	r3, #160	; 0xa0
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021a2:	2305      	movs	r3, #5
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_SPI_MspInit+0x8c>)
 80021ae:	f000 ff9b 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40013000 	.word	0x40013000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d10d      	bne.n	80021f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_TIM_Base_MspInit+0x3c>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_TIM_Base_MspInit+0x3c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_TIM_Base_MspInit+0x3c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d11e      	bne.n	8002268 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_TIM_MspPostInit+0x68>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_TIM_MspPostInit+0x68>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_TIM_MspPostInit+0x68>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4804      	ldr	r0, [pc, #16]	; (8002274 <HAL_TIM_MspPostInit+0x6c>)
 8002264:	f000 ff40 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020400 	.word	0x40020400

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_UART_MspInit+0xf8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12d      	bne.n	80022f6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_UART_MspInit+0xfc>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a34      	ldr	r2, [pc, #208]	; (8002374 <HAL_UART_MspInit+0xfc>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_UART_MspInit+0xfc>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_UART_MspInit+0xfc>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <HAL_UART_MspInit+0xfc>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_UART_MspInit+0xfc>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e4:	2307      	movs	r3, #7
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	4822      	ldr	r0, [pc, #136]	; (8002378 <HAL_UART_MspInit+0x100>)
 80022f0:	f000 fefa 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022f4:	e038      	b.n	8002368 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <HAL_UART_MspInit+0x104>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d133      	bne.n	8002368 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_UART_MspInit+0xfc>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_UART_MspInit+0xfc>)
 800230a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_UART_MspInit+0xfc>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_UART_MspInit+0xfc>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <HAL_UART_MspInit+0xfc>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_UART_MspInit+0xfc>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002338:	230c      	movs	r3, #12
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002348:	2307      	movs	r3, #7
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	4809      	ldr	r0, [pc, #36]	; (8002378 <HAL_UART_MspInit+0x100>)
 8002354:	f000 fec8 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	2026      	movs	r0, #38	; 0x26
 800235e:	f000 fe6a 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002362:	2026      	movs	r0, #38	; 0x26
 8002364:	f000 fe83 	bl	800306e <HAL_NVIC_EnableIRQ>
}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40011000 	.word	0x40011000
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	40004400 	.word	0x40004400

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 f96c 	bl	80026a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80023d8:	2101      	movs	r1, #1
 80023da:	4811      	ldr	r0, [pc, #68]	; (8002420 <EXTI0_IRQHandler+0x4c>)
 80023dc:	f001 f806 	bl	80033ec <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d113      	bne.n	800240e <EXTI0_IRQHandler+0x3a>
		HAL_Delay(20);
 80023e6:	2014      	movs	r0, #20
 80023e8:	f000 f97e 	bl	80026e8 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80023ec:	2101      	movs	r1, #1
 80023ee:	480c      	ldr	r0, [pc, #48]	; (8002420 <EXTI0_IRQHandler+0x4c>)
 80023f0:	f000 fffc 	bl	80033ec <HAL_GPIO_ReadPin>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <EXTI0_IRQHandler+0x3a>
			Cnange_TFT_Backlight();
 80023fa:	f7fe faa3 	bl	8000944 <Cnange_TFT_Backlight>
			while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 80023fe:	bf00      	nop
 8002400:	2101      	movs	r1, #1
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <EXTI0_IRQHandler+0x4c>)
 8002404:	f000 fff2 	bl	80033ec <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f8      	beq.n	8002400 <EXTI0_IRQHandler+0x2c>
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800240e:	2001      	movs	r0, #1
 8002410:	f001 f81e 	bl	8003450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <EXTI0_IRQHandler+0x50>)
 8002416:	2201      	movs	r2, #1
 8002418:	615a      	str	r2, [r3, #20]
  /* USER CODE END EXTI0_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020000 	.word	0x40020000
 8002424:	40013c00 	.word	0x40013c00

08002428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <USART2_IRQHandler+0x10>)
 800242e:	f002 fe17 	bl	8005060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000eb4 	.word	0x20000eb4

0800243c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e00a      	b.n	8002464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800244e:	f3af 8000 	nop.w
 8002452:	4601      	mov	r1, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf0      	blt.n	800244e <_read+0x12>
	}

return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e009      	b.n	800249c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fac9 	bl	8001a28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dbf1      	blt.n	8002488 <_write+0x12>
	}
	return len;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_close>:

int _close(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	return -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d6:	605a      	str	r2, [r3, #4]
	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_isatty>:

int _isatty(int file)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return 1;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	; (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f003 fb86 	bl	8005c58 <__errno>
 800254c:	4602      	mov	r2, r0
 800254e:	230c      	movs	r3, #12
 8002550:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20020000 	.word	0x20020000
 8002578:	00000400 	.word	0x00000400
 800257c:	200005c8 	.word	0x200005c8
 8002580:	20002990 	.word	0x20002990

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <SystemInit+0x28>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <SystemInit+0x28>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SystemInit+0x28>)
 800259a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800259e:	609a      	str	r2, [r3, #8]
#endif
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025b6:	e003      	b.n	80025c0 <LoopCopyDataInit>

080025b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025be:	3104      	adds	r1, #4

080025c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025c0:	480b      	ldr	r0, [pc, #44]	; (80025f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025c8:	d3f6      	bcc.n	80025b8 <CopyDataInit>
  ldr  r2, =_sbss
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025cc:	e002      	b.n	80025d4 <LoopFillZerobss>

080025ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025d0:	f842 3b04 	str.w	r3, [r2], #4

080025d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025d8:	d3f9      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025da:	f7ff ffd3 	bl	8002584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025de:	f003 fb41 	bl	8005c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025e2:	f7ff fab7 	bl	8001b54 <main>
  bx  lr    
 80025e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025ec:	080076d4 	.word	0x080076d4
  ldr  r0, =_sdata
 80025f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025f4:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 80025f8:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 80025fc:	20002990 	.word	0x20002990

08002600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC_IRQHandler>
	...

08002604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <HAL_Init+0x40>)
 800260e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_Init+0x40>)
 800261a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_Init+0x40>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262c:	2003      	movs	r0, #3
 800262e:	f000 fcf7 	bl	8003020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002632:	2000      	movs	r0, #0
 8002634:	f000 f808 	bl	8002648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002638:	f7ff fd12 	bl	8002060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00

08002648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x54>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x58>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd0f 	bl	800308a <HAL_SYSTICK_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00e      	b.n	8002694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d80a      	bhi.n	8002692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f000 fcd7 	bl	8003036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <HAL_InitTick+0x5c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000130 	.word	0x20000130
 80026a0:	20000138 	.word	0x20000138
 80026a4:	20000134 	.word	0x20000134

080026a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x20>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x24>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_IncTick+0x24>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000138 	.word	0x20000138
 80026cc:	20002988 	.word	0x20002988

080026d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return uwTick;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_GetTick+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20002988 	.word	0x20002988

080026e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff ffee 	bl	80026d0 <HAL_GetTick>
 80026f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d005      	beq.n	800270e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_Delay+0x40>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270e:	bf00      	nop
 8002710:	f7ff ffde 	bl	80026d0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d8f7      	bhi.n	8002710 <HAL_Delay+0x28>
  {
  }
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000138 	.word	0x20000138

0800272c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e033      	b.n	80027aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fcb0 	bl	80020b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa82 	bl	8002c88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
 800279a:	e001      	b.n	80027a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Start+0x1a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e08a      	b.n	80028e4 <HAL_ADC_Start+0x130>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d018      	beq.n	8002816 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_ADC_Start+0x13c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <HAL_ADC_Start+0x140>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9a      	lsrs	r2, r3, #18
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d15e      	bne.n	80028e2 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800284e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002862:	d106      	bne.n	8002872 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f023 0206 	bic.w	r2, r3, #6
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
 8002870:	e002      	b.n	8002878 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_ADC_Start+0x144>)
 8002882:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800288c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11c      	bne.n	80028e2 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e013      	b.n	80028e2 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_ADC_Start+0x148>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d10e      	bne.n	80028e2 <HAL_ADC_Start+0x12e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	20000130 	.word	0x20000130
 80028f4:	431bde83 	.word	0x431bde83
 80028f8:	40012300 	.word	0x40012300
 80028fc:	40012000 	.word	0x40012000

08002900 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291c:	d113      	bne.n	8002946 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292c:	d10b      	bne.n	8002946 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0220 	orr.w	r2, r3, #32
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e05c      	b.n	8002a00 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002946:	f7ff fec3 	bl	80026d0 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800294c:	e01a      	b.n	8002984 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d016      	beq.n	8002984 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_ADC_PollForConversion+0x6c>
 800295c:	f7ff feb8 	bl	80026d0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d20b      	bcs.n	8002984 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e03d      	b.n	8002a00 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d1dd      	bne.n	800294e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0212 	mvn.w	r2, #18
 800299a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d123      	bne.n	80029fe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11f      	bne.n	80029fe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d006      	beq.n	80029da <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d111      	bne.n	80029fe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e113      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x244>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d925      	bls.n	8002a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	3b1e      	subs	r3, #30
 8002a66:	2207      	movs	r2, #7
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	400a      	ands	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4403      	add	r3, r0
 8002a8e:	3b1e      	subs	r3, #30
 8002a90:	409a      	lsls	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e022      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4403      	add	r3, r0
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d824      	bhi.n	8002b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b05      	subs	r3, #5
 8002afc:	221f      	movs	r2, #31
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	400a      	ands	r2, r1
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b05      	subs	r3, #5
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34
 8002b32:	e04c      	b.n	8002bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d824      	bhi.n	8002b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b23      	subs	r3, #35	; 0x23
 8002b4e:	221f      	movs	r2, #31
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	3b23      	subs	r3, #35	; 0x23
 8002b78:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
 8002b84:	e023      	b.n	8002bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3b41      	subs	r3, #65	; 0x41
 8002b98:	221f      	movs	r2, #31
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b41      	subs	r3, #65	; 0x41
 8002bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_ADC_ConfigChannel+0x250>)
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_ADC_ConfigChannel+0x254>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10f      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d8>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b12      	cmp	r3, #18
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_ADC_ConfigChannel+0x254>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12b      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x23a>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_ADC_ConfigChannel+0x258>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x1f4>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b11      	cmp	r3, #17
 8002c16:	d122      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_ADC_ConfigChannel+0x258>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_ADC_ConfigChannel+0x25c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_ADC_ConfigChannel+0x260>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	0c9a      	lsrs	r2, r3, #18
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c50:	e002      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f9      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40012300 	.word	0x40012300
 8002c78:	40012000 	.word	0x40012000
 8002c7c:	10000012 	.word	0x10000012
 8002c80:	20000130 	.word	0x20000130
 8002c84:	431bde83 	.word	0x431bde83

08002c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c90:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <ADC_Init+0x1f0>)
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <ADC_Init+0x1f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	e00f      	b.n	8002d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0202 	bic.w	r2, r2, #2
 8002d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
 8002da0:	005a      	lsls	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	3b01      	subs	r3, #1
 8002de0:	035a      	lsls	r2, r3, #13
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e007      	b.n	8002dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	051a      	lsls	r2, r3, #20
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e3e:	025a      	lsls	r2, r3, #9
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	029a      	lsls	r2, r3, #10
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40012300 	.word	0x40012300
 8002e7c:	0f000001 	.word	0x0f000001

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <__NVIC_EnableIRQ+0x38>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	; (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	; (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f1c3 0307 	rsb	r3, r3, #7
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf28      	it	cs
 8002f92:	2304      	movcs	r3, #4
 8002f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <NVIC_EncodePriority+0x30>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3b03      	subs	r3, #3
 8002fa2:	e000      	b.n	8002fa6 <NVIC_EncodePriority+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	4313      	orrs	r3, r2
         );
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fec:	d301      	bcc.n	8002ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <SysTick_Config+0x40>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f7ff ff8e 	bl	8002f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <SysTick_Config+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <SysTick_Config+0x40>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff29 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003048:	f7ff ff3e 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 800304c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff8e 	bl	8002f74 <NVIC_EncodePriority>
 8003058:	4602      	mov	r2, r0
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff5d 	bl	8002f20 <__NVIC_SetPriority>
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff31 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffa2 	bl	8002fdc <SysTick_Config>
 8003098:	4603      	mov	r3, r0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00c      	b.n	80030da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2205      	movs	r2, #5
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e159      	b.n	80033b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8148 	bne.w	80033b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d00b      	beq.n	8003142 <HAL_GPIO_Init+0x5a>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003136:	2b11      	cmp	r3, #17
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b12      	cmp	r3, #18
 8003140:	d130      	bne.n	80031a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0xfc>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b12      	cmp	r3, #18
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a2 	beq.w	80033b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a55      	ldr	r2, [pc, #340]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a51      	ldr	r2, [pc, #324]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a48      	ldr	r2, [pc, #288]	; (80033d4 <HAL_GPIO_Init+0x2ec>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x202>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_GPIO_Init+0x2f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x1fe>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a46      	ldr	r2, [pc, #280]	; (80033dc <HAL_GPIO_Init+0x2f4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <HAL_GPIO_Init+0x2f8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x1f6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a44      	ldr	r2, [pc, #272]	; (80033e4 <HAL_GPIO_Init+0x2fc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x1f2>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032da:	2307      	movs	r3, #7
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032ea:	2300      	movs	r3, #0
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f002 0203 	and.w	r2, r2, #3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fc:	4934      	ldr	r1, [pc, #208]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330a:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800332e:	4a2e      	ldr	r2, [pc, #184]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003382:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <HAL_GPIO_Init+0x300>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f67f aea2 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	3724      	adds	r7, #36	; 0x24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020c00 	.word	0x40020c00
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fb38 	bl	8001ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40013c00 	.word	0x40013c00

08003480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e25b      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d075      	beq.n	800358a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349e:	4ba3      	ldr	r3, [pc, #652]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d00c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4ba0      	ldr	r3, [pc, #640]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d112      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4b9d      	ldr	r3, [pc, #628]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4b99      	ldr	r3, [pc, #612]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05b      	beq.n	8003588 <HAL_RCC_OscConfig+0x108>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d157      	bne.n	8003588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e236      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x74>
 80034e6:	4b91      	ldr	r3, [pc, #580]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a90      	ldr	r2, [pc, #576]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e01d      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x98>
 80034fe:	4b8b      	ldr	r3, [pc, #556]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a8a      	ldr	r2, [pc, #552]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b88      	ldr	r3, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a87      	ldr	r2, [pc, #540]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0xb0>
 8003518:	4b84      	ldr	r3, [pc, #528]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a83      	ldr	r2, [pc, #524]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a80      	ldr	r2, [pc, #512]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7ff f8ca 	bl	80026d0 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003540:	f7ff f8c6 	bl	80026d0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e1fb      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xc0>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7ff f8b6 	bl	80026d0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003568:	f7ff f8b2 	bl	80026d0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1e7      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	4b6c      	ldr	r3, [pc, #432]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0xe8>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d063      	beq.n	800365e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003596:	4b65      	ldr	r3, [pc, #404]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b62      	ldr	r3, [pc, #392]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d11c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d116      	bne.n	80035e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x152>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e1bb      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d2:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4952      	ldr	r1, [pc, #328]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	e03a      	b.n	800365e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	4b4f      	ldr	r3, [pc, #316]	; (8003730 <HAL_RCC_OscConfig+0x2b0>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7ff f86b 	bl	80026d0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fe:	f7ff f867 	bl	80026d0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e19c      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4940      	ldr	r1, [pc, #256]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <HAL_RCC_OscConfig+0x2b0>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7ff f84a 	bl	80026d0 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003640:	f7ff f846 	bl	80026d0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e17b      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d030      	beq.n	80036cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b30      	ldr	r3, [pc, #192]	; (8003734 <HAL_RCC_OscConfig+0x2b4>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7ff f82a 	bl	80026d0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003680:	f7ff f826 	bl	80026d0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e15b      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x200>
 800369e:	e015      	b.n	80036cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x2b4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7ff f813 	bl	80026d0 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ae:	f7ff f80f 	bl	80026d0 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e144      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a0 	beq.w	800381a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x2b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d121      	bne.n	800375a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <HAL_RCC_OscConfig+0x2b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <HAL_RCC_OscConfig+0x2b8>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fe ffd5 	bl	80026d0 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e011      	b.n	800374e <HAL_RCC_OscConfig+0x2ce>
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
 8003738:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373c:	f7fe ffc8 	bl	80026d0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0fd      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x2f0>
 8003762:	4b7d      	ldr	r3, [pc, #500]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4a7c      	ldr	r2, [pc, #496]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6713      	str	r3, [r2, #112]	; 0x70
 800376e:	e01c      	b.n	80037aa <HAL_RCC_OscConfig+0x32a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x312>
 8003778:	4b77      	ldr	r3, [pc, #476]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a76      	ldr	r2, [pc, #472]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	4b74      	ldr	r3, [pc, #464]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a73      	ldr	r2, [pc, #460]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
 8003790:	e00b      	b.n	80037aa <HAL_RCC_OscConfig+0x32a>
 8003792:	4b71      	ldr	r3, [pc, #452]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a70      	ldr	r2, [pc, #448]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	4b6e      	ldr	r3, [pc, #440]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a6d      	ldr	r2, [pc, #436]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fe ff8d 	bl	80026d0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe ff89 	bl	80026d0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0bc      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ee      	beq.n	80037ba <HAL_RCC_OscConfig+0x33a>
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fe ff77 	bl	80026d0 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe ff73 	bl	80026d0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0a6      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	4b56      	ldr	r3, [pc, #344]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ee      	bne.n	80037e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	4b52      	ldr	r3, [pc, #328]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a51      	ldr	r2, [pc, #324]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8092 	beq.w	8003948 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003824:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d05c      	beq.n	80038ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d141      	bne.n	80038bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_RCC_OscConfig+0x4dc>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fe ff47 	bl	80026d0 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003846:	f7fe ff43 	bl	80026d0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e078      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003858:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	3b01      	subs	r3, #1
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	4933      	ldr	r1, [pc, #204]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_RCC_OscConfig+0x4dc>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe ff1c 	bl	80026d0 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fe ff18 	bl	80026d0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e04d      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x41c>
 80038ba:	e045      	b.n	8003948 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_OscConfig+0x4dc>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe ff05 	bl	80026d0 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fe ff01 	bl	80026d0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e036      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCC_OscConfig+0x44a>
 80038e8:	e02e      	b.n	8003948 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e029      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	429a      	cmp	r2, r3
 8003908:	d11c      	bne.n	8003944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d115      	bne.n	8003944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003924:	4293      	cmp	r3, r2
 8003926:	d10d      	bne.n	8003944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40007000 	.word	0x40007000
 8003958:	40023800 	.word	0x40023800
 800395c:	42470060 	.word	0x42470060

08003960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0cc      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b68      	ldr	r3, [pc, #416]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d90c      	bls.n	800399c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0b8      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b4:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039cc:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d8:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	494d      	ldr	r1, [pc, #308]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d044      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d119      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e07f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e067      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4934      	ldr	r1, [pc, #208]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fe3e 	bl	80026d0 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe fe3a 	bl	80026d0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e04f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 020c 	and.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d1eb      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d20c      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e032      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4916      	ldr	r1, [pc, #88]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	490e      	ldr	r1, [pc, #56]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae6:	f000 f821 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003aea:	4601      	mov	r1, r0
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	fa21 f303 	lsr.w	r3, r1, r3
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fd9e 	bl	8002648 <HAL_InitTick>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023c00 	.word	0x40023c00
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08007614 	.word	0x08007614
 8003b24:	20000130 	.word	0x20000130
 8003b28:	20000134 	.word	0x20000134

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b42:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d007      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x32>
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d008      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x38>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 808d 	bne.w	8003c72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b5a:	60bb      	str	r3, [r7, #8]
       break;
 8003b5c:	e08c      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b60:	60bb      	str	r3, [r7, #8]
      break;
 8003b62:	e089      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b64:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6e:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d023      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	f04f 0400 	mov.w	r4, #0
 8003b84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	ea03 0501 	and.w	r5, r3, r1
 8003b90:	ea04 0602 	and.w	r6, r4, r2
 8003b94:	4a3d      	ldr	r2, [pc, #244]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b96:	fb02 f106 	mul.w	r1, r2, r6
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	fb02 f205 	mul.w	r2, r2, r5
 8003ba0:	440a      	add	r2, r1
 8003ba2:	493a      	ldr	r1, [pc, #232]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ba4:	fba5 0101 	umull	r0, r1, r5, r1
 8003ba8:	1853      	adds	r3, r2, r1
 8003baa:	4619      	mov	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	f7fc fb7b 	bl	80002b0 <__aeabi_uldivmod>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e049      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	f04f 0400 	mov.w	r4, #0
 8003bcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	ea03 0501 	and.w	r5, r3, r1
 8003bd8:	ea04 0602 	and.w	r6, r4, r2
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4632      	mov	r2, r6
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	f04f 0400 	mov.w	r4, #0
 8003be8:	0154      	lsls	r4, r2, #5
 8003bea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bee:	014b      	lsls	r3, r1, #5
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	1b49      	subs	r1, r1, r5
 8003bf6:	eb62 0206 	sbc.w	r2, r2, r6
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	f04f 0400 	mov.w	r4, #0
 8003c02:	0194      	lsls	r4, r2, #6
 8003c04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c08:	018b      	lsls	r3, r1, #6
 8003c0a:	1a5b      	subs	r3, r3, r1
 8003c0c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c10:	f04f 0100 	mov.w	r1, #0
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	00e2      	lsls	r2, r4, #3
 8003c1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c1e:	00d9      	lsls	r1, r3, #3
 8003c20:	460b      	mov	r3, r1
 8003c22:	4614      	mov	r4, r2
 8003c24:	195b      	adds	r3, r3, r5
 8003c26:	eb44 0406 	adc.w	r4, r4, r6
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	02a2      	lsls	r2, r4, #10
 8003c34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c38:	0299      	lsls	r1, r3, #10
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	4621      	mov	r1, r4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	f7fc fb30 	bl	80002b0 <__aeabi_uldivmod>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	3301      	adds	r3, #1
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	60bb      	str	r3, [r7, #8]
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c74:	60bb      	str	r3, [r7, #8]
      break;
 8003c76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c78:	68bb      	ldr	r3, [r7, #8]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	017d7840 	.word	0x017d7840

08003c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000130 	.word	0x20000130

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cac:	f7ff fff0 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0a9b      	lsrs	r3, r3, #10
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08007624 	.word	0x08007624

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd4:	f7ff ffdc 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4601      	mov	r1, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0b5b      	lsrs	r3, r3, #13
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4a03      	ldr	r2, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08007624 	.word	0x08007624

08003cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e056      	b.n	8003db8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fe fa07 	bl	8002138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	ea42 0103 	orr.w	r1, r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	f003 0104 	and.w	r1, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_SPI_Transmit+0x22>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e11e      	b.n	8004020 <HAL_SPI_Transmit+0x260>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dea:	f7fe fc71 	bl	80026d0 <HAL_GetTick>
 8003dee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d002      	beq.n	8003e06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
 8003e02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e04:	e103      	b.n	800400e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_SPI_Transmit+0x52>
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e16:	e0fa      	b.n	800400e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5e:	d107      	bne.n	8003e70 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d007      	beq.n	8003e8e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e96:	d14b      	bne.n	8003f30 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_SPI_Transmit+0xe6>
 8003ea0:	8afb      	ldrh	r3, [r7, #22]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d13e      	bne.n	8003f24 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eca:	e02b      	b.n	8003f24 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d112      	bne.n	8003f00 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003efe:	e011      	b.n	8003f24 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f00:	f7fe fbe6 	bl	80026d0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d803      	bhi.n	8003f18 <HAL_SPI_Transmit+0x158>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Transmit+0x15e>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f22:	e074      	b.n	800400e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ce      	bne.n	8003ecc <HAL_SPI_Transmit+0x10c>
 8003f2e:	e04c      	b.n	8003fca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_SPI_Transmit+0x17e>
 8003f38:	8afb      	ldrh	r3, [r7, #22]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d140      	bne.n	8003fc0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f64:	e02c      	b.n	8003fc0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d113      	bne.n	8003f9c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	7812      	ldrb	r2, [r2, #0]
 8003f80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f9a:	e011      	b.n	8003fc0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9c:	f7fe fb98 	bl	80026d0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d803      	bhi.n	8003fb4 <HAL_SPI_Transmit+0x1f4>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_Transmit+0x1fa>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fbe:	e026      	b.n	800400e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1cd      	bne.n	8003f66 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f894 	bl	80040fc <SPI_EndRxTxTransaction>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e000      	b.n	800400e <HAL_SPI_Transmit+0x24e>
  }

error:
 800400c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800401e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004038:	e04c      	b.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d048      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004042:	f7fe fb45 	bl	80026d0 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d902      	bls.n	8004058 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13d      	bne.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004066:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004070:	d111      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d004      	beq.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d107      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004094:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	d10f      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e00f      	b.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d1a3      	bne.n	800403a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <SPI_EndRxTxTransaction+0x7c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <SPI_EndRxTxTransaction+0x80>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0d5b      	lsrs	r3, r3, #21
 8004114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004126:	d112      	bne.n	800414e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff ff78 	bl	8004028 <SPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3b01      	subs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d0f2      	beq.n	800414e <SPI_EndRxTxTransaction+0x52>
 8004168:	e000      	b.n	800416c <SPI_EndRxTxTransaction+0x70>
        break;
 800416a:	bf00      	nop
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000130 	.word	0x20000130
 800417c:	165e9f81 	.word	0x165e9f81

08004180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e01d      	b.n	80041ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe f80e 	bl	80021c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 f9ee 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e01d      	b.n	8004224 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f815 	bl	800422c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f000 f9c3 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc4a 	bl	8004aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_TIM_PWM_Start+0x60>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d107      	bne.n	8004272 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b06      	cmp	r3, #6
 8004282:	d007      	beq.n	8004294 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40010000 	.word	0x40010000

080042a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0b4      	b.n	8004428 <HAL_TIM_PWM_ConfigChannel+0x184>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	f200 809f 	bhi.w	8004414 <HAL_TIM_PWM_ConfigChannel+0x170>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004415 	.word	0x08004415
 80042e4:	08004415 	.word	0x08004415
 80042e8:	08004415 	.word	0x08004415
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004415 	.word	0x08004415
 80042f4:	08004415 	.word	0x08004415
 80042f8:	08004415 	.word	0x08004415
 80042fc:	08004393 	.word	0x08004393
 8004300:	08004415 	.word	0x08004415
 8004304:	08004415 	.word	0x08004415
 8004308:	08004415 	.word	0x08004415
 800430c:	080043d3 	.word	0x080043d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f9c2 	bl	80046a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	619a      	str	r2, [r3, #24]
      break;
 800434e:	e062      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa08 	bl	800476c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
      break;
 8004390:	e041      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fa53 	bl	8004844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0208 	orr.w	r2, r2, #8
 80043ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0204 	bic.w	r2, r2, #4
 80043bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69d9      	ldr	r1, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	61da      	str	r2, [r3, #28]
      break;
 80043d0:	e021      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fa9d 	bl	8004918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69d9      	ldr	r1, [r3, #28]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	021a      	lsls	r2, r3, #8
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	61da      	str	r2, [r3, #28]
      break;
 8004412:	e000      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004414:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIM_ConfigClockSource+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e0a6      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x166>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d067      	beq.n	8004550 <HAL_TIM_ConfigClockSource+0x120>
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d80b      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x6c>
 8004484:	2b10      	cmp	r3, #16
 8004486:	d073      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x140>
 8004488:	2b10      	cmp	r3, #16
 800448a:	d802      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x62>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d06f      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004490:	e078      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004492:	2b20      	cmp	r3, #32
 8004494:	d06c      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x140>
 8004496:	2b30      	cmp	r3, #48	; 0x30
 8004498:	d06a      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800449a:	e073      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d00d      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0x8c>
 80044a0:	2b70      	cmp	r3, #112	; 0x70
 80044a2:	d804      	bhi.n	80044ae <HAL_TIM_ConfigClockSource+0x7e>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d033      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xe0>
 80044a8:	2b60      	cmp	r3, #96	; 0x60
 80044aa:	d041      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044ac:	e06a      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d066      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x152>
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b8:	d017      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044ba:	e063      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f000 faee 	bl	8004aac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
      break;
 80044e8:	e04c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f000 fad7 	bl	8004aac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e039      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	461a      	mov	r2, r3
 800451e:	f000 fa4b 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2150      	movs	r1, #80	; 0x50
 8004528:	4618      	mov	r0, r3
 800452a:	f000 faa4 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 800452e:	e029      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	461a      	mov	r2, r3
 800453e:	f000 fa6a 	bl	8004a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2160      	movs	r1, #96	; 0x60
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fa94 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 800454e:	e019      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	461a      	mov	r2, r3
 800455e:	f000 fa2b 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fa84 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 800456e:	e009      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 fa7b 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004580:	e000      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <TIM_Base_SetConfig+0xe4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00f      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d00b      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a31      	ldr	r2, [pc, #196]	; (8004688 <TIM_Base_SetConfig+0xe8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a30      	ldr	r2, [pc, #192]	; (800468c <TIM_Base_SetConfig+0xec>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <TIM_Base_SetConfig+0xf0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d108      	bne.n	80045ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <TIM_Base_SetConfig+0xe4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01b      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f8:	d017      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a22      	ldr	r2, [pc, #136]	; (8004688 <TIM_Base_SetConfig+0xe8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a21      	ldr	r2, [pc, #132]	; (800468c <TIM_Base_SetConfig+0xec>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <TIM_Base_SetConfig+0xf0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <TIM_Base_SetConfig+0xf4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <TIM_Base_SetConfig+0xf8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1d      	ldr	r2, [pc, #116]	; (800469c <TIM_Base_SetConfig+0xfc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <TIM_Base_SetConfig+0xe4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d103      	bne.n	8004670 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	615a      	str	r2, [r3, #20]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800

080046a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0201 	bic.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f023 0302 	bic.w	r3, r3, #2
 80046e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <TIM_OC1_SetConfig+0xc8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10c      	bne.n	8004716 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0308 	bic.w	r3, r3, #8
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <TIM_OC1_SetConfig+0xc8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d111      	bne.n	8004742 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40010000 	.word	0x40010000

0800476c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0210 	bic.w	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <TIM_OC2_SetConfig+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10d      	bne.n	80047e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <TIM_OC2_SetConfig+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d113      	bne.n	8004818 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000

08004844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <TIM_OC3_SetConfig+0xd0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10d      	bne.n	80048be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <TIM_OC3_SetConfig+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d113      	bne.n	80048ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	621a      	str	r2, [r3, #32]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40010000 	.word	0x40010000

08004918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	031b      	lsls	r3, r3, #12
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <TIM_OC4_SetConfig+0x9c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d109      	bne.n	800498c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 0307 	orr.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e050      	b.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d013      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10c      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40014000 	.word	0x40014000

08004c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e03f      	b.n	8004ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd fb1c 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fc81 	bl	8005560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	f040 8083 	bne.w	8004dd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_UART_Transmit+0x2e>
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e07b      	b.n	8004dd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Transmit+0x40>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e074      	b.n	8004dd8 <HAL_UART_Transmit+0x12a>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2221      	movs	r2, #33	; 0x21
 8004d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d04:	f7fd fce4 	bl	80026d0 <HAL_GetTick>
 8004d08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	88fa      	ldrh	r2, [r7, #6]
 8004d0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d1e:	e042      	b.n	8004da6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d122      	bne.n	8004d7e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 faa0 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e042      	b.n	8004dd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	3302      	adds	r3, #2
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	e017      	b.n	8004da6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	e013      	b.n	8004da6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fa7d 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e01f      	b.n	8004dd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	60ba      	str	r2, [r7, #8]
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1b7      	bne.n	8004d20 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	2140      	movs	r1, #64	; 0x40
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fa64 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e006      	b.n	8004dd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	f040 8090 	bne.w	8004f22 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_UART_Receive+0x2e>
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e088      	b.n	8004f24 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_UART_Receive+0x40>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e081      	b.n	8004f24 <HAL_UART_Receive+0x144>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2222      	movs	r2, #34	; 0x22
 8004e32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e36:	f7fd fc4b 	bl	80026d0 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e50:	e05c      	b.n	8004f0c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e68:	d12b      	bne.n	8004ec2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2120      	movs	r1, #32
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fa07 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e04f      	b.n	8004f24 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10c      	bne.n	8004eaa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	60bb      	str	r3, [r7, #8]
 8004ea8:	e030      	b.n	8004f0c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	e024      	b.n	8004f0c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2120      	movs	r1, #32
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f9db 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e023      	b.n	8004f24 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d108      	bne.n	8004ef6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	60ba      	str	r2, [r7, #8]
 8004ef0:	b2ca      	uxtb	r2, r1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e00a      	b.n	8004f0c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d19d      	bne.n	8004e52 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
  }
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d130      	bne.n	8004fa8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_UART_Transmit_IT+0x26>
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e029      	b.n	8004faa <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_UART_Transmit_IT+0x38>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e022      	b.n	8004faa <HAL_UART_Transmit_IT+0x7e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2221      	movs	r2, #33	; 0x21
 8004f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fa2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d140      	bne.n	8005052 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_UART_Receive_IT+0x26>
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e039      	b.n	8005054 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Receive_IT+0x38>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e032      	b.n	8005054 <HAL_UART_Receive_IT+0x9e>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	88fa      	ldrh	r2, [r7, #6]
 8005006:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2222      	movs	r2, #34	; 0x22
 8005012:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800502c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0220 	orr.w	r2, r2, #32
 800504c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_UART_IRQHandler+0x52>
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f9d6 	bl	800545c <UART_Receive_IT>
      return;
 80050b0:	e0d1      	b.n	8005256 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80b0 	beq.w	800521a <HAL_UART_IRQHandler+0x1ba>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_UART_IRQHandler+0x70>
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80a5 	beq.w	800521a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_UART_IRQHandler+0x90>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_UART_IRQHandler+0xb0>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	f043 0202 	orr.w	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_UART_IRQHandler+0xd0>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	f043 0204 	orr.w	r2, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00f      	beq.n	800515a <HAL_UART_IRQHandler+0xfa>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <HAL_UART_IRQHandler+0xee>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	f043 0208 	orr.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d078      	beq.n	8005254 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <HAL_UART_IRQHandler+0x11c>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f970 	bl	800545c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_UART_IRQHandler+0x144>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d031      	beq.n	8005208 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f8b9 	bl	800531c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d123      	bne.n	8005200 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d013      	beq.n	80051f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	4a21      	ldr	r2, [pc, #132]	; (800525c <HAL_UART_IRQHandler+0x1fc>)
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fd ff60 	bl	80030a2 <HAL_DMA_Abort_IT>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d016      	beq.n	8005216 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051f2:	4610      	mov	r0, r2
 80051f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f6:	e00e      	b.n	8005216 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f83b 	bl	8005274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fe:	e00a      	b.n	8005216 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f837 	bl	8005274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005206:	e006      	b.n	8005216 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f833 	bl	8005274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005214:	e01e      	b.n	8005254 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005216:	bf00      	nop
    return;
 8005218:	e01c      	b.n	8005254 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_UART_IRQHandler+0x1d6>
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8a6 	bl	8005380 <UART_Transmit_IT>
    return;
 8005234:	e00f      	b.n	8005256 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_UART_IRQHandler+0x1f6>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8ee 	bl	800542c <UART_EndTransmit_IT>
    return;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005254:	bf00      	nop
  }
}
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08005359 	.word	0x08005359

08005260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005298:	e02c      	b.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d028      	beq.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a8:	f7fd fa12 	bl	80026d0 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d21d      	bcs.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e00f      	b.n	8005314 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	429a      	cmp	r2, r3
 8005310:	d0c3      	beq.n	800529a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005332:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ff7e 	bl	8005274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b21      	cmp	r3, #33	; 0x21
 8005392:	d144      	bne.n	800541e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d11a      	bne.n	80053d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]
 80053c6:	e00e      	b.n	80053e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]
 80053d2:	e008      	b.n	80053e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6211      	str	r1, [r2, #32]
 80053de:	781a      	ldrb	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4619      	mov	r1, r3
 80053f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005408:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005418:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005442:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ff07 	bl	8005260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b22      	cmp	r3, #34	; 0x22
 800546e:	d171      	bne.n	8005554 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d123      	bne.n	80054c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10e      	bne.n	80054a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	1c9a      	adds	r2, r3, #2
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
 80054a4:	e029      	b.n	80054fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28
 80054c0:	e01b      	b.n	80054fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6858      	ldr	r0, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6291      	str	r1, [r2, #40]	; 0x28
 80054da:	b2c2      	uxtb	r2, r0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e00c      	b.n	80054fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	1c58      	adds	r0, r3, #1
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	6288      	str	r0, [r1, #40]	; 0x28
 80054f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29b      	uxth	r3, r3
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	4619      	mov	r1, r3
 8005508:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800550a:	2b00      	cmp	r3, #0
 800550c:	d120      	bne.n	8005550 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0220 	bic.w	r2, r2, #32
 800551c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fa80 	bl	8001a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e002      	b.n	8005556 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005554:	2302      	movs	r3, #2
  }
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055a2:	f023 030c 	bic.w	r3, r3, #12
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	430b      	orrs	r3, r1
 80055ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ce:	f040 818b 	bne.w	80058e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4ac1      	ldr	r2, [pc, #772]	; (80058dc <UART_SetConfig+0x37c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d005      	beq.n	80055e8 <UART_SetConfig+0x88>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4abf      	ldr	r2, [pc, #764]	; (80058e0 <UART_SetConfig+0x380>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f040 80bd 	bne.w	8005762 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fb72 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 80055ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	461d      	mov	r5, r3
 80055f2:	f04f 0600 	mov.w	r6, #0
 80055f6:	46a8      	mov	r8, r5
 80055f8:	46b1      	mov	r9, r6
 80055fa:	eb18 0308 	adds.w	r3, r8, r8
 80055fe:	eb49 0409 	adc.w	r4, r9, r9
 8005602:	4698      	mov	r8, r3
 8005604:	46a1      	mov	r9, r4
 8005606:	eb18 0805 	adds.w	r8, r8, r5
 800560a:	eb49 0906 	adc.w	r9, r9, r6
 800560e:	f04f 0100 	mov.w	r1, #0
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800561a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800561e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005622:	4688      	mov	r8, r1
 8005624:	4691      	mov	r9, r2
 8005626:	eb18 0005 	adds.w	r0, r8, r5
 800562a:	eb49 0106 	adc.w	r1, r9, r6
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	461d      	mov	r5, r3
 8005634:	f04f 0600 	mov.w	r6, #0
 8005638:	196b      	adds	r3, r5, r5
 800563a:	eb46 0406 	adc.w	r4, r6, r6
 800563e:	461a      	mov	r2, r3
 8005640:	4623      	mov	r3, r4
 8005642:	f7fa fe35 	bl	80002b0 <__aeabi_uldivmod>
 8005646:	4603      	mov	r3, r0
 8005648:	460c      	mov	r4, r1
 800564a:	461a      	mov	r2, r3
 800564c:	4ba5      	ldr	r3, [pc, #660]	; (80058e4 <UART_SetConfig+0x384>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	461d      	mov	r5, r3
 800565c:	f04f 0600 	mov.w	r6, #0
 8005660:	46a9      	mov	r9, r5
 8005662:	46b2      	mov	sl, r6
 8005664:	eb19 0309 	adds.w	r3, r9, r9
 8005668:	eb4a 040a 	adc.w	r4, sl, sl
 800566c:	4699      	mov	r9, r3
 800566e:	46a2      	mov	sl, r4
 8005670:	eb19 0905 	adds.w	r9, r9, r5
 8005674:	eb4a 0a06 	adc.w	sl, sl, r6
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005684:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005688:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800568c:	4689      	mov	r9, r1
 800568e:	4692      	mov	sl, r2
 8005690:	eb19 0005 	adds.w	r0, r9, r5
 8005694:	eb4a 0106 	adc.w	r1, sl, r6
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	461d      	mov	r5, r3
 800569e:	f04f 0600 	mov.w	r6, #0
 80056a2:	196b      	adds	r3, r5, r5
 80056a4:	eb46 0406 	adc.w	r4, r6, r6
 80056a8:	461a      	mov	r2, r3
 80056aa:	4623      	mov	r3, r4
 80056ac:	f7fa fe00 	bl	80002b0 <__aeabi_uldivmod>
 80056b0:	4603      	mov	r3, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	461a      	mov	r2, r3
 80056b6:	4b8b      	ldr	r3, [pc, #556]	; (80058e4 <UART_SetConfig+0x384>)
 80056b8:	fba3 1302 	umull	r1, r3, r3, r2
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	2164      	movs	r1, #100	; 0x64
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	3332      	adds	r3, #50	; 0x32
 80056ca:	4a86      	ldr	r2, [pc, #536]	; (80058e4 <UART_SetConfig+0x384>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056d8:	4498      	add	r8, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	461d      	mov	r5, r3
 80056de:	f04f 0600 	mov.w	r6, #0
 80056e2:	46a9      	mov	r9, r5
 80056e4:	46b2      	mov	sl, r6
 80056e6:	eb19 0309 	adds.w	r3, r9, r9
 80056ea:	eb4a 040a 	adc.w	r4, sl, sl
 80056ee:	4699      	mov	r9, r3
 80056f0:	46a2      	mov	sl, r4
 80056f2:	eb19 0905 	adds.w	r9, r9, r5
 80056f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005706:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800570a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800570e:	4689      	mov	r9, r1
 8005710:	4692      	mov	sl, r2
 8005712:	eb19 0005 	adds.w	r0, r9, r5
 8005716:	eb4a 0106 	adc.w	r1, sl, r6
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	461d      	mov	r5, r3
 8005720:	f04f 0600 	mov.w	r6, #0
 8005724:	196b      	adds	r3, r5, r5
 8005726:	eb46 0406 	adc.w	r4, r6, r6
 800572a:	461a      	mov	r2, r3
 800572c:	4623      	mov	r3, r4
 800572e:	f7fa fdbf 	bl	80002b0 <__aeabi_uldivmod>
 8005732:	4603      	mov	r3, r0
 8005734:	460c      	mov	r4, r1
 8005736:	461a      	mov	r2, r3
 8005738:	4b6a      	ldr	r3, [pc, #424]	; (80058e4 <UART_SetConfig+0x384>)
 800573a:	fba3 1302 	umull	r1, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2164      	movs	r1, #100	; 0x64
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	3332      	adds	r3, #50	; 0x32
 800574c:	4a65      	ldr	r2, [pc, #404]	; (80058e4 <UART_SetConfig+0x384>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	f003 0207 	and.w	r2, r3, #7
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4442      	add	r2, r8
 800575e:	609a      	str	r2, [r3, #8]
 8005760:	e26f      	b.n	8005c42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005762:	f7fe faa1 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 8005766:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	461d      	mov	r5, r3
 800576c:	f04f 0600 	mov.w	r6, #0
 8005770:	46a8      	mov	r8, r5
 8005772:	46b1      	mov	r9, r6
 8005774:	eb18 0308 	adds.w	r3, r8, r8
 8005778:	eb49 0409 	adc.w	r4, r9, r9
 800577c:	4698      	mov	r8, r3
 800577e:	46a1      	mov	r9, r4
 8005780:	eb18 0805 	adds.w	r8, r8, r5
 8005784:	eb49 0906 	adc.w	r9, r9, r6
 8005788:	f04f 0100 	mov.w	r1, #0
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005794:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005798:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800579c:	4688      	mov	r8, r1
 800579e:	4691      	mov	r9, r2
 80057a0:	eb18 0005 	adds.w	r0, r8, r5
 80057a4:	eb49 0106 	adc.w	r1, r9, r6
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	461d      	mov	r5, r3
 80057ae:	f04f 0600 	mov.w	r6, #0
 80057b2:	196b      	adds	r3, r5, r5
 80057b4:	eb46 0406 	adc.w	r4, r6, r6
 80057b8:	461a      	mov	r2, r3
 80057ba:	4623      	mov	r3, r4
 80057bc:	f7fa fd78 	bl	80002b0 <__aeabi_uldivmod>
 80057c0:	4603      	mov	r3, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <UART_SetConfig+0x384>)
 80057c8:	fba3 2302 	umull	r2, r3, r3, r2
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	461d      	mov	r5, r3
 80057d6:	f04f 0600 	mov.w	r6, #0
 80057da:	46a9      	mov	r9, r5
 80057dc:	46b2      	mov	sl, r6
 80057de:	eb19 0309 	adds.w	r3, r9, r9
 80057e2:	eb4a 040a 	adc.w	r4, sl, sl
 80057e6:	4699      	mov	r9, r3
 80057e8:	46a2      	mov	sl, r4
 80057ea:	eb19 0905 	adds.w	r9, r9, r5
 80057ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005802:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005806:	4689      	mov	r9, r1
 8005808:	4692      	mov	sl, r2
 800580a:	eb19 0005 	adds.w	r0, r9, r5
 800580e:	eb4a 0106 	adc.w	r1, sl, r6
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	461d      	mov	r5, r3
 8005818:	f04f 0600 	mov.w	r6, #0
 800581c:	196b      	adds	r3, r5, r5
 800581e:	eb46 0406 	adc.w	r4, r6, r6
 8005822:	461a      	mov	r2, r3
 8005824:	4623      	mov	r3, r4
 8005826:	f7fa fd43 	bl	80002b0 <__aeabi_uldivmod>
 800582a:	4603      	mov	r3, r0
 800582c:	460c      	mov	r4, r1
 800582e:	461a      	mov	r2, r3
 8005830:	4b2c      	ldr	r3, [pc, #176]	; (80058e4 <UART_SetConfig+0x384>)
 8005832:	fba3 1302 	umull	r1, r3, r3, r2
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2164      	movs	r1, #100	; 0x64
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	3332      	adds	r3, #50	; 0x32
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <UART_SetConfig+0x384>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005852:	4498      	add	r8, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	461d      	mov	r5, r3
 8005858:	f04f 0600 	mov.w	r6, #0
 800585c:	46a9      	mov	r9, r5
 800585e:	46b2      	mov	sl, r6
 8005860:	eb19 0309 	adds.w	r3, r9, r9
 8005864:	eb4a 040a 	adc.w	r4, sl, sl
 8005868:	4699      	mov	r9, r3
 800586a:	46a2      	mov	sl, r4
 800586c:	eb19 0905 	adds.w	r9, r9, r5
 8005870:	eb4a 0a06 	adc.w	sl, sl, r6
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005888:	4689      	mov	r9, r1
 800588a:	4692      	mov	sl, r2
 800588c:	eb19 0005 	adds.w	r0, r9, r5
 8005890:	eb4a 0106 	adc.w	r1, sl, r6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	461d      	mov	r5, r3
 800589a:	f04f 0600 	mov.w	r6, #0
 800589e:	196b      	adds	r3, r5, r5
 80058a0:	eb46 0406 	adc.w	r4, r6, r6
 80058a4:	461a      	mov	r2, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	f7fa fd02 	bl	80002b0 <__aeabi_uldivmod>
 80058ac:	4603      	mov	r3, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <UART_SetConfig+0x384>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a07      	ldr	r2, [pc, #28]	; (80058e4 <UART_SetConfig+0x384>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 0207 	and.w	r2, r3, #7
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4442      	add	r2, r8
 80058d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058da:	e1b2      	b.n	8005c42 <UART_SetConfig+0x6e2>
 80058dc:	40011000 	.word	0x40011000
 80058e0:	40011400 	.word	0x40011400
 80058e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4ad7      	ldr	r2, [pc, #860]	; (8005c4c <UART_SetConfig+0x6ec>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d005      	beq.n	80058fe <UART_SetConfig+0x39e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4ad6      	ldr	r2, [pc, #856]	; (8005c50 <UART_SetConfig+0x6f0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	f040 80d1 	bne.w	8005aa0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058fe:	f7fe f9e7 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 8005902:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	469a      	mov	sl, r3
 8005908:	f04f 0b00 	mov.w	fp, #0
 800590c:	46d0      	mov	r8, sl
 800590e:	46d9      	mov	r9, fp
 8005910:	eb18 0308 	adds.w	r3, r8, r8
 8005914:	eb49 0409 	adc.w	r4, r9, r9
 8005918:	4698      	mov	r8, r3
 800591a:	46a1      	mov	r9, r4
 800591c:	eb18 080a 	adds.w	r8, r8, sl
 8005920:	eb49 090b 	adc.w	r9, r9, fp
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005930:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005934:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005938:	4688      	mov	r8, r1
 800593a:	4691      	mov	r9, r2
 800593c:	eb1a 0508 	adds.w	r5, sl, r8
 8005940:	eb4b 0609 	adc.w	r6, fp, r9
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4619      	mov	r1, r3
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f04f 0400 	mov.w	r4, #0
 8005956:	0094      	lsls	r4, r2, #2
 8005958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800595c:	008b      	lsls	r3, r1, #2
 800595e:	461a      	mov	r2, r3
 8005960:	4623      	mov	r3, r4
 8005962:	4628      	mov	r0, r5
 8005964:	4631      	mov	r1, r6
 8005966:	f7fa fca3 	bl	80002b0 <__aeabi_uldivmod>
 800596a:	4603      	mov	r3, r0
 800596c:	460c      	mov	r4, r1
 800596e:	461a      	mov	r2, r3
 8005970:	4bb8      	ldr	r3, [pc, #736]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005972:	fba3 2302 	umull	r2, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	469b      	mov	fp, r3
 8005980:	f04f 0c00 	mov.w	ip, #0
 8005984:	46d9      	mov	r9, fp
 8005986:	46e2      	mov	sl, ip
 8005988:	eb19 0309 	adds.w	r3, r9, r9
 800598c:	eb4a 040a 	adc.w	r4, sl, sl
 8005990:	4699      	mov	r9, r3
 8005992:	46a2      	mov	sl, r4
 8005994:	eb19 090b 	adds.w	r9, r9, fp
 8005998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800599c:	f04f 0100 	mov.w	r1, #0
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059b0:	4689      	mov	r9, r1
 80059b2:	4692      	mov	sl, r2
 80059b4:	eb1b 0509 	adds.w	r5, fp, r9
 80059b8:	eb4c 060a 	adc.w	r6, ip, sl
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4619      	mov	r1, r3
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	0094      	lsls	r4, r2, #2
 80059d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059d4:	008b      	lsls	r3, r1, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	4623      	mov	r3, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	4631      	mov	r1, r6
 80059de:	f7fa fc67 	bl	80002b0 <__aeabi_uldivmod>
 80059e2:	4603      	mov	r3, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	461a      	mov	r2, r3
 80059e8:	4b9a      	ldr	r3, [pc, #616]	; (8005c54 <UART_SetConfig+0x6f4>)
 80059ea:	fba3 1302 	umull	r1, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2164      	movs	r1, #100	; 0x64
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	3332      	adds	r3, #50	; 0x32
 80059fc:	4a95      	ldr	r2, [pc, #596]	; (8005c54 <UART_SetConfig+0x6f4>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a08:	4498      	add	r8, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	469b      	mov	fp, r3
 8005a0e:	f04f 0c00 	mov.w	ip, #0
 8005a12:	46d9      	mov	r9, fp
 8005a14:	46e2      	mov	sl, ip
 8005a16:	eb19 0309 	adds.w	r3, r9, r9
 8005a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a1e:	4699      	mov	r9, r3
 8005a20:	46a2      	mov	sl, r4
 8005a22:	eb19 090b 	adds.w	r9, r9, fp
 8005a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a3e:	4689      	mov	r9, r1
 8005a40:	4692      	mov	sl, r2
 8005a42:	eb1b 0509 	adds.w	r5, fp, r9
 8005a46:	eb4c 060a 	adc.w	r6, ip, sl
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	0094      	lsls	r4, r2, #2
 8005a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a62:	008b      	lsls	r3, r1, #2
 8005a64:	461a      	mov	r2, r3
 8005a66:	4623      	mov	r3, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	f7fa fc20 	bl	80002b0 <__aeabi_uldivmod>
 8005a70:	4603      	mov	r3, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b77      	ldr	r3, [pc, #476]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005a78:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	2164      	movs	r1, #100	; 0x64
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	3332      	adds	r3, #50	; 0x32
 8005a8a:	4a72      	ldr	r2, [pc, #456]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	f003 020f 	and.w	r2, r3, #15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4442      	add	r2, r8
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	e0d0      	b.n	8005c42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aa0:	f7fe f902 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 8005aa4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	f04f 0b00 	mov.w	fp, #0
 8005aae:	46d0      	mov	r8, sl
 8005ab0:	46d9      	mov	r9, fp
 8005ab2:	eb18 0308 	adds.w	r3, r8, r8
 8005ab6:	eb49 0409 	adc.w	r4, r9, r9
 8005aba:	4698      	mov	r8, r3
 8005abc:	46a1      	mov	r9, r4
 8005abe:	eb18 080a 	adds.w	r8, r8, sl
 8005ac2:	eb49 090b 	adc.w	r9, r9, fp
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ad2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ad6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ada:	4688      	mov	r8, r1
 8005adc:	4691      	mov	r9, r2
 8005ade:	eb1a 0508 	adds.w	r5, sl, r8
 8005ae2:	eb4b 0609 	adc.w	r6, fp, r9
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4619      	mov	r1, r3
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	0094      	lsls	r4, r2, #2
 8005afa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005afe:	008b      	lsls	r3, r1, #2
 8005b00:	461a      	mov	r2, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	4631      	mov	r1, r6
 8005b08:	f7fa fbd2 	bl	80002b0 <__aeabi_uldivmod>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b50      	ldr	r3, [pc, #320]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005b14:	fba3 2302 	umull	r2, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	469b      	mov	fp, r3
 8005b22:	f04f 0c00 	mov.w	ip, #0
 8005b26:	46d9      	mov	r9, fp
 8005b28:	46e2      	mov	sl, ip
 8005b2a:	eb19 0309 	adds.w	r3, r9, r9
 8005b2e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b32:	4699      	mov	r9, r3
 8005b34:	46a2      	mov	sl, r4
 8005b36:	eb19 090b 	adds.w	r9, r9, fp
 8005b3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b52:	4689      	mov	r9, r1
 8005b54:	4692      	mov	sl, r2
 8005b56:	eb1b 0509 	adds.w	r5, fp, r9
 8005b5a:	eb4c 060a 	adc.w	r6, ip, sl
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4619      	mov	r1, r3
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	0094      	lsls	r4, r2, #2
 8005b72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b76:	008b      	lsls	r3, r1, #2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	4631      	mov	r1, r6
 8005b80:	f7fa fb96 	bl	80002b0 <__aeabi_uldivmod>
 8005b84:	4603      	mov	r3, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4b32      	ldr	r3, [pc, #200]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	2164      	movs	r1, #100	; 0x64
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	3332      	adds	r3, #50	; 0x32
 8005b9e:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005baa:	4498      	add	r8, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	469b      	mov	fp, r3
 8005bb0:	f04f 0c00 	mov.w	ip, #0
 8005bb4:	46d9      	mov	r9, fp
 8005bb6:	46e2      	mov	sl, ip
 8005bb8:	eb19 0309 	adds.w	r3, r9, r9
 8005bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8005bc0:	4699      	mov	r9, r3
 8005bc2:	46a2      	mov	sl, r4
 8005bc4:	eb19 090b 	adds.w	r9, r9, fp
 8005bc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005be0:	4689      	mov	r9, r1
 8005be2:	4692      	mov	sl, r2
 8005be4:	eb1b 0509 	adds.w	r5, fp, r9
 8005be8:	eb4c 060a 	adc.w	r6, ip, sl
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	f04f 0400 	mov.w	r4, #0
 8005bfe:	0094      	lsls	r4, r2, #2
 8005c00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c04:	008b      	lsls	r3, r1, #2
 8005c06:	461a      	mov	r2, r3
 8005c08:	4623      	mov	r3, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	f7fa fb4f 	bl	80002b0 <__aeabi_uldivmod>
 8005c12:	4603      	mov	r3, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	461a      	mov	r2, r3
 8005c18:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	2164      	movs	r1, #100	; 0x64
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	3332      	adds	r3, #50	; 0x32
 8005c2c:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <UART_SetConfig+0x6f4>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	f003 020f 	and.w	r2, r3, #15
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4442      	add	r2, r8
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	e7ff      	b.n	8005c42 <UART_SetConfig+0x6e2>
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	40011400 	.word	0x40011400
 8005c54:	51eb851f 	.word	0x51eb851f

08005c58 <__errno>:
 8005c58:	4b01      	ldr	r3, [pc, #4]	; (8005c60 <__errno+0x8>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	2000013c 	.word	0x2000013c

08005c64 <__libc_init_array>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4e0d      	ldr	r6, [pc, #52]	; (8005c9c <__libc_init_array+0x38>)
 8005c68:	4c0d      	ldr	r4, [pc, #52]	; (8005ca0 <__libc_init_array+0x3c>)
 8005c6a:	1ba4      	subs	r4, r4, r6
 8005c6c:	10a4      	asrs	r4, r4, #2
 8005c6e:	2500      	movs	r5, #0
 8005c70:	42a5      	cmp	r5, r4
 8005c72:	d109      	bne.n	8005c88 <__libc_init_array+0x24>
 8005c74:	4e0b      	ldr	r6, [pc, #44]	; (8005ca4 <__libc_init_array+0x40>)
 8005c76:	4c0c      	ldr	r4, [pc, #48]	; (8005ca8 <__libc_init_array+0x44>)
 8005c78:	f001 f95e 	bl	8006f38 <_init>
 8005c7c:	1ba4      	subs	r4, r4, r6
 8005c7e:	10a4      	asrs	r4, r4, #2
 8005c80:	2500      	movs	r5, #0
 8005c82:	42a5      	cmp	r5, r4
 8005c84:	d105      	bne.n	8005c92 <__libc_init_array+0x2e>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c8c:	4798      	blx	r3
 8005c8e:	3501      	adds	r5, #1
 8005c90:	e7ee      	b.n	8005c70 <__libc_init_array+0xc>
 8005c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c96:	4798      	blx	r3
 8005c98:	3501      	adds	r5, #1
 8005c9a:	e7f2      	b.n	8005c82 <__libc_init_array+0x1e>
 8005c9c:	080076cc 	.word	0x080076cc
 8005ca0:	080076cc 	.word	0x080076cc
 8005ca4:	080076cc 	.word	0x080076cc
 8005ca8:	080076d0 	.word	0x080076d0

08005cac <memset>:
 8005cac:	4402      	add	r2, r0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d100      	bne.n	8005cb6 <memset+0xa>
 8005cb4:	4770      	bx	lr
 8005cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cba:	e7f9      	b.n	8005cb0 <memset+0x4>

08005cbc <iprintf>:
 8005cbc:	b40f      	push	{r0, r1, r2, r3}
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <iprintf+0x2c>)
 8005cc0:	b513      	push	{r0, r1, r4, lr}
 8005cc2:	681c      	ldr	r4, [r3, #0]
 8005cc4:	b124      	cbz	r4, 8005cd0 <iprintf+0x14>
 8005cc6:	69a3      	ldr	r3, [r4, #24]
 8005cc8:	b913      	cbnz	r3, 8005cd0 <iprintf+0x14>
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 fa74 	bl	80061b8 <__sinit>
 8005cd0:	ab05      	add	r3, sp, #20
 8005cd2:	9a04      	ldr	r2, [sp, #16]
 8005cd4:	68a1      	ldr	r1, [r4, #8]
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fd7f 	bl	80067dc <_vfiprintf_r>
 8005cde:	b002      	add	sp, #8
 8005ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce4:	b004      	add	sp, #16
 8005ce6:	4770      	bx	lr
 8005ce8:	2000013c 	.word	0x2000013c

08005cec <_puts_r>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	460e      	mov	r6, r1
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	b118      	cbz	r0, 8005cfc <_puts_r+0x10>
 8005cf4:	6983      	ldr	r3, [r0, #24]
 8005cf6:	b90b      	cbnz	r3, 8005cfc <_puts_r+0x10>
 8005cf8:	f000 fa5e 	bl	80061b8 <__sinit>
 8005cfc:	69ab      	ldr	r3, [r5, #24]
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	b913      	cbnz	r3, 8005d08 <_puts_r+0x1c>
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 fa58 	bl	80061b8 <__sinit>
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <_puts_r+0xac>)
 8005d0a:	429c      	cmp	r4, r3
 8005d0c:	d117      	bne.n	8005d3e <_puts_r+0x52>
 8005d0e:	686c      	ldr	r4, [r5, #4]
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	071b      	lsls	r3, r3, #28
 8005d14:	d51d      	bpl.n	8005d52 <_puts_r+0x66>
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	b1db      	cbz	r3, 8005d52 <_puts_r+0x66>
 8005d1a:	3e01      	subs	r6, #1
 8005d1c:	68a3      	ldr	r3, [r4, #8]
 8005d1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d22:	3b01      	subs	r3, #1
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	b9e9      	cbnz	r1, 8005d64 <_puts_r+0x78>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	da2e      	bge.n	8005d8a <_puts_r+0x9e>
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	210a      	movs	r1, #10
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 f891 	bl	8005e58 <__swbuf_r>
 8005d36:	3001      	adds	r0, #1
 8005d38:	d011      	beq.n	8005d5e <_puts_r+0x72>
 8005d3a:	200a      	movs	r0, #10
 8005d3c:	e011      	b.n	8005d62 <_puts_r+0x76>
 8005d3e:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <_puts_r+0xb0>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	d101      	bne.n	8005d48 <_puts_r+0x5c>
 8005d44:	68ac      	ldr	r4, [r5, #8]
 8005d46:	e7e3      	b.n	8005d10 <_puts_r+0x24>
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <_puts_r+0xb4>)
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	bf08      	it	eq
 8005d4e:	68ec      	ldreq	r4, [r5, #12]
 8005d50:	e7de      	b.n	8005d10 <_puts_r+0x24>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 f8d1 	bl	8005efc <__swsetup_r>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0dd      	beq.n	8005d1a <_puts_r+0x2e>
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da04      	bge.n	8005d72 <_puts_r+0x86>
 8005d68:	69a2      	ldr	r2, [r4, #24]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	dc06      	bgt.n	8005d7c <_puts_r+0x90>
 8005d6e:	290a      	cmp	r1, #10
 8005d70:	d004      	beq.n	8005d7c <_puts_r+0x90>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	6022      	str	r2, [r4, #0]
 8005d78:	7019      	strb	r1, [r3, #0]
 8005d7a:	e7cf      	b.n	8005d1c <_puts_r+0x30>
 8005d7c:	4622      	mov	r2, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f86a 	bl	8005e58 <__swbuf_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d1c9      	bne.n	8005d1c <_puts_r+0x30>
 8005d88:	e7e9      	b.n	8005d5e <_puts_r+0x72>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	200a      	movs	r0, #10
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	6022      	str	r2, [r4, #0]
 8005d92:	7018      	strb	r0, [r3, #0]
 8005d94:	e7e5      	b.n	8005d62 <_puts_r+0x76>
 8005d96:	bf00      	nop
 8005d98:	08007650 	.word	0x08007650
 8005d9c:	08007670 	.word	0x08007670
 8005da0:	08007630 	.word	0x08007630

08005da4 <puts>:
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <puts+0xc>)
 8005da6:	4601      	mov	r1, r0
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	f7ff bf9f 	b.w	8005cec <_puts_r>
 8005dae:	bf00      	nop
 8005db0:	2000013c 	.word	0x2000013c

08005db4 <siprintf>:
 8005db4:	b40e      	push	{r1, r2, r3}
 8005db6:	b500      	push	{lr}
 8005db8:	b09c      	sub	sp, #112	; 0x70
 8005dba:	ab1d      	add	r3, sp, #116	; 0x74
 8005dbc:	9002      	str	r0, [sp, #8]
 8005dbe:	9006      	str	r0, [sp, #24]
 8005dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dc4:	4809      	ldr	r0, [pc, #36]	; (8005dec <siprintf+0x38>)
 8005dc6:	9107      	str	r1, [sp, #28]
 8005dc8:	9104      	str	r1, [sp, #16]
 8005dca:	4909      	ldr	r1, [pc, #36]	; (8005df0 <siprintf+0x3c>)
 8005dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd0:	9105      	str	r1, [sp, #20]
 8005dd2:	6800      	ldr	r0, [r0, #0]
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	a902      	add	r1, sp, #8
 8005dd8:	f000 fbde 	bl	8006598 <_svfiprintf_r>
 8005ddc:	9b02      	ldr	r3, [sp, #8]
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	b01c      	add	sp, #112	; 0x70
 8005de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de8:	b003      	add	sp, #12
 8005dea:	4770      	bx	lr
 8005dec:	2000013c 	.word	0x2000013c
 8005df0:	ffff0208 	.word	0xffff0208

08005df4 <strcat>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4603      	mov	r3, r0
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	1c5c      	adds	r4, r3, #1
 8005dfc:	b93a      	cbnz	r2, 8005e0e <strcat+0x1a>
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e08:	2a00      	cmp	r2, #0
 8005e0a:	d1f9      	bne.n	8005e00 <strcat+0xc>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	4623      	mov	r3, r4
 8005e10:	e7f2      	b.n	8005df8 <strcat+0x4>

08005e12 <strcpy>:
 8005e12:	4603      	mov	r3, r0
 8005e14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e18:	f803 2b01 	strb.w	r2, [r3], #1
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	d1f9      	bne.n	8005e14 <strcpy+0x2>
 8005e20:	4770      	bx	lr

08005e22 <strstr>:
 8005e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e24:	7803      	ldrb	r3, [r0, #0]
 8005e26:	b17b      	cbz	r3, 8005e48 <strstr+0x26>
 8005e28:	4604      	mov	r4, r0
 8005e2a:	7823      	ldrb	r3, [r4, #0]
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	1c66      	adds	r6, r4, #1
 8005e30:	b17b      	cbz	r3, 8005e52 <strstr+0x30>
 8005e32:	1e4a      	subs	r2, r1, #1
 8005e34:	1e63      	subs	r3, r4, #1
 8005e36:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005e3a:	b14d      	cbz	r5, 8005e50 <strstr+0x2e>
 8005e3c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005e40:	42af      	cmp	r7, r5
 8005e42:	4634      	mov	r4, r6
 8005e44:	d0f7      	beq.n	8005e36 <strstr+0x14>
 8005e46:	e7f0      	b.n	8005e2a <strstr+0x8>
 8005e48:	780b      	ldrb	r3, [r1, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf18      	it	ne
 8005e4e:	2000      	movne	r0, #0
 8005e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e52:	4618      	mov	r0, r3
 8005e54:	e7fc      	b.n	8005e50 <strstr+0x2e>
	...

08005e58 <__swbuf_r>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	460e      	mov	r6, r1
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	4605      	mov	r5, r0
 8005e60:	b118      	cbz	r0, 8005e6a <__swbuf_r+0x12>
 8005e62:	6983      	ldr	r3, [r0, #24]
 8005e64:	b90b      	cbnz	r3, 8005e6a <__swbuf_r+0x12>
 8005e66:	f000 f9a7 	bl	80061b8 <__sinit>
 8005e6a:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <__swbuf_r+0x98>)
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d12a      	bne.n	8005ec6 <__swbuf_r+0x6e>
 8005e70:	686c      	ldr	r4, [r5, #4]
 8005e72:	69a3      	ldr	r3, [r4, #24]
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	071a      	lsls	r2, r3, #28
 8005e7a:	d52e      	bpl.n	8005eda <__swbuf_r+0x82>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	b363      	cbz	r3, 8005eda <__swbuf_r+0x82>
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	6820      	ldr	r0, [r4, #0]
 8005e84:	1ac0      	subs	r0, r0, r3
 8005e86:	6963      	ldr	r3, [r4, #20]
 8005e88:	b2f6      	uxtb	r6, r6
 8005e8a:	4283      	cmp	r3, r0
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	dc04      	bgt.n	8005e9a <__swbuf_r+0x42>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 f926 	bl	80060e4 <_fflush_r>
 8005e98:	bb28      	cbnz	r0, 8005ee6 <__swbuf_r+0x8e>
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	6022      	str	r2, [r4, #0]
 8005ea6:	701e      	strb	r6, [r3, #0]
 8005ea8:	6963      	ldr	r3, [r4, #20]
 8005eaa:	3001      	adds	r0, #1
 8005eac:	4283      	cmp	r3, r0
 8005eae:	d004      	beq.n	8005eba <__swbuf_r+0x62>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	07db      	lsls	r3, r3, #31
 8005eb4:	d519      	bpl.n	8005eea <__swbuf_r+0x92>
 8005eb6:	2e0a      	cmp	r6, #10
 8005eb8:	d117      	bne.n	8005eea <__swbuf_r+0x92>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 f911 	bl	80060e4 <_fflush_r>
 8005ec2:	b190      	cbz	r0, 8005eea <__swbuf_r+0x92>
 8005ec4:	e00f      	b.n	8005ee6 <__swbuf_r+0x8e>
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <__swbuf_r+0x9c>)
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	d101      	bne.n	8005ed0 <__swbuf_r+0x78>
 8005ecc:	68ac      	ldr	r4, [r5, #8]
 8005ece:	e7d0      	b.n	8005e72 <__swbuf_r+0x1a>
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <__swbuf_r+0xa0>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	bf08      	it	eq
 8005ed6:	68ec      	ldreq	r4, [r5, #12]
 8005ed8:	e7cb      	b.n	8005e72 <__swbuf_r+0x1a>
 8005eda:	4621      	mov	r1, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	f000 f80d 	bl	8005efc <__swsetup_r>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d0cc      	beq.n	8005e80 <__swbuf_r+0x28>
 8005ee6:	f04f 37ff 	mov.w	r7, #4294967295
 8005eea:	4638      	mov	r0, r7
 8005eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	08007650 	.word	0x08007650
 8005ef4:	08007670 	.word	0x08007670
 8005ef8:	08007630 	.word	0x08007630

08005efc <__swsetup_r>:
 8005efc:	4b32      	ldr	r3, [pc, #200]	; (8005fc8 <__swsetup_r+0xcc>)
 8005efe:	b570      	push	{r4, r5, r6, lr}
 8005f00:	681d      	ldr	r5, [r3, #0]
 8005f02:	4606      	mov	r6, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	b125      	cbz	r5, 8005f12 <__swsetup_r+0x16>
 8005f08:	69ab      	ldr	r3, [r5, #24]
 8005f0a:	b913      	cbnz	r3, 8005f12 <__swsetup_r+0x16>
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f953 	bl	80061b8 <__sinit>
 8005f12:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <__swsetup_r+0xd0>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d10f      	bne.n	8005f38 <__swsetup_r+0x3c>
 8005f18:	686c      	ldr	r4, [r5, #4]
 8005f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	0715      	lsls	r5, r2, #28
 8005f22:	d42c      	bmi.n	8005f7e <__swsetup_r+0x82>
 8005f24:	06d0      	lsls	r0, r2, #27
 8005f26:	d411      	bmi.n	8005f4c <__swsetup_r+0x50>
 8005f28:	2209      	movs	r2, #9
 8005f2a:	6032      	str	r2, [r6, #0]
 8005f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	e03e      	b.n	8005fb6 <__swsetup_r+0xba>
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <__swsetup_r+0xd4>)
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	d101      	bne.n	8005f42 <__swsetup_r+0x46>
 8005f3e:	68ac      	ldr	r4, [r5, #8]
 8005f40:	e7eb      	b.n	8005f1a <__swsetup_r+0x1e>
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <__swsetup_r+0xd8>)
 8005f44:	429c      	cmp	r4, r3
 8005f46:	bf08      	it	eq
 8005f48:	68ec      	ldreq	r4, [r5, #12]
 8005f4a:	e7e6      	b.n	8005f1a <__swsetup_r+0x1e>
 8005f4c:	0751      	lsls	r1, r2, #29
 8005f4e:	d512      	bpl.n	8005f76 <__swsetup_r+0x7a>
 8005f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f52:	b141      	cbz	r1, 8005f66 <__swsetup_r+0x6a>
 8005f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d002      	beq.n	8005f62 <__swsetup_r+0x66>
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 fa19 	bl	8006394 <_free_r>
 8005f62:	2300      	movs	r3, #0
 8005f64:	6363      	str	r3, [r4, #52]	; 0x34
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6063      	str	r3, [r4, #4]
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f043 0308 	orr.w	r3, r3, #8
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	b94b      	cbnz	r3, 8005f96 <__swsetup_r+0x9a>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8c:	d003      	beq.n	8005f96 <__swsetup_r+0x9a>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f9bf 	bl	8006314 <__smakebuf_r>
 8005f96:	89a2      	ldrh	r2, [r4, #12]
 8005f98:	f012 0301 	ands.w	r3, r2, #1
 8005f9c:	d00c      	beq.n	8005fb8 <__swsetup_r+0xbc>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60a3      	str	r3, [r4, #8]
 8005fa2:	6963      	ldr	r3, [r4, #20]
 8005fa4:	425b      	negs	r3, r3
 8005fa6:	61a3      	str	r3, [r4, #24]
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	b953      	cbnz	r3, 8005fc2 <__swsetup_r+0xc6>
 8005fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005fb4:	d1ba      	bne.n	8005f2c <__swsetup_r+0x30>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	0792      	lsls	r2, r2, #30
 8005fba:	bf58      	it	pl
 8005fbc:	6963      	ldrpl	r3, [r4, #20]
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	e7f2      	b.n	8005fa8 <__swsetup_r+0xac>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	e7f7      	b.n	8005fb6 <__swsetup_r+0xba>
 8005fc6:	bf00      	nop
 8005fc8:	2000013c 	.word	0x2000013c
 8005fcc:	08007650 	.word	0x08007650
 8005fd0:	08007670 	.word	0x08007670
 8005fd4:	08007630 	.word	0x08007630

08005fd8 <__sflush_r>:
 8005fd8:	898a      	ldrh	r2, [r1, #12]
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	0710      	lsls	r0, r2, #28
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	d458      	bmi.n	8006098 <__sflush_r+0xc0>
 8005fe6:	684b      	ldr	r3, [r1, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc05      	bgt.n	8005ff8 <__sflush_r+0x20>
 8005fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc02      	bgt.n	8005ff8 <__sflush_r+0x20>
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	d0f9      	beq.n	8005ff2 <__sflush_r+0x1a>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006004:	682f      	ldr	r7, [r5, #0]
 8006006:	6a21      	ldr	r1, [r4, #32]
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	d032      	beq.n	8006072 <__sflush_r+0x9a>
 800600c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	075a      	lsls	r2, r3, #29
 8006012:	d505      	bpl.n	8006020 <__sflush_r+0x48>
 8006014:	6863      	ldr	r3, [r4, #4]
 8006016:	1ac0      	subs	r0, r0, r3
 8006018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800601a:	b10b      	cbz	r3, 8006020 <__sflush_r+0x48>
 800601c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800601e:	1ac0      	subs	r0, r0, r3
 8006020:	2300      	movs	r3, #0
 8006022:	4602      	mov	r2, r0
 8006024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006026:	6a21      	ldr	r1, [r4, #32]
 8006028:	4628      	mov	r0, r5
 800602a:	47b0      	blx	r6
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	d106      	bne.n	8006040 <__sflush_r+0x68>
 8006032:	6829      	ldr	r1, [r5, #0]
 8006034:	291d      	cmp	r1, #29
 8006036:	d848      	bhi.n	80060ca <__sflush_r+0xf2>
 8006038:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <__sflush_r+0x108>)
 800603a:	40ca      	lsrs	r2, r1
 800603c:	07d6      	lsls	r6, r2, #31
 800603e:	d544      	bpl.n	80060ca <__sflush_r+0xf2>
 8006040:	2200      	movs	r2, #0
 8006042:	6062      	str	r2, [r4, #4]
 8006044:	04d9      	lsls	r1, r3, #19
 8006046:	6922      	ldr	r2, [r4, #16]
 8006048:	6022      	str	r2, [r4, #0]
 800604a:	d504      	bpl.n	8006056 <__sflush_r+0x7e>
 800604c:	1c42      	adds	r2, r0, #1
 800604e:	d101      	bne.n	8006054 <__sflush_r+0x7c>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b903      	cbnz	r3, 8006056 <__sflush_r+0x7e>
 8006054:	6560      	str	r0, [r4, #84]	; 0x54
 8006056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006058:	602f      	str	r7, [r5, #0]
 800605a:	2900      	cmp	r1, #0
 800605c:	d0c9      	beq.n	8005ff2 <__sflush_r+0x1a>
 800605e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006062:	4299      	cmp	r1, r3
 8006064:	d002      	beq.n	800606c <__sflush_r+0x94>
 8006066:	4628      	mov	r0, r5
 8006068:	f000 f994 	bl	8006394 <_free_r>
 800606c:	2000      	movs	r0, #0
 800606e:	6360      	str	r0, [r4, #52]	; 0x34
 8006070:	e7c0      	b.n	8005ff4 <__sflush_r+0x1c>
 8006072:	2301      	movs	r3, #1
 8006074:	4628      	mov	r0, r5
 8006076:	47b0      	blx	r6
 8006078:	1c41      	adds	r1, r0, #1
 800607a:	d1c8      	bne.n	800600e <__sflush_r+0x36>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0c5      	beq.n	800600e <__sflush_r+0x36>
 8006082:	2b1d      	cmp	r3, #29
 8006084:	d001      	beq.n	800608a <__sflush_r+0xb2>
 8006086:	2b16      	cmp	r3, #22
 8006088:	d101      	bne.n	800608e <__sflush_r+0xb6>
 800608a:	602f      	str	r7, [r5, #0]
 800608c:	e7b1      	b.n	8005ff2 <__sflush_r+0x1a>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	e7ad      	b.n	8005ff4 <__sflush_r+0x1c>
 8006098:	690f      	ldr	r7, [r1, #16]
 800609a:	2f00      	cmp	r7, #0
 800609c:	d0a9      	beq.n	8005ff2 <__sflush_r+0x1a>
 800609e:	0793      	lsls	r3, r2, #30
 80060a0:	680e      	ldr	r6, [r1, #0]
 80060a2:	bf08      	it	eq
 80060a4:	694b      	ldreq	r3, [r1, #20]
 80060a6:	600f      	str	r7, [r1, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2300      	movne	r3, #0
 80060ac:	eba6 0807 	sub.w	r8, r6, r7
 80060b0:	608b      	str	r3, [r1, #8]
 80060b2:	f1b8 0f00 	cmp.w	r8, #0
 80060b6:	dd9c      	ble.n	8005ff2 <__sflush_r+0x1a>
 80060b8:	4643      	mov	r3, r8
 80060ba:	463a      	mov	r2, r7
 80060bc:	6a21      	ldr	r1, [r4, #32]
 80060be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b0      	blx	r6
 80060c4:	2800      	cmp	r0, #0
 80060c6:	dc06      	bgt.n	80060d6 <__sflush_r+0xfe>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e78e      	b.n	8005ff4 <__sflush_r+0x1c>
 80060d6:	4407      	add	r7, r0
 80060d8:	eba8 0800 	sub.w	r8, r8, r0
 80060dc:	e7e9      	b.n	80060b2 <__sflush_r+0xda>
 80060de:	bf00      	nop
 80060e0:	20400001 	.word	0x20400001

080060e4 <_fflush_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	4605      	mov	r5, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b1db      	cbz	r3, 8006126 <_fflush_r+0x42>
 80060ee:	b118      	cbz	r0, 80060f8 <_fflush_r+0x14>
 80060f0:	6983      	ldr	r3, [r0, #24]
 80060f2:	b90b      	cbnz	r3, 80060f8 <_fflush_r+0x14>
 80060f4:	f000 f860 	bl	80061b8 <__sinit>
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <_fflush_r+0x48>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	d109      	bne.n	8006112 <_fflush_r+0x2e>
 80060fe:	686c      	ldr	r4, [r5, #4]
 8006100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006104:	b17b      	cbz	r3, 8006126 <_fflush_r+0x42>
 8006106:	4621      	mov	r1, r4
 8006108:	4628      	mov	r0, r5
 800610a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800610e:	f7ff bf63 	b.w	8005fd8 <__sflush_r>
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <_fflush_r+0x4c>)
 8006114:	429c      	cmp	r4, r3
 8006116:	d101      	bne.n	800611c <_fflush_r+0x38>
 8006118:	68ac      	ldr	r4, [r5, #8]
 800611a:	e7f1      	b.n	8006100 <_fflush_r+0x1c>
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <_fflush_r+0x50>)
 800611e:	429c      	cmp	r4, r3
 8006120:	bf08      	it	eq
 8006122:	68ec      	ldreq	r4, [r5, #12]
 8006124:	e7ec      	b.n	8006100 <_fflush_r+0x1c>
 8006126:	2000      	movs	r0, #0
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	bf00      	nop
 800612c:	08007650 	.word	0x08007650
 8006130:	08007670 	.word	0x08007670
 8006134:	08007630 	.word	0x08007630

08006138 <std>:
 8006138:	2300      	movs	r3, #0
 800613a:	b510      	push	{r4, lr}
 800613c:	4604      	mov	r4, r0
 800613e:	e9c0 3300 	strd	r3, r3, [r0]
 8006142:	6083      	str	r3, [r0, #8]
 8006144:	8181      	strh	r1, [r0, #12]
 8006146:	6643      	str	r3, [r0, #100]	; 0x64
 8006148:	81c2      	strh	r2, [r0, #14]
 800614a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800614e:	6183      	str	r3, [r0, #24]
 8006150:	4619      	mov	r1, r3
 8006152:	2208      	movs	r2, #8
 8006154:	305c      	adds	r0, #92	; 0x5c
 8006156:	f7ff fda9 	bl	8005cac <memset>
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <std+0x38>)
 800615c:	6263      	str	r3, [r4, #36]	; 0x24
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x3c>)
 8006160:	62a3      	str	r3, [r4, #40]	; 0x28
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x40>)
 8006164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <std+0x44>)
 8006168:	6224      	str	r4, [r4, #32]
 800616a:	6323      	str	r3, [r4, #48]	; 0x30
 800616c:	bd10      	pop	{r4, pc}
 800616e:	bf00      	nop
 8006170:	08006d39 	.word	0x08006d39
 8006174:	08006d5b 	.word	0x08006d5b
 8006178:	08006d93 	.word	0x08006d93
 800617c:	08006db7 	.word	0x08006db7

08006180 <_cleanup_r>:
 8006180:	4901      	ldr	r1, [pc, #4]	; (8006188 <_cleanup_r+0x8>)
 8006182:	f000 b885 	b.w	8006290 <_fwalk_reent>
 8006186:	bf00      	nop
 8006188:	080060e5 	.word	0x080060e5

0800618c <__sfmoreglue>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	1e4a      	subs	r2, r1, #1
 8006190:	2568      	movs	r5, #104	; 0x68
 8006192:	4355      	muls	r5, r2
 8006194:	460e      	mov	r6, r1
 8006196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800619a:	f000 f949 	bl	8006430 <_malloc_r>
 800619e:	4604      	mov	r4, r0
 80061a0:	b140      	cbz	r0, 80061b4 <__sfmoreglue+0x28>
 80061a2:	2100      	movs	r1, #0
 80061a4:	e9c0 1600 	strd	r1, r6, [r0]
 80061a8:	300c      	adds	r0, #12
 80061aa:	60a0      	str	r0, [r4, #8]
 80061ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b0:	f7ff fd7c 	bl	8005cac <memset>
 80061b4:	4620      	mov	r0, r4
 80061b6:	bd70      	pop	{r4, r5, r6, pc}

080061b8 <__sinit>:
 80061b8:	6983      	ldr	r3, [r0, #24]
 80061ba:	b510      	push	{r4, lr}
 80061bc:	4604      	mov	r4, r0
 80061be:	bb33      	cbnz	r3, 800620e <__sinit+0x56>
 80061c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80061c4:	6503      	str	r3, [r0, #80]	; 0x50
 80061c6:	4b12      	ldr	r3, [pc, #72]	; (8006210 <__sinit+0x58>)
 80061c8:	4a12      	ldr	r2, [pc, #72]	; (8006214 <__sinit+0x5c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6282      	str	r2, [r0, #40]	; 0x28
 80061ce:	4298      	cmp	r0, r3
 80061d0:	bf04      	itt	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	6183      	streq	r3, [r0, #24]
 80061d6:	f000 f81f 	bl	8006218 <__sfp>
 80061da:	6060      	str	r0, [r4, #4]
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 f81b 	bl	8006218 <__sfp>
 80061e2:	60a0      	str	r0, [r4, #8]
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f817 	bl	8006218 <__sfp>
 80061ea:	2200      	movs	r2, #0
 80061ec:	60e0      	str	r0, [r4, #12]
 80061ee:	2104      	movs	r1, #4
 80061f0:	6860      	ldr	r0, [r4, #4]
 80061f2:	f7ff ffa1 	bl	8006138 <std>
 80061f6:	2201      	movs	r2, #1
 80061f8:	2109      	movs	r1, #9
 80061fa:	68a0      	ldr	r0, [r4, #8]
 80061fc:	f7ff ff9c 	bl	8006138 <std>
 8006200:	2202      	movs	r2, #2
 8006202:	2112      	movs	r1, #18
 8006204:	68e0      	ldr	r0, [r4, #12]
 8006206:	f7ff ff97 	bl	8006138 <std>
 800620a:	2301      	movs	r3, #1
 800620c:	61a3      	str	r3, [r4, #24]
 800620e:	bd10      	pop	{r4, pc}
 8006210:	0800762c 	.word	0x0800762c
 8006214:	08006181 	.word	0x08006181

08006218 <__sfp>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <__sfp+0x70>)
 800621c:	681e      	ldr	r6, [r3, #0]
 800621e:	69b3      	ldr	r3, [r6, #24]
 8006220:	4607      	mov	r7, r0
 8006222:	b913      	cbnz	r3, 800622a <__sfp+0x12>
 8006224:	4630      	mov	r0, r6
 8006226:	f7ff ffc7 	bl	80061b8 <__sinit>
 800622a:	3648      	adds	r6, #72	; 0x48
 800622c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006230:	3b01      	subs	r3, #1
 8006232:	d503      	bpl.n	800623c <__sfp+0x24>
 8006234:	6833      	ldr	r3, [r6, #0]
 8006236:	b133      	cbz	r3, 8006246 <__sfp+0x2e>
 8006238:	6836      	ldr	r6, [r6, #0]
 800623a:	e7f7      	b.n	800622c <__sfp+0x14>
 800623c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006240:	b16d      	cbz	r5, 800625e <__sfp+0x46>
 8006242:	3468      	adds	r4, #104	; 0x68
 8006244:	e7f4      	b.n	8006230 <__sfp+0x18>
 8006246:	2104      	movs	r1, #4
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff ff9f 	bl	800618c <__sfmoreglue>
 800624e:	6030      	str	r0, [r6, #0]
 8006250:	2800      	cmp	r0, #0
 8006252:	d1f1      	bne.n	8006238 <__sfp+0x20>
 8006254:	230c      	movs	r3, #12
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4604      	mov	r4, r0
 800625a:	4620      	mov	r0, r4
 800625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625e:	4b0b      	ldr	r3, [pc, #44]	; (800628c <__sfp+0x74>)
 8006260:	6665      	str	r5, [r4, #100]	; 0x64
 8006262:	e9c4 5500 	strd	r5, r5, [r4]
 8006266:	60a5      	str	r5, [r4, #8]
 8006268:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800626c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006270:	2208      	movs	r2, #8
 8006272:	4629      	mov	r1, r5
 8006274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006278:	f7ff fd18 	bl	8005cac <memset>
 800627c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006284:	e7e9      	b.n	800625a <__sfp+0x42>
 8006286:	bf00      	nop
 8006288:	0800762c 	.word	0x0800762c
 800628c:	ffff0001 	.word	0xffff0001

08006290 <_fwalk_reent>:
 8006290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006294:	4680      	mov	r8, r0
 8006296:	4689      	mov	r9, r1
 8006298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800629c:	2600      	movs	r6, #0
 800629e:	b914      	cbnz	r4, 80062a6 <_fwalk_reent+0x16>
 80062a0:	4630      	mov	r0, r6
 80062a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80062aa:	3f01      	subs	r7, #1
 80062ac:	d501      	bpl.n	80062b2 <_fwalk_reent+0x22>
 80062ae:	6824      	ldr	r4, [r4, #0]
 80062b0:	e7f5      	b.n	800629e <_fwalk_reent+0xe>
 80062b2:	89ab      	ldrh	r3, [r5, #12]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d907      	bls.n	80062c8 <_fwalk_reent+0x38>
 80062b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062bc:	3301      	adds	r3, #1
 80062be:	d003      	beq.n	80062c8 <_fwalk_reent+0x38>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4640      	mov	r0, r8
 80062c4:	47c8      	blx	r9
 80062c6:	4306      	orrs	r6, r0
 80062c8:	3568      	adds	r5, #104	; 0x68
 80062ca:	e7ee      	b.n	80062aa <_fwalk_reent+0x1a>

080062cc <__swhatbuf_r>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	460e      	mov	r6, r1
 80062d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d4:	2900      	cmp	r1, #0
 80062d6:	b096      	sub	sp, #88	; 0x58
 80062d8:	4614      	mov	r4, r2
 80062da:	461d      	mov	r5, r3
 80062dc:	da07      	bge.n	80062ee <__swhatbuf_r+0x22>
 80062de:	2300      	movs	r3, #0
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	89b3      	ldrh	r3, [r6, #12]
 80062e4:	061a      	lsls	r2, r3, #24
 80062e6:	d410      	bmi.n	800630a <__swhatbuf_r+0x3e>
 80062e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ec:	e00e      	b.n	800630c <__swhatbuf_r+0x40>
 80062ee:	466a      	mov	r2, sp
 80062f0:	f000 fd88 	bl	8006e04 <_fstat_r>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	dbf2      	blt.n	80062de <__swhatbuf_r+0x12>
 80062f8:	9a01      	ldr	r2, [sp, #4]
 80062fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006302:	425a      	negs	r2, r3
 8006304:	415a      	adcs	r2, r3
 8006306:	602a      	str	r2, [r5, #0]
 8006308:	e7ee      	b.n	80062e8 <__swhatbuf_r+0x1c>
 800630a:	2340      	movs	r3, #64	; 0x40
 800630c:	2000      	movs	r0, #0
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	b016      	add	sp, #88	; 0x58
 8006312:	bd70      	pop	{r4, r5, r6, pc}

08006314 <__smakebuf_r>:
 8006314:	898b      	ldrh	r3, [r1, #12]
 8006316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006318:	079d      	lsls	r5, r3, #30
 800631a:	4606      	mov	r6, r0
 800631c:	460c      	mov	r4, r1
 800631e:	d507      	bpl.n	8006330 <__smakebuf_r+0x1c>
 8006320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	2301      	movs	r3, #1
 800632a:	6163      	str	r3, [r4, #20]
 800632c:	b002      	add	sp, #8
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	ab01      	add	r3, sp, #4
 8006332:	466a      	mov	r2, sp
 8006334:	f7ff ffca 	bl	80062cc <__swhatbuf_r>
 8006338:	9900      	ldr	r1, [sp, #0]
 800633a:	4605      	mov	r5, r0
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f877 	bl	8006430 <_malloc_r>
 8006342:	b948      	cbnz	r0, 8006358 <__smakebuf_r+0x44>
 8006344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006348:	059a      	lsls	r2, r3, #22
 800634a:	d4ef      	bmi.n	800632c <__smakebuf_r+0x18>
 800634c:	f023 0303 	bic.w	r3, r3, #3
 8006350:	f043 0302 	orr.w	r3, r3, #2
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	e7e3      	b.n	8006320 <__smakebuf_r+0xc>
 8006358:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <__smakebuf_r+0x7c>)
 800635a:	62b3      	str	r3, [r6, #40]	; 0x28
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	6020      	str	r0, [r4, #0]
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	9b00      	ldr	r3, [sp, #0]
 8006368:	6163      	str	r3, [r4, #20]
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	6120      	str	r0, [r4, #16]
 800636e:	b15b      	cbz	r3, 8006388 <__smakebuf_r+0x74>
 8006370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006374:	4630      	mov	r0, r6
 8006376:	f000 fd57 	bl	8006e28 <_isatty_r>
 800637a:	b128      	cbz	r0, 8006388 <__smakebuf_r+0x74>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	431d      	orrs	r5, r3
 800638c:	81a5      	strh	r5, [r4, #12]
 800638e:	e7cd      	b.n	800632c <__smakebuf_r+0x18>
 8006390:	08006181 	.word	0x08006181

08006394 <_free_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4605      	mov	r5, r0
 8006398:	2900      	cmp	r1, #0
 800639a:	d045      	beq.n	8006428 <_free_r+0x94>
 800639c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a0:	1f0c      	subs	r4, r1, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bfb8      	it	lt
 80063a6:	18e4      	addlt	r4, r4, r3
 80063a8:	f000 fd84 	bl	8006eb4 <__malloc_lock>
 80063ac:	4a1f      	ldr	r2, [pc, #124]	; (800642c <_free_r+0x98>)
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	4610      	mov	r0, r2
 80063b2:	b933      	cbnz	r3, 80063c2 <_free_r+0x2e>
 80063b4:	6063      	str	r3, [r4, #4]
 80063b6:	6014      	str	r4, [r2, #0]
 80063b8:	4628      	mov	r0, r5
 80063ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063be:	f000 bd7a 	b.w	8006eb6 <__malloc_unlock>
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	d90c      	bls.n	80063e0 <_free_r+0x4c>
 80063c6:	6821      	ldr	r1, [r4, #0]
 80063c8:	1862      	adds	r2, r4, r1
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bf04      	itt	eq
 80063ce:	681a      	ldreq	r2, [r3, #0]
 80063d0:	685b      	ldreq	r3, [r3, #4]
 80063d2:	6063      	str	r3, [r4, #4]
 80063d4:	bf04      	itt	eq
 80063d6:	1852      	addeq	r2, r2, r1
 80063d8:	6022      	streq	r2, [r4, #0]
 80063da:	6004      	str	r4, [r0, #0]
 80063dc:	e7ec      	b.n	80063b8 <_free_r+0x24>
 80063de:	4613      	mov	r3, r2
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	b10a      	cbz	r2, 80063e8 <_free_r+0x54>
 80063e4:	42a2      	cmp	r2, r4
 80063e6:	d9fa      	bls.n	80063de <_free_r+0x4a>
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	1858      	adds	r0, r3, r1
 80063ec:	42a0      	cmp	r0, r4
 80063ee:	d10b      	bne.n	8006408 <_free_r+0x74>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	4401      	add	r1, r0
 80063f4:	1858      	adds	r0, r3, r1
 80063f6:	4282      	cmp	r2, r0
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	d1dd      	bne.n	80063b8 <_free_r+0x24>
 80063fc:	6810      	ldr	r0, [r2, #0]
 80063fe:	6852      	ldr	r2, [r2, #4]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	4401      	add	r1, r0
 8006404:	6019      	str	r1, [r3, #0]
 8006406:	e7d7      	b.n	80063b8 <_free_r+0x24>
 8006408:	d902      	bls.n	8006410 <_free_r+0x7c>
 800640a:	230c      	movs	r3, #12
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	e7d3      	b.n	80063b8 <_free_r+0x24>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	1821      	adds	r1, r4, r0
 8006414:	428a      	cmp	r2, r1
 8006416:	bf04      	itt	eq
 8006418:	6811      	ldreq	r1, [r2, #0]
 800641a:	6852      	ldreq	r2, [r2, #4]
 800641c:	6062      	str	r2, [r4, #4]
 800641e:	bf04      	itt	eq
 8006420:	1809      	addeq	r1, r1, r0
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	605c      	str	r4, [r3, #4]
 8006426:	e7c7      	b.n	80063b8 <_free_r+0x24>
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	bf00      	nop
 800642c:	200005cc 	.word	0x200005cc

08006430 <_malloc_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	1ccd      	adds	r5, r1, #3
 8006434:	f025 0503 	bic.w	r5, r5, #3
 8006438:	3508      	adds	r5, #8
 800643a:	2d0c      	cmp	r5, #12
 800643c:	bf38      	it	cc
 800643e:	250c      	movcc	r5, #12
 8006440:	2d00      	cmp	r5, #0
 8006442:	4606      	mov	r6, r0
 8006444:	db01      	blt.n	800644a <_malloc_r+0x1a>
 8006446:	42a9      	cmp	r1, r5
 8006448:	d903      	bls.n	8006452 <_malloc_r+0x22>
 800644a:	230c      	movs	r3, #12
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	2000      	movs	r0, #0
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	f000 fd2f 	bl	8006eb4 <__malloc_lock>
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <_malloc_r+0xac>)
 8006458:	6814      	ldr	r4, [r2, #0]
 800645a:	4621      	mov	r1, r4
 800645c:	b991      	cbnz	r1, 8006484 <_malloc_r+0x54>
 800645e:	4c20      	ldr	r4, [pc, #128]	; (80064e0 <_malloc_r+0xb0>)
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	b91b      	cbnz	r3, 800646c <_malloc_r+0x3c>
 8006464:	4630      	mov	r0, r6
 8006466:	f000 fc57 	bl	8006d18 <_sbrk_r>
 800646a:	6020      	str	r0, [r4, #0]
 800646c:	4629      	mov	r1, r5
 800646e:	4630      	mov	r0, r6
 8006470:	f000 fc52 	bl	8006d18 <_sbrk_r>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d124      	bne.n	80064c2 <_malloc_r+0x92>
 8006478:	230c      	movs	r3, #12
 800647a:	6033      	str	r3, [r6, #0]
 800647c:	4630      	mov	r0, r6
 800647e:	f000 fd1a 	bl	8006eb6 <__malloc_unlock>
 8006482:	e7e4      	b.n	800644e <_malloc_r+0x1e>
 8006484:	680b      	ldr	r3, [r1, #0]
 8006486:	1b5b      	subs	r3, r3, r5
 8006488:	d418      	bmi.n	80064bc <_malloc_r+0x8c>
 800648a:	2b0b      	cmp	r3, #11
 800648c:	d90f      	bls.n	80064ae <_malloc_r+0x7e>
 800648e:	600b      	str	r3, [r1, #0]
 8006490:	50cd      	str	r5, [r1, r3]
 8006492:	18cc      	adds	r4, r1, r3
 8006494:	4630      	mov	r0, r6
 8006496:	f000 fd0e 	bl	8006eb6 <__malloc_unlock>
 800649a:	f104 000b 	add.w	r0, r4, #11
 800649e:	1d23      	adds	r3, r4, #4
 80064a0:	f020 0007 	bic.w	r0, r0, #7
 80064a4:	1ac3      	subs	r3, r0, r3
 80064a6:	d0d3      	beq.n	8006450 <_malloc_r+0x20>
 80064a8:	425a      	negs	r2, r3
 80064aa:	50e2      	str	r2, [r4, r3]
 80064ac:	e7d0      	b.n	8006450 <_malloc_r+0x20>
 80064ae:	428c      	cmp	r4, r1
 80064b0:	684b      	ldr	r3, [r1, #4]
 80064b2:	bf16      	itet	ne
 80064b4:	6063      	strne	r3, [r4, #4]
 80064b6:	6013      	streq	r3, [r2, #0]
 80064b8:	460c      	movne	r4, r1
 80064ba:	e7eb      	b.n	8006494 <_malloc_r+0x64>
 80064bc:	460c      	mov	r4, r1
 80064be:	6849      	ldr	r1, [r1, #4]
 80064c0:	e7cc      	b.n	800645c <_malloc_r+0x2c>
 80064c2:	1cc4      	adds	r4, r0, #3
 80064c4:	f024 0403 	bic.w	r4, r4, #3
 80064c8:	42a0      	cmp	r0, r4
 80064ca:	d005      	beq.n	80064d8 <_malloc_r+0xa8>
 80064cc:	1a21      	subs	r1, r4, r0
 80064ce:	4630      	mov	r0, r6
 80064d0:	f000 fc22 	bl	8006d18 <_sbrk_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d0cf      	beq.n	8006478 <_malloc_r+0x48>
 80064d8:	6025      	str	r5, [r4, #0]
 80064da:	e7db      	b.n	8006494 <_malloc_r+0x64>
 80064dc:	200005cc 	.word	0x200005cc
 80064e0:	200005d0 	.word	0x200005d0

080064e4 <__ssputs_r>:
 80064e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	688e      	ldr	r6, [r1, #8]
 80064ea:	429e      	cmp	r6, r3
 80064ec:	4682      	mov	sl, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	4690      	mov	r8, r2
 80064f2:	4699      	mov	r9, r3
 80064f4:	d837      	bhi.n	8006566 <__ssputs_r+0x82>
 80064f6:	898a      	ldrh	r2, [r1, #12]
 80064f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064fc:	d031      	beq.n	8006562 <__ssputs_r+0x7e>
 80064fe:	6825      	ldr	r5, [r4, #0]
 8006500:	6909      	ldr	r1, [r1, #16]
 8006502:	1a6f      	subs	r7, r5, r1
 8006504:	6965      	ldr	r5, [r4, #20]
 8006506:	2302      	movs	r3, #2
 8006508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800650c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006510:	f109 0301 	add.w	r3, r9, #1
 8006514:	443b      	add	r3, r7
 8006516:	429d      	cmp	r5, r3
 8006518:	bf38      	it	cc
 800651a:	461d      	movcc	r5, r3
 800651c:	0553      	lsls	r3, r2, #21
 800651e:	d530      	bpl.n	8006582 <__ssputs_r+0x9e>
 8006520:	4629      	mov	r1, r5
 8006522:	f7ff ff85 	bl	8006430 <_malloc_r>
 8006526:	4606      	mov	r6, r0
 8006528:	b950      	cbnz	r0, 8006540 <__ssputs_r+0x5c>
 800652a:	230c      	movs	r3, #12
 800652c:	f8ca 3000 	str.w	r3, [sl]
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	463a      	mov	r2, r7
 8006542:	6921      	ldr	r1, [r4, #16]
 8006544:	f000 fc92 	bl	8006e6c <memcpy>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800654e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	6126      	str	r6, [r4, #16]
 8006556:	6165      	str	r5, [r4, #20]
 8006558:	443e      	add	r6, r7
 800655a:	1bed      	subs	r5, r5, r7
 800655c:	6026      	str	r6, [r4, #0]
 800655e:	60a5      	str	r5, [r4, #8]
 8006560:	464e      	mov	r6, r9
 8006562:	454e      	cmp	r6, r9
 8006564:	d900      	bls.n	8006568 <__ssputs_r+0x84>
 8006566:	464e      	mov	r6, r9
 8006568:	4632      	mov	r2, r6
 800656a:	4641      	mov	r1, r8
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	f000 fc88 	bl	8006e82 <memmove>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	1b9b      	subs	r3, r3, r6
 8006576:	60a3      	str	r3, [r4, #8]
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	441e      	add	r6, r3
 800657c:	6026      	str	r6, [r4, #0]
 800657e:	2000      	movs	r0, #0
 8006580:	e7dc      	b.n	800653c <__ssputs_r+0x58>
 8006582:	462a      	mov	r2, r5
 8006584:	f000 fc98 	bl	8006eb8 <_realloc_r>
 8006588:	4606      	mov	r6, r0
 800658a:	2800      	cmp	r0, #0
 800658c:	d1e2      	bne.n	8006554 <__ssputs_r+0x70>
 800658e:	6921      	ldr	r1, [r4, #16]
 8006590:	4650      	mov	r0, sl
 8006592:	f7ff feff 	bl	8006394 <_free_r>
 8006596:	e7c8      	b.n	800652a <__ssputs_r+0x46>

08006598 <_svfiprintf_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	461d      	mov	r5, r3
 800659e:	898b      	ldrh	r3, [r1, #12]
 80065a0:	061f      	lsls	r7, r3, #24
 80065a2:	b09d      	sub	sp, #116	; 0x74
 80065a4:	4680      	mov	r8, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	4616      	mov	r6, r2
 80065aa:	d50f      	bpl.n	80065cc <_svfiprintf_r+0x34>
 80065ac:	690b      	ldr	r3, [r1, #16]
 80065ae:	b96b      	cbnz	r3, 80065cc <_svfiprintf_r+0x34>
 80065b0:	2140      	movs	r1, #64	; 0x40
 80065b2:	f7ff ff3d 	bl	8006430 <_malloc_r>
 80065b6:	6020      	str	r0, [r4, #0]
 80065b8:	6120      	str	r0, [r4, #16]
 80065ba:	b928      	cbnz	r0, 80065c8 <_svfiprintf_r+0x30>
 80065bc:	230c      	movs	r3, #12
 80065be:	f8c8 3000 	str.w	r3, [r8]
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	e0c8      	b.n	800675a <_svfiprintf_r+0x1c2>
 80065c8:	2340      	movs	r3, #64	; 0x40
 80065ca:	6163      	str	r3, [r4, #20]
 80065cc:	2300      	movs	r3, #0
 80065ce:	9309      	str	r3, [sp, #36]	; 0x24
 80065d0:	2320      	movs	r3, #32
 80065d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065d6:	2330      	movs	r3, #48	; 0x30
 80065d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065dc:	9503      	str	r5, [sp, #12]
 80065de:	f04f 0b01 	mov.w	fp, #1
 80065e2:	4637      	mov	r7, r6
 80065e4:	463d      	mov	r5, r7
 80065e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065ea:	b10b      	cbz	r3, 80065f0 <_svfiprintf_r+0x58>
 80065ec:	2b25      	cmp	r3, #37	; 0x25
 80065ee:	d13e      	bne.n	800666e <_svfiprintf_r+0xd6>
 80065f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80065f4:	d00b      	beq.n	800660e <_svfiprintf_r+0x76>
 80065f6:	4653      	mov	r3, sl
 80065f8:	4632      	mov	r2, r6
 80065fa:	4621      	mov	r1, r4
 80065fc:	4640      	mov	r0, r8
 80065fe:	f7ff ff71 	bl	80064e4 <__ssputs_r>
 8006602:	3001      	adds	r0, #1
 8006604:	f000 80a4 	beq.w	8006750 <_svfiprintf_r+0x1b8>
 8006608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660a:	4453      	add	r3, sl
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	783b      	ldrb	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 809d 	beq.w	8006750 <_svfiprintf_r+0x1b8>
 8006616:	2300      	movs	r3, #0
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006620:	9304      	str	r3, [sp, #16]
 8006622:	9307      	str	r3, [sp, #28]
 8006624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006628:	931a      	str	r3, [sp, #104]	; 0x68
 800662a:	462f      	mov	r7, r5
 800662c:	2205      	movs	r2, #5
 800662e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006632:	4850      	ldr	r0, [pc, #320]	; (8006774 <_svfiprintf_r+0x1dc>)
 8006634:	f7f9 fdec 	bl	8000210 <memchr>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	b9d0      	cbnz	r0, 8006672 <_svfiprintf_r+0xda>
 800663c:	06d9      	lsls	r1, r3, #27
 800663e:	bf44      	itt	mi
 8006640:	2220      	movmi	r2, #32
 8006642:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006646:	071a      	lsls	r2, r3, #28
 8006648:	bf44      	itt	mi
 800664a:	222b      	movmi	r2, #43	; 0x2b
 800664c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006650:	782a      	ldrb	r2, [r5, #0]
 8006652:	2a2a      	cmp	r2, #42	; 0x2a
 8006654:	d015      	beq.n	8006682 <_svfiprintf_r+0xea>
 8006656:	9a07      	ldr	r2, [sp, #28]
 8006658:	462f      	mov	r7, r5
 800665a:	2000      	movs	r0, #0
 800665c:	250a      	movs	r5, #10
 800665e:	4639      	mov	r1, r7
 8006660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006664:	3b30      	subs	r3, #48	; 0x30
 8006666:	2b09      	cmp	r3, #9
 8006668:	d94d      	bls.n	8006706 <_svfiprintf_r+0x16e>
 800666a:	b1b8      	cbz	r0, 800669c <_svfiprintf_r+0x104>
 800666c:	e00f      	b.n	800668e <_svfiprintf_r+0xf6>
 800666e:	462f      	mov	r7, r5
 8006670:	e7b8      	b.n	80065e4 <_svfiprintf_r+0x4c>
 8006672:	4a40      	ldr	r2, [pc, #256]	; (8006774 <_svfiprintf_r+0x1dc>)
 8006674:	1a80      	subs	r0, r0, r2
 8006676:	fa0b f000 	lsl.w	r0, fp, r0
 800667a:	4318      	orrs	r0, r3
 800667c:	9004      	str	r0, [sp, #16]
 800667e:	463d      	mov	r5, r7
 8006680:	e7d3      	b.n	800662a <_svfiprintf_r+0x92>
 8006682:	9a03      	ldr	r2, [sp, #12]
 8006684:	1d11      	adds	r1, r2, #4
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	9103      	str	r1, [sp, #12]
 800668a:	2a00      	cmp	r2, #0
 800668c:	db01      	blt.n	8006692 <_svfiprintf_r+0xfa>
 800668e:	9207      	str	r2, [sp, #28]
 8006690:	e004      	b.n	800669c <_svfiprintf_r+0x104>
 8006692:	4252      	negs	r2, r2
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	9207      	str	r2, [sp, #28]
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	783b      	ldrb	r3, [r7, #0]
 800669e:	2b2e      	cmp	r3, #46	; 0x2e
 80066a0:	d10c      	bne.n	80066bc <_svfiprintf_r+0x124>
 80066a2:	787b      	ldrb	r3, [r7, #1]
 80066a4:	2b2a      	cmp	r3, #42	; 0x2a
 80066a6:	d133      	bne.n	8006710 <_svfiprintf_r+0x178>
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	9203      	str	r2, [sp, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bfb8      	it	lt
 80066b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066b8:	3702      	adds	r7, #2
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	4d2e      	ldr	r5, [pc, #184]	; (8006778 <_svfiprintf_r+0x1e0>)
 80066be:	7839      	ldrb	r1, [r7, #0]
 80066c0:	2203      	movs	r2, #3
 80066c2:	4628      	mov	r0, r5
 80066c4:	f7f9 fda4 	bl	8000210 <memchr>
 80066c8:	b138      	cbz	r0, 80066da <_svfiprintf_r+0x142>
 80066ca:	2340      	movs	r3, #64	; 0x40
 80066cc:	1b40      	subs	r0, r0, r5
 80066ce:	fa03 f000 	lsl.w	r0, r3, r0
 80066d2:	9b04      	ldr	r3, [sp, #16]
 80066d4:	4303      	orrs	r3, r0
 80066d6:	3701      	adds	r7, #1
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	7839      	ldrb	r1, [r7, #0]
 80066dc:	4827      	ldr	r0, [pc, #156]	; (800677c <_svfiprintf_r+0x1e4>)
 80066de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066e2:	2206      	movs	r2, #6
 80066e4:	1c7e      	adds	r6, r7, #1
 80066e6:	f7f9 fd93 	bl	8000210 <memchr>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d038      	beq.n	8006760 <_svfiprintf_r+0x1c8>
 80066ee:	4b24      	ldr	r3, [pc, #144]	; (8006780 <_svfiprintf_r+0x1e8>)
 80066f0:	bb13      	cbnz	r3, 8006738 <_svfiprintf_r+0x1a0>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	3307      	adds	r3, #7
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	3308      	adds	r3, #8
 80066fc:	9303      	str	r3, [sp, #12]
 80066fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006700:	444b      	add	r3, r9
 8006702:	9309      	str	r3, [sp, #36]	; 0x24
 8006704:	e76d      	b.n	80065e2 <_svfiprintf_r+0x4a>
 8006706:	fb05 3202 	mla	r2, r5, r2, r3
 800670a:	2001      	movs	r0, #1
 800670c:	460f      	mov	r7, r1
 800670e:	e7a6      	b.n	800665e <_svfiprintf_r+0xc6>
 8006710:	2300      	movs	r3, #0
 8006712:	3701      	adds	r7, #1
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	4619      	mov	r1, r3
 8006718:	250a      	movs	r5, #10
 800671a:	4638      	mov	r0, r7
 800671c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006720:	3a30      	subs	r2, #48	; 0x30
 8006722:	2a09      	cmp	r2, #9
 8006724:	d903      	bls.n	800672e <_svfiprintf_r+0x196>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0c8      	beq.n	80066bc <_svfiprintf_r+0x124>
 800672a:	9105      	str	r1, [sp, #20]
 800672c:	e7c6      	b.n	80066bc <_svfiprintf_r+0x124>
 800672e:	fb05 2101 	mla	r1, r5, r1, r2
 8006732:	2301      	movs	r3, #1
 8006734:	4607      	mov	r7, r0
 8006736:	e7f0      	b.n	800671a <_svfiprintf_r+0x182>
 8006738:	ab03      	add	r3, sp, #12
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4622      	mov	r2, r4
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <_svfiprintf_r+0x1ec>)
 8006740:	a904      	add	r1, sp, #16
 8006742:	4640      	mov	r0, r8
 8006744:	f3af 8000 	nop.w
 8006748:	f1b0 3fff 	cmp.w	r0, #4294967295
 800674c:	4681      	mov	r9, r0
 800674e:	d1d6      	bne.n	80066fe <_svfiprintf_r+0x166>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	065b      	lsls	r3, r3, #25
 8006754:	f53f af35 	bmi.w	80065c2 <_svfiprintf_r+0x2a>
 8006758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800675a:	b01d      	add	sp, #116	; 0x74
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006760:	ab03      	add	r3, sp, #12
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	4622      	mov	r2, r4
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <_svfiprintf_r+0x1ec>)
 8006768:	a904      	add	r1, sp, #16
 800676a:	4640      	mov	r0, r8
 800676c:	f000 f9c2 	bl	8006af4 <_printf_i>
 8006770:	e7ea      	b.n	8006748 <_svfiprintf_r+0x1b0>
 8006772:	bf00      	nop
 8006774:	08007690 	.word	0x08007690
 8006778:	08007696 	.word	0x08007696
 800677c:	0800769a 	.word	0x0800769a
 8006780:	00000000 	.word	0x00000000
 8006784:	080064e5 	.word	0x080064e5

08006788 <__sfputc_r>:
 8006788:	6893      	ldr	r3, [r2, #8]
 800678a:	3b01      	subs	r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	b410      	push	{r4}
 8006790:	6093      	str	r3, [r2, #8]
 8006792:	da08      	bge.n	80067a6 <__sfputc_r+0x1e>
 8006794:	6994      	ldr	r4, [r2, #24]
 8006796:	42a3      	cmp	r3, r4
 8006798:	db01      	blt.n	800679e <__sfputc_r+0x16>
 800679a:	290a      	cmp	r1, #10
 800679c:	d103      	bne.n	80067a6 <__sfputc_r+0x1e>
 800679e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a2:	f7ff bb59 	b.w	8005e58 <__swbuf_r>
 80067a6:	6813      	ldr	r3, [r2, #0]
 80067a8:	1c58      	adds	r0, r3, #1
 80067aa:	6010      	str	r0, [r2, #0]
 80067ac:	7019      	strb	r1, [r3, #0]
 80067ae:	4608      	mov	r0, r1
 80067b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <__sfputs_r>:
 80067b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b8:	4606      	mov	r6, r0
 80067ba:	460f      	mov	r7, r1
 80067bc:	4614      	mov	r4, r2
 80067be:	18d5      	adds	r5, r2, r3
 80067c0:	42ac      	cmp	r4, r5
 80067c2:	d101      	bne.n	80067c8 <__sfputs_r+0x12>
 80067c4:	2000      	movs	r0, #0
 80067c6:	e007      	b.n	80067d8 <__sfputs_r+0x22>
 80067c8:	463a      	mov	r2, r7
 80067ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7ff ffda 	bl	8006788 <__sfputc_r>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d1f3      	bne.n	80067c0 <__sfputs_r+0xa>
 80067d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067dc <_vfiprintf_r>:
 80067dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e0:	460c      	mov	r4, r1
 80067e2:	b09d      	sub	sp, #116	; 0x74
 80067e4:	4617      	mov	r7, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	4606      	mov	r6, r0
 80067ea:	b118      	cbz	r0, 80067f4 <_vfiprintf_r+0x18>
 80067ec:	6983      	ldr	r3, [r0, #24]
 80067ee:	b90b      	cbnz	r3, 80067f4 <_vfiprintf_r+0x18>
 80067f0:	f7ff fce2 	bl	80061b8 <__sinit>
 80067f4:	4b7c      	ldr	r3, [pc, #496]	; (80069e8 <_vfiprintf_r+0x20c>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d158      	bne.n	80068ac <_vfiprintf_r+0xd0>
 80067fa:	6874      	ldr	r4, [r6, #4]
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	0718      	lsls	r0, r3, #28
 8006800:	d55e      	bpl.n	80068c0 <_vfiprintf_r+0xe4>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d05b      	beq.n	80068c0 <_vfiprintf_r+0xe4>
 8006808:	2300      	movs	r3, #0
 800680a:	9309      	str	r3, [sp, #36]	; 0x24
 800680c:	2320      	movs	r3, #32
 800680e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006812:	2330      	movs	r3, #48	; 0x30
 8006814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006818:	9503      	str	r5, [sp, #12]
 800681a:	f04f 0b01 	mov.w	fp, #1
 800681e:	46b8      	mov	r8, r7
 8006820:	4645      	mov	r5, r8
 8006822:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006826:	b10b      	cbz	r3, 800682c <_vfiprintf_r+0x50>
 8006828:	2b25      	cmp	r3, #37	; 0x25
 800682a:	d154      	bne.n	80068d6 <_vfiprintf_r+0xfa>
 800682c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006830:	d00b      	beq.n	800684a <_vfiprintf_r+0x6e>
 8006832:	4653      	mov	r3, sl
 8006834:	463a      	mov	r2, r7
 8006836:	4621      	mov	r1, r4
 8006838:	4630      	mov	r0, r6
 800683a:	f7ff ffbc 	bl	80067b6 <__sfputs_r>
 800683e:	3001      	adds	r0, #1
 8006840:	f000 80c2 	beq.w	80069c8 <_vfiprintf_r+0x1ec>
 8006844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006846:	4453      	add	r3, sl
 8006848:	9309      	str	r3, [sp, #36]	; 0x24
 800684a:	f898 3000 	ldrb.w	r3, [r8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 80ba 	beq.w	80069c8 <_vfiprintf_r+0x1ec>
 8006854:	2300      	movs	r3, #0
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	9307      	str	r3, [sp, #28]
 8006862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006866:	931a      	str	r3, [sp, #104]	; 0x68
 8006868:	46a8      	mov	r8, r5
 800686a:	2205      	movs	r2, #5
 800686c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006870:	485e      	ldr	r0, [pc, #376]	; (80069ec <_vfiprintf_r+0x210>)
 8006872:	f7f9 fccd 	bl	8000210 <memchr>
 8006876:	9b04      	ldr	r3, [sp, #16]
 8006878:	bb78      	cbnz	r0, 80068da <_vfiprintf_r+0xfe>
 800687a:	06d9      	lsls	r1, r3, #27
 800687c:	bf44      	itt	mi
 800687e:	2220      	movmi	r2, #32
 8006880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006884:	071a      	lsls	r2, r3, #28
 8006886:	bf44      	itt	mi
 8006888:	222b      	movmi	r2, #43	; 0x2b
 800688a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800688e:	782a      	ldrb	r2, [r5, #0]
 8006890:	2a2a      	cmp	r2, #42	; 0x2a
 8006892:	d02a      	beq.n	80068ea <_vfiprintf_r+0x10e>
 8006894:	9a07      	ldr	r2, [sp, #28]
 8006896:	46a8      	mov	r8, r5
 8006898:	2000      	movs	r0, #0
 800689a:	250a      	movs	r5, #10
 800689c:	4641      	mov	r1, r8
 800689e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a2:	3b30      	subs	r3, #48	; 0x30
 80068a4:	2b09      	cmp	r3, #9
 80068a6:	d969      	bls.n	800697c <_vfiprintf_r+0x1a0>
 80068a8:	b360      	cbz	r0, 8006904 <_vfiprintf_r+0x128>
 80068aa:	e024      	b.n	80068f6 <_vfiprintf_r+0x11a>
 80068ac:	4b50      	ldr	r3, [pc, #320]	; (80069f0 <_vfiprintf_r+0x214>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <_vfiprintf_r+0xda>
 80068b2:	68b4      	ldr	r4, [r6, #8]
 80068b4:	e7a2      	b.n	80067fc <_vfiprintf_r+0x20>
 80068b6:	4b4f      	ldr	r3, [pc, #316]	; (80069f4 <_vfiprintf_r+0x218>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68f4      	ldreq	r4, [r6, #12]
 80068be:	e79d      	b.n	80067fc <_vfiprintf_r+0x20>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7ff fb1a 	bl	8005efc <__swsetup_r>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d09d      	beq.n	8006808 <_vfiprintf_r+0x2c>
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	b01d      	add	sp, #116	; 0x74
 80068d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d6:	46a8      	mov	r8, r5
 80068d8:	e7a2      	b.n	8006820 <_vfiprintf_r+0x44>
 80068da:	4a44      	ldr	r2, [pc, #272]	; (80069ec <_vfiprintf_r+0x210>)
 80068dc:	1a80      	subs	r0, r0, r2
 80068de:	fa0b f000 	lsl.w	r0, fp, r0
 80068e2:	4318      	orrs	r0, r3
 80068e4:	9004      	str	r0, [sp, #16]
 80068e6:	4645      	mov	r5, r8
 80068e8:	e7be      	b.n	8006868 <_vfiprintf_r+0x8c>
 80068ea:	9a03      	ldr	r2, [sp, #12]
 80068ec:	1d11      	adds	r1, r2, #4
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	9103      	str	r1, [sp, #12]
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	db01      	blt.n	80068fa <_vfiprintf_r+0x11e>
 80068f6:	9207      	str	r2, [sp, #28]
 80068f8:	e004      	b.n	8006904 <_vfiprintf_r+0x128>
 80068fa:	4252      	negs	r2, r2
 80068fc:	f043 0302 	orr.w	r3, r3, #2
 8006900:	9207      	str	r2, [sp, #28]
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	f898 3000 	ldrb.w	r3, [r8]
 8006908:	2b2e      	cmp	r3, #46	; 0x2e
 800690a:	d10e      	bne.n	800692a <_vfiprintf_r+0x14e>
 800690c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006910:	2b2a      	cmp	r3, #42	; 0x2a
 8006912:	d138      	bne.n	8006986 <_vfiprintf_r+0x1aa>
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	1d1a      	adds	r2, r3, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	9203      	str	r2, [sp, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	bfb8      	it	lt
 8006920:	f04f 33ff 	movlt.w	r3, #4294967295
 8006924:	f108 0802 	add.w	r8, r8, #2
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	4d33      	ldr	r5, [pc, #204]	; (80069f8 <_vfiprintf_r+0x21c>)
 800692c:	f898 1000 	ldrb.w	r1, [r8]
 8006930:	2203      	movs	r2, #3
 8006932:	4628      	mov	r0, r5
 8006934:	f7f9 fc6c 	bl	8000210 <memchr>
 8006938:	b140      	cbz	r0, 800694c <_vfiprintf_r+0x170>
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	1b40      	subs	r0, r0, r5
 800693e:	fa03 f000 	lsl.w	r0, r3, r0
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	4303      	orrs	r3, r0
 8006946:	f108 0801 	add.w	r8, r8, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	f898 1000 	ldrb.w	r1, [r8]
 8006950:	482a      	ldr	r0, [pc, #168]	; (80069fc <_vfiprintf_r+0x220>)
 8006952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006956:	2206      	movs	r2, #6
 8006958:	f108 0701 	add.w	r7, r8, #1
 800695c:	f7f9 fc58 	bl	8000210 <memchr>
 8006960:	2800      	cmp	r0, #0
 8006962:	d037      	beq.n	80069d4 <_vfiprintf_r+0x1f8>
 8006964:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <_vfiprintf_r+0x224>)
 8006966:	bb1b      	cbnz	r3, 80069b0 <_vfiprintf_r+0x1d4>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	3307      	adds	r3, #7
 800696c:	f023 0307 	bic.w	r3, r3, #7
 8006970:	3308      	adds	r3, #8
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006976:	444b      	add	r3, r9
 8006978:	9309      	str	r3, [sp, #36]	; 0x24
 800697a:	e750      	b.n	800681e <_vfiprintf_r+0x42>
 800697c:	fb05 3202 	mla	r2, r5, r2, r3
 8006980:	2001      	movs	r0, #1
 8006982:	4688      	mov	r8, r1
 8006984:	e78a      	b.n	800689c <_vfiprintf_r+0xc0>
 8006986:	2300      	movs	r3, #0
 8006988:	f108 0801 	add.w	r8, r8, #1
 800698c:	9305      	str	r3, [sp, #20]
 800698e:	4619      	mov	r1, r3
 8006990:	250a      	movs	r5, #10
 8006992:	4640      	mov	r0, r8
 8006994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006998:	3a30      	subs	r2, #48	; 0x30
 800699a:	2a09      	cmp	r2, #9
 800699c:	d903      	bls.n	80069a6 <_vfiprintf_r+0x1ca>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0c3      	beq.n	800692a <_vfiprintf_r+0x14e>
 80069a2:	9105      	str	r1, [sp, #20]
 80069a4:	e7c1      	b.n	800692a <_vfiprintf_r+0x14e>
 80069a6:	fb05 2101 	mla	r1, r5, r1, r2
 80069aa:	2301      	movs	r3, #1
 80069ac:	4680      	mov	r8, r0
 80069ae:	e7f0      	b.n	8006992 <_vfiprintf_r+0x1b6>
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	4622      	mov	r2, r4
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <_vfiprintf_r+0x228>)
 80069b8:	a904      	add	r1, sp, #16
 80069ba:	4630      	mov	r0, r6
 80069bc:	f3af 8000 	nop.w
 80069c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80069c4:	4681      	mov	r9, r0
 80069c6:	d1d5      	bne.n	8006974 <_vfiprintf_r+0x198>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	065b      	lsls	r3, r3, #25
 80069cc:	f53f af7e 	bmi.w	80068cc <_vfiprintf_r+0xf0>
 80069d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069d2:	e77d      	b.n	80068d0 <_vfiprintf_r+0xf4>
 80069d4:	ab03      	add	r3, sp, #12
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	4622      	mov	r2, r4
 80069da:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <_vfiprintf_r+0x228>)
 80069dc:	a904      	add	r1, sp, #16
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 f888 	bl	8006af4 <_printf_i>
 80069e4:	e7ec      	b.n	80069c0 <_vfiprintf_r+0x1e4>
 80069e6:	bf00      	nop
 80069e8:	08007650 	.word	0x08007650
 80069ec:	08007690 	.word	0x08007690
 80069f0:	08007670 	.word	0x08007670
 80069f4:	08007630 	.word	0x08007630
 80069f8:	08007696 	.word	0x08007696
 80069fc:	0800769a 	.word	0x0800769a
 8006a00:	00000000 	.word	0x00000000
 8006a04:	080067b7 	.word	0x080067b7

08006a08 <_printf_common>:
 8006a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	4691      	mov	r9, r2
 8006a0e:	461f      	mov	r7, r3
 8006a10:	688a      	ldr	r2, [r1, #8]
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	bfb8      	it	lt
 8006a1c:	4613      	movlt	r3, r2
 8006a1e:	f8c9 3000 	str.w	r3, [r9]
 8006a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a26:	4606      	mov	r6, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	b112      	cbz	r2, 8006a32 <_printf_common+0x2a>
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	f8c9 3000 	str.w	r3, [r9]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	0699      	lsls	r1, r3, #26
 8006a36:	bf42      	ittt	mi
 8006a38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a3c:	3302      	addmi	r3, #2
 8006a3e:	f8c9 3000 	strmi.w	r3, [r9]
 8006a42:	6825      	ldr	r5, [r4, #0]
 8006a44:	f015 0506 	ands.w	r5, r5, #6
 8006a48:	d107      	bne.n	8006a5a <_printf_common+0x52>
 8006a4a:	f104 0a19 	add.w	sl, r4, #25
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	f8d9 2000 	ldr.w	r2, [r9]
 8006a54:	1a9b      	subs	r3, r3, r2
 8006a56:	42ab      	cmp	r3, r5
 8006a58:	dc28      	bgt.n	8006aac <_printf_common+0xa4>
 8006a5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	3300      	adds	r3, #0
 8006a62:	bf18      	it	ne
 8006a64:	2301      	movne	r3, #1
 8006a66:	0692      	lsls	r2, r2, #26
 8006a68:	d42d      	bmi.n	8006ac6 <_printf_common+0xbe>
 8006a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	47c0      	blx	r8
 8006a74:	3001      	adds	r0, #1
 8006a76:	d020      	beq.n	8006aba <_printf_common+0xb2>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	68e5      	ldr	r5, [r4, #12]
 8006a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8006a80:	f003 0306 	and.w	r3, r3, #6
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	bf08      	it	eq
 8006a88:	1aad      	subeq	r5, r5, r2
 8006a8a:	68a3      	ldr	r3, [r4, #8]
 8006a8c:	6922      	ldr	r2, [r4, #16]
 8006a8e:	bf0c      	ite	eq
 8006a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a94:	2500      	movne	r5, #0
 8006a96:	4293      	cmp	r3, r2
 8006a98:	bfc4      	itt	gt
 8006a9a:	1a9b      	subgt	r3, r3, r2
 8006a9c:	18ed      	addgt	r5, r5, r3
 8006a9e:	f04f 0900 	mov.w	r9, #0
 8006aa2:	341a      	adds	r4, #26
 8006aa4:	454d      	cmp	r5, r9
 8006aa6:	d11a      	bne.n	8006ade <_printf_common+0xd6>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e008      	b.n	8006abe <_printf_common+0xb6>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4652      	mov	r2, sl
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d103      	bne.n	8006ac2 <_printf_common+0xba>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	e7c3      	b.n	8006a4e <_printf_common+0x46>
 8006ac6:	18e1      	adds	r1, r4, r3
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	2030      	movs	r0, #48	; 0x30
 8006acc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ad0:	4422      	add	r2, r4
 8006ad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ada:	3302      	adds	r3, #2
 8006adc:	e7c5      	b.n	8006a6a <_printf_common+0x62>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	47c0      	blx	r8
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d0e6      	beq.n	8006aba <_printf_common+0xb2>
 8006aec:	f109 0901 	add.w	r9, r9, #1
 8006af0:	e7d8      	b.n	8006aa4 <_printf_common+0x9c>
	...

08006af4 <_printf_i>:
 8006af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006afc:	460c      	mov	r4, r1
 8006afe:	7e09      	ldrb	r1, [r1, #24]
 8006b00:	b085      	sub	sp, #20
 8006b02:	296e      	cmp	r1, #110	; 0x6e
 8006b04:	4617      	mov	r7, r2
 8006b06:	4606      	mov	r6, r0
 8006b08:	4698      	mov	r8, r3
 8006b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b0c:	f000 80b3 	beq.w	8006c76 <_printf_i+0x182>
 8006b10:	d822      	bhi.n	8006b58 <_printf_i+0x64>
 8006b12:	2963      	cmp	r1, #99	; 0x63
 8006b14:	d036      	beq.n	8006b84 <_printf_i+0x90>
 8006b16:	d80a      	bhi.n	8006b2e <_printf_i+0x3a>
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	f000 80b9 	beq.w	8006c90 <_printf_i+0x19c>
 8006b1e:	2958      	cmp	r1, #88	; 0x58
 8006b20:	f000 8083 	beq.w	8006c2a <_printf_i+0x136>
 8006b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b2c:	e032      	b.n	8006b94 <_printf_i+0xa0>
 8006b2e:	2964      	cmp	r1, #100	; 0x64
 8006b30:	d001      	beq.n	8006b36 <_printf_i+0x42>
 8006b32:	2969      	cmp	r1, #105	; 0x69
 8006b34:	d1f6      	bne.n	8006b24 <_printf_i+0x30>
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	0605      	lsls	r5, r0, #24
 8006b3c:	f103 0104 	add.w	r1, r3, #4
 8006b40:	d52a      	bpl.n	8006b98 <_printf_i+0xa4>
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da03      	bge.n	8006b52 <_printf_i+0x5e>
 8006b4a:	222d      	movs	r2, #45	; 0x2d
 8006b4c:	425b      	negs	r3, r3
 8006b4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b52:	486f      	ldr	r0, [pc, #444]	; (8006d10 <_printf_i+0x21c>)
 8006b54:	220a      	movs	r2, #10
 8006b56:	e039      	b.n	8006bcc <_printf_i+0xd8>
 8006b58:	2973      	cmp	r1, #115	; 0x73
 8006b5a:	f000 809d 	beq.w	8006c98 <_printf_i+0x1a4>
 8006b5e:	d808      	bhi.n	8006b72 <_printf_i+0x7e>
 8006b60:	296f      	cmp	r1, #111	; 0x6f
 8006b62:	d020      	beq.n	8006ba6 <_printf_i+0xb2>
 8006b64:	2970      	cmp	r1, #112	; 0x70
 8006b66:	d1dd      	bne.n	8006b24 <_printf_i+0x30>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	f043 0320 	orr.w	r3, r3, #32
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	e003      	b.n	8006b7a <_printf_i+0x86>
 8006b72:	2975      	cmp	r1, #117	; 0x75
 8006b74:	d017      	beq.n	8006ba6 <_printf_i+0xb2>
 8006b76:	2978      	cmp	r1, #120	; 0x78
 8006b78:	d1d4      	bne.n	8006b24 <_printf_i+0x30>
 8006b7a:	2378      	movs	r3, #120	; 0x78
 8006b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b80:	4864      	ldr	r0, [pc, #400]	; (8006d14 <_printf_i+0x220>)
 8006b82:	e055      	b.n	8006c30 <_printf_i+0x13c>
 8006b84:	6813      	ldr	r3, [r2, #0]
 8006b86:	1d19      	adds	r1, r3, #4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6011      	str	r1, [r2, #0]
 8006b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b94:	2301      	movs	r3, #1
 8006b96:	e08c      	b.n	8006cb2 <_printf_i+0x1be>
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6011      	str	r1, [r2, #0]
 8006b9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ba0:	bf18      	it	ne
 8006ba2:	b21b      	sxthne	r3, r3
 8006ba4:	e7cf      	b.n	8006b46 <_printf_i+0x52>
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	6825      	ldr	r5, [r4, #0]
 8006baa:	1d18      	adds	r0, r3, #4
 8006bac:	6010      	str	r0, [r2, #0]
 8006bae:	0628      	lsls	r0, r5, #24
 8006bb0:	d501      	bpl.n	8006bb6 <_printf_i+0xc2>
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	e002      	b.n	8006bbc <_printf_i+0xc8>
 8006bb6:	0668      	lsls	r0, r5, #25
 8006bb8:	d5fb      	bpl.n	8006bb2 <_printf_i+0xbe>
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	4854      	ldr	r0, [pc, #336]	; (8006d10 <_printf_i+0x21c>)
 8006bbe:	296f      	cmp	r1, #111	; 0x6f
 8006bc0:	bf14      	ite	ne
 8006bc2:	220a      	movne	r2, #10
 8006bc4:	2208      	moveq	r2, #8
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bcc:	6865      	ldr	r5, [r4, #4]
 8006bce:	60a5      	str	r5, [r4, #8]
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	f2c0 8095 	blt.w	8006d00 <_printf_i+0x20c>
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	f021 0104 	bic.w	r1, r1, #4
 8006bdc:	6021      	str	r1, [r4, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d13d      	bne.n	8006c5e <_printf_i+0x16a>
 8006be2:	2d00      	cmp	r5, #0
 8006be4:	f040 808e 	bne.w	8006d04 <_printf_i+0x210>
 8006be8:	4665      	mov	r5, ip
 8006bea:	2a08      	cmp	r2, #8
 8006bec:	d10b      	bne.n	8006c06 <_printf_i+0x112>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	07db      	lsls	r3, r3, #31
 8006bf2:	d508      	bpl.n	8006c06 <_printf_i+0x112>
 8006bf4:	6923      	ldr	r3, [r4, #16]
 8006bf6:	6862      	ldr	r2, [r4, #4]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	bfde      	ittt	le
 8006bfc:	2330      	movle	r3, #48	; 0x30
 8006bfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c06:	ebac 0305 	sub.w	r3, ip, r5
 8006c0a:	6123      	str	r3, [r4, #16]
 8006c0c:	f8cd 8000 	str.w	r8, [sp]
 8006c10:	463b      	mov	r3, r7
 8006c12:	aa03      	add	r2, sp, #12
 8006c14:	4621      	mov	r1, r4
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7ff fef6 	bl	8006a08 <_printf_common>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d14d      	bne.n	8006cbc <_printf_i+0x1c8>
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	b005      	add	sp, #20
 8006c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c2a:	4839      	ldr	r0, [pc, #228]	; (8006d10 <_printf_i+0x21c>)
 8006c2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	6821      	ldr	r1, [r4, #0]
 8006c34:	1d1d      	adds	r5, r3, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6015      	str	r5, [r2, #0]
 8006c3a:	060a      	lsls	r2, r1, #24
 8006c3c:	d50b      	bpl.n	8006c56 <_printf_i+0x162>
 8006c3e:	07ca      	lsls	r2, r1, #31
 8006c40:	bf44      	itt	mi
 8006c42:	f041 0120 	orrmi.w	r1, r1, #32
 8006c46:	6021      	strmi	r1, [r4, #0]
 8006c48:	b91b      	cbnz	r3, 8006c52 <_printf_i+0x15e>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	f022 0220 	bic.w	r2, r2, #32
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	2210      	movs	r2, #16
 8006c54:	e7b7      	b.n	8006bc6 <_printf_i+0xd2>
 8006c56:	064d      	lsls	r5, r1, #25
 8006c58:	bf48      	it	mi
 8006c5a:	b29b      	uxthmi	r3, r3
 8006c5c:	e7ef      	b.n	8006c3e <_printf_i+0x14a>
 8006c5e:	4665      	mov	r5, ip
 8006c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c64:	fb02 3311 	mls	r3, r2, r1, r3
 8006c68:	5cc3      	ldrb	r3, [r0, r3]
 8006c6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c6e:	460b      	mov	r3, r1
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d1f5      	bne.n	8006c60 <_printf_i+0x16c>
 8006c74:	e7b9      	b.n	8006bea <_printf_i+0xf6>
 8006c76:	6813      	ldr	r3, [r2, #0]
 8006c78:	6825      	ldr	r5, [r4, #0]
 8006c7a:	6961      	ldr	r1, [r4, #20]
 8006c7c:	1d18      	adds	r0, r3, #4
 8006c7e:	6010      	str	r0, [r2, #0]
 8006c80:	0628      	lsls	r0, r5, #24
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	d501      	bpl.n	8006c8a <_printf_i+0x196>
 8006c86:	6019      	str	r1, [r3, #0]
 8006c88:	e002      	b.n	8006c90 <_printf_i+0x19c>
 8006c8a:	066a      	lsls	r2, r5, #25
 8006c8c:	d5fb      	bpl.n	8006c86 <_printf_i+0x192>
 8006c8e:	8019      	strh	r1, [r3, #0]
 8006c90:	2300      	movs	r3, #0
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	4665      	mov	r5, ip
 8006c96:	e7b9      	b.n	8006c0c <_printf_i+0x118>
 8006c98:	6813      	ldr	r3, [r2, #0]
 8006c9a:	1d19      	adds	r1, r3, #4
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	681d      	ldr	r5, [r3, #0]
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f7f9 fab3 	bl	8000210 <memchr>
 8006caa:	b108      	cbz	r0, 8006cb0 <_printf_i+0x1bc>
 8006cac:	1b40      	subs	r0, r0, r5
 8006cae:	6060      	str	r0, [r4, #4]
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cba:	e7a7      	b.n	8006c0c <_printf_i+0x118>
 8006cbc:	6923      	ldr	r3, [r4, #16]
 8006cbe:	462a      	mov	r2, r5
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	47c0      	blx	r8
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d0aa      	beq.n	8006c20 <_printf_i+0x12c>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	079b      	lsls	r3, r3, #30
 8006cce:	d413      	bmi.n	8006cf8 <_printf_i+0x204>
 8006cd0:	68e0      	ldr	r0, [r4, #12]
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	4298      	cmp	r0, r3
 8006cd6:	bfb8      	it	lt
 8006cd8:	4618      	movlt	r0, r3
 8006cda:	e7a3      	b.n	8006c24 <_printf_i+0x130>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	464a      	mov	r2, r9
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	47c0      	blx	r8
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d09a      	beq.n	8006c20 <_printf_i+0x12c>
 8006cea:	3501      	adds	r5, #1
 8006cec:	68e3      	ldr	r3, [r4, #12]
 8006cee:	9a03      	ldr	r2, [sp, #12]
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	42ab      	cmp	r3, r5
 8006cf4:	dcf2      	bgt.n	8006cdc <_printf_i+0x1e8>
 8006cf6:	e7eb      	b.n	8006cd0 <_printf_i+0x1dc>
 8006cf8:	2500      	movs	r5, #0
 8006cfa:	f104 0919 	add.w	r9, r4, #25
 8006cfe:	e7f5      	b.n	8006cec <_printf_i+0x1f8>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1ac      	bne.n	8006c5e <_printf_i+0x16a>
 8006d04:	7803      	ldrb	r3, [r0, #0]
 8006d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d0e:	e76c      	b.n	8006bea <_printf_i+0xf6>
 8006d10:	080076a1 	.word	0x080076a1
 8006d14:	080076b2 	.word	0x080076b2

08006d18 <_sbrk_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4c06      	ldr	r4, [pc, #24]	; (8006d34 <_sbrk_r+0x1c>)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4605      	mov	r5, r0
 8006d20:	4608      	mov	r0, r1
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	f7fb fbf8 	bl	8002518 <_sbrk>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_sbrk_r+0x1a>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_sbrk_r+0x1a>
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	2000298c 	.word	0x2000298c

08006d38 <__sread>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d40:	f000 f8e0 	bl	8006f04 <_read_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	bfab      	itete	ge
 8006d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d4c:	181b      	addge	r3, r3, r0
 8006d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d52:	bfac      	ite	ge
 8006d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d56:	81a3      	strhlt	r3, [r4, #12]
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <__swrite>:
 8006d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5e:	461f      	mov	r7, r3
 8006d60:	898b      	ldrh	r3, [r1, #12]
 8006d62:	05db      	lsls	r3, r3, #23
 8006d64:	4605      	mov	r5, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	4616      	mov	r6, r2
 8006d6a:	d505      	bpl.n	8006d78 <__swrite+0x1e>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d74:	f000 f868 	bl	8006e48 <_lseek_r>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	4632      	mov	r2, r6
 8006d86:	463b      	mov	r3, r7
 8006d88:	4628      	mov	r0, r5
 8006d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8e:	f000 b817 	b.w	8006dc0 <_write_r>

08006d92 <__sseek>:
 8006d92:	b510      	push	{r4, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9a:	f000 f855 	bl	8006e48 <_lseek_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	bf15      	itete	ne
 8006da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dae:	81a3      	strheq	r3, [r4, #12]
 8006db0:	bf18      	it	ne
 8006db2:	81a3      	strhne	r3, [r4, #12]
 8006db4:	bd10      	pop	{r4, pc}

08006db6 <__sclose>:
 8006db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dba:	f000 b813 	b.w	8006de4 <_close_r>
	...

08006dc0 <_write_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4c07      	ldr	r4, [pc, #28]	; (8006de0 <_write_r+0x20>)
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fb fb51 	bl	8002476 <_write>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_write_r+0x1e>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_write_r+0x1e>
 8006ddc:	602b      	str	r3, [r5, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	2000298c 	.word	0x2000298c

08006de4 <_close_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4c06      	ldr	r4, [pc, #24]	; (8006e00 <_close_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4605      	mov	r5, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	f7fb fb5d 	bl	80024ae <_close>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_close_r+0x1a>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_close_r+0x1a>
 8006dfc:	602b      	str	r3, [r5, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	2000298c 	.word	0x2000298c

08006e04 <_fstat_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4c07      	ldr	r4, [pc, #28]	; (8006e24 <_fstat_r+0x20>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	f7fb fb58 	bl	80024c6 <_fstat>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d102      	bne.n	8006e20 <_fstat_r+0x1c>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	b103      	cbz	r3, 8006e20 <_fstat_r+0x1c>
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop
 8006e24:	2000298c 	.word	0x2000298c

08006e28 <_isatty_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4c06      	ldr	r4, [pc, #24]	; (8006e44 <_isatty_r+0x1c>)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4605      	mov	r5, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	f7fb fb57 	bl	80024e6 <_isatty>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_isatty_r+0x1a>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_isatty_r+0x1a>
 8006e40:	602b      	str	r3, [r5, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	2000298c 	.word	0x2000298c

08006e48 <_lseek_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4c07      	ldr	r4, [pc, #28]	; (8006e68 <_lseek_r+0x20>)
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fb fb50 	bl	80024fc <_lseek>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_lseek_r+0x1e>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_lseek_r+0x1e>
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	2000298c 	.word	0x2000298c

08006e6c <memcpy>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	1e43      	subs	r3, r0, #1
 8006e70:	440a      	add	r2, r1
 8006e72:	4291      	cmp	r1, r2
 8006e74:	d100      	bne.n	8006e78 <memcpy+0xc>
 8006e76:	bd10      	pop	{r4, pc}
 8006e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e80:	e7f7      	b.n	8006e72 <memcpy+0x6>

08006e82 <memmove>:
 8006e82:	4288      	cmp	r0, r1
 8006e84:	b510      	push	{r4, lr}
 8006e86:	eb01 0302 	add.w	r3, r1, r2
 8006e8a:	d807      	bhi.n	8006e9c <memmove+0x1a>
 8006e8c:	1e42      	subs	r2, r0, #1
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	d00a      	beq.n	8006ea8 <memmove+0x26>
 8006e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006e9a:	e7f8      	b.n	8006e8e <memmove+0xc>
 8006e9c:	4283      	cmp	r3, r0
 8006e9e:	d9f5      	bls.n	8006e8c <memmove+0xa>
 8006ea0:	1881      	adds	r1, r0, r2
 8006ea2:	1ad2      	subs	r2, r2, r3
 8006ea4:	42d3      	cmn	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <memmove+0x28>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006eb2:	e7f7      	b.n	8006ea4 <memmove+0x22>

08006eb4 <__malloc_lock>:
 8006eb4:	4770      	bx	lr

08006eb6 <__malloc_unlock>:
 8006eb6:	4770      	bx	lr

08006eb8 <_realloc_r>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	4607      	mov	r7, r0
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	b921      	cbnz	r1, 8006ecc <_realloc_r+0x14>
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ec8:	f7ff bab2 	b.w	8006430 <_malloc_r>
 8006ecc:	b922      	cbnz	r2, 8006ed8 <_realloc_r+0x20>
 8006ece:	f7ff fa61 	bl	8006394 <_free_r>
 8006ed2:	4625      	mov	r5, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed8:	f000 f826 	bl	8006f28 <_malloc_usable_size_r>
 8006edc:	42a0      	cmp	r0, r4
 8006ede:	d20f      	bcs.n	8006f00 <_realloc_r+0x48>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f7ff faa4 	bl	8006430 <_malloc_r>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d0f2      	beq.n	8006ed4 <_realloc_r+0x1c>
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	f7ff ffbb 	bl	8006e6c <memcpy>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff fa4b 	bl	8006394 <_free_r>
 8006efe:	e7e9      	b.n	8006ed4 <_realloc_r+0x1c>
 8006f00:	4635      	mov	r5, r6
 8006f02:	e7e7      	b.n	8006ed4 <_realloc_r+0x1c>

08006f04 <_read_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4c07      	ldr	r4, [pc, #28]	; (8006f24 <_read_r+0x20>)
 8006f08:	4605      	mov	r5, r0
 8006f0a:	4608      	mov	r0, r1
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	6022      	str	r2, [r4, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7fb fa92 	bl	800243c <_read>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_read_r+0x1e>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_read_r+0x1e>
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000298c 	.word	0x2000298c

08006f28 <_malloc_usable_size_r>:
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f18      	subs	r0, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbc      	itt	lt
 8006f32:	580b      	ldrlt	r3, [r1, r0]
 8006f34:	18c0      	addlt	r0, r0, r3
 8006f36:	4770      	bx	lr

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
