
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005340  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c18  08005c18  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c20  08005c20  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08005c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027a8  2000019c  08005dc4  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002944  08005dc4  00022944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b3  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002350  00000000  00000000  0002e27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  000305d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e1a  00000000  00000000  00031b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a199  00000000  00000000  00049982  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ce2e  00000000  00000000  00053b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c4  00000000  00000000  000e09c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000019c 	.word	0x2000019c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054c8 	.word	0x080054c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	080054c8 	.word	0x080054c8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <str_Capitalized>:
	{NULL, NULL , NULL}
};

char Buff[2048];

void str_Capitalized (char *dest, char *str) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	int pos = 0, len = strlen (str);
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	6838      	ldr	r0, [r7, #0]
 80005c0:	f7ff fe18 	bl	80001f4 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
	for (; pos<len; ++ pos) {
 80005c8:	e021      	b.n	800060e <str_Capitalized+0x5e>
		if (str[pos]<='z' && str[pos]>='a') dest[pos]=str[pos]-32;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b7a      	cmp	r3, #122	; 0x7a
 80005d4:	d810      	bhi.n	80005f8 <str_Capitalized+0x48>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b60      	cmp	r3, #96	; 0x60
 80005e0:	d90a      	bls.n	80005f8 <str_Capitalized+0x48>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	3a20      	subs	r2, #32
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e007      	b.n	8000608 <str_Capitalized+0x58>
		else dest[pos] = str[pos];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	441a      	add	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	440b      	add	r3, r1
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	701a      	strb	r2, [r3, #0]
	for (; pos<len; ++ pos) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbd9      	blt.n	80005ca <str_Capitalized+0x1a>
	} dest[pos] = '\0';
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <AT_CMD_Dispose>:

u8 AT_CMD_Dispose(struct tok *tok) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	struct at_cmd_hanld_t *atcmd, *match = NULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	char name[32];
	atcmd = at_cmd_hanld;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <AT_CMD_Dispose+0x70>)
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	str_Capitalized(name, tok->name);
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <str_Capitalized>
	while(atcmd->atcmd) {
 8000646:	e010      	b.n	800066a <AT_CMD_Dispose+0x42>
		if(strcmp(atcmd->atcmd, name) == 0) {
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <AT_CMD_Dispose+0x3c>
			match = atcmd; break;
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
 8000662:	e006      	b.n	8000672 <AT_CMD_Dispose+0x4a>
		} atcmd ++;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	330c      	adds	r3, #12
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(atcmd->atcmd) {
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ea      	bne.n	8000648 <AT_CMD_Dispose+0x20>
	} if(match) return match->send_hanld(match->atcmd, tok);
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <AT_CMD_Dispose+0x64>
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4610      	mov	r0, r2
 8000684:	4798      	blx	r3
 8000686:	4603      	mov	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	e000      	b.n	800068e <AT_CMD_Dispose+0x66>
	else {return 1;}
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	3730      	adds	r7, #48	; 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000

0800069c <CMD_Send>:

void CMD_Send(char *buff, char *atcmd, struct tok *tok) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b0c6      	sub	sp, #280	; 0x118
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	6018      	str	r0, [r3, #0]
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	6019      	str	r1, [r3, #0]
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	601a      	str	r2, [r3, #0]
	int i = 0; char temp[256];
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sprintf (buff, "%s", atcmd);
 80006b8:	f107 0208 	add.w	r2, r7, #8
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	6811      	ldr	r1, [r2, #0]
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f003 fe6d 	bl	80043a2 <strcpy>
	if (tok->num != 0) {
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d071      	beq.n	80007b8 <CMD_Send+0x11c>
		for (i=0; i<tok->num; i++) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006da:	e064      	b.n	80007a6 <CMD_Send+0x10a>
			if(i == 0 && tok->sendstr[i][0] == '?') {
 80006dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d120      	bne.n	8000726 <CMD_Send+0x8a>
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	4413      	add	r3, r2
 80006f0:	3321      	adds	r3, #33	; 0x21
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b3f      	cmp	r3, #63	; 0x3f
 80006f6:	d116      	bne.n	8000726 <CMD_Send+0x8a>
				sprintf(temp,"=%s",tok->sendstr[i]);
 80006f8:	1d3a      	adds	r2, r7, #4
 80006fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	3320      	adds	r3, #32
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	4413      	add	r3, r2
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4935      	ldr	r1, [pc, #212]	; (80007e4 <CMD_Send+0x148>)
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fe18 	bl	8004344 <siprintf>
				strcat(buff,temp);
 8000714:	f107 0214 	add.w	r2, r7, #20
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4611      	mov	r1, r2
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	f003 fe30 	bl	8004384 <strcat>
 8000724:	e03a      	b.n	800079c <CMD_Send+0x100>
			} else if(i == 0 && tok->sendstr[i][0] != '?') {
 8000726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800072a:	2b00      	cmp	r3, #0
 800072c:	d120      	bne.n	8000770 <CMD_Send+0xd4>
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	4413      	add	r3, r2
 800073a:	3321      	adds	r3, #33	; 0x21
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	d016      	beq.n	8000770 <CMD_Send+0xd4>
				sprintf(temp,"=%s",tok->sendstr[i]);
 8000742:	1d3a      	adds	r2, r7, #4
 8000744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	3320      	adds	r3, #32
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	4413      	add	r3, r2
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4923      	ldr	r1, [pc, #140]	; (80007e4 <CMD_Send+0x148>)
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fdf3 	bl	8004344 <siprintf>
				strcat(buff,temp);
 800075e:	f107 0214 	add.w	r2, r7, #20
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4611      	mov	r1, r2
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f003 fe0b 	bl	8004384 <strcat>
 800076e:	e015      	b.n	800079c <CMD_Send+0x100>
			} else {
				sprintf(temp,",%s",tok->sendstr[i]);
 8000770:	1d3a      	adds	r2, r7, #4
 8000772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	3320      	adds	r3, #32
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	4413      	add	r3, r2
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4918      	ldr	r1, [pc, #96]	; (80007e8 <CMD_Send+0x14c>)
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fddc 	bl	8004344 <siprintf>
				strcat(buff,temp);
 800078c:	f107 0214 	add.w	r2, r7, #20
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4611      	mov	r1, r2
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	f003 fdf4 	bl	8004384 <strcat>
		for (i=0; i<tok->num; i++) {
 800079c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007a0:	3301      	adds	r3, #1
 80007a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007ae:	461a      	mov	r2, r3
 80007b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b4:	4293      	cmp	r3, r2
 80007b6:	db91      	blt.n	80006dc <CMD_Send+0x40>
			}
		}
	} strcat(buff,"\r\n");
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	f7ff fd19 	bl	80001f4 <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <CMD_Send+0x150>)
 80007d0:	8811      	ldrh	r1, [r2, #0]
 80007d2:	7892      	ldrb	r2, [r2, #2]
 80007d4:	8019      	strh	r1, [r3, #0]
 80007d6:	709a      	strb	r2, [r3, #2]
}
 80007d8:	bf00      	nop
 80007da:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	080055a4 	.word	0x080055a4
 80007e8:	080055a8 	.word	0x080055a8
 80007ec:	080055ac 	.word	0x080055ac

080007f0 <AT_Send>:

u8 AT_Send(char *atcmd, struct tok *tok) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0c4      	sub	sp, #272	; 0x110
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	6018      	str	r0, [r3, #0]
 80007fa:	463b      	mov	r3, r7
 80007fc:	6019      	str	r1, [r3, #0]
	int i; char buff[256];
	for(i=0; i<Retime; ++ i) {
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000804:	e027      	b.n	8000856 <AT_Send+0x66>
		CMD_Send(buff, atcmd, tok);
 8000806:	463a      	mov	r2, r7
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	f107 000c 	add.w	r0, r7, #12
 800080e:	6812      	ldr	r2, [r2, #0]
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	f7ff ff43 	bl	800069c <CMD_Send>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)buff, strlen(buff));
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fcea 	bl	80001f4 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <AT_Send+0x7c>)
 800082c:	f002 fe46 	bl	80034bc <HAL_UART_Transmit_IT>
		if(!AT_Return(tok->ret, 1)) {return 0;}
 8000830:	463b      	mov	r3, r7
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000838:	3301      	adds	r3, #1
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f817 	bl	8000870 <AT_Return>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <AT_Send+0x5c>
 8000848:	2300      	movs	r3, #0
 800084a:	e009      	b.n	8000860 <AT_Send+0x70>
	for(i=0; i<Retime; ++ i) {
 800084c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000850:	3301      	adds	r3, #1
 8000852:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800085a:	2b01      	cmp	r3, #1
 800085c:	ddd3      	ble.n	8000806 <AT_Send+0x16>
	} return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000dd0 	.word	0x20000dd0

08000870 <AT_Return>:

u8 AT_Return(char *str, int flag) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	uint32_t Time_count = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
	Time_count = Timeout;
 800087e:	230a      	movs	r3, #10
 8000880:	60fb      	str	r3, [r7, #12]
	memset(Buff, 0, sizeof Buff);
 8000882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000886:	2100      	movs	r1, #0
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <AT_Return+0x60>)
 800088a:	f003 fcd7 	bl	800423c <memset>
	while(Time_count --) {
 800088e:	e015      	b.n	80008bc <AT_Return+0x4c>
		if (flag) HAL_UART_Receive(&huart2, (uint8_t *)Buff, sizeof Buff, 100);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <AT_Return+0x34>
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <AT_Return+0x60>)
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <AT_Return+0x64>)
 80008a0:	f002 fd66 	bl	8003370 <HAL_UART_Receive>
		if(strstr((const char *)Buff,str)!=NULL) {return 0;}
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <AT_Return+0x60>)
 80008a8:	f003 fd83 	bl	80043b2 <strstr>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <AT_Return+0x46>
 80008b2:	2300      	movs	r3, #0
 80008b4:	e008      	b.n	80008c8 <AT_Return+0x58>
		HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 fa8a 	bl	8001dd0 <HAL_Delay>
	while(Time_count --) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	60fa      	str	r2, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1e4      	bne.n	8000890 <AT_Return+0x20>
	} return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200005d0 	.word	0x200005d0
 80008d4:	20000dd0 	.word	0x20000dd0

080008d8 <Buff_clear>:

void Buff_clear(struct tok *tok) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	tok->num = 0;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2020 	strb.w	r2, [r3, #32]
	memset(tok->sendstr, 0, sizeof(tok->sendstr));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3321      	adds	r3, #33	; 0x21
 80008ec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fca2 	bl	800423c <memset>
	memset(tok->ret, 0, sizeof(tok->ret));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80008fe:	3301      	adds	r3, #1
 8000900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fc98 	bl	800423c <memset>
	memset(Buff, 0, sizeof(Buff));
 800090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000910:	2100      	movs	r1, #0
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <Buff_clear+0x48>)
 8000914:	f003 fc92 	bl	800423c <memset>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200005d0 	.word	0x200005d0

08000924 <BLE_reboot>:
	if(ret) printf("[BLEINIT][ERR] set to default fail!\r\n");
	else printf("[BLEINIT][SUC] set to default.\r\n");
	return ret;
}

u8 BLE_reboot(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+RESET");
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <BLE_reboot+0x58>)
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <BLE_reboot+0x5c>)
 800092e:	cb03      	ldmia	r3!, {r0, r1}
 8000930:	6010      	str	r0, [r2, #0]
 8000932:	6051      	str	r1, [r2, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	7213      	strb	r3, [r2, #8]
	tok.num = 0;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <BLE_reboot+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.ret, "OK");
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <BLE_reboot+0x60>)
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <BLE_reboot+0x64>)
 8000944:	8811      	ldrh	r1, [r2, #0]
 8000946:	7892      	ldrb	r2, [r2, #2]
 8000948:	8019      	strh	r1, [r3, #0]
 800094a:	709a      	strb	r2, [r3, #2]
	u8 ret = AT_CMD_Dispose(&tok);
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <BLE_reboot+0x58>)
 800094e:	f7ff fe6b 	bl	8000628 <AT_CMD_Dispose>
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <BLE_reboot+0x58>)
 8000958:	f7ff ffbe 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] restart fail!\r\n");
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <BLE_reboot+0x46>
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <BLE_reboot+0x68>)
 8000964:	f003 fce6 	bl	8004334 <puts>
 8000968:	e002      	b.n	8000970 <BLE_reboot+0x4c>
	else printf("[BLEINIT][SUC] restarted.\r\n");
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <BLE_reboot+0x6c>)
 800096c:	f003 fce2 	bl	8004334 <puts>
	return ret;
 8000970:	79fb      	ldrb	r3, [r7, #7]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000e10 	.word	0x20000e10
 8000980:	08005608 	.word	0x08005608
 8000984:	20002231 	.word	0x20002231
 8000988:	080055bc 	.word	0x080055bc
 800098c:	08005614 	.word	0x08005614
 8000990:	08005634 	.word	0x08005634

08000994 <Qst_UART_Baud>:

u8 Qst_UART_Baud(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BAUD");
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <Qst_UART_Baud+0x5c>)
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <Qst_UART_Baud+0x60>)
 800099e:	cb03      	ldmia	r3!, {r0, r1}
 80009a0:	6010      	str	r0, [r2, #0]
 80009a2:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <Qst_UART_Baud+0x5c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <Qst_UART_Baud+0x64>)
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <Qst_UART_Baud+0x68>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BAUD=%s,NONE", BAUD);
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <Qst_UART_Baud+0x6c>)
 80009b6:	4913      	ldr	r1, [pc, #76]	; (8000a04 <Qst_UART_Baud+0x70>)
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <Qst_UART_Baud+0x74>)
 80009ba:	f003 fcc3 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <Qst_UART_Baud+0x5c>)
 80009c0:	f7ff fe32 	bl	8000628 <AT_CMD_Dispose>
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <Qst_UART_Baud+0x5c>)
 80009ca:	f7ff ff85 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BAUD not correct\r\n");
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <Qst_UART_Baud+0x48>
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <Qst_UART_Baud+0x78>)
 80009d6:	f003 fcad 	bl	8004334 <puts>
 80009da:	e003      	b.n	80009e4 <Qst_UART_Baud+0x50>
	else printf("[BLEINIT][SUC]Q: BAUD now is %s\r\n", BAUD);
 80009dc:	4908      	ldr	r1, [pc, #32]	; (8000a00 <Qst_UART_Baud+0x6c>)
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <Qst_UART_Baud+0x7c>)
 80009e0:	f003 fc34 	bl	800424c <iprintf>
	return ret;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000e10 	.word	0x20000e10
 80009f4:	08005650 	.word	0x08005650
 80009f8:	20000e31 	.word	0x20000e31
 80009fc:	08005658 	.word	0x08005658
 8000a00:	200000f0 	.word	0x200000f0
 8000a04:	0800565c 	.word	0x0800565c
 8000a08:	20002231 	.word	0x20002231
 8000a0c:	0800566c 	.word	0x0800566c
 8000a10:	08005690 	.word	0x08005690

08000a14 <Set_UART_Baud>:

u8 Set_UART_Baud(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	if (!Qst_UART_Baud()) return 0;
 8000a1a:	f7ff ffbb 	bl	8000994 <Qst_UART_Baud>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <Set_UART_Baud+0x14>
 8000a24:	2300      	movs	r3, #0
 8000a26:	e025      	b.n	8000a74 <Set_UART_Baud+0x60>
	strcpy(tok.name, "AT+BAUD");
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <Set_UART_Baud+0x68>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <Set_UART_Baud+0x6c>)
 8000a2c:	cb03      	ldmia	r3!, {r0, r1}
 8000a2e:	6010      	str	r0, [r2, #0]
 8000a30:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <Set_UART_Baud+0x68>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], BAUD);
 8000a3a:	4912      	ldr	r1, [pc, #72]	; (8000a84 <Set_UART_Baud+0x70>)
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <Set_UART_Baud+0x74>)
 8000a3e:	f003 fcb0 	bl	80043a2 <strcpy>
	sprintf(tok.ret, "OK+BAUD=%s", BAUD);
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <Set_UART_Baud+0x70>)
 8000a44:	4911      	ldr	r1, [pc, #68]	; (8000a8c <Set_UART_Baud+0x78>)
 8000a46:	4812      	ldr	r0, [pc, #72]	; (8000a90 <Set_UART_Baud+0x7c>)
 8000a48:	f003 fc7c 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <Set_UART_Baud+0x68>)
 8000a4e:	f7ff fdeb 	bl	8000628 <AT_CMD_Dispose>
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000a56:	4809      	ldr	r0, [pc, #36]	; (8000a7c <Set_UART_Baud+0x68>)
 8000a58:	f7ff ff3e 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BAUD set fail!\r\n");
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <Set_UART_Baud+0x56>
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <Set_UART_Baud+0x80>)
 8000a64:	f003 fc66 	bl	8004334 <puts>
 8000a68:	e003      	b.n	8000a72 <Set_UART_Baud+0x5e>
	else printf("[BLEINIT][SUC] BAUD set as %s\r\n", BAUD);
 8000a6a:	4906      	ldr	r1, [pc, #24]	; (8000a84 <Set_UART_Baud+0x70>)
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <Set_UART_Baud+0x84>)
 8000a6e:	f003 fbed 	bl	800424c <iprintf>
	return ret;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000e10 	.word	0x20000e10
 8000a80:	08005650 	.word	0x08005650
 8000a84:	200000f0 	.word	0x200000f0
 8000a88:	20000e31 	.word	0x20000e31
 8000a8c:	080056b4 	.word	0x080056b4
 8000a90:	20002231 	.word	0x20002231
 8000a94:	080056c0 	.word	0x080056c0
 8000a98:	080056e0 	.word	0x080056e0

08000a9c <Qst_Role>:

u8 Qst_Role(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+ROLE");
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <Qst_Role+0x5c>)
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <Qst_Role+0x60>)
 8000aa6:	cb03      	ldmia	r3!, {r0, r1}
 8000aa8:	6010      	str	r0, [r2, #0]
 8000aaa:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <Qst_Role+0x5c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <Qst_Role+0x64>)
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <Qst_Role+0x68>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <Qst_Role+0x6c>)
 8000abe:	4913      	ldr	r1, [pc, #76]	; (8000b0c <Qst_Role+0x70>)
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <Qst_Role+0x74>)
 8000ac2:	f003 fc3f 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <Qst_Role+0x5c>)
 8000ac8:	f7ff fdae 	bl	8000628 <AT_CMD_Dispose>
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <Qst_Role+0x5c>)
 8000ad2:	f7ff ff01 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: ROLE not correct\r\n");
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <Qst_Role+0x48>
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <Qst_Role+0x78>)
 8000ade:	f003 fc29 	bl	8004334 <puts>
 8000ae2:	e003      	b.n	8000aec <Qst_Role+0x50>
	else printf("[BLEINIT][SUC]Q: ROLE now is %s\r\n", ROLE[1]);
 8000ae4:	4908      	ldr	r1, [pc, #32]	; (8000b08 <Qst_Role+0x6c>)
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <Qst_Role+0x7c>)
 8000ae8:	f003 fbb0 	bl	800424c <iprintf>
	return ret;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000e10 	.word	0x20000e10
 8000afc:	08005700 	.word	0x08005700
 8000b00:	20000e31 	.word	0x20000e31
 8000b04:	08005658 	.word	0x08005658
 8000b08:	200000ff 	.word	0x200000ff
 8000b0c:	08005708 	.word	0x08005708
 8000b10:	20002231 	.word	0x20002231
 8000b14:	08005714 	.word	0x08005714
 8000b18:	08005738 	.word	0x08005738

08000b1c <Set_Role>:

u8 Set_Role(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	if (!Qst_Role()) return 0;
 8000b22:	f7ff ffbb 	bl	8000a9c <Qst_Role>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <Set_Role+0x14>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e025      	b.n	8000b7c <Set_Role+0x60>
	strcpy(tok.name, "AT+ROLE");
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <Set_Role+0x68>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <Set_Role+0x6c>)
 8000b34:	cb03      	ldmia	r3!, {r0, r1}
 8000b36:	6010      	str	r0, [r2, #0]
 8000b38:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <Set_Role+0x68>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], ROLE[0]);
 8000b42:	4912      	ldr	r1, [pc, #72]	; (8000b8c <Set_Role+0x70>)
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <Set_Role+0x74>)
 8000b46:	f003 fc2c 	bl	80043a2 <strcpy>
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <Set_Role+0x78>)
 8000b4c:	4912      	ldr	r1, [pc, #72]	; (8000b98 <Set_Role+0x7c>)
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <Set_Role+0x80>)
 8000b50:	f003 fbf8 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <Set_Role+0x68>)
 8000b56:	f7ff fd67 	bl	8000628 <AT_CMD_Dispose>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <Set_Role+0x68>)
 8000b60:	f7ff feba 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] ROLE set fail!\r\n");
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <Set_Role+0x56>
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <Set_Role+0x84>)
 8000b6c:	f003 fbe2 	bl	8004334 <puts>
 8000b70:	e003      	b.n	8000b7a <Set_Role+0x5e>
	else printf("[BLEINIT][SUC] ROLE set as %s\r\n", ROLE[1]);
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <Set_Role+0x78>)
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <Set_Role+0x88>)
 8000b76:	f003 fb69 	bl	800424c <iprintf>
	return ret;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000e10 	.word	0x20000e10
 8000b88:	08005700 	.word	0x08005700
 8000b8c:	200000f8 	.word	0x200000f8
 8000b90:	20000e31 	.word	0x20000e31
 8000b94:	200000ff 	.word	0x200000ff
 8000b98:	08005708 	.word	0x08005708
 8000b9c:	20002231 	.word	0x20002231
 8000ba0:	0800575c 	.word	0x0800575c
 8000ba4:	0800577c 	.word	0x0800577c

08000ba8 <Qst_SPP_Name>:

u8 Qst_SPP_Name(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+NAME");
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <Qst_SPP_Name+0x5c>)
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <Qst_SPP_Name+0x60>)
 8000bb2:	cb03      	ldmia	r3!, {r0, r1}
 8000bb4:	6010      	str	r0, [r2, #0]
 8000bb6:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <Qst_SPP_Name+0x5c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <Qst_SPP_Name+0x64>)
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <Qst_SPP_Name+0x68>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+NAME=%s", NAME[1]);
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <Qst_SPP_Name+0x6c>)
 8000bca:	4913      	ldr	r1, [pc, #76]	; (8000c18 <Qst_SPP_Name+0x70>)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <Qst_SPP_Name+0x74>)
 8000bce:	f003 fbb9 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <Qst_SPP_Name+0x5c>)
 8000bd4:	f7ff fd28 	bl	8000628 <AT_CMD_Dispose>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <Qst_SPP_Name+0x5c>)
 8000bde:	f7ff fe7b 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: SPP name not correct\r\n");
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <Qst_SPP_Name+0x48>
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <Qst_SPP_Name+0x78>)
 8000bea:	f003 fba3 	bl	8004334 <puts>
 8000bee:	e003      	b.n	8000bf8 <Qst_SPP_Name+0x50>
	else printf("[BLEINIT][SUC]Q: SPP name now is %s\r\n", NAME[1]);
 8000bf0:	4908      	ldr	r1, [pc, #32]	; (8000c14 <Qst_SPP_Name+0x6c>)
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <Qst_SPP_Name+0x7c>)
 8000bf4:	f003 fb2a 	bl	800424c <iprintf>
	return ret;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000e10 	.word	0x20000e10
 8000c08:	0800579c 	.word	0x0800579c
 8000c0c:	20000e31 	.word	0x20000e31
 8000c10:	08005658 	.word	0x08005658
 8000c14:	20000112 	.word	0x20000112
 8000c18:	080057a4 	.word	0x080057a4
 8000c1c:	20002231 	.word	0x20002231
 8000c20:	080057b0 	.word	0x080057b0
 8000c24:	080057d8 	.word	0x080057d8

08000c28 <Set_SPP_Name>:

u8 Set_SPP_Name(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	if (!Qst_SPP_Name()) return 0;
 8000c2e:	f7ff ffbb 	bl	8000ba8 <Qst_SPP_Name>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <Set_SPP_Name+0x14>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e027      	b.n	8000c8c <Set_SPP_Name+0x64>
	strcpy(tok.name, "AT+NAME");
 8000c3c:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <Set_SPP_Name+0x6c>)
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <Set_SPP_Name+0x70>)
 8000c40:	cb03      	ldmia	r3!, {r0, r1}
 8000c42:	6010      	str	r0, [r2, #0]
 8000c44:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <Set_SPP_Name+0x6c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[1]);
 8000c4e:	4913      	ldr	r1, [pc, #76]	; (8000c9c <Set_SPP_Name+0x74>)
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <Set_SPP_Name+0x78>)
 8000c52:	f003 fba6 	bl	80043a2 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 8000c56:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <Set_SPP_Name+0x7c>)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <Set_SPP_Name+0x80>)
 8000c5a:	cb03      	ldmia	r3!, {r0, r1}
 8000c5c:	6010      	str	r0, [r2, #0]
 8000c5e:	6051      	str	r1, [r2, #4]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <Set_SPP_Name+0x6c>)
 8000c66:	f7ff fcdf 	bl	8000628 <AT_CMD_Dispose>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <Set_SPP_Name+0x6c>)
 8000c70:	f7ff fe32 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] SPP name set fail!\r\n");
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <Set_SPP_Name+0x5a>
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <Set_SPP_Name+0x84>)
 8000c7c:	f003 fb5a 	bl	8004334 <puts>
 8000c80:	e003      	b.n	8000c8a <Set_SPP_Name+0x62>
	else printf("[BLEINIT][SUC] SPP name set as %s\r\n", NAME[1]);
 8000c82:	4906      	ldr	r1, [pc, #24]	; (8000c9c <Set_SPP_Name+0x74>)
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <Set_SPP_Name+0x88>)
 8000c86:	f003 fae1 	bl	800424c <iprintf>
	return ret;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000e10 	.word	0x20000e10
 8000c98:	0800579c 	.word	0x0800579c
 8000c9c:	20000112 	.word	0x20000112
 8000ca0:	20000e31 	.word	0x20000e31
 8000ca4:	20002231 	.word	0x20002231
 8000ca8:	08005800 	.word	0x08005800
 8000cac:	0800580c 	.word	0x0800580c
 8000cb0:	08005830 	.word	0x08005830

08000cb4 <Qst_BLE_Name>:

u8 Qst_BLE_Name(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BNAME");
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <Qst_BLE_Name+0x60>)
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <Qst_BLE_Name+0x64>)
 8000cbe:	cb03      	ldmia	r3!, {r0, r1}
 8000cc0:	6010      	str	r0, [r2, #0]
 8000cc2:	6051      	str	r1, [r2, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <Qst_BLE_Name+0x60>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <Qst_BLE_Name+0x68>)
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <Qst_BLE_Name+0x6c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BNAME=%s", NAME[0]);
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <Qst_BLE_Name+0x70>)
 8000cda:	4913      	ldr	r1, [pc, #76]	; (8000d28 <Qst_BLE_Name+0x74>)
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <Qst_BLE_Name+0x78>)
 8000cde:	f003 fb31 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000ce2:	480c      	ldr	r0, [pc, #48]	; (8000d14 <Qst_BLE_Name+0x60>)
 8000ce4:	f7ff fca0 	bl	8000628 <AT_CMD_Dispose>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <Qst_BLE_Name+0x60>)
 8000cee:	f7ff fdf3 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE name not correct\r\n");
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <Qst_BLE_Name+0x4c>
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <Qst_BLE_Name+0x7c>)
 8000cfa:	f003 fb1b 	bl	8004334 <puts>
 8000cfe:	e003      	b.n	8000d08 <Qst_BLE_Name+0x54>
	else printf("[BLEINIT][SUC]Q: BLE name now is %s\r\n", NAME[0]);
 8000d00:	4908      	ldr	r1, [pc, #32]	; (8000d24 <Qst_BLE_Name+0x70>)
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <Qst_BLE_Name+0x80>)
 8000d04:	f003 faa2 	bl	800424c <iprintf>
	return ret;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000e10 	.word	0x20000e10
 8000d18:	08005854 	.word	0x08005854
 8000d1c:	20000e31 	.word	0x20000e31
 8000d20:	08005658 	.word	0x08005658
 8000d24:	20000108 	.word	0x20000108
 8000d28:	08005860 	.word	0x08005860
 8000d2c:	20002231 	.word	0x20002231
 8000d30:	0800586c 	.word	0x0800586c
 8000d34:	08005894 	.word	0x08005894

08000d38 <Set_BLE_Name>:

u8 Set_BLE_Name(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
	if (!Qst_BLE_Name()) return 0;
 8000d3e:	f7ff ffb9 	bl	8000cb4 <Qst_BLE_Name>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <Set_BLE_Name+0x14>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e029      	b.n	8000da0 <Set_BLE_Name+0x68>
	strcpy(tok.name, "AT+BNAME");
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <Set_BLE_Name+0x70>)
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <Set_BLE_Name+0x74>)
 8000d50:	cb03      	ldmia	r3!, {r0, r1}
 8000d52:	6010      	str	r0, [r2, #0]
 8000d54:	6051      	str	r1, [r2, #4]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <Set_BLE_Name+0x70>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[0]);
 8000d62:	4913      	ldr	r1, [pc, #76]	; (8000db0 <Set_BLE_Name+0x78>)
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <Set_BLE_Name+0x7c>)
 8000d66:	f003 fb1c 	bl	80043a2 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <Set_BLE_Name+0x80>)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <Set_BLE_Name+0x84>)
 8000d6e:	cb03      	ldmia	r3!, {r0, r1}
 8000d70:	6010      	str	r0, [r2, #0]
 8000d72:	6051      	str	r1, [r2, #4]
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <Set_BLE_Name+0x70>)
 8000d7a:	f7ff fc55 	bl	8000628 <AT_CMD_Dispose>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <Set_BLE_Name+0x70>)
 8000d84:	f7ff fda8 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE name set fail!\r\n");
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <Set_BLE_Name+0x5e>
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <Set_BLE_Name+0x88>)
 8000d90:	f003 fad0 	bl	8004334 <puts>
 8000d94:	e003      	b.n	8000d9e <Set_BLE_Name+0x66>
	else printf("[BLEINIT][SUC] BLE name set as %s\r\n", NAME[0]);
 8000d96:	4906      	ldr	r1, [pc, #24]	; (8000db0 <Set_BLE_Name+0x78>)
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <Set_BLE_Name+0x8c>)
 8000d9a:	f003 fa57 	bl	800424c <iprintf>
	return ret;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000e10 	.word	0x20000e10
 8000dac:	08005854 	.word	0x08005854
 8000db0:	20000108 	.word	0x20000108
 8000db4:	20000e31 	.word	0x20000e31
 8000db8:	20002231 	.word	0x20002231
 8000dbc:	08005800 	.word	0x08005800
 8000dc0:	080058bc 	.word	0x080058bc
 8000dc4:	080058e0 	.word	0x080058e0

08000dc8 <Qst_PIN>:

u8 Qst_PIN(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+PIN");
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <Qst_PIN+0x60>)
 8000dd0:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <Qst_PIN+0x64>)
 8000dd2:	6810      	ldr	r0, [r2, #0]
 8000dd4:	6018      	str	r0, [r3, #0]
 8000dd6:	8891      	ldrh	r1, [r2, #4]
 8000dd8:	7992      	ldrb	r2, [r2, #6]
 8000dda:	8099      	strh	r1, [r3, #4]
 8000ddc:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <Qst_PIN+0x60>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <Qst_PIN+0x68>)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <Qst_PIN+0x6c>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+PIN=%s", PIN);
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <Qst_PIN+0x70>)
 8000df0:	4912      	ldr	r1, [pc, #72]	; (8000e3c <Qst_PIN+0x74>)
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <Qst_PIN+0x78>)
 8000df4:	f003 faa6 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <Qst_PIN+0x60>)
 8000dfa:	f7ff fc15 	bl	8000628 <AT_CMD_Dispose>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <Qst_PIN+0x60>)
 8000e04:	f7ff fd68 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: PIN not correct\r\n");
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <Qst_PIN+0x4e>
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <Qst_PIN+0x7c>)
 8000e10:	f003 fa90 	bl	8004334 <puts>
 8000e14:	e003      	b.n	8000e1e <Qst_PIN+0x56>
	else printf("[BLEINIT][SUC]Q: PIN name now is %s\r\n", PIN);
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <Qst_PIN+0x70>)
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <Qst_PIN+0x80>)
 8000e1a:	f003 fa17 	bl	800424c <iprintf>
	return ret;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000e10 	.word	0x20000e10
 8000e2c:	08005904 	.word	0x08005904
 8000e30:	20000e31 	.word	0x20000e31
 8000e34:	08005658 	.word	0x08005658
 8000e38:	2000011c 	.word	0x2000011c
 8000e3c:	0800590c 	.word	0x0800590c
 8000e40:	20002231 	.word	0x20002231
 8000e44:	08005918 	.word	0x08005918
 8000e48:	0800593c 	.word	0x0800593c

08000e4c <Set_PIN>:

u8 Set_PIN(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	if (!Qst_PIN()) return 0;
 8000e52:	f7ff ffb9 	bl	8000dc8 <Qst_PIN>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <Set_PIN+0x14>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e02a      	b.n	8000eb6 <Set_PIN+0x6a>
	strcpy(tok.name, "AT+PIN");
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <Set_PIN+0x74>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <Set_PIN+0x78>)
 8000e64:	6810      	ldr	r0, [r2, #0]
 8000e66:	6018      	str	r0, [r3, #0]
 8000e68:	8891      	ldrh	r1, [r2, #4]
 8000e6a:	7992      	ldrb	r2, [r2, #6]
 8000e6c:	8099      	strh	r1, [r3, #4]
 8000e6e:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <Set_PIN+0x74>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], PIN);
 8000e78:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <Set_PIN+0x7c>)
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <Set_PIN+0x80>)
 8000e7c:	f003 fa91 	bl	80043a2 <strcpy>
	strcpy(tok.ret, "OKsetPIN");
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <Set_PIN+0x84>)
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <Set_PIN+0x88>)
 8000e84:	cb03      	ldmia	r3!, {r0, r1}
 8000e86:	6010      	str	r0, [r2, #0]
 8000e88:	6051      	str	r1, [r2, #4]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <Set_PIN+0x74>)
 8000e90:	f7ff fbca 	bl	8000628 <AT_CMD_Dispose>
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <Set_PIN+0x74>)
 8000e9a:	f7ff fd1d 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] PIN set fail!\r\n");
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <Set_PIN+0x60>
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <Set_PIN+0x8c>)
 8000ea6:	f003 fa45 	bl	8004334 <puts>
 8000eaa:	e003      	b.n	8000eb4 <Set_PIN+0x68>
	else printf("[BLEINIT][SUC] PIN set as %s\r\n", PIN);
 8000eac:	4906      	ldr	r1, [pc, #24]	; (8000ec8 <Set_PIN+0x7c>)
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <Set_PIN+0x90>)
 8000eb0:	f003 f9cc 	bl	800424c <iprintf>
	return ret;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000e10 	.word	0x20000e10
 8000ec4:	08005904 	.word	0x08005904
 8000ec8:	2000011c 	.word	0x2000011c
 8000ecc:	20000e31 	.word	0x20000e31
 8000ed0:	20002231 	.word	0x20002231
 8000ed4:	08005964 	.word	0x08005964
 8000ed8:	08005970 	.word	0x08005970
 8000edc:	08005990 	.word	0x08005990

08000ee0 <Qst_BLE>:

u8 Qst_BLE(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BLE");
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <Qst_BLE+0x60>)
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <Qst_BLE+0x64>)
 8000eea:	6810      	ldr	r0, [r2, #0]
 8000eec:	6018      	str	r0, [r3, #0]
 8000eee:	8891      	ldrh	r1, [r2, #4]
 8000ef0:	7992      	ldrb	r2, [r2, #6]
 8000ef2:	8099      	strh	r1, [r3, #4]
 8000ef4:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <Qst_BLE+0x60>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <Qst_BLE+0x68>)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <Qst_BLE+0x6c>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BLE=%s", "1");
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <Qst_BLE+0x70>)
 8000f08:	4912      	ldr	r1, [pc, #72]	; (8000f54 <Qst_BLE+0x74>)
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <Qst_BLE+0x78>)
 8000f0c:	f003 fa1a 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <Qst_BLE+0x60>)
 8000f12:	f7ff fb89 	bl	8000628 <AT_CMD_Dispose>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <Qst_BLE+0x60>)
 8000f1c:	f7ff fcdc 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE not correct\r\n");
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <Qst_BLE+0x4e>
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <Qst_BLE+0x7c>)
 8000f28:	f003 fa04 	bl	8004334 <puts>
 8000f2c:	e003      	b.n	8000f36 <Qst_BLE+0x56>
	else printf("[BLEINIT][SUC]Q: BLE name now is %s\r\n", "1");
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <Qst_BLE+0x70>)
 8000f30:	480b      	ldr	r0, [pc, #44]	; (8000f60 <Qst_BLE+0x80>)
 8000f32:	f003 f98b 	bl	800424c <iprintf>
	return ret;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000e10 	.word	0x20000e10
 8000f44:	080059b0 	.word	0x080059b0
 8000f48:	20000e31 	.word	0x20000e31
 8000f4c:	08005658 	.word	0x08005658
 8000f50:	080059b8 	.word	0x080059b8
 8000f54:	080059bc 	.word	0x080059bc
 8000f58:	20002231 	.word	0x20002231
 8000f5c:	080059c8 	.word	0x080059c8
 8000f60:	08005894 	.word	0x08005894

08000f64 <Set_BLE>:

u8 Set_BLE(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	if (!Qst_BLE()) return 0;
 8000f6a:	f7ff ffb9 	bl	8000ee0 <Qst_BLE>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <Set_BLE+0x14>
 8000f74:	2300      	movs	r3, #0
 8000f76:	e02a      	b.n	8000fce <Set_BLE+0x6a>
	strcpy(tok.name, "AT+BLE");
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <Set_BLE+0x74>)
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <Set_BLE+0x78>)
 8000f7c:	6810      	ldr	r0, [r2, #0]
 8000f7e:	6018      	str	r0, [r3, #0]
 8000f80:	8891      	ldrh	r1, [r2, #4]
 8000f82:	7992      	ldrb	r2, [r2, #6]
 8000f84:	8099      	strh	r1, [r3, #4]
 8000f86:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <Set_BLE+0x74>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "1");
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <Set_BLE+0x7c>)
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Set_BLE+0x80>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=1");
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <Set_BLE+0x84>)
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <Set_BLE+0x88>)
 8000f9c:	cb03      	ldmia	r3!, {r0, r1}
 8000f9e:	6010      	str	r0, [r2, #0]
 8000fa0:	6051      	str	r1, [r2, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <Set_BLE+0x74>)
 8000fa8:	f7ff fb3e 	bl	8000628 <AT_CMD_Dispose>
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <Set_BLE+0x74>)
 8000fb2:	f7ff fc91 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE set fail!\r\n");
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <Set_BLE+0x60>
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <Set_BLE+0x8c>)
 8000fbe:	f003 f9b9 	bl	8004334 <puts>
 8000fc2:	e003      	b.n	8000fcc <Set_BLE+0x68>
	else printf("[BLEINIT][SUC] BLE set as %s\r\n", "1");
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <Set_BLE+0x80>)
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <Set_BLE+0x90>)
 8000fc8:	f003 f940 	bl	800424c <iprintf>
	return ret;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000e10 	.word	0x20000e10
 8000fdc:	080059b0 	.word	0x080059b0
 8000fe0:	20000e31 	.word	0x20000e31
 8000fe4:	080059b8 	.word	0x080059b8
 8000fe8:	20002231 	.word	0x20002231
 8000fec:	080059ec 	.word	0x080059ec
 8000ff0:	080059f8 	.word	0x080059f8
 8000ff4:	08005a18 	.word	0x08005a18

08000ff8 <Qst_TUUID>:

u8 Qst_TUUID(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+TUUID");
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <Qst_TUUID+0x60>)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <Qst_TUUID+0x64>)
 8001002:	cb03      	ldmia	r3!, {r0, r1}
 8001004:	6010      	str	r0, [r2, #0]
 8001006:	6051      	str	r1, [r2, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <Qst_TUUID+0x60>)
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <Qst_TUUID+0x68>)
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <Qst_TUUID+0x6c>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <Qst_TUUID+0x70>)
 800101e:	4913      	ldr	r1, [pc, #76]	; (800106c <Qst_TUUID+0x74>)
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <Qst_TUUID+0x78>)
 8001022:	f003 f98f 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <Qst_TUUID+0x60>)
 8001028:	f7ff fafe 	bl	8000628 <AT_CMD_Dispose>
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <Qst_TUUID+0x60>)
 8001032:	f7ff fc51 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: TUUID not correct\r\n");
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <Qst_TUUID+0x4c>
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <Qst_TUUID+0x7c>)
 800103e:	f003 f979 	bl	8004334 <puts>
 8001042:	e003      	b.n	800104c <Qst_TUUID+0x54>
	else printf("[BLEINIT][SUC]Q: TUUID name now is %s\r\n", TUUID);
 8001044:	4908      	ldr	r1, [pc, #32]	; (8001068 <Qst_TUUID+0x70>)
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <Qst_TUUID+0x80>)
 8001048:	f003 f900 	bl	800424c <iprintf>
	return ret;
 800104c:	79fb      	ldrb	r3, [r7, #7]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000e10 	.word	0x20000e10
 800105c:	08005a38 	.word	0x08005a38
 8001060:	20000e31 	.word	0x20000e31
 8001064:	08005658 	.word	0x08005658
 8001068:	20000124 	.word	0x20000124
 800106c:	08005a44 	.word	0x08005a44
 8001070:	20002231 	.word	0x20002231
 8001074:	08005a50 	.word	0x08005a50
 8001078:	08005a74 	.word	0x08005a74

0800107c <Set_TUUID>:

u8 Set_TUUID(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	if (!Qst_TUUID()) return 0;
 8001082:	f7ff ffb9 	bl	8000ff8 <Qst_TUUID>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <Set_TUUID+0x14>
 800108c:	2300      	movs	r3, #0
 800108e:	e027      	b.n	80010e0 <Set_TUUID+0x64>
	strcpy(tok.name, "AT+TUUID");
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <Set_TUUID+0x6c>)
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <Set_TUUID+0x70>)
 8001094:	cb03      	ldmia	r3!, {r0, r1}
 8001096:	6010      	str	r0, [r2, #0]
 8001098:	6051      	str	r1, [r2, #4]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <Set_TUUID+0x6c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], TUUID);
 80010a6:	4912      	ldr	r1, [pc, #72]	; (80010f0 <Set_TUUID+0x74>)
 80010a8:	4812      	ldr	r0, [pc, #72]	; (80010f4 <Set_TUUID+0x78>)
 80010aa:	f003 f97a 	bl	80043a2 <strcpy>
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <Set_TUUID+0x74>)
 80010b0:	4911      	ldr	r1, [pc, #68]	; (80010f8 <Set_TUUID+0x7c>)
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <Set_TUUID+0x80>)
 80010b4:	f003 f946 	bl	8004344 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <Set_TUUID+0x6c>)
 80010ba:	f7ff fab5 	bl	8000628 <AT_CMD_Dispose>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <Set_TUUID+0x6c>)
 80010c4:	f7ff fc08 	bl	80008d8 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] TUUID set fail!\r\n");
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <Set_TUUID+0x5a>
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <Set_TUUID+0x84>)
 80010d0:	f003 f930 	bl	8004334 <puts>
 80010d4:	e003      	b.n	80010de <Set_TUUID+0x62>
	else printf("[BLEINIT][SUC] TUUID set as %s\r\n", TUUID);
 80010d6:	4906      	ldr	r1, [pc, #24]	; (80010f0 <Set_TUUID+0x74>)
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <Set_TUUID+0x88>)
 80010da:	f003 f8b7 	bl	800424c <iprintf>
	return ret;
 80010de:	79fb      	ldrb	r3, [r7, #7]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000e10 	.word	0x20000e10
 80010ec:	08005a38 	.word	0x08005a38
 80010f0:	20000124 	.word	0x20000124
 80010f4:	20000e31 	.word	0x20000e31
 80010f8:	08005a44 	.word	0x08005a44
 80010fc:	20002231 	.word	0x20002231
 8001100:	08005a9c 	.word	0x08005a9c
 8001104:	08005abc 	.word	0x08005abc

08001108 <BLE_INIT>:
#define NAN_NAN   0
#define CONN_OK   1
#define PARA_OK   2
#define ALL_GREEN 3

void BLE_INIT() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	switch(BLE_state) {
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <BLE_INIT+0x9c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d012      	beq.n	800113a <BLE_INIT+0x32>
 8001114:	2b02      	cmp	r3, #2
 8001116:	d023      	beq.n	8001160 <BLE_INIT+0x58>
 8001118:	2b00      	cmp	r3, #0
 800111a:	d142      	bne.n	80011a2 <BLE_INIT+0x9a>
	case NAN_NAN:
		BLE_reboot();
 800111c:	f7ff fc02 	bl	8000924 <BLE_reboot>
		HAL_Delay(1000);
 8001120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001124:	f000 fe54 	bl	8001dd0 <HAL_Delay>
		if(Set_UART_Baud()) return;
 8001128:	f7ff fc74 	bl	8000a14 <Set_UART_Baud>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d12a      	bne.n	8001188 <BLE_INIT+0x80>
		BLE_state = CONN_OK;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <BLE_INIT+0x9c>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
		break;
 8001138:	e033      	b.n	80011a2 <BLE_INIT+0x9a>
	case CONN_OK:
		if(Set_Role()) return;
 800113a:	f7ff fcef 	bl	8000b1c <Set_Role>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d123      	bne.n	800118c <BLE_INIT+0x84>
		if(Set_PIN()) return;
 8001144:	f7ff fe82 	bl	8000e4c <Set_PIN>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d120      	bne.n	8001190 <BLE_INIT+0x88>
		if(Set_TUUID()) return;
 800114e:	f7ff ff95 	bl	800107c <Set_TUUID>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d11d      	bne.n	8001194 <BLE_INIT+0x8c>
		BLE_state = PARA_OK;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <BLE_INIT+0x9c>)
 800115a:	2202      	movs	r2, #2
 800115c:	601a      	str	r2, [r3, #0]
		break;
 800115e:	e020      	b.n	80011a2 <BLE_INIT+0x9a>
	case PARA_OK:
		if(Set_SPP_Name()) return;
 8001160:	f7ff fd62 	bl	8000c28 <Set_SPP_Name>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <BLE_INIT+0x90>
		if(Set_BLE_Name()) return;
 800116a:	f7ff fde5 	bl	8000d38 <Set_BLE_Name>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d113      	bne.n	800119c <BLE_INIT+0x94>
		if(Set_BLE()) return;
 8001174:	f7ff fef6 	bl	8000f64 <Set_BLE>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d110      	bne.n	80011a0 <BLE_INIT+0x98>
		BLE_state = ALL_GREEN;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <BLE_INIT+0x9c>)
 8001180:	2203      	movs	r2, #3
 8001182:	601a      	str	r2, [r3, #0]
		break;
 8001184:	bf00      	nop
 8001186:	e00c      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_UART_Baud()) return;
 8001188:	bf00      	nop
 800118a:	e00a      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_Role()) return;
 800118c:	bf00      	nop
 800118e:	e008      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_PIN()) return;
 8001190:	bf00      	nop
 8001192:	e006      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_TUUID()) return;
 8001194:	bf00      	nop
 8001196:	e004      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_SPP_Name()) return;
 8001198:	bf00      	nop
 800119a:	e002      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_BLE_Name()) return;
 800119c:	bf00      	nop
 800119e:	e000      	b.n	80011a2 <BLE_INIT+0x9a>
		if(Set_BLE()) return;
 80011a0:	bf00      	nop
	}
}
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20002334 	.word	0x20002334

080011a8 <readNum>:
	u8  alt;
} data[MAX_VEHICLE_CNT];

u8 cnt;

u16 readNum (u8 **str) {
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	u16 ret = 0ll;
 80011b0:	2300      	movs	r3, #0
 80011b2:	81fb      	strh	r3, [r7, #14]
	while (**str< '0' || **str> '9') ++ *str;
 80011b4:	e004      	b.n	80011c0 <readNum+0x18>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b2f      	cmp	r3, #47	; 0x2f
 80011c8:	d9f5      	bls.n	80011b6 <readNum+0xe>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b39      	cmp	r3, #57	; 0x39
 80011d2:	d8f0      	bhi.n	80011b6 <readNum+0xe>
	while (**str>='0' && **str<='9') {
 80011d4:	e015      	b.n	8001202 <readNum+0x5a>
		ret = (ret<<1) + (ret<<3) + ((**str)^'0');
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	81fb      	strh	r3, [r7, #14]
		++ *str;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
	while (**str>='0' && **str<='9') {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b2f      	cmp	r3, #47	; 0x2f
 800120a:	d904      	bls.n	8001216 <readNum+0x6e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b39      	cmp	r3, #57	; 0x39
 8001214:	d9df      	bls.n	80011d6 <readNum+0x2e>
	} return ret;
 8001216:	89fb      	ldrh	r3, [r7, #14]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <dispose>:

int dispose (unsigned char *str) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	u8 *p = (u8*) strstr((const char *) str, "-=t:");
 800122c:	4934      	ldr	r1, [pc, #208]	; (8001300 <dispose+0xdc>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f003 f8bf 	bl	80043b2 <strstr>
 8001234:	4603      	mov	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]
	cnt = readNum(&p);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffb3 	bl	80011a8 <readNum>
 8001242:	4603      	mov	r3, r0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <dispose+0xe0>)
 8001248:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<cnt; ++ i) {
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e04c      	b.n	80012ea <dispose+0xc6>
		data[i].cat  = readNum(&p);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffa7 	bl	80011a8 <readNum>
 800125a:	4603      	mov	r3, r0
 800125c:	b2d9      	uxtb	r1, r3
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <dispose+0xe4>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b2c      	cmp	r3, #44	; 0x2c
 800126c:	d001      	beq.n	8001272 <dispose+0x4e>
 800126e:	2301      	movs	r3, #1
 8001270:	e042      	b.n	80012f8 <dispose+0xd4>
		data[i].xVal = readNum(&p);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff96 	bl	80011a8 <readNum>
 800127c:	4603      	mov	r3, r0
 800127e:	4619      	mov	r1, r3
 8001280:	4a21      	ldr	r2, [pc, #132]	; (8001308 <dispose+0xe4>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	460a      	mov	r2, r1
 800128a:	805a      	strh	r2, [r3, #2]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b2c      	cmp	r3, #44	; 0x2c
 8001292:	d001      	beq.n	8001298 <dispose+0x74>
 8001294:	2301      	movs	r3, #1
 8001296:	e02f      	b.n	80012f8 <dispose+0xd4>
		data[i].yVal = readNum(&p);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff83 	bl	80011a8 <readNum>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <dispose+0xe4>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	809a      	strh	r2, [r3, #4]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b2c      	cmp	r3, #44	; 0x2c
 80012b8:	d001      	beq.n	80012be <dispose+0x9a>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e01c      	b.n	80012f8 <dispose+0xd4>
		data[i].alt  = readNum(&p);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff70 	bl	80011a8 <readNum>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <dispose+0xe4>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	460a      	mov	r2, r1
 80012d6:	719a      	strb	r2, [r3, #6]
		// printf("[s]%s\r\n", p);
		if (*p ^ ';') return 1;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b3b      	cmp	r3, #59	; 0x3b
 80012de:	d001      	beq.n	80012e4 <dispose+0xc0>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e009      	b.n	80012f8 <dispose+0xd4>
	for (int i=0; i<cnt; ++ i) {
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <dispose+0xe0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4293      	cmp	r3, r2
 80012f4:	dbac      	blt.n	8001250 <dispose+0x2c>
	} return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	08005ae0 	.word	0x08005ae0
 8001304:	20002538 	.word	0x20002538
 8001308:	2000253c 	.word	0x2000253c

0800130c <decoderDebugOutput>:

void decoderDebugOutput () {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	printf("n=%d\r\n", cnt);
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <decoderDebugOutput+0x74>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <decoderDebugOutput+0x78>)
 800131a:	f002 ff97 	bl	800424c <iprintf>
	for (int i=0; i<cnt; ++ i) {
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	e023      	b.n	800136c <decoderDebugOutput+0x60>
		printf("[%d] ALT: %d\r\n", i, data[i].alt);
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <decoderDebugOutput+0x7c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	799b      	ldrb	r3, [r3, #6]
 800132e:	461a      	mov	r2, r3
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <decoderDebugOutput+0x80>)
 8001334:	f002 ff8a 	bl	800424c <iprintf>
		printf("cat = %d\r\n", data[i].cat);
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <decoderDebugOutput+0x7c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001340:	4619      	mov	r1, r3
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <decoderDebugOutput+0x84>)
 8001344:	f002 ff82 	bl	800424c <iprintf>
		printf("map = %d, %d\r\n", data[i].xVal, data[i].yVal);
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <decoderDebugOutput+0x7c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	885b      	ldrh	r3, [r3, #2]
 8001352:	4619      	mov	r1, r3
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <decoderDebugOutput+0x7c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	461a      	mov	r2, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <decoderDebugOutput+0x88>)
 8001362:	f002 ff73 	bl	800424c <iprintf>
	for (int i=0; i<cnt; ++ i) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <decoderDebugOutput+0x74>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4293      	cmp	r3, r2
 8001376:	dbd5      	blt.n	8001324 <decoderDebugOutput+0x18>
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20002538 	.word	0x20002538
 8001384:	08005ae8 	.word	0x08005ae8
 8001388:	2000253c 	.word	0x2000253c
 800138c:	08005af0 	.word	0x08005af0
 8001390:	08005b00 	.word	0x08005b00
 8001394:	08005b0c 	.word	0x08005b0c

08001398 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80013a0:	1d39      	adds	r1, r7, #4
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	2201      	movs	r2, #1
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <__io_putchar+0x20>)
 80013aa:	f001 ff48 	bl	800323e <HAL_UART_Transmit>
	return ch;
 80013ae:	687b      	ldr	r3, [r7, #4]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200028a4 	.word	0x200028a4

080013bc <HAL_UART_RxCpltCallback>:
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};
unsigned char UART2RxUklRdFlg  = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && UART2RxUklRdFlg) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_UART_RxCpltCallback+0x78>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d12f      	bne.n	800142e <HAL_UART_RxCpltCallback+0x72>
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_UART_RxCpltCallback+0x7c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d02b      	beq.n	800142e <HAL_UART_RxCpltCallback+0x72>
		if (!(UART2Rxtmp[0]^0x0A) || !(UART2Rxtmp[0]^0x0D)) {
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_UART_RxCpltCallback+0x80>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b0a      	cmp	r3, #10
 80013dc:	d003      	beq.n	80013e6 <HAL_UART_RxCpltCallback+0x2a>
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_UART_RxCpltCallback+0x80>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b0d      	cmp	r3, #13
 80013e4:	d107      	bne.n	80013f6 <HAL_UART_RxCpltCallback+0x3a>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_RxCpltCallback+0x84>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01e      	beq.n	800142c <HAL_UART_RxCpltCallback+0x70>
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_UART_RxCpltCallback+0x88>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e01a      	b.n	800142c <HAL_UART_RxCpltCallback+0x70>
		} if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_UART_RxCpltCallback+0x84>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	d20e      	bcs.n	800141e <HAL_UART_RxCpltCallback+0x62>
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_UART_RxCpltCallback+0x84>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_UART_RxCpltCallback+0x84>)
 8001408:	600a      	str	r2, [r1, #0]
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_UART_RxCpltCallback+0x80>)
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_UART_RxCpltCallback+0x8c>)
 8001410:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 8001412:	2201      	movs	r2, #1
 8001414:	4909      	ldr	r1, [pc, #36]	; (800143c <HAL_UART_RxCpltCallback+0x80>)
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <HAL_UART_RxCpltCallback+0x90>)
 8001418:	f002 f895 	bl	8003546 <HAL_UART_Receive_IT>
 800141c:	e007      	b.n	800142e <HAL_UART_RxCpltCallback+0x72>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_UART_RxCpltCallback+0x88>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <HAL_UART_RxCpltCallback+0x94>)
 8001426:	f002 ff85 	bl	8004334 <puts>
 800142a:	e000      	b.n	800142e <HAL_UART_RxCpltCallback+0x72>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 800142c:	bf00      	nop
	}
}
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40004400 	.word	0x40004400
 8001438:	200005c1 	.word	0x200005c1
 800143c:	200005c0 	.word	0x200005c0
 8001440:	200005bc 	.word	0x200005bc
 8001444:	200005b8 	.word	0x200005b8
 8001448:	200001b8 	.word	0x200001b8
 800144c:	20000dd0 	.word	0x20000dd0
 8001450:	08005b1c 	.word	0x08005b1c

08001454 <UART2_Clear>:

void UART2_Clear() {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	e007      	b.n	8001470 <UART2_Clear+0x1c>
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <UART2_Clear+0x48>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <UART2_Clear+0x4c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3f2      	bcc.n	8001460 <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = UART2RxUklRdFlg = 0;
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <UART2_Clear+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <UART2_Clear+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <UART2_Clear+0x4c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <UART2_Clear+0x54>)
 800148e:	701a      	strb	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	200001b8 	.word	0x200001b8
 80014a0:	200005bc 	.word	0x200005bc
 80014a4:	200005c1 	.word	0x200005c1
 80014a8:	200005b8 	.word	0x200005b8

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f000 fc1c 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f840 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f000 f97c 	bl	80017b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014bc:	f000 f922 	bl	8001704 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014c0:	f000 f94e 	bl	8001760 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014c4:	f000 f896 	bl	80015f4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80014c8:	f000 f8e6 	bl	8001698 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UART2RxUklRdFlg = 0;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <main+0x6c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (BLE_state^ALL_GREEN) BLE_INIT();
 80014d2:	e001      	b.n	80014d8 <main+0x2c>
 80014d4:	f7ff fe18 	bl	8001108 <BLE_INIT>
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <main+0x70>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d1f9      	bne.n	80014d4 <main+0x28>
  printf("[BLEINIT] SUCCESS.\r\n");
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <main+0x74>)
 80014e2:	f002 ff27 	bl	8004334 <puts>

  //UART2RxUklRd();
  while (1)
  {
	  UART2RxUklRd();
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <main+0x6c>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <main+0x78>)
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <main+0x7c>)
 80014f2:	f002 f828 	bl	8003546 <HAL_UART_Receive_IT>
	  if (UART2RxFlg) {
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <main+0x80>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f3      	beq.n	80014e6 <main+0x3a>
		  printf("%s\r\n", UART2RxBuf);
 80014fe:	490c      	ldr	r1, [pc, #48]	; (8001530 <main+0x84>)
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <main+0x88>)
 8001502:	f002 fea3 	bl	800424c <iprintf>
		  dispose(UART2RxBuf);
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <main+0x84>)
 8001508:	f7ff fe8c 	bl	8001224 <dispose>
		  decoderDebugOutput();
 800150c:	f7ff fefe 	bl	800130c <decoderDebugOutput>
		  UART2_Clear();
 8001510:	f7ff ffa0 	bl	8001454 <UART2_Clear>
	  UART2RxUklRd();
 8001514:	e7e7      	b.n	80014e6 <main+0x3a>
 8001516:	bf00      	nop
 8001518:	200005c1 	.word	0x200005c1
 800151c:	20002334 	.word	0x20002334
 8001520:	08005b38 	.word	0x08005b38
 8001524:	200005c0 	.word	0x200005c0
 8001528:	20000dd0 	.word	0x20000dd0
 800152c:	200005b8 	.word	0x200005b8
 8001530:	200001b8 	.word	0x200001b8
 8001534:	08005b4c 	.word	0x08005b4c

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	; 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fe78 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <SystemClock_Config+0xb4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <SystemClock_Config+0xb4>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <SystemClock_Config+0xb4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <SystemClock_Config+0xb8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <SystemClock_Config+0xb8>)
 8001582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <SystemClock_Config+0xb8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f95b 	bl	8002864 <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015b4:	f000 f926 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 fbb6 	bl	8002d44 <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015de:	f000 f911 	bl	8001804 <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3750      	adds	r7, #80	; 0x50
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015fa:	463b      	mov	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_ADC1_Init+0x98>)
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <MX_ADC1_Init+0x9c>)
 800160a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_ADC1_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_ADC1_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_ADC1_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_ADC1_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_ADC1_Init+0x98>)
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <MX_ADC1_Init+0xa0>)
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_ADC1_Init+0x98>)
 8001640:	2201      	movs	r2, #1
 8001642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_ADC1_Init+0x98>)
 800164e:	2201      	movs	r2, #1
 8001650:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001652:	480e      	ldr	r0, [pc, #56]	; (800168c <MX_ADC1_Init+0x98>)
 8001654:	f000 fbde 	bl	8001e14 <HAL_ADC_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 f8d1 	bl	8001804 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001662:	2306      	movs	r3, #6
 8001664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <MX_ADC1_Init+0x98>)
 8001674:	f000 fc12 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800167e:	f000 f8c1 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000285c 	.word	0x2000285c
 8001690:	40012000 	.word	0x40012000
 8001694:	0f000001 	.word	0x0f000001

08001698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_SPI1_Init+0x64>)
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <MX_SPI1_Init+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_SPI1_Init+0x64>)
 80016a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_SPI1_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_SPI1_Init+0x64>)
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_SPI1_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_SPI1_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_SPI1_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_SPI1_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_SPI1_Init+0x64>)
 80016e4:	220a      	movs	r2, #10
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_SPI1_Init+0x64>)
 80016ea:	f001 fcf7 	bl	80030dc <HAL_SPI_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f4:	f000 f886 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200028e4 	.word	0x200028e4
 8001700:	40013000 	.word	0x40013000

08001704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_USART1_UART_Init+0x50>)
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_USART1_UART_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USART1_UART_Init+0x50>)
 8001710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_USART1_UART_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <MX_USART1_UART_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USART1_UART_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_USART1_UART_Init+0x50>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USART1_UART_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_USART1_UART_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_USART1_UART_Init+0x50>)
 800173c:	f001 fd32 	bl	80031a4 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001746:	f000 f85d 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_USART1_UART_Init+0x58>)
 800174c:	f002 fdf2 	bl	8004334 <puts>

  /* USER CODE END USART1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200028a4 	.word	0x200028a4
 8001758:	40011000 	.word	0x40011000
 800175c:	08005b54 	.word	0x08005b54

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f001 fd04 	bl	80031a4 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f82f 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000dd0 	.word	0x20000dd0
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_GPIO_Init+0x4c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <MX_GPIO_Init+0x4c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_GPIO_Init+0x4c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_GPIO_Init+0x4c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <MX_GPIO_Init+0x4c>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_GPIO_Init+0x4c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180a:	e7fe      	b.n	800180a <Error_Handler+0x6>

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_ADC_MspInit+0x7c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d127      	bne.n	80018ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_ADC_MspInit+0x80>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_ADC_MspInit+0x80>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_ADC_MspInit+0x80>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_ADC_MspInit+0x80>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_ADC_MspInit+0x80>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_ADC_MspInit+0x80>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_ADC_MspInit+0x84>)
 80018ca:	f000 fe49 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40012000 	.word	0x40012000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_SPI_MspInit+0xc0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d149      	bne.n	800199a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_SPI_MspInit+0xc4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800195a:	23a0      	movs	r3, #160	; 0xa0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196a:	2305      	movs	r3, #5
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_SPI_MspInit+0xc8>)
 8001976:	f000 fdf3 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800197a:	2310      	movs	r3, #16
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800198a:	2305      	movs	r3, #5
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <HAL_SPI_MspInit+0xcc>)
 8001996:	f000 fde3 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40013000 	.word	0x40013000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a36      	ldr	r2, [pc, #216]	; (8001aac <HAL_UART_MspInit+0xf8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12d      	bne.n	8001a32 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a20:	2307      	movs	r3, #7
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4822      	ldr	r0, [pc, #136]	; (8001ab4 <HAL_UART_MspInit+0x100>)
 8001a2c:	f000 fd98 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a30:	e038      	b.n	8001aa4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_UART_MspInit+0x104>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d133      	bne.n	8001aa4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_UART_MspInit+0xfc>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a74:	230c      	movs	r3, #12
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a84:	2307      	movs	r3, #7
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_UART_MspInit+0x100>)
 8001a90:	f000 fd66 	bl	8002560 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2026      	movs	r0, #38	; 0x26
 8001a9a:	f000 fd08 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a9e:	2026      	movs	r0, #38	; 0x26
 8001aa0:	f000 fd21 	bl	80024e6 <HAL_NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40004400 	.word	0x40004400

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f942 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USART2_IRQHandler+0x10>)
 8001b16:	f001 fd6b 	bl	80035f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000dd0 	.word	0x20000dd0

08001b24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e00a      	b.n	8001b4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b36:	f3af 8000 	nop.w
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	60ba      	str	r2, [r7, #8]
 8001b42:	b2ca      	uxtb	r2, r1
 8001b44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf0      	blt.n	8001b36 <_read+0x12>
	}

return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e009      	b.n	8001b84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fc0d 	bl	8001398 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf1      	blt.n	8001b70 <_write+0x12>
	}
	return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_close>:

int _close(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_isatty>:

int _isatty(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f002 fada 	bl	80041e8 <__errno>
 8001c34:	4602      	mov	r2, r0
 8001c36:	230c      	movs	r3, #12
 8001c38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20020000 	.word	0x20020000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	200005c4 	.word	0x200005c4
 8001c68:	20002948 	.word	0x20002948

08001c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <SystemInit+0x28>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <SystemInit+0x28>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SystemInit+0x28>)
 8001c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c86:	609a      	str	r2, [r3, #8]
#endif
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c9e:	e003      	b.n	8001ca8 <LoopCopyDataInit>

08001ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ca6:	3104      	adds	r1, #4

08001ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cb0:	d3f6      	bcc.n	8001ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cb4:	e002      	b.n	8001cbc <LoopFillZerobss>

08001cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb8:	f842 3b04 	str.w	r3, [r2], #4

08001cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cc0:	d3f9      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc2:	f7ff ffd3 	bl	8001c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f002 fa95 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fbef 	bl	80014ac <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cd4:	08005c28 	.word	0x08005c28
  ldr  r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cdc:	2000019c 	.word	0x2000019c
  ldr  r2, =_sbss
 8001ce0:	2000019c 	.word	0x2000019c
  ldr  r3, = _ebss
 8001ce4:	20002944 	.word	0x20002944

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 fbbf 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fd74 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fbd7 	bl	8002502 <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 fb9f 	bl	80024ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000012c 	.word	0x2000012c
 8001d88:	20000134 	.word	0x20000134
 8001d8c:	20000130 	.word	0x20000130

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000134 	.word	0x20000134
 8001db4:	2000293c 	.word	0x2000293c

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000293c 	.word	0x2000293c

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_Delay+0x40>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000134 	.word	0x20000134

08001e14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e033      	b.n	8001e92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fd12 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e5a:	f023 0302 	bic.w	r3, r3, #2
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f94a 	bl	8002100 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
 8001e82:	e001      	b.n	8001e88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e113      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x244>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d925      	bls.n	8001f14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	2207      	movs	r2, #7
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	4603      	mov	r3, r0
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4403      	add	r3, r0
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	e022      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6919      	ldr	r1, [r3, #16]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	2207      	movs	r2, #7
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4403      	add	r3, r0
 8001f50:	409a      	lsls	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b05      	subs	r3, #5
 8001f74:	221f      	movs	r2, #31
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b05      	subs	r3, #5
 8001f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b23      	subs	r3, #35	; 0x23
 8001fc6:	221f      	movs	r2, #31
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b23      	subs	r3, #35	; 0x23
 8001ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3b41      	subs	r3, #65	; 0x41
 8002010:	221f      	movs	r2, #31
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	400a      	ands	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b41      	subs	r3, #65	; 0x41
 800203a:	fa00 f203 	lsl.w	r2, r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_ADC_ConfigChannel+0x250>)
 8002048:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_ADC_ConfigChannel+0x254>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10f      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1d8>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b12      	cmp	r3, #18
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_ADC_ConfigChannel+0x254>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x23a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_ADC_ConfigChannel+0x258>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x1f4>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b11      	cmp	r3, #17
 800208e:	d122      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_ADC_ConfigChannel+0x258>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_ADC_ConfigChannel+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_ADC_ConfigChannel+0x260>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9a      	lsrs	r2, r3, #18
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012300 	.word	0x40012300
 80020f0:	40012000 	.word	0x40012000
 80020f4:	10000012 	.word	0x10000012
 80020f8:	2000012c 	.word	0x2000012c
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002108:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <ADC_Init+0x1f0>)
 800210a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	021a      	lsls	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <ADC_Init+0x1f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e00f      	b.n	80021fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0202 	bic.w	r2, r2, #2
 800220c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	005a      	lsls	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800224a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	3b01      	subs	r3, #1
 8002258:	035a      	lsls	r2, r3, #13
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e007      	b.n	8002274 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	3b01      	subs	r3, #1
 8002290:	051a      	lsls	r2, r3, #20
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	029a      	lsls	r2, r3, #10
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40012300 	.word	0x40012300
 80022f4:	0f000001 	.word	0x0f000001

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff29 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff3e 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff31 	bl	800235c <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d004      	beq.n	8002538 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e00c      	b.n	8002552 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2205      	movs	r2, #5
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e159      	b.n	8002830 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8148 	bne.w	800282a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d00b      	beq.n	80025ba <HAL_GPIO_Init+0x5a>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ae:	2b11      	cmp	r3, #17
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d130      	bne.n	800261c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 0201 	and.w	r2, r3, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0xfc>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b12      	cmp	r3, #18
 800265a:	d123      	bne.n	80026a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a2 	beq.w	800282a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_GPIO_Init+0x2e4>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a55      	ldr	r2, [pc, #340]	; (8002844 <HAL_GPIO_Init+0x2e4>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_GPIO_Init+0x2e4>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002702:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a48      	ldr	r2, [pc, #288]	; (800284c <HAL_GPIO_Init+0x2ec>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d019      	beq.n	8002762 <HAL_GPIO_Init+0x202>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_GPIO_Init+0x2f0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0x1fe>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a46      	ldr	r2, [pc, #280]	; (8002854 <HAL_GPIO_Init+0x2f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x1fa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a45      	ldr	r2, [pc, #276]	; (8002858 <HAL_GPIO_Init+0x2f8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x1f6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a44      	ldr	r2, [pc, #272]	; (800285c <HAL_GPIO_Init+0x2fc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x1f2>
 800274e:	2304      	movs	r3, #4
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x204>
 8002752:	2307      	movs	r3, #7
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x204>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x204>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x204>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x204>
 8002762:	2300      	movs	r3, #0
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002774:	4934      	ldr	r1, [pc, #208]	; (8002848 <HAL_GPIO_Init+0x2e8>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_GPIO_Init+0x300>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a6:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_GPIO_Init+0x300>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_GPIO_Init+0x300>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_GPIO_Init+0x300>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_GPIO_Init+0x300>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fa:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_GPIO_Init+0x300>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <HAL_GPIO_Init+0x300>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002824:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_GPIO_Init+0x300>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	f67f aea2 	bls.w	800257c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002838:	bf00      	nop
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e25b      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d075      	beq.n	800296e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002882:	4ba3      	ldr	r3, [pc, #652]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d00c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288e:	4ba0      	ldr	r3, [pc, #640]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002896:	2b08      	cmp	r3, #8
 8002898:	d112      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289a:	4b9d      	ldr	r3, [pc, #628]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	4b99      	ldr	r3, [pc, #612]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d05b      	beq.n	800296c <HAL_RCC_OscConfig+0x108>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d157      	bne.n	800296c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e236      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d106      	bne.n	80028d8 <HAL_RCC_OscConfig+0x74>
 80028ca:	4b91      	ldr	r3, [pc, #580]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a90      	ldr	r2, [pc, #576]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e01d      	b.n	8002914 <HAL_RCC_OscConfig+0xb0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x98>
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a8a      	ldr	r2, [pc, #552]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b88      	ldr	r3, [pc, #544]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0xb0>
 80028fc:	4b84      	ldr	r3, [pc, #528]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a83      	ldr	r2, [pc, #524]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b81      	ldr	r3, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a80      	ldr	r2, [pc, #512]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fa4c 	bl	8001db8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fa48 	bl	8001db8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1fb      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0xc0>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff fa38 	bl	8001db8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff fa34 	bl	8001db8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e1e7      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	4b6c      	ldr	r3, [pc, #432]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0xe8>
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d063      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297a:	4b65      	ldr	r3, [pc, #404]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002986:	4b62      	ldr	r3, [pc, #392]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298e:	2b08      	cmp	r3, #8
 8002990:	d11c      	bne.n	80029cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002992:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d116      	bne.n	80029cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_RCC_OscConfig+0x152>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e1bb      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b6:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4952      	ldr	r1, [pc, #328]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	e03a      	b.n	8002a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_OscConfig+0x2b0>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7ff f9ed 	bl	8001db8 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e2:	f7ff f9e9 	bl	8001db8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e19c      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4940      	ldr	r1, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
 8002a14:	e015      	b.n	8002a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_OscConfig+0x2b0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7ff f9cc 	bl	8001db8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a24:	f7ff f9c8 	bl	8001db8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e17b      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d030      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x2b4>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7ff f9ac 	bl	8001db8 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a64:	f7ff f9a8 	bl	8001db8 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e15b      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x200>
 8002a82:	e015      	b.n	8002ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_OscConfig+0x2b4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff f995 	bl	8001db8 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a92:	f7ff f991 	bl	8001db8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e144      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a0 	beq.w	8002bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x2b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d121      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_OscConfig+0x2b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_RCC_OscConfig+0x2b8>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b06:	f7ff f957 	bl	8001db8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	e011      	b.n	8002b32 <HAL_RCC_OscConfig+0x2ce>
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	42470000 	.word	0x42470000
 8002b18:	42470e80 	.word	0x42470e80
 8002b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7ff f94a 	bl	8001db8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0fd      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b81      	ldr	r3, [pc, #516]	; (8002d38 <HAL_RCC_OscConfig+0x4d4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
 8002b46:	4b7d      	ldr	r3, [pc, #500]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a7c      	ldr	r2, [pc, #496]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	e01c      	b.n	8002b8e <HAL_RCC_OscConfig+0x32a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x312>
 8002b5c:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a76      	ldr	r2, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
 8002b68:	4b74      	ldr	r3, [pc, #464]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0x32a>
 8002b76:	4b71      	ldr	r3, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a70      	ldr	r2, [pc, #448]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a6d      	ldr	r2, [pc, #436]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff f90f 	bl	8001db8 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7ff f90b 	bl	8001db8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0bc      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ee      	beq.n	8002b9e <HAL_RCC_OscConfig+0x33a>
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7ff f8f9 	bl	8001db8 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7ff f8f5 	bl	8001db8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e0a6      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8092 	beq.w	8002d2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d05c      	beq.n	8002cce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d141      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b48      	ldr	r3, [pc, #288]	; (8002d40 <HAL_RCC_OscConfig+0x4dc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff f8c9 	bl	8001db8 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff f8c5 	bl	8001db8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e078      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	019b      	lsls	r3, r3, #6
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	3b01      	subs	r3, #1
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	4933      	ldr	r1, [pc, #204]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c72:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x4dc>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff f89e 	bl	8001db8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7ff f89a 	bl	8001db8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e04d      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x41c>
 8002c9e:	e045      	b.n	8002d2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x4dc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f887 	bl	8001db8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f883 	bl	8001db8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e036      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x44a>
 8002ccc:	e02e      	b.n	8002d2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e029      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_RCC_OscConfig+0x4d8>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d115      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d02:	4013      	ands	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	42470060 	.word	0x42470060

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cc      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90c      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d044      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e067      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e34:	f7fe ffc0 	bl	8001db8 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe ffbc 	bl	8001db8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20c      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f821 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ece:	4601      	mov	r1, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	5cd3      	ldrb	r3, [r2, r3]
 8002ede:	fa21 f303 	lsr.w	r3, r1, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe ff20 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005b68 	.word	0x08005b68
 8002f08:	2000012c 	.word	0x2000012c
 8002f0c:	20000130 	.word	0x20000130

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d007      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x32>
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d008      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x38>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 808d 	bne.w	8003056 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f3e:	60bb      	str	r3, [r7, #8]
       break;
 8002f40:	e08c      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f44:	60bb      	str	r3, [r7, #8]
      break;
 8002f46:	e089      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f48:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f52:	4b45      	ldr	r3, [pc, #276]	; (8003068 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d023      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	f04f 0400 	mov.w	r4, #0
 8002f68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	ea03 0501 	and.w	r5, r3, r1
 8002f74:	ea04 0602 	and.w	r6, r4, r2
 8002f78:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7a:	fb02 f106 	mul.w	r1, r2, r6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	fb02 f205 	mul.w	r2, r2, r5
 8002f84:	440a      	add	r2, r1
 8002f86:	493a      	ldr	r1, [pc, #232]	; (8003070 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f88:	fba5 0101 	umull	r0, r1, r5, r1
 8002f8c:	1853      	adds	r3, r2, r1
 8002f8e:	4619      	mov	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f04f 0400 	mov.w	r4, #0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4623      	mov	r3, r4
 8002f9a:	f7fd f989 	bl	80002b0 <__aeabi_uldivmod>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e049      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	f04f 0400 	mov.w	r4, #0
 8002fb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	ea03 0501 	and.w	r5, r3, r1
 8002fbc:	ea04 0602 	and.w	r6, r4, r2
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4632      	mov	r2, r6
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	0154      	lsls	r4, r2, #5
 8002fce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fd2:	014b      	lsls	r3, r1, #5
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	1b49      	subs	r1, r1, r5
 8002fda:	eb62 0206 	sbc.w	r2, r2, r6
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	0194      	lsls	r4, r2, #6
 8002fe8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fec:	018b      	lsls	r3, r1, #6
 8002fee:	1a5b      	subs	r3, r3, r1
 8002ff0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	00e2      	lsls	r2, r4, #3
 8002ffe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003002:	00d9      	lsls	r1, r3, #3
 8003004:	460b      	mov	r3, r1
 8003006:	4614      	mov	r4, r2
 8003008:	195b      	adds	r3, r3, r5
 800300a:	eb44 0406 	adc.w	r4, r4, r6
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	02a2      	lsls	r2, r4, #10
 8003018:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800301c:	0299      	lsls	r1, r3, #10
 800301e:	460b      	mov	r3, r1
 8003020:	4614      	mov	r4, r2
 8003022:	4618      	mov	r0, r3
 8003024:	4621      	mov	r1, r4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	461a      	mov	r2, r3
 800302e:	4623      	mov	r3, r4
 8003030:	f7fd f93e 	bl	80002b0 <__aeabi_uldivmod>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_GetSysClockFreq+0x158>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	3301      	adds	r3, #1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	60bb      	str	r3, [r7, #8]
      break;
 8003054:	e002      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003058:	60bb      	str	r3, [r7, #8]
      break;
 800305a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305c:	68bb      	ldr	r3, [r7, #8]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	00f42400 	.word	0x00f42400
 8003070:	017d7840 	.word	0x017d7840

08003074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_GetHCLKFreq+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	2000012c 	.word	0x2000012c

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003090:	f7ff fff0 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0a9b      	lsrs	r3, r3, #10
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	08005b78 	.word	0x08005b78

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b8:	f7ff ffdc 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 80030bc:	4601      	mov	r1, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0b5b      	lsrs	r3, r3, #13
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08005b78 	.word	0x08005b78

080030dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e056      	b.n	800319c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fe fbeb 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003124:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	ea42 0103 	orr.w	r1, r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 0104 	and.w	r1, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03f      	b.n	8003236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fbf2 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fc81 	bl	8003af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b088      	sub	sp, #32
 8003242:	af02      	add	r7, sp, #8
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 8083 	bne.w	8003366 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_UART_Transmit+0x2e>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e07b      	b.n	8003368 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_UART_Transmit+0x40>
 800327a:	2302      	movs	r3, #2
 800327c:	e074      	b.n	8003368 <HAL_UART_Transmit+0x12a>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2221      	movs	r2, #33	; 0x21
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003294:	f7fe fd90 	bl	8001db8 <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80032ae:	e042      	b.n	8003336 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c6:	d122      	bne.n	800330e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 faa0 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e042      	b.n	8003368 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3302      	adds	r3, #2
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e017      	b.n	8003336 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3301      	adds	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e013      	b.n	8003336 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fa7d 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e01f      	b.n	8003368 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	60ba      	str	r2, [r7, #8]
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1b7      	bne.n	80032b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fa64 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e006      	b.n	8003368 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b20      	cmp	r3, #32
 800338e:	f040 8090 	bne.w	80034b2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_UART_Receive+0x2e>
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e088      	b.n	80034b4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_UART_Receive+0x40>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e081      	b.n	80034b4 <HAL_UART_Receive+0x144>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2222      	movs	r2, #34	; 0x22
 80033c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033c6:	f7fe fcf7 	bl	8001db8 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033e0:	e05c      	b.n	800349c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d12b      	bne.n	8003452 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2120      	movs	r1, #32
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fa07 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e04f      	b.n	80034b4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10c      	bne.n	800343a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	b29a      	uxth	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3302      	adds	r3, #2
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	e030      	b.n	800349c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	b29b      	uxth	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	b29a      	uxth	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	e024      	b.n	800349c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2120      	movs	r1, #32
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f9db 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e023      	b.n	80034b4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	60ba      	str	r2, [r7, #8]
 8003480:	b2ca      	uxtb	r2, r1
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e00a      	b.n	800349c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1c59      	adds	r1, r3, #1
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d19d      	bne.n	80033e2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d130      	bne.n	8003538 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_Transmit_IT+0x26>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e029      	b.n	800353a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Transmit_IT+0x38>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e022      	b.n	800353a <HAL_UART_Transmit_IT+0x7e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	88fa      	ldrh	r2, [r7, #6]
 800350c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2221      	movs	r2, #33	; 0x21
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003532:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	4613      	mov	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b20      	cmp	r3, #32
 800355e:	d140      	bne.n	80035e2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Receive_IT+0x26>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e039      	b.n	80035e4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_UART_Receive_IT+0x38>
 800357a:	2302      	movs	r3, #2
 800357c:	e032      	b.n	80035e4 <HAL_UART_Receive_IT+0x9e>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2222      	movs	r2, #34	; 0x22
 80035a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0220 	orr.w	r2, r2, #32
 80035dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9d6 	bl	80039ec <UART_Receive_IT>
      return;
 8003640:	e0d1      	b.n	80037e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b0 	beq.w	80037aa <HAL_UART_IRQHandler+0x1ba>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_UART_IRQHandler+0x70>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a5 	beq.w	80037aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	f043 0202 	orr.w	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00f      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_UART_IRQHandler+0xee>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d078      	beq.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_UART_IRQHandler+0x11c>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f970 	bl	80039ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_UART_IRQHandler+0x144>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d031      	beq.n	8003798 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8b9 	bl	80038ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d123      	bne.n	8003790 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003756:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_UART_IRQHandler+0x1fc>)
 8003766:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fed4 	bl	800251a <HAL_DMA_Abort_IT>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003782:	4610      	mov	r0, r2
 8003784:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003786:	e00e      	b.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f83b 	bl	8003804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378e:	e00a      	b.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f837 	bl	8003804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	e006      	b.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f833 	bl	8003804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037a4:	e01e      	b.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	bf00      	nop
    return;
 80037a8:	e01c      	b.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_UART_IRQHandler+0x1d6>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8a6 	bl	8003910 <UART_Transmit_IT>
    return;
 80037c4:	e00f      	b.n	80037e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1f6>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8ee 	bl	80039bc <UART_EndTransmit_IT>
    return;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80037e4:	bf00      	nop
  }
}
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	080038e9 	.word	0x080038e9

080037f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003828:	e02c      	b.n	8003884 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d028      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <UART_WaitOnFlagUntilTimeout+0x30>
 8003838:	f7fe fabe 	bl	8001db8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	429a      	cmp	r2, r3
 8003846:	d21d      	bcs.n	8003884 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003856:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e00f      	b.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d0c3      	beq.n	800382a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff ff7e 	bl	8003804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b21      	cmp	r3, #33	; 0x21
 8003922:	d144      	bne.n	80039ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d11a      	bne.n	8003964 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003942:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]
 8003956:	e00e      	b.n	8003976 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]
 8003962:	e008      	b.n	8003976 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	1c59      	adds	r1, r3, #1
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6211      	str	r1, [r2, #32]
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29b      	uxth	r3, r3
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4619      	mov	r1, r3
 8003984:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003998:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff07 	bl	80037f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b22      	cmp	r3, #34	; 0x22
 80039fe:	d171      	bne.n	8003ae4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d123      	bne.n	8003a52 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10e      	bne.n	8003a36 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
 8003a34:	e029      	b.n	8003a8a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a50:	e01b      	b.n	8003a8a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6858      	ldr	r0, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	1c59      	adds	r1, r3, #1
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6291      	str	r1, [r2, #40]	; 0x28
 8003a6a:	b2c2      	uxtb	r2, r0
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e00c      	b.n	8003a8a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	1c58      	adds	r0, r3, #1
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	6288      	str	r0, [r1, #40]	; 0x28
 8003a82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4619      	mov	r1, r3
 8003a98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d120      	bne.n	8003ae0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0220 	bic.w	r2, r2, #32
 8003aac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd fc70 	bl	80013bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e002      	b.n	8003ae6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b32:	f023 030c 	bic.w	r3, r3, #12
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5e:	f040 818b 	bne.w	8003e78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4ac1      	ldr	r2, [pc, #772]	; (8003e6c <UART_SetConfig+0x37c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d005      	beq.n	8003b78 <UART_SetConfig+0x88>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4abf      	ldr	r2, [pc, #764]	; (8003e70 <UART_SetConfig+0x380>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f040 80bd 	bne.w	8003cf2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b78:	f7ff fa9c 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8003b7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	461d      	mov	r5, r3
 8003b82:	f04f 0600 	mov.w	r6, #0
 8003b86:	46a8      	mov	r8, r5
 8003b88:	46b1      	mov	r9, r6
 8003b8a:	eb18 0308 	adds.w	r3, r8, r8
 8003b8e:	eb49 0409 	adc.w	r4, r9, r9
 8003b92:	4698      	mov	r8, r3
 8003b94:	46a1      	mov	r9, r4
 8003b96:	eb18 0805 	adds.w	r8, r8, r5
 8003b9a:	eb49 0906 	adc.w	r9, r9, r6
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003baa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	4691      	mov	r9, r2
 8003bb6:	eb18 0005 	adds.w	r0, r8, r5
 8003bba:	eb49 0106 	adc.w	r1, r9, r6
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	f04f 0600 	mov.w	r6, #0
 8003bc8:	196b      	adds	r3, r5, r5
 8003bca:	eb46 0406 	adc.w	r4, r6, r6
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	f7fc fb6d 	bl	80002b0 <__aeabi_uldivmod>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4ba5      	ldr	r3, [pc, #660]	; (8003e74 <UART_SetConfig+0x384>)
 8003bde:	fba3 2302 	umull	r2, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	461d      	mov	r5, r3
 8003bec:	f04f 0600 	mov.w	r6, #0
 8003bf0:	46a9      	mov	r9, r5
 8003bf2:	46b2      	mov	sl, r6
 8003bf4:	eb19 0309 	adds.w	r3, r9, r9
 8003bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	46a2      	mov	sl, r4
 8003c00:	eb19 0905 	adds.w	r9, r9, r5
 8003c04:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1c:	4689      	mov	r9, r1
 8003c1e:	4692      	mov	sl, r2
 8003c20:	eb19 0005 	adds.w	r0, r9, r5
 8003c24:	eb4a 0106 	adc.w	r1, sl, r6
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	f04f 0600 	mov.w	r6, #0
 8003c32:	196b      	adds	r3, r5, r5
 8003c34:	eb46 0406 	adc.w	r4, r6, r6
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	f7fc fb38 	bl	80002b0 <__aeabi_uldivmod>
 8003c40:	4603      	mov	r3, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b8b      	ldr	r3, [pc, #556]	; (8003e74 <UART_SetConfig+0x384>)
 8003c48:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2164      	movs	r1, #100	; 0x64
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a86      	ldr	r2, [pc, #536]	; (8003e74 <UART_SetConfig+0x384>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c68:	4498      	add	r8, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	f04f 0600 	mov.w	r6, #0
 8003c72:	46a9      	mov	r9, r5
 8003c74:	46b2      	mov	sl, r6
 8003c76:	eb19 0309 	adds.w	r3, r9, r9
 8003c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c7e:	4699      	mov	r9, r3
 8003c80:	46a2      	mov	sl, r4
 8003c82:	eb19 0905 	adds.w	r9, r9, r5
 8003c86:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c9e:	4689      	mov	r9, r1
 8003ca0:	4692      	mov	sl, r2
 8003ca2:	eb19 0005 	adds.w	r0, r9, r5
 8003ca6:	eb4a 0106 	adc.w	r1, sl, r6
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	461d      	mov	r5, r3
 8003cb0:	f04f 0600 	mov.w	r6, #0
 8003cb4:	196b      	adds	r3, r5, r5
 8003cb6:	eb46 0406 	adc.w	r4, r6, r6
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	f7fc faf7 	bl	80002b0 <__aeabi_uldivmod>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <UART_SetConfig+0x384>)
 8003cca:	fba3 1302 	umull	r1, r3, r3, r2
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2164      	movs	r1, #100	; 0x64
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	3332      	adds	r3, #50	; 0x32
 8003cdc:	4a65      	ldr	r2, [pc, #404]	; (8003e74 <UART_SetConfig+0x384>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	f003 0207 	and.w	r2, r3, #7
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4442      	add	r2, r8
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	e26f      	b.n	80041d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7ff f9cb 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8003cf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	f04f 0600 	mov.w	r6, #0
 8003d00:	46a8      	mov	r8, r5
 8003d02:	46b1      	mov	r9, r6
 8003d04:	eb18 0308 	adds.w	r3, r8, r8
 8003d08:	eb49 0409 	adc.w	r4, r9, r9
 8003d0c:	4698      	mov	r8, r3
 8003d0e:	46a1      	mov	r9, r4
 8003d10:	eb18 0805 	adds.w	r8, r8, r5
 8003d14:	eb49 0906 	adc.w	r9, r9, r6
 8003d18:	f04f 0100 	mov.w	r1, #0
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d2c:	4688      	mov	r8, r1
 8003d2e:	4691      	mov	r9, r2
 8003d30:	eb18 0005 	adds.w	r0, r8, r5
 8003d34:	eb49 0106 	adc.w	r1, r9, r6
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	461d      	mov	r5, r3
 8003d3e:	f04f 0600 	mov.w	r6, #0
 8003d42:	196b      	adds	r3, r5, r5
 8003d44:	eb46 0406 	adc.w	r4, r6, r6
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	f7fc fab0 	bl	80002b0 <__aeabi_uldivmod>
 8003d50:	4603      	mov	r3, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b47      	ldr	r3, [pc, #284]	; (8003e74 <UART_SetConfig+0x384>)
 8003d58:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	461d      	mov	r5, r3
 8003d66:	f04f 0600 	mov.w	r6, #0
 8003d6a:	46a9      	mov	r9, r5
 8003d6c:	46b2      	mov	sl, r6
 8003d6e:	eb19 0309 	adds.w	r3, r9, r9
 8003d72:	eb4a 040a 	adc.w	r4, sl, sl
 8003d76:	4699      	mov	r9, r3
 8003d78:	46a2      	mov	sl, r4
 8003d7a:	eb19 0905 	adds.w	r9, r9, r5
 8003d7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d96:	4689      	mov	r9, r1
 8003d98:	4692      	mov	sl, r2
 8003d9a:	eb19 0005 	adds.w	r0, r9, r5
 8003d9e:	eb4a 0106 	adc.w	r1, sl, r6
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	461d      	mov	r5, r3
 8003da8:	f04f 0600 	mov.w	r6, #0
 8003dac:	196b      	adds	r3, r5, r5
 8003dae:	eb46 0406 	adc.w	r4, r6, r6
 8003db2:	461a      	mov	r2, r3
 8003db4:	4623      	mov	r3, r4
 8003db6:	f7fc fa7b 	bl	80002b0 <__aeabi_uldivmod>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b2c      	ldr	r3, [pc, #176]	; (8003e74 <UART_SetConfig+0x384>)
 8003dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2164      	movs	r1, #100	; 0x64
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	3332      	adds	r3, #50	; 0x32
 8003dd4:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <UART_SetConfig+0x384>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003de2:	4498      	add	r8, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	461d      	mov	r5, r3
 8003de8:	f04f 0600 	mov.w	r6, #0
 8003dec:	46a9      	mov	r9, r5
 8003dee:	46b2      	mov	sl, r6
 8003df0:	eb19 0309 	adds.w	r3, r9, r9
 8003df4:	eb4a 040a 	adc.w	r4, sl, sl
 8003df8:	4699      	mov	r9, r3
 8003dfa:	46a2      	mov	sl, r4
 8003dfc:	eb19 0905 	adds.w	r9, r9, r5
 8003e00:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e18:	4689      	mov	r9, r1
 8003e1a:	4692      	mov	sl, r2
 8003e1c:	eb19 0005 	adds.w	r0, r9, r5
 8003e20:	eb4a 0106 	adc.w	r1, sl, r6
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	461d      	mov	r5, r3
 8003e2a:	f04f 0600 	mov.w	r6, #0
 8003e2e:	196b      	adds	r3, r5, r5
 8003e30:	eb46 0406 	adc.w	r4, r6, r6
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	f7fc fa3a 	bl	80002b0 <__aeabi_uldivmod>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <UART_SetConfig+0x384>)
 8003e44:	fba3 1302 	umull	r1, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	2164      	movs	r1, #100	; 0x64
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	3332      	adds	r3, #50	; 0x32
 8003e56:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <UART_SetConfig+0x384>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	f003 0207 	and.w	r2, r3, #7
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4442      	add	r2, r8
 8003e68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e6a:	e1b2      	b.n	80041d2 <UART_SetConfig+0x6e2>
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40011400 	.word	0x40011400
 8003e74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4ad7      	ldr	r2, [pc, #860]	; (80041dc <UART_SetConfig+0x6ec>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d005      	beq.n	8003e8e <UART_SetConfig+0x39e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4ad6      	ldr	r2, [pc, #856]	; (80041e0 <UART_SetConfig+0x6f0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	f040 80d1 	bne.w	8004030 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e8e:	f7ff f911 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8003e92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	469a      	mov	sl, r3
 8003e98:	f04f 0b00 	mov.w	fp, #0
 8003e9c:	46d0      	mov	r8, sl
 8003e9e:	46d9      	mov	r9, fp
 8003ea0:	eb18 0308 	adds.w	r3, r8, r8
 8003ea4:	eb49 0409 	adc.w	r4, r9, r9
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	46a1      	mov	r9, r4
 8003eac:	eb18 080a 	adds.w	r8, r8, sl
 8003eb0:	eb49 090b 	adc.w	r9, r9, fp
 8003eb4:	f04f 0100 	mov.w	r1, #0
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ec0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ec4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ec8:	4688      	mov	r8, r1
 8003eca:	4691      	mov	r9, r2
 8003ecc:	eb1a 0508 	adds.w	r5, sl, r8
 8003ed0:	eb4b 0609 	adc.w	r6, fp, r9
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	f04f 0400 	mov.w	r4, #0
 8003ee6:	0094      	lsls	r4, r2, #2
 8003ee8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eec:	008b      	lsls	r3, r1, #2
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	f7fc f9db 	bl	80002b0 <__aeabi_uldivmod>
 8003efa:	4603      	mov	r3, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	461a      	mov	r2, r3
 8003f00:	4bb8      	ldr	r3, [pc, #736]	; (80041e4 <UART_SetConfig+0x6f4>)
 8003f02:	fba3 2302 	umull	r2, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	469b      	mov	fp, r3
 8003f10:	f04f 0c00 	mov.w	ip, #0
 8003f14:	46d9      	mov	r9, fp
 8003f16:	46e2      	mov	sl, ip
 8003f18:	eb19 0309 	adds.w	r3, r9, r9
 8003f1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f20:	4699      	mov	r9, r3
 8003f22:	46a2      	mov	sl, r4
 8003f24:	eb19 090b 	adds.w	r9, r9, fp
 8003f28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f40:	4689      	mov	r9, r1
 8003f42:	4692      	mov	sl, r2
 8003f44:	eb1b 0509 	adds.w	r5, fp, r9
 8003f48:	eb4c 060a 	adc.w	r6, ip, sl
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4619      	mov	r1, r3
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	f04f 0400 	mov.w	r4, #0
 8003f5e:	0094      	lsls	r4, r2, #2
 8003f60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f64:	008b      	lsls	r3, r1, #2
 8003f66:	461a      	mov	r2, r3
 8003f68:	4623      	mov	r3, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	f7fc f99f 	bl	80002b0 <__aeabi_uldivmod>
 8003f72:	4603      	mov	r3, r0
 8003f74:	460c      	mov	r4, r1
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b9a      	ldr	r3, [pc, #616]	; (80041e4 <UART_SetConfig+0x6f4>)
 8003f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2164      	movs	r1, #100	; 0x64
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a95      	ldr	r2, [pc, #596]	; (80041e4 <UART_SetConfig+0x6f4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f98:	4498      	add	r8, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	469b      	mov	fp, r3
 8003f9e:	f04f 0c00 	mov.w	ip, #0
 8003fa2:	46d9      	mov	r9, fp
 8003fa4:	46e2      	mov	sl, ip
 8003fa6:	eb19 0309 	adds.w	r3, r9, r9
 8003faa:	eb4a 040a 	adc.w	r4, sl, sl
 8003fae:	4699      	mov	r9, r3
 8003fb0:	46a2      	mov	sl, r4
 8003fb2:	eb19 090b 	adds.w	r9, r9, fp
 8003fb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fce:	4689      	mov	r9, r1
 8003fd0:	4692      	mov	sl, r2
 8003fd2:	eb1b 0509 	adds.w	r5, fp, r9
 8003fd6:	eb4c 060a 	adc.w	r6, ip, sl
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	f04f 0400 	mov.w	r4, #0
 8003fec:	0094      	lsls	r4, r2, #2
 8003fee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	f7fc f958 	bl	80002b0 <__aeabi_uldivmod>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	461a      	mov	r2, r3
 8004006:	4b77      	ldr	r3, [pc, #476]	; (80041e4 <UART_SetConfig+0x6f4>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	; 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a72      	ldr	r2, [pc, #456]	; (80041e4 <UART_SetConfig+0x6f4>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	f003 020f 	and.w	r2, r3, #15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4442      	add	r2, r8
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	e0d0      	b.n	80041d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7ff f82c 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004034:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	469a      	mov	sl, r3
 800403a:	f04f 0b00 	mov.w	fp, #0
 800403e:	46d0      	mov	r8, sl
 8004040:	46d9      	mov	r9, fp
 8004042:	eb18 0308 	adds.w	r3, r8, r8
 8004046:	eb49 0409 	adc.w	r4, r9, r9
 800404a:	4698      	mov	r8, r3
 800404c:	46a1      	mov	r9, r4
 800404e:	eb18 080a 	adds.w	r8, r8, sl
 8004052:	eb49 090b 	adc.w	r9, r9, fp
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004062:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004066:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800406a:	4688      	mov	r8, r1
 800406c:	4691      	mov	r9, r2
 800406e:	eb1a 0508 	adds.w	r5, sl, r8
 8004072:	eb4b 0609 	adc.w	r6, fp, r9
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4619      	mov	r1, r3
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	0094      	lsls	r4, r2, #2
 800408a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	461a      	mov	r2, r3
 8004092:	4623      	mov	r3, r4
 8004094:	4628      	mov	r0, r5
 8004096:	4631      	mov	r1, r6
 8004098:	f7fc f90a 	bl	80002b0 <__aeabi_uldivmod>
 800409c:	4603      	mov	r3, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <UART_SetConfig+0x6f4>)
 80040a4:	fba3 2302 	umull	r2, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	469b      	mov	fp, r3
 80040b2:	f04f 0c00 	mov.w	ip, #0
 80040b6:	46d9      	mov	r9, fp
 80040b8:	46e2      	mov	sl, ip
 80040ba:	eb19 0309 	adds.w	r3, r9, r9
 80040be:	eb4a 040a 	adc.w	r4, sl, sl
 80040c2:	4699      	mov	r9, r3
 80040c4:	46a2      	mov	sl, r4
 80040c6:	eb19 090b 	adds.w	r9, r9, fp
 80040ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e2:	4689      	mov	r9, r1
 80040e4:	4692      	mov	sl, r2
 80040e6:	eb1b 0509 	adds.w	r5, fp, r9
 80040ea:	eb4c 060a 	adc.w	r6, ip, sl
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4619      	mov	r1, r3
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	0094      	lsls	r4, r2, #2
 8004102:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004106:	008b      	lsls	r3, r1, #2
 8004108:	461a      	mov	r2, r3
 800410a:	4623      	mov	r3, r4
 800410c:	4628      	mov	r0, r5
 800410e:	4631      	mov	r1, r6
 8004110:	f7fc f8ce 	bl	80002b0 <__aeabi_uldivmod>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	461a      	mov	r2, r3
 800411a:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <UART_SetConfig+0x6f4>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <UART_SetConfig+0x6f4>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413a:	4498      	add	r8, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	469b      	mov	fp, r3
 8004140:	f04f 0c00 	mov.w	ip, #0
 8004144:	46d9      	mov	r9, fp
 8004146:	46e2      	mov	sl, ip
 8004148:	eb19 0309 	adds.w	r3, r9, r9
 800414c:	eb4a 040a 	adc.w	r4, sl, sl
 8004150:	4699      	mov	r9, r3
 8004152:	46a2      	mov	sl, r4
 8004154:	eb19 090b 	adds.w	r9, r9, fp
 8004158:	eb4a 0a0c 	adc.w	sl, sl, ip
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800416c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004170:	4689      	mov	r9, r1
 8004172:	4692      	mov	sl, r2
 8004174:	eb1b 0509 	adds.w	r5, fp, r9
 8004178:	eb4c 060a 	adc.w	r6, ip, sl
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	f04f 0400 	mov.w	r4, #0
 800418e:	0094      	lsls	r4, r2, #2
 8004190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004194:	008b      	lsls	r3, r1, #2
 8004196:	461a      	mov	r2, r3
 8004198:	4623      	mov	r3, r4
 800419a:	4628      	mov	r0, r5
 800419c:	4631      	mov	r1, r6
 800419e:	f7fc f887 	bl	80002b0 <__aeabi_uldivmod>
 80041a2:	4603      	mov	r3, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <UART_SetConfig+0x6f4>)
 80041aa:	fba3 1302 	umull	r1, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2164      	movs	r1, #100	; 0x64
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	3332      	adds	r3, #50	; 0x32
 80041bc:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <UART_SetConfig+0x6f4>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 020f 	and.w	r2, r3, #15
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4442      	add	r2, r8
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	e7ff      	b.n	80041d2 <UART_SetConfig+0x6e2>
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041dc:	40011000 	.word	0x40011000
 80041e0:	40011400 	.word	0x40011400
 80041e4:	51eb851f 	.word	0x51eb851f

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000138 	.word	0x20000138

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4e0d      	ldr	r6, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1ba4      	subs	r4, r4, r6
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2500      	movs	r5, #0
 8004200:	42a5      	cmp	r5, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4e0b      	ldr	r6, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f001 f95e 	bl	80054c8 <_init>
 800420c:	1ba4      	subs	r4, r4, r6
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2500      	movs	r5, #0
 8004212:	42a5      	cmp	r5, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800421c:	4798      	blx	r3
 800421e:	3501      	adds	r5, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004226:	4798      	blx	r3
 8004228:	3501      	adds	r5, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08005c20 	.word	0x08005c20
 8004230:	08005c20 	.word	0x08005c20
 8004234:	08005c20 	.word	0x08005c20
 8004238:	08005c24 	.word	0x08005c24

0800423c <memset>:
 800423c:	4402      	add	r2, r0
 800423e:	4603      	mov	r3, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <iprintf>:
 800424c:	b40f      	push	{r0, r1, r2, r3}
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <iprintf+0x2c>)
 8004250:	b513      	push	{r0, r1, r4, lr}
 8004252:	681c      	ldr	r4, [r3, #0]
 8004254:	b124      	cbz	r4, 8004260 <iprintf+0x14>
 8004256:	69a3      	ldr	r3, [r4, #24]
 8004258:	b913      	cbnz	r3, 8004260 <iprintf+0x14>
 800425a:	4620      	mov	r0, r4
 800425c:	f000 fa74 	bl	8004748 <__sinit>
 8004260:	ab05      	add	r3, sp, #20
 8004262:	9a04      	ldr	r2, [sp, #16]
 8004264:	68a1      	ldr	r1, [r4, #8]
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fd7f 	bl	8004d6c <_vfiprintf_r>
 800426e:	b002      	add	sp, #8
 8004270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004274:	b004      	add	sp, #16
 8004276:	4770      	bx	lr
 8004278:	20000138 	.word	0x20000138

0800427c <_puts_r>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	460e      	mov	r6, r1
 8004280:	4605      	mov	r5, r0
 8004282:	b118      	cbz	r0, 800428c <_puts_r+0x10>
 8004284:	6983      	ldr	r3, [r0, #24]
 8004286:	b90b      	cbnz	r3, 800428c <_puts_r+0x10>
 8004288:	f000 fa5e 	bl	8004748 <__sinit>
 800428c:	69ab      	ldr	r3, [r5, #24]
 800428e:	68ac      	ldr	r4, [r5, #8]
 8004290:	b913      	cbnz	r3, 8004298 <_puts_r+0x1c>
 8004292:	4628      	mov	r0, r5
 8004294:	f000 fa58 	bl	8004748 <__sinit>
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <_puts_r+0xac>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d117      	bne.n	80042ce <_puts_r+0x52>
 800429e:	686c      	ldr	r4, [r5, #4]
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	071b      	lsls	r3, r3, #28
 80042a4:	d51d      	bpl.n	80042e2 <_puts_r+0x66>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	b1db      	cbz	r3, 80042e2 <_puts_r+0x66>
 80042aa:	3e01      	subs	r6, #1
 80042ac:	68a3      	ldr	r3, [r4, #8]
 80042ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042b2:	3b01      	subs	r3, #1
 80042b4:	60a3      	str	r3, [r4, #8]
 80042b6:	b9e9      	cbnz	r1, 80042f4 <_puts_r+0x78>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da2e      	bge.n	800431a <_puts_r+0x9e>
 80042bc:	4622      	mov	r2, r4
 80042be:	210a      	movs	r1, #10
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 f891 	bl	80043e8 <__swbuf_r>
 80042c6:	3001      	adds	r0, #1
 80042c8:	d011      	beq.n	80042ee <_puts_r+0x72>
 80042ca:	200a      	movs	r0, #10
 80042cc:	e011      	b.n	80042f2 <_puts_r+0x76>
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <_puts_r+0xb0>)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	d101      	bne.n	80042d8 <_puts_r+0x5c>
 80042d4:	68ac      	ldr	r4, [r5, #8]
 80042d6:	e7e3      	b.n	80042a0 <_puts_r+0x24>
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <_puts_r+0xb4>)
 80042da:	429c      	cmp	r4, r3
 80042dc:	bf08      	it	eq
 80042de:	68ec      	ldreq	r4, [r5, #12]
 80042e0:	e7de      	b.n	80042a0 <_puts_r+0x24>
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f8d1 	bl	800448c <__swsetup_r>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0dd      	beq.n	80042aa <_puts_r+0x2e>
 80042ee:	f04f 30ff 	mov.w	r0, #4294967295
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	da04      	bge.n	8004302 <_puts_r+0x86>
 80042f8:	69a2      	ldr	r2, [r4, #24]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	dc06      	bgt.n	800430c <_puts_r+0x90>
 80042fe:	290a      	cmp	r1, #10
 8004300:	d004      	beq.n	800430c <_puts_r+0x90>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	6022      	str	r2, [r4, #0]
 8004308:	7019      	strb	r1, [r3, #0]
 800430a:	e7cf      	b.n	80042ac <_puts_r+0x30>
 800430c:	4622      	mov	r2, r4
 800430e:	4628      	mov	r0, r5
 8004310:	f000 f86a 	bl	80043e8 <__swbuf_r>
 8004314:	3001      	adds	r0, #1
 8004316:	d1c9      	bne.n	80042ac <_puts_r+0x30>
 8004318:	e7e9      	b.n	80042ee <_puts_r+0x72>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	200a      	movs	r0, #10
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	6022      	str	r2, [r4, #0]
 8004322:	7018      	strb	r0, [r3, #0]
 8004324:	e7e5      	b.n	80042f2 <_puts_r+0x76>
 8004326:	bf00      	nop
 8004328:	08005ba4 	.word	0x08005ba4
 800432c:	08005bc4 	.word	0x08005bc4
 8004330:	08005b84 	.word	0x08005b84

08004334 <puts>:
 8004334:	4b02      	ldr	r3, [pc, #8]	; (8004340 <puts+0xc>)
 8004336:	4601      	mov	r1, r0
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f7ff bf9f 	b.w	800427c <_puts_r>
 800433e:	bf00      	nop
 8004340:	20000138 	.word	0x20000138

08004344 <siprintf>:
 8004344:	b40e      	push	{r1, r2, r3}
 8004346:	b500      	push	{lr}
 8004348:	b09c      	sub	sp, #112	; 0x70
 800434a:	ab1d      	add	r3, sp, #116	; 0x74
 800434c:	9002      	str	r0, [sp, #8]
 800434e:	9006      	str	r0, [sp, #24]
 8004350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <siprintf+0x38>)
 8004356:	9107      	str	r1, [sp, #28]
 8004358:	9104      	str	r1, [sp, #16]
 800435a:	4909      	ldr	r1, [pc, #36]	; (8004380 <siprintf+0x3c>)
 800435c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	6800      	ldr	r0, [r0, #0]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	a902      	add	r1, sp, #8
 8004368:	f000 fbde 	bl	8004b28 <_svfiprintf_r>
 800436c:	9b02      	ldr	r3, [sp, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	b01c      	add	sp, #112	; 0x70
 8004374:	f85d eb04 	ldr.w	lr, [sp], #4
 8004378:	b003      	add	sp, #12
 800437a:	4770      	bx	lr
 800437c:	20000138 	.word	0x20000138
 8004380:	ffff0208 	.word	0xffff0208

08004384 <strcat>:
 8004384:	b510      	push	{r4, lr}
 8004386:	4603      	mov	r3, r0
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	1c5c      	adds	r4, r3, #1
 800438c:	b93a      	cbnz	r2, 800439e <strcat+0x1a>
 800438e:	3b01      	subs	r3, #1
 8004390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004394:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004398:	2a00      	cmp	r2, #0
 800439a:	d1f9      	bne.n	8004390 <strcat+0xc>
 800439c:	bd10      	pop	{r4, pc}
 800439e:	4623      	mov	r3, r4
 80043a0:	e7f2      	b.n	8004388 <strcat+0x4>

080043a2 <strcpy>:
 80043a2:	4603      	mov	r3, r0
 80043a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043a8:	f803 2b01 	strb.w	r2, [r3], #1
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	d1f9      	bne.n	80043a4 <strcpy+0x2>
 80043b0:	4770      	bx	lr

080043b2 <strstr>:
 80043b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b4:	7803      	ldrb	r3, [r0, #0]
 80043b6:	b17b      	cbz	r3, 80043d8 <strstr+0x26>
 80043b8:	4604      	mov	r4, r0
 80043ba:	7823      	ldrb	r3, [r4, #0]
 80043bc:	4620      	mov	r0, r4
 80043be:	1c66      	adds	r6, r4, #1
 80043c0:	b17b      	cbz	r3, 80043e2 <strstr+0x30>
 80043c2:	1e4a      	subs	r2, r1, #1
 80043c4:	1e63      	subs	r3, r4, #1
 80043c6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80043ca:	b14d      	cbz	r5, 80043e0 <strstr+0x2e>
 80043cc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80043d0:	42af      	cmp	r7, r5
 80043d2:	4634      	mov	r4, r6
 80043d4:	d0f7      	beq.n	80043c6 <strstr+0x14>
 80043d6:	e7f0      	b.n	80043ba <strstr+0x8>
 80043d8:	780b      	ldrb	r3, [r1, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf18      	it	ne
 80043de:	2000      	movne	r0, #0
 80043e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e2:	4618      	mov	r0, r3
 80043e4:	e7fc      	b.n	80043e0 <strstr+0x2e>
	...

080043e8 <__swbuf_r>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	460e      	mov	r6, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	4605      	mov	r5, r0
 80043f0:	b118      	cbz	r0, 80043fa <__swbuf_r+0x12>
 80043f2:	6983      	ldr	r3, [r0, #24]
 80043f4:	b90b      	cbnz	r3, 80043fa <__swbuf_r+0x12>
 80043f6:	f000 f9a7 	bl	8004748 <__sinit>
 80043fa:	4b21      	ldr	r3, [pc, #132]	; (8004480 <__swbuf_r+0x98>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	d12a      	bne.n	8004456 <__swbuf_r+0x6e>
 8004400:	686c      	ldr	r4, [r5, #4]
 8004402:	69a3      	ldr	r3, [r4, #24]
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	071a      	lsls	r2, r3, #28
 800440a:	d52e      	bpl.n	800446a <__swbuf_r+0x82>
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	b363      	cbz	r3, 800446a <__swbuf_r+0x82>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1ac0      	subs	r0, r0, r3
 8004416:	6963      	ldr	r3, [r4, #20]
 8004418:	b2f6      	uxtb	r6, r6
 800441a:	4283      	cmp	r3, r0
 800441c:	4637      	mov	r7, r6
 800441e:	dc04      	bgt.n	800442a <__swbuf_r+0x42>
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f926 	bl	8004674 <_fflush_r>
 8004428:	bb28      	cbnz	r0, 8004476 <__swbuf_r+0x8e>
 800442a:	68a3      	ldr	r3, [r4, #8]
 800442c:	3b01      	subs	r3, #1
 800442e:	60a3      	str	r3, [r4, #8]
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	6022      	str	r2, [r4, #0]
 8004436:	701e      	strb	r6, [r3, #0]
 8004438:	6963      	ldr	r3, [r4, #20]
 800443a:	3001      	adds	r0, #1
 800443c:	4283      	cmp	r3, r0
 800443e:	d004      	beq.n	800444a <__swbuf_r+0x62>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	07db      	lsls	r3, r3, #31
 8004444:	d519      	bpl.n	800447a <__swbuf_r+0x92>
 8004446:	2e0a      	cmp	r6, #10
 8004448:	d117      	bne.n	800447a <__swbuf_r+0x92>
 800444a:	4621      	mov	r1, r4
 800444c:	4628      	mov	r0, r5
 800444e:	f000 f911 	bl	8004674 <_fflush_r>
 8004452:	b190      	cbz	r0, 800447a <__swbuf_r+0x92>
 8004454:	e00f      	b.n	8004476 <__swbuf_r+0x8e>
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <__swbuf_r+0x9c>)
 8004458:	429c      	cmp	r4, r3
 800445a:	d101      	bne.n	8004460 <__swbuf_r+0x78>
 800445c:	68ac      	ldr	r4, [r5, #8]
 800445e:	e7d0      	b.n	8004402 <__swbuf_r+0x1a>
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <__swbuf_r+0xa0>)
 8004462:	429c      	cmp	r4, r3
 8004464:	bf08      	it	eq
 8004466:	68ec      	ldreq	r4, [r5, #12]
 8004468:	e7cb      	b.n	8004402 <__swbuf_r+0x1a>
 800446a:	4621      	mov	r1, r4
 800446c:	4628      	mov	r0, r5
 800446e:	f000 f80d 	bl	800448c <__swsetup_r>
 8004472:	2800      	cmp	r0, #0
 8004474:	d0cc      	beq.n	8004410 <__swbuf_r+0x28>
 8004476:	f04f 37ff 	mov.w	r7, #4294967295
 800447a:	4638      	mov	r0, r7
 800447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447e:	bf00      	nop
 8004480:	08005ba4 	.word	0x08005ba4
 8004484:	08005bc4 	.word	0x08005bc4
 8004488:	08005b84 	.word	0x08005b84

0800448c <__swsetup_r>:
 800448c:	4b32      	ldr	r3, [pc, #200]	; (8004558 <__swsetup_r+0xcc>)
 800448e:	b570      	push	{r4, r5, r6, lr}
 8004490:	681d      	ldr	r5, [r3, #0]
 8004492:	4606      	mov	r6, r0
 8004494:	460c      	mov	r4, r1
 8004496:	b125      	cbz	r5, 80044a2 <__swsetup_r+0x16>
 8004498:	69ab      	ldr	r3, [r5, #24]
 800449a:	b913      	cbnz	r3, 80044a2 <__swsetup_r+0x16>
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f953 	bl	8004748 <__sinit>
 80044a2:	4b2e      	ldr	r3, [pc, #184]	; (800455c <__swsetup_r+0xd0>)
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d10f      	bne.n	80044c8 <__swsetup_r+0x3c>
 80044a8:	686c      	ldr	r4, [r5, #4]
 80044aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	0715      	lsls	r5, r2, #28
 80044b2:	d42c      	bmi.n	800450e <__swsetup_r+0x82>
 80044b4:	06d0      	lsls	r0, r2, #27
 80044b6:	d411      	bmi.n	80044dc <__swsetup_r+0x50>
 80044b8:	2209      	movs	r2, #9
 80044ba:	6032      	str	r2, [r6, #0]
 80044bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c0:	81a3      	strh	r3, [r4, #12]
 80044c2:	f04f 30ff 	mov.w	r0, #4294967295
 80044c6:	e03e      	b.n	8004546 <__swsetup_r+0xba>
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <__swsetup_r+0xd4>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d101      	bne.n	80044d2 <__swsetup_r+0x46>
 80044ce:	68ac      	ldr	r4, [r5, #8]
 80044d0:	e7eb      	b.n	80044aa <__swsetup_r+0x1e>
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <__swsetup_r+0xd8>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	bf08      	it	eq
 80044d8:	68ec      	ldreq	r4, [r5, #12]
 80044da:	e7e6      	b.n	80044aa <__swsetup_r+0x1e>
 80044dc:	0751      	lsls	r1, r2, #29
 80044de:	d512      	bpl.n	8004506 <__swsetup_r+0x7a>
 80044e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044e2:	b141      	cbz	r1, 80044f6 <__swsetup_r+0x6a>
 80044e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044e8:	4299      	cmp	r1, r3
 80044ea:	d002      	beq.n	80044f2 <__swsetup_r+0x66>
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 fa19 	bl	8004924 <_free_r>
 80044f2:	2300      	movs	r3, #0
 80044f4:	6363      	str	r3, [r4, #52]	; 0x34
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	2300      	movs	r3, #0
 8004500:	6063      	str	r3, [r4, #4]
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	b94b      	cbnz	r3, 8004526 <__swsetup_r+0x9a>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451c:	d003      	beq.n	8004526 <__swsetup_r+0x9a>
 800451e:	4621      	mov	r1, r4
 8004520:	4630      	mov	r0, r6
 8004522:	f000 f9bf 	bl	80048a4 <__smakebuf_r>
 8004526:	89a2      	ldrh	r2, [r4, #12]
 8004528:	f012 0301 	ands.w	r3, r2, #1
 800452c:	d00c      	beq.n	8004548 <__swsetup_r+0xbc>
 800452e:	2300      	movs	r3, #0
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	425b      	negs	r3, r3
 8004536:	61a3      	str	r3, [r4, #24]
 8004538:	6923      	ldr	r3, [r4, #16]
 800453a:	b953      	cbnz	r3, 8004552 <__swsetup_r+0xc6>
 800453c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004540:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004544:	d1ba      	bne.n	80044bc <__swsetup_r+0x30>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	0792      	lsls	r2, r2, #30
 800454a:	bf58      	it	pl
 800454c:	6963      	ldrpl	r3, [r4, #20]
 800454e:	60a3      	str	r3, [r4, #8]
 8004550:	e7f2      	b.n	8004538 <__swsetup_r+0xac>
 8004552:	2000      	movs	r0, #0
 8004554:	e7f7      	b.n	8004546 <__swsetup_r+0xba>
 8004556:	bf00      	nop
 8004558:	20000138 	.word	0x20000138
 800455c:	08005ba4 	.word	0x08005ba4
 8004560:	08005bc4 	.word	0x08005bc4
 8004564:	08005b84 	.word	0x08005b84

08004568 <__sflush_r>:
 8004568:	898a      	ldrh	r2, [r1, #12]
 800456a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	0710      	lsls	r0, r2, #28
 8004572:	460c      	mov	r4, r1
 8004574:	d458      	bmi.n	8004628 <__sflush_r+0xc0>
 8004576:	684b      	ldr	r3, [r1, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	dc05      	bgt.n	8004588 <__sflush_r+0x20>
 800457c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	dc02      	bgt.n	8004588 <__sflush_r+0x20>
 8004582:	2000      	movs	r0, #0
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800458a:	2e00      	cmp	r6, #0
 800458c:	d0f9      	beq.n	8004582 <__sflush_r+0x1a>
 800458e:	2300      	movs	r3, #0
 8004590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004594:	682f      	ldr	r7, [r5, #0]
 8004596:	6a21      	ldr	r1, [r4, #32]
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	d032      	beq.n	8004602 <__sflush_r+0x9a>
 800459c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	075a      	lsls	r2, r3, #29
 80045a2:	d505      	bpl.n	80045b0 <__sflush_r+0x48>
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	1ac0      	subs	r0, r0, r3
 80045a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045aa:	b10b      	cbz	r3, 80045b0 <__sflush_r+0x48>
 80045ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ae:	1ac0      	subs	r0, r0, r3
 80045b0:	2300      	movs	r3, #0
 80045b2:	4602      	mov	r2, r0
 80045b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045b6:	6a21      	ldr	r1, [r4, #32]
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b0      	blx	r6
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	d106      	bne.n	80045d0 <__sflush_r+0x68>
 80045c2:	6829      	ldr	r1, [r5, #0]
 80045c4:	291d      	cmp	r1, #29
 80045c6:	d848      	bhi.n	800465a <__sflush_r+0xf2>
 80045c8:	4a29      	ldr	r2, [pc, #164]	; (8004670 <__sflush_r+0x108>)
 80045ca:	40ca      	lsrs	r2, r1
 80045cc:	07d6      	lsls	r6, r2, #31
 80045ce:	d544      	bpl.n	800465a <__sflush_r+0xf2>
 80045d0:	2200      	movs	r2, #0
 80045d2:	6062      	str	r2, [r4, #4]
 80045d4:	04d9      	lsls	r1, r3, #19
 80045d6:	6922      	ldr	r2, [r4, #16]
 80045d8:	6022      	str	r2, [r4, #0]
 80045da:	d504      	bpl.n	80045e6 <__sflush_r+0x7e>
 80045dc:	1c42      	adds	r2, r0, #1
 80045de:	d101      	bne.n	80045e4 <__sflush_r+0x7c>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b903      	cbnz	r3, 80045e6 <__sflush_r+0x7e>
 80045e4:	6560      	str	r0, [r4, #84]	; 0x54
 80045e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e8:	602f      	str	r7, [r5, #0]
 80045ea:	2900      	cmp	r1, #0
 80045ec:	d0c9      	beq.n	8004582 <__sflush_r+0x1a>
 80045ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045f2:	4299      	cmp	r1, r3
 80045f4:	d002      	beq.n	80045fc <__sflush_r+0x94>
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 f994 	bl	8004924 <_free_r>
 80045fc:	2000      	movs	r0, #0
 80045fe:	6360      	str	r0, [r4, #52]	; 0x34
 8004600:	e7c0      	b.n	8004584 <__sflush_r+0x1c>
 8004602:	2301      	movs	r3, #1
 8004604:	4628      	mov	r0, r5
 8004606:	47b0      	blx	r6
 8004608:	1c41      	adds	r1, r0, #1
 800460a:	d1c8      	bne.n	800459e <__sflush_r+0x36>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0c5      	beq.n	800459e <__sflush_r+0x36>
 8004612:	2b1d      	cmp	r3, #29
 8004614:	d001      	beq.n	800461a <__sflush_r+0xb2>
 8004616:	2b16      	cmp	r3, #22
 8004618:	d101      	bne.n	800461e <__sflush_r+0xb6>
 800461a:	602f      	str	r7, [r5, #0]
 800461c:	e7b1      	b.n	8004582 <__sflush_r+0x1a>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	e7ad      	b.n	8004584 <__sflush_r+0x1c>
 8004628:	690f      	ldr	r7, [r1, #16]
 800462a:	2f00      	cmp	r7, #0
 800462c:	d0a9      	beq.n	8004582 <__sflush_r+0x1a>
 800462e:	0793      	lsls	r3, r2, #30
 8004630:	680e      	ldr	r6, [r1, #0]
 8004632:	bf08      	it	eq
 8004634:	694b      	ldreq	r3, [r1, #20]
 8004636:	600f      	str	r7, [r1, #0]
 8004638:	bf18      	it	ne
 800463a:	2300      	movne	r3, #0
 800463c:	eba6 0807 	sub.w	r8, r6, r7
 8004640:	608b      	str	r3, [r1, #8]
 8004642:	f1b8 0f00 	cmp.w	r8, #0
 8004646:	dd9c      	ble.n	8004582 <__sflush_r+0x1a>
 8004648:	4643      	mov	r3, r8
 800464a:	463a      	mov	r2, r7
 800464c:	6a21      	ldr	r1, [r4, #32]
 800464e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004650:	4628      	mov	r0, r5
 8004652:	47b0      	blx	r6
 8004654:	2800      	cmp	r0, #0
 8004656:	dc06      	bgt.n	8004666 <__sflush_r+0xfe>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e78e      	b.n	8004584 <__sflush_r+0x1c>
 8004666:	4407      	add	r7, r0
 8004668:	eba8 0800 	sub.w	r8, r8, r0
 800466c:	e7e9      	b.n	8004642 <__sflush_r+0xda>
 800466e:	bf00      	nop
 8004670:	20400001 	.word	0x20400001

08004674 <_fflush_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	690b      	ldr	r3, [r1, #16]
 8004678:	4605      	mov	r5, r0
 800467a:	460c      	mov	r4, r1
 800467c:	b1db      	cbz	r3, 80046b6 <_fflush_r+0x42>
 800467e:	b118      	cbz	r0, 8004688 <_fflush_r+0x14>
 8004680:	6983      	ldr	r3, [r0, #24]
 8004682:	b90b      	cbnz	r3, 8004688 <_fflush_r+0x14>
 8004684:	f000 f860 	bl	8004748 <__sinit>
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <_fflush_r+0x48>)
 800468a:	429c      	cmp	r4, r3
 800468c:	d109      	bne.n	80046a2 <_fflush_r+0x2e>
 800468e:	686c      	ldr	r4, [r5, #4]
 8004690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004694:	b17b      	cbz	r3, 80046b6 <_fflush_r+0x42>
 8004696:	4621      	mov	r1, r4
 8004698:	4628      	mov	r0, r5
 800469a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800469e:	f7ff bf63 	b.w	8004568 <__sflush_r>
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <_fflush_r+0x4c>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d101      	bne.n	80046ac <_fflush_r+0x38>
 80046a8:	68ac      	ldr	r4, [r5, #8]
 80046aa:	e7f1      	b.n	8004690 <_fflush_r+0x1c>
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <_fflush_r+0x50>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	bf08      	it	eq
 80046b2:	68ec      	ldreq	r4, [r5, #12]
 80046b4:	e7ec      	b.n	8004690 <_fflush_r+0x1c>
 80046b6:	2000      	movs	r0, #0
 80046b8:	bd38      	pop	{r3, r4, r5, pc}
 80046ba:	bf00      	nop
 80046bc:	08005ba4 	.word	0x08005ba4
 80046c0:	08005bc4 	.word	0x08005bc4
 80046c4:	08005b84 	.word	0x08005b84

080046c8 <std>:
 80046c8:	2300      	movs	r3, #0
 80046ca:	b510      	push	{r4, lr}
 80046cc:	4604      	mov	r4, r0
 80046ce:	e9c0 3300 	strd	r3, r3, [r0]
 80046d2:	6083      	str	r3, [r0, #8]
 80046d4:	8181      	strh	r1, [r0, #12]
 80046d6:	6643      	str	r3, [r0, #100]	; 0x64
 80046d8:	81c2      	strh	r2, [r0, #14]
 80046da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046de:	6183      	str	r3, [r0, #24]
 80046e0:	4619      	mov	r1, r3
 80046e2:	2208      	movs	r2, #8
 80046e4:	305c      	adds	r0, #92	; 0x5c
 80046e6:	f7ff fda9 	bl	800423c <memset>
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <std+0x38>)
 80046ec:	6263      	str	r3, [r4, #36]	; 0x24
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <std+0x3c>)
 80046f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <std+0x40>)
 80046f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <std+0x44>)
 80046f8:	6224      	str	r4, [r4, #32]
 80046fa:	6323      	str	r3, [r4, #48]	; 0x30
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	080052c9 	.word	0x080052c9
 8004704:	080052eb 	.word	0x080052eb
 8004708:	08005323 	.word	0x08005323
 800470c:	08005347 	.word	0x08005347

08004710 <_cleanup_r>:
 8004710:	4901      	ldr	r1, [pc, #4]	; (8004718 <_cleanup_r+0x8>)
 8004712:	f000 b885 	b.w	8004820 <_fwalk_reent>
 8004716:	bf00      	nop
 8004718:	08004675 	.word	0x08004675

0800471c <__sfmoreglue>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	1e4a      	subs	r2, r1, #1
 8004720:	2568      	movs	r5, #104	; 0x68
 8004722:	4355      	muls	r5, r2
 8004724:	460e      	mov	r6, r1
 8004726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800472a:	f000 f949 	bl	80049c0 <_malloc_r>
 800472e:	4604      	mov	r4, r0
 8004730:	b140      	cbz	r0, 8004744 <__sfmoreglue+0x28>
 8004732:	2100      	movs	r1, #0
 8004734:	e9c0 1600 	strd	r1, r6, [r0]
 8004738:	300c      	adds	r0, #12
 800473a:	60a0      	str	r0, [r4, #8]
 800473c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004740:	f7ff fd7c 	bl	800423c <memset>
 8004744:	4620      	mov	r0, r4
 8004746:	bd70      	pop	{r4, r5, r6, pc}

08004748 <__sinit>:
 8004748:	6983      	ldr	r3, [r0, #24]
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	bb33      	cbnz	r3, 800479e <__sinit+0x56>
 8004750:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004754:	6503      	str	r3, [r0, #80]	; 0x50
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <__sinit+0x58>)
 8004758:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <__sinit+0x5c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6282      	str	r2, [r0, #40]	; 0x28
 800475e:	4298      	cmp	r0, r3
 8004760:	bf04      	itt	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	6183      	streq	r3, [r0, #24]
 8004766:	f000 f81f 	bl	80047a8 <__sfp>
 800476a:	6060      	str	r0, [r4, #4]
 800476c:	4620      	mov	r0, r4
 800476e:	f000 f81b 	bl	80047a8 <__sfp>
 8004772:	60a0      	str	r0, [r4, #8]
 8004774:	4620      	mov	r0, r4
 8004776:	f000 f817 	bl	80047a8 <__sfp>
 800477a:	2200      	movs	r2, #0
 800477c:	60e0      	str	r0, [r4, #12]
 800477e:	2104      	movs	r1, #4
 8004780:	6860      	ldr	r0, [r4, #4]
 8004782:	f7ff ffa1 	bl	80046c8 <std>
 8004786:	2201      	movs	r2, #1
 8004788:	2109      	movs	r1, #9
 800478a:	68a0      	ldr	r0, [r4, #8]
 800478c:	f7ff ff9c 	bl	80046c8 <std>
 8004790:	2202      	movs	r2, #2
 8004792:	2112      	movs	r1, #18
 8004794:	68e0      	ldr	r0, [r4, #12]
 8004796:	f7ff ff97 	bl	80046c8 <std>
 800479a:	2301      	movs	r3, #1
 800479c:	61a3      	str	r3, [r4, #24]
 800479e:	bd10      	pop	{r4, pc}
 80047a0:	08005b80 	.word	0x08005b80
 80047a4:	08004711 	.word	0x08004711

080047a8 <__sfp>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <__sfp+0x70>)
 80047ac:	681e      	ldr	r6, [r3, #0]
 80047ae:	69b3      	ldr	r3, [r6, #24]
 80047b0:	4607      	mov	r7, r0
 80047b2:	b913      	cbnz	r3, 80047ba <__sfp+0x12>
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7ff ffc7 	bl	8004748 <__sinit>
 80047ba:	3648      	adds	r6, #72	; 0x48
 80047bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	d503      	bpl.n	80047cc <__sfp+0x24>
 80047c4:	6833      	ldr	r3, [r6, #0]
 80047c6:	b133      	cbz	r3, 80047d6 <__sfp+0x2e>
 80047c8:	6836      	ldr	r6, [r6, #0]
 80047ca:	e7f7      	b.n	80047bc <__sfp+0x14>
 80047cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047d0:	b16d      	cbz	r5, 80047ee <__sfp+0x46>
 80047d2:	3468      	adds	r4, #104	; 0x68
 80047d4:	e7f4      	b.n	80047c0 <__sfp+0x18>
 80047d6:	2104      	movs	r1, #4
 80047d8:	4638      	mov	r0, r7
 80047da:	f7ff ff9f 	bl	800471c <__sfmoreglue>
 80047de:	6030      	str	r0, [r6, #0]
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1f1      	bne.n	80047c8 <__sfp+0x20>
 80047e4:	230c      	movs	r3, #12
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4604      	mov	r4, r0
 80047ea:	4620      	mov	r0, r4
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <__sfp+0x74>)
 80047f0:	6665      	str	r5, [r4, #100]	; 0x64
 80047f2:	e9c4 5500 	strd	r5, r5, [r4]
 80047f6:	60a5      	str	r5, [r4, #8]
 80047f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80047fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004800:	2208      	movs	r2, #8
 8004802:	4629      	mov	r1, r5
 8004804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004808:	f7ff fd18 	bl	800423c <memset>
 800480c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004814:	e7e9      	b.n	80047ea <__sfp+0x42>
 8004816:	bf00      	nop
 8004818:	08005b80 	.word	0x08005b80
 800481c:	ffff0001 	.word	0xffff0001

08004820 <_fwalk_reent>:
 8004820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004824:	4680      	mov	r8, r0
 8004826:	4689      	mov	r9, r1
 8004828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800482c:	2600      	movs	r6, #0
 800482e:	b914      	cbnz	r4, 8004836 <_fwalk_reent+0x16>
 8004830:	4630      	mov	r0, r6
 8004832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004836:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800483a:	3f01      	subs	r7, #1
 800483c:	d501      	bpl.n	8004842 <_fwalk_reent+0x22>
 800483e:	6824      	ldr	r4, [r4, #0]
 8004840:	e7f5      	b.n	800482e <_fwalk_reent+0xe>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d907      	bls.n	8004858 <_fwalk_reent+0x38>
 8004848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800484c:	3301      	adds	r3, #1
 800484e:	d003      	beq.n	8004858 <_fwalk_reent+0x38>
 8004850:	4629      	mov	r1, r5
 8004852:	4640      	mov	r0, r8
 8004854:	47c8      	blx	r9
 8004856:	4306      	orrs	r6, r0
 8004858:	3568      	adds	r5, #104	; 0x68
 800485a:	e7ee      	b.n	800483a <_fwalk_reent+0x1a>

0800485c <__swhatbuf_r>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	460e      	mov	r6, r1
 8004860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004864:	2900      	cmp	r1, #0
 8004866:	b096      	sub	sp, #88	; 0x58
 8004868:	4614      	mov	r4, r2
 800486a:	461d      	mov	r5, r3
 800486c:	da07      	bge.n	800487e <__swhatbuf_r+0x22>
 800486e:	2300      	movs	r3, #0
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	89b3      	ldrh	r3, [r6, #12]
 8004874:	061a      	lsls	r2, r3, #24
 8004876:	d410      	bmi.n	800489a <__swhatbuf_r+0x3e>
 8004878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487c:	e00e      	b.n	800489c <__swhatbuf_r+0x40>
 800487e:	466a      	mov	r2, sp
 8004880:	f000 fd88 	bl	8005394 <_fstat_r>
 8004884:	2800      	cmp	r0, #0
 8004886:	dbf2      	blt.n	800486e <__swhatbuf_r+0x12>
 8004888:	9a01      	ldr	r2, [sp, #4]
 800488a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800488e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004892:	425a      	negs	r2, r3
 8004894:	415a      	adcs	r2, r3
 8004896:	602a      	str	r2, [r5, #0]
 8004898:	e7ee      	b.n	8004878 <__swhatbuf_r+0x1c>
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	2000      	movs	r0, #0
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	b016      	add	sp, #88	; 0x58
 80048a2:	bd70      	pop	{r4, r5, r6, pc}

080048a4 <__smakebuf_r>:
 80048a4:	898b      	ldrh	r3, [r1, #12]
 80048a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048a8:	079d      	lsls	r5, r3, #30
 80048aa:	4606      	mov	r6, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	d507      	bpl.n	80048c0 <__smakebuf_r+0x1c>
 80048b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	2301      	movs	r3, #1
 80048ba:	6163      	str	r3, [r4, #20]
 80048bc:	b002      	add	sp, #8
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	ab01      	add	r3, sp, #4
 80048c2:	466a      	mov	r2, sp
 80048c4:	f7ff ffca 	bl	800485c <__swhatbuf_r>
 80048c8:	9900      	ldr	r1, [sp, #0]
 80048ca:	4605      	mov	r5, r0
 80048cc:	4630      	mov	r0, r6
 80048ce:	f000 f877 	bl	80049c0 <_malloc_r>
 80048d2:	b948      	cbnz	r0, 80048e8 <__smakebuf_r+0x44>
 80048d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d8:	059a      	lsls	r2, r3, #22
 80048da:	d4ef      	bmi.n	80048bc <__smakebuf_r+0x18>
 80048dc:	f023 0303 	bic.w	r3, r3, #3
 80048e0:	f043 0302 	orr.w	r3, r3, #2
 80048e4:	81a3      	strh	r3, [r4, #12]
 80048e6:	e7e3      	b.n	80048b0 <__smakebuf_r+0xc>
 80048e8:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <__smakebuf_r+0x7c>)
 80048ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	6020      	str	r0, [r4, #0]
 80048f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	9b00      	ldr	r3, [sp, #0]
 80048f8:	6163      	str	r3, [r4, #20]
 80048fa:	9b01      	ldr	r3, [sp, #4]
 80048fc:	6120      	str	r0, [r4, #16]
 80048fe:	b15b      	cbz	r3, 8004918 <__smakebuf_r+0x74>
 8004900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004904:	4630      	mov	r0, r6
 8004906:	f000 fd57 	bl	80053b8 <_isatty_r>
 800490a:	b128      	cbz	r0, 8004918 <__smakebuf_r+0x74>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	431d      	orrs	r5, r3
 800491c:	81a5      	strh	r5, [r4, #12]
 800491e:	e7cd      	b.n	80048bc <__smakebuf_r+0x18>
 8004920:	08004711 	.word	0x08004711

08004924 <_free_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4605      	mov	r5, r0
 8004928:	2900      	cmp	r1, #0
 800492a:	d045      	beq.n	80049b8 <_free_r+0x94>
 800492c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004930:	1f0c      	subs	r4, r1, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	bfb8      	it	lt
 8004936:	18e4      	addlt	r4, r4, r3
 8004938:	f000 fd84 	bl	8005444 <__malloc_lock>
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <_free_r+0x98>)
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	4610      	mov	r0, r2
 8004942:	b933      	cbnz	r3, 8004952 <_free_r+0x2e>
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6014      	str	r4, [r2, #0]
 8004948:	4628      	mov	r0, r5
 800494a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800494e:	f000 bd7a 	b.w	8005446 <__malloc_unlock>
 8004952:	42a3      	cmp	r3, r4
 8004954:	d90c      	bls.n	8004970 <_free_r+0x4c>
 8004956:	6821      	ldr	r1, [r4, #0]
 8004958:	1862      	adds	r2, r4, r1
 800495a:	4293      	cmp	r3, r2
 800495c:	bf04      	itt	eq
 800495e:	681a      	ldreq	r2, [r3, #0]
 8004960:	685b      	ldreq	r3, [r3, #4]
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	bf04      	itt	eq
 8004966:	1852      	addeq	r2, r2, r1
 8004968:	6022      	streq	r2, [r4, #0]
 800496a:	6004      	str	r4, [r0, #0]
 800496c:	e7ec      	b.n	8004948 <_free_r+0x24>
 800496e:	4613      	mov	r3, r2
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	b10a      	cbz	r2, 8004978 <_free_r+0x54>
 8004974:	42a2      	cmp	r2, r4
 8004976:	d9fa      	bls.n	800496e <_free_r+0x4a>
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	1858      	adds	r0, r3, r1
 800497c:	42a0      	cmp	r0, r4
 800497e:	d10b      	bne.n	8004998 <_free_r+0x74>
 8004980:	6820      	ldr	r0, [r4, #0]
 8004982:	4401      	add	r1, r0
 8004984:	1858      	adds	r0, r3, r1
 8004986:	4282      	cmp	r2, r0
 8004988:	6019      	str	r1, [r3, #0]
 800498a:	d1dd      	bne.n	8004948 <_free_r+0x24>
 800498c:	6810      	ldr	r0, [r2, #0]
 800498e:	6852      	ldr	r2, [r2, #4]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	4401      	add	r1, r0
 8004994:	6019      	str	r1, [r3, #0]
 8004996:	e7d7      	b.n	8004948 <_free_r+0x24>
 8004998:	d902      	bls.n	80049a0 <_free_r+0x7c>
 800499a:	230c      	movs	r3, #12
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	e7d3      	b.n	8004948 <_free_r+0x24>
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	1821      	adds	r1, r4, r0
 80049a4:	428a      	cmp	r2, r1
 80049a6:	bf04      	itt	eq
 80049a8:	6811      	ldreq	r1, [r2, #0]
 80049aa:	6852      	ldreq	r2, [r2, #4]
 80049ac:	6062      	str	r2, [r4, #4]
 80049ae:	bf04      	itt	eq
 80049b0:	1809      	addeq	r1, r1, r0
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	605c      	str	r4, [r3, #4]
 80049b6:	e7c7      	b.n	8004948 <_free_r+0x24>
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
 80049ba:	bf00      	nop
 80049bc:	200005c8 	.word	0x200005c8

080049c0 <_malloc_r>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	1ccd      	adds	r5, r1, #3
 80049c4:	f025 0503 	bic.w	r5, r5, #3
 80049c8:	3508      	adds	r5, #8
 80049ca:	2d0c      	cmp	r5, #12
 80049cc:	bf38      	it	cc
 80049ce:	250c      	movcc	r5, #12
 80049d0:	2d00      	cmp	r5, #0
 80049d2:	4606      	mov	r6, r0
 80049d4:	db01      	blt.n	80049da <_malloc_r+0x1a>
 80049d6:	42a9      	cmp	r1, r5
 80049d8:	d903      	bls.n	80049e2 <_malloc_r+0x22>
 80049da:	230c      	movs	r3, #12
 80049dc:	6033      	str	r3, [r6, #0]
 80049de:	2000      	movs	r0, #0
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
 80049e2:	f000 fd2f 	bl	8005444 <__malloc_lock>
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <_malloc_r+0xac>)
 80049e8:	6814      	ldr	r4, [r2, #0]
 80049ea:	4621      	mov	r1, r4
 80049ec:	b991      	cbnz	r1, 8004a14 <_malloc_r+0x54>
 80049ee:	4c20      	ldr	r4, [pc, #128]	; (8004a70 <_malloc_r+0xb0>)
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	b91b      	cbnz	r3, 80049fc <_malloc_r+0x3c>
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 fc57 	bl	80052a8 <_sbrk_r>
 80049fa:	6020      	str	r0, [r4, #0]
 80049fc:	4629      	mov	r1, r5
 80049fe:	4630      	mov	r0, r6
 8004a00:	f000 fc52 	bl	80052a8 <_sbrk_r>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d124      	bne.n	8004a52 <_malloc_r+0x92>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	6033      	str	r3, [r6, #0]
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f000 fd1a 	bl	8005446 <__malloc_unlock>
 8004a12:	e7e4      	b.n	80049de <_malloc_r+0x1e>
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	1b5b      	subs	r3, r3, r5
 8004a18:	d418      	bmi.n	8004a4c <_malloc_r+0x8c>
 8004a1a:	2b0b      	cmp	r3, #11
 8004a1c:	d90f      	bls.n	8004a3e <_malloc_r+0x7e>
 8004a1e:	600b      	str	r3, [r1, #0]
 8004a20:	50cd      	str	r5, [r1, r3]
 8004a22:	18cc      	adds	r4, r1, r3
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 fd0e 	bl	8005446 <__malloc_unlock>
 8004a2a:	f104 000b 	add.w	r0, r4, #11
 8004a2e:	1d23      	adds	r3, r4, #4
 8004a30:	f020 0007 	bic.w	r0, r0, #7
 8004a34:	1ac3      	subs	r3, r0, r3
 8004a36:	d0d3      	beq.n	80049e0 <_malloc_r+0x20>
 8004a38:	425a      	negs	r2, r3
 8004a3a:	50e2      	str	r2, [r4, r3]
 8004a3c:	e7d0      	b.n	80049e0 <_malloc_r+0x20>
 8004a3e:	428c      	cmp	r4, r1
 8004a40:	684b      	ldr	r3, [r1, #4]
 8004a42:	bf16      	itet	ne
 8004a44:	6063      	strne	r3, [r4, #4]
 8004a46:	6013      	streq	r3, [r2, #0]
 8004a48:	460c      	movne	r4, r1
 8004a4a:	e7eb      	b.n	8004a24 <_malloc_r+0x64>
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	6849      	ldr	r1, [r1, #4]
 8004a50:	e7cc      	b.n	80049ec <_malloc_r+0x2c>
 8004a52:	1cc4      	adds	r4, r0, #3
 8004a54:	f024 0403 	bic.w	r4, r4, #3
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d005      	beq.n	8004a68 <_malloc_r+0xa8>
 8004a5c:	1a21      	subs	r1, r4, r0
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f000 fc22 	bl	80052a8 <_sbrk_r>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d0cf      	beq.n	8004a08 <_malloc_r+0x48>
 8004a68:	6025      	str	r5, [r4, #0]
 8004a6a:	e7db      	b.n	8004a24 <_malloc_r+0x64>
 8004a6c:	200005c8 	.word	0x200005c8
 8004a70:	200005cc 	.word	0x200005cc

08004a74 <__ssputs_r>:
 8004a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	688e      	ldr	r6, [r1, #8]
 8004a7a:	429e      	cmp	r6, r3
 8004a7c:	4682      	mov	sl, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4690      	mov	r8, r2
 8004a82:	4699      	mov	r9, r3
 8004a84:	d837      	bhi.n	8004af6 <__ssputs_r+0x82>
 8004a86:	898a      	ldrh	r2, [r1, #12]
 8004a88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a8c:	d031      	beq.n	8004af2 <__ssputs_r+0x7e>
 8004a8e:	6825      	ldr	r5, [r4, #0]
 8004a90:	6909      	ldr	r1, [r1, #16]
 8004a92:	1a6f      	subs	r7, r5, r1
 8004a94:	6965      	ldr	r5, [r4, #20]
 8004a96:	2302      	movs	r3, #2
 8004a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004aa0:	f109 0301 	add.w	r3, r9, #1
 8004aa4:	443b      	add	r3, r7
 8004aa6:	429d      	cmp	r5, r3
 8004aa8:	bf38      	it	cc
 8004aaa:	461d      	movcc	r5, r3
 8004aac:	0553      	lsls	r3, r2, #21
 8004aae:	d530      	bpl.n	8004b12 <__ssputs_r+0x9e>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7ff ff85 	bl	80049c0 <_malloc_r>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	b950      	cbnz	r0, 8004ad0 <__ssputs_r+0x5c>
 8004aba:	230c      	movs	r3, #12
 8004abc:	f8ca 3000 	str.w	r3, [sl]
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	6921      	ldr	r1, [r4, #16]
 8004ad4:	f000 fc92 	bl	80053fc <memcpy>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	6126      	str	r6, [r4, #16]
 8004ae6:	6165      	str	r5, [r4, #20]
 8004ae8:	443e      	add	r6, r7
 8004aea:	1bed      	subs	r5, r5, r7
 8004aec:	6026      	str	r6, [r4, #0]
 8004aee:	60a5      	str	r5, [r4, #8]
 8004af0:	464e      	mov	r6, r9
 8004af2:	454e      	cmp	r6, r9
 8004af4:	d900      	bls.n	8004af8 <__ssputs_r+0x84>
 8004af6:	464e      	mov	r6, r9
 8004af8:	4632      	mov	r2, r6
 8004afa:	4641      	mov	r1, r8
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	f000 fc88 	bl	8005412 <memmove>
 8004b02:	68a3      	ldr	r3, [r4, #8]
 8004b04:	1b9b      	subs	r3, r3, r6
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	441e      	add	r6, r3
 8004b0c:	6026      	str	r6, [r4, #0]
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e7dc      	b.n	8004acc <__ssputs_r+0x58>
 8004b12:	462a      	mov	r2, r5
 8004b14:	f000 fc98 	bl	8005448 <_realloc_r>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1e2      	bne.n	8004ae4 <__ssputs_r+0x70>
 8004b1e:	6921      	ldr	r1, [r4, #16]
 8004b20:	4650      	mov	r0, sl
 8004b22:	f7ff feff 	bl	8004924 <_free_r>
 8004b26:	e7c8      	b.n	8004aba <__ssputs_r+0x46>

08004b28 <_svfiprintf_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	461d      	mov	r5, r3
 8004b2e:	898b      	ldrh	r3, [r1, #12]
 8004b30:	061f      	lsls	r7, r3, #24
 8004b32:	b09d      	sub	sp, #116	; 0x74
 8004b34:	4680      	mov	r8, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4616      	mov	r6, r2
 8004b3a:	d50f      	bpl.n	8004b5c <_svfiprintf_r+0x34>
 8004b3c:	690b      	ldr	r3, [r1, #16]
 8004b3e:	b96b      	cbnz	r3, 8004b5c <_svfiprintf_r+0x34>
 8004b40:	2140      	movs	r1, #64	; 0x40
 8004b42:	f7ff ff3d 	bl	80049c0 <_malloc_r>
 8004b46:	6020      	str	r0, [r4, #0]
 8004b48:	6120      	str	r0, [r4, #16]
 8004b4a:	b928      	cbnz	r0, 8004b58 <_svfiprintf_r+0x30>
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	f8c8 3000 	str.w	r3, [r8]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e0c8      	b.n	8004cea <_svfiprintf_r+0x1c2>
 8004b58:	2340      	movs	r3, #64	; 0x40
 8004b5a:	6163      	str	r3, [r4, #20]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b60:	2320      	movs	r3, #32
 8004b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b66:	2330      	movs	r3, #48	; 0x30
 8004b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6c:	9503      	str	r5, [sp, #12]
 8004b6e:	f04f 0b01 	mov.w	fp, #1
 8004b72:	4637      	mov	r7, r6
 8004b74:	463d      	mov	r5, r7
 8004b76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b7a:	b10b      	cbz	r3, 8004b80 <_svfiprintf_r+0x58>
 8004b7c:	2b25      	cmp	r3, #37	; 0x25
 8004b7e:	d13e      	bne.n	8004bfe <_svfiprintf_r+0xd6>
 8004b80:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b84:	d00b      	beq.n	8004b9e <_svfiprintf_r+0x76>
 8004b86:	4653      	mov	r3, sl
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	f7ff ff71 	bl	8004a74 <__ssputs_r>
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 80a4 	beq.w	8004ce0 <_svfiprintf_r+0x1b8>
 8004b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9a:	4453      	add	r3, sl
 8004b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9e:	783b      	ldrb	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 809d 	beq.w	8004ce0 <_svfiprintf_r+0x1b8>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	9307      	str	r3, [sp, #28]
 8004bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004bba:	462f      	mov	r7, r5
 8004bbc:	2205      	movs	r2, #5
 8004bbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004bc2:	4850      	ldr	r0, [pc, #320]	; (8004d04 <_svfiprintf_r+0x1dc>)
 8004bc4:	f7fb fb24 	bl	8000210 <memchr>
 8004bc8:	9b04      	ldr	r3, [sp, #16]
 8004bca:	b9d0      	cbnz	r0, 8004c02 <_svfiprintf_r+0xda>
 8004bcc:	06d9      	lsls	r1, r3, #27
 8004bce:	bf44      	itt	mi
 8004bd0:	2220      	movmi	r2, #32
 8004bd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bd6:	071a      	lsls	r2, r3, #28
 8004bd8:	bf44      	itt	mi
 8004bda:	222b      	movmi	r2, #43	; 0x2b
 8004bdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004be0:	782a      	ldrb	r2, [r5, #0]
 8004be2:	2a2a      	cmp	r2, #42	; 0x2a
 8004be4:	d015      	beq.n	8004c12 <_svfiprintf_r+0xea>
 8004be6:	9a07      	ldr	r2, [sp, #28]
 8004be8:	462f      	mov	r7, r5
 8004bea:	2000      	movs	r0, #0
 8004bec:	250a      	movs	r5, #10
 8004bee:	4639      	mov	r1, r7
 8004bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bf4:	3b30      	subs	r3, #48	; 0x30
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d94d      	bls.n	8004c96 <_svfiprintf_r+0x16e>
 8004bfa:	b1b8      	cbz	r0, 8004c2c <_svfiprintf_r+0x104>
 8004bfc:	e00f      	b.n	8004c1e <_svfiprintf_r+0xf6>
 8004bfe:	462f      	mov	r7, r5
 8004c00:	e7b8      	b.n	8004b74 <_svfiprintf_r+0x4c>
 8004c02:	4a40      	ldr	r2, [pc, #256]	; (8004d04 <_svfiprintf_r+0x1dc>)
 8004c04:	1a80      	subs	r0, r0, r2
 8004c06:	fa0b f000 	lsl.w	r0, fp, r0
 8004c0a:	4318      	orrs	r0, r3
 8004c0c:	9004      	str	r0, [sp, #16]
 8004c0e:	463d      	mov	r5, r7
 8004c10:	e7d3      	b.n	8004bba <_svfiprintf_r+0x92>
 8004c12:	9a03      	ldr	r2, [sp, #12]
 8004c14:	1d11      	adds	r1, r2, #4
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	9103      	str	r1, [sp, #12]
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	db01      	blt.n	8004c22 <_svfiprintf_r+0xfa>
 8004c1e:	9207      	str	r2, [sp, #28]
 8004c20:	e004      	b.n	8004c2c <_svfiprintf_r+0x104>
 8004c22:	4252      	negs	r2, r2
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	9207      	str	r2, [sp, #28]
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	783b      	ldrb	r3, [r7, #0]
 8004c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c30:	d10c      	bne.n	8004c4c <_svfiprintf_r+0x124>
 8004c32:	787b      	ldrb	r3, [r7, #1]
 8004c34:	2b2a      	cmp	r3, #42	; 0x2a
 8004c36:	d133      	bne.n	8004ca0 <_svfiprintf_r+0x178>
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	9203      	str	r2, [sp, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bfb8      	it	lt
 8004c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c48:	3702      	adds	r7, #2
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	4d2e      	ldr	r5, [pc, #184]	; (8004d08 <_svfiprintf_r+0x1e0>)
 8004c4e:	7839      	ldrb	r1, [r7, #0]
 8004c50:	2203      	movs	r2, #3
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7fb fadc 	bl	8000210 <memchr>
 8004c58:	b138      	cbz	r0, 8004c6a <_svfiprintf_r+0x142>
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	1b40      	subs	r0, r0, r5
 8004c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	4303      	orrs	r3, r0
 8004c66:	3701      	adds	r7, #1
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	7839      	ldrb	r1, [r7, #0]
 8004c6c:	4827      	ldr	r0, [pc, #156]	; (8004d0c <_svfiprintf_r+0x1e4>)
 8004c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c72:	2206      	movs	r2, #6
 8004c74:	1c7e      	adds	r6, r7, #1
 8004c76:	f7fb facb 	bl	8000210 <memchr>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d038      	beq.n	8004cf0 <_svfiprintf_r+0x1c8>
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <_svfiprintf_r+0x1e8>)
 8004c80:	bb13      	cbnz	r3, 8004cc8 <_svfiprintf_r+0x1a0>
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	3307      	adds	r3, #7
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c90:	444b      	add	r3, r9
 8004c92:	9309      	str	r3, [sp, #36]	; 0x24
 8004c94:	e76d      	b.n	8004b72 <_svfiprintf_r+0x4a>
 8004c96:	fb05 3202 	mla	r2, r5, r2, r3
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	460f      	mov	r7, r1
 8004c9e:	e7a6      	b.n	8004bee <_svfiprintf_r+0xc6>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	3701      	adds	r7, #1
 8004ca4:	9305      	str	r3, [sp, #20]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	250a      	movs	r5, #10
 8004caa:	4638      	mov	r0, r7
 8004cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb0:	3a30      	subs	r2, #48	; 0x30
 8004cb2:	2a09      	cmp	r2, #9
 8004cb4:	d903      	bls.n	8004cbe <_svfiprintf_r+0x196>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0c8      	beq.n	8004c4c <_svfiprintf_r+0x124>
 8004cba:	9105      	str	r1, [sp, #20]
 8004cbc:	e7c6      	b.n	8004c4c <_svfiprintf_r+0x124>
 8004cbe:	fb05 2101 	mla	r1, r5, r1, r2
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	e7f0      	b.n	8004caa <_svfiprintf_r+0x182>
 8004cc8:	ab03      	add	r3, sp, #12
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <_svfiprintf_r+0x1ec>)
 8004cd0:	a904      	add	r1, sp, #16
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f3af 8000 	nop.w
 8004cd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004cdc:	4681      	mov	r9, r0
 8004cde:	d1d6      	bne.n	8004c8e <_svfiprintf_r+0x166>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	065b      	lsls	r3, r3, #25
 8004ce4:	f53f af35 	bmi.w	8004b52 <_svfiprintf_r+0x2a>
 8004ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cea:	b01d      	add	sp, #116	; 0x74
 8004cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf0:	ab03      	add	r3, sp, #12
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <_svfiprintf_r+0x1ec>)
 8004cf8:	a904      	add	r1, sp, #16
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f000 f9c2 	bl	8005084 <_printf_i>
 8004d00:	e7ea      	b.n	8004cd8 <_svfiprintf_r+0x1b0>
 8004d02:	bf00      	nop
 8004d04:	08005be4 	.word	0x08005be4
 8004d08:	08005bea 	.word	0x08005bea
 8004d0c:	08005bee 	.word	0x08005bee
 8004d10:	00000000 	.word	0x00000000
 8004d14:	08004a75 	.word	0x08004a75

08004d18 <__sfputc_r>:
 8004d18:	6893      	ldr	r3, [r2, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	b410      	push	{r4}
 8004d20:	6093      	str	r3, [r2, #8]
 8004d22:	da08      	bge.n	8004d36 <__sfputc_r+0x1e>
 8004d24:	6994      	ldr	r4, [r2, #24]
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	db01      	blt.n	8004d2e <__sfputc_r+0x16>
 8004d2a:	290a      	cmp	r1, #10
 8004d2c:	d103      	bne.n	8004d36 <__sfputc_r+0x1e>
 8004d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d32:	f7ff bb59 	b.w	80043e8 <__swbuf_r>
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	1c58      	adds	r0, r3, #1
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	7019      	strb	r1, [r3, #0]
 8004d3e:	4608      	mov	r0, r1
 8004d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <__sfputs_r>:
 8004d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d48:	4606      	mov	r6, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	18d5      	adds	r5, r2, r3
 8004d50:	42ac      	cmp	r4, r5
 8004d52:	d101      	bne.n	8004d58 <__sfputs_r+0x12>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e007      	b.n	8004d68 <__sfputs_r+0x22>
 8004d58:	463a      	mov	r2, r7
 8004d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f7ff ffda 	bl	8004d18 <__sfputc_r>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d1f3      	bne.n	8004d50 <__sfputs_r+0xa>
 8004d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d6c <_vfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	460c      	mov	r4, r1
 8004d72:	b09d      	sub	sp, #116	; 0x74
 8004d74:	4617      	mov	r7, r2
 8004d76:	461d      	mov	r5, r3
 8004d78:	4606      	mov	r6, r0
 8004d7a:	b118      	cbz	r0, 8004d84 <_vfiprintf_r+0x18>
 8004d7c:	6983      	ldr	r3, [r0, #24]
 8004d7e:	b90b      	cbnz	r3, 8004d84 <_vfiprintf_r+0x18>
 8004d80:	f7ff fce2 	bl	8004748 <__sinit>
 8004d84:	4b7c      	ldr	r3, [pc, #496]	; (8004f78 <_vfiprintf_r+0x20c>)
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d158      	bne.n	8004e3c <_vfiprintf_r+0xd0>
 8004d8a:	6874      	ldr	r4, [r6, #4]
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	0718      	lsls	r0, r3, #28
 8004d90:	d55e      	bpl.n	8004e50 <_vfiprintf_r+0xe4>
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05b      	beq.n	8004e50 <_vfiprintf_r+0xe4>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da2:	2330      	movs	r3, #48	; 0x30
 8004da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004da8:	9503      	str	r5, [sp, #12]
 8004daa:	f04f 0b01 	mov.w	fp, #1
 8004dae:	46b8      	mov	r8, r7
 8004db0:	4645      	mov	r5, r8
 8004db2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004db6:	b10b      	cbz	r3, 8004dbc <_vfiprintf_r+0x50>
 8004db8:	2b25      	cmp	r3, #37	; 0x25
 8004dba:	d154      	bne.n	8004e66 <_vfiprintf_r+0xfa>
 8004dbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8004dc0:	d00b      	beq.n	8004dda <_vfiprintf_r+0x6e>
 8004dc2:	4653      	mov	r3, sl
 8004dc4:	463a      	mov	r2, r7
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f7ff ffbc 	bl	8004d46 <__sfputs_r>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f000 80c2 	beq.w	8004f58 <_vfiprintf_r+0x1ec>
 8004dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd6:	4453      	add	r3, sl
 8004dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dda:	f898 3000 	ldrb.w	r3, [r8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80ba 	beq.w	8004f58 <_vfiprintf_r+0x1ec>
 8004de4:	2300      	movs	r3, #0
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	9307      	str	r3, [sp, #28]
 8004df2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004df6:	931a      	str	r3, [sp, #104]	; 0x68
 8004df8:	46a8      	mov	r8, r5
 8004dfa:	2205      	movs	r2, #5
 8004dfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004e00:	485e      	ldr	r0, [pc, #376]	; (8004f7c <_vfiprintf_r+0x210>)
 8004e02:	f7fb fa05 	bl	8000210 <memchr>
 8004e06:	9b04      	ldr	r3, [sp, #16]
 8004e08:	bb78      	cbnz	r0, 8004e6a <_vfiprintf_r+0xfe>
 8004e0a:	06d9      	lsls	r1, r3, #27
 8004e0c:	bf44      	itt	mi
 8004e0e:	2220      	movmi	r2, #32
 8004e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e14:	071a      	lsls	r2, r3, #28
 8004e16:	bf44      	itt	mi
 8004e18:	222b      	movmi	r2, #43	; 0x2b
 8004e1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e1e:	782a      	ldrb	r2, [r5, #0]
 8004e20:	2a2a      	cmp	r2, #42	; 0x2a
 8004e22:	d02a      	beq.n	8004e7a <_vfiprintf_r+0x10e>
 8004e24:	9a07      	ldr	r2, [sp, #28]
 8004e26:	46a8      	mov	r8, r5
 8004e28:	2000      	movs	r0, #0
 8004e2a:	250a      	movs	r5, #10
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e32:	3b30      	subs	r3, #48	; 0x30
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	d969      	bls.n	8004f0c <_vfiprintf_r+0x1a0>
 8004e38:	b360      	cbz	r0, 8004e94 <_vfiprintf_r+0x128>
 8004e3a:	e024      	b.n	8004e86 <_vfiprintf_r+0x11a>
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <_vfiprintf_r+0x214>)
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d101      	bne.n	8004e46 <_vfiprintf_r+0xda>
 8004e42:	68b4      	ldr	r4, [r6, #8]
 8004e44:	e7a2      	b.n	8004d8c <_vfiprintf_r+0x20>
 8004e46:	4b4f      	ldr	r3, [pc, #316]	; (8004f84 <_vfiprintf_r+0x218>)
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	bf08      	it	eq
 8004e4c:	68f4      	ldreq	r4, [r6, #12]
 8004e4e:	e79d      	b.n	8004d8c <_vfiprintf_r+0x20>
 8004e50:	4621      	mov	r1, r4
 8004e52:	4630      	mov	r0, r6
 8004e54:	f7ff fb1a 	bl	800448c <__swsetup_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d09d      	beq.n	8004d98 <_vfiprintf_r+0x2c>
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	b01d      	add	sp, #116	; 0x74
 8004e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e66:	46a8      	mov	r8, r5
 8004e68:	e7a2      	b.n	8004db0 <_vfiprintf_r+0x44>
 8004e6a:	4a44      	ldr	r2, [pc, #272]	; (8004f7c <_vfiprintf_r+0x210>)
 8004e6c:	1a80      	subs	r0, r0, r2
 8004e6e:	fa0b f000 	lsl.w	r0, fp, r0
 8004e72:	4318      	orrs	r0, r3
 8004e74:	9004      	str	r0, [sp, #16]
 8004e76:	4645      	mov	r5, r8
 8004e78:	e7be      	b.n	8004df8 <_vfiprintf_r+0x8c>
 8004e7a:	9a03      	ldr	r2, [sp, #12]
 8004e7c:	1d11      	adds	r1, r2, #4
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	9103      	str	r1, [sp, #12]
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	db01      	blt.n	8004e8a <_vfiprintf_r+0x11e>
 8004e86:	9207      	str	r2, [sp, #28]
 8004e88:	e004      	b.n	8004e94 <_vfiprintf_r+0x128>
 8004e8a:	4252      	negs	r2, r2
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	9207      	str	r2, [sp, #28]
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	f898 3000 	ldrb.w	r3, [r8]
 8004e98:	2b2e      	cmp	r3, #46	; 0x2e
 8004e9a:	d10e      	bne.n	8004eba <_vfiprintf_r+0x14e>
 8004e9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea2:	d138      	bne.n	8004f16 <_vfiprintf_r+0x1aa>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	9203      	str	r2, [sp, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bfb8      	it	lt
 8004eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eb4:	f108 0802 	add.w	r8, r8, #2
 8004eb8:	9305      	str	r3, [sp, #20]
 8004eba:	4d33      	ldr	r5, [pc, #204]	; (8004f88 <_vfiprintf_r+0x21c>)
 8004ebc:	f898 1000 	ldrb.w	r1, [r8]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f7fb f9a4 	bl	8000210 <memchr>
 8004ec8:	b140      	cbz	r0, 8004edc <_vfiprintf_r+0x170>
 8004eca:	2340      	movs	r3, #64	; 0x40
 8004ecc:	1b40      	subs	r0, r0, r5
 8004ece:	fa03 f000 	lsl.w	r0, r3, r0
 8004ed2:	9b04      	ldr	r3, [sp, #16]
 8004ed4:	4303      	orrs	r3, r0
 8004ed6:	f108 0801 	add.w	r8, r8, #1
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	f898 1000 	ldrb.w	r1, [r8]
 8004ee0:	482a      	ldr	r0, [pc, #168]	; (8004f8c <_vfiprintf_r+0x220>)
 8004ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ee6:	2206      	movs	r2, #6
 8004ee8:	f108 0701 	add.w	r7, r8, #1
 8004eec:	f7fb f990 	bl	8000210 <memchr>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d037      	beq.n	8004f64 <_vfiprintf_r+0x1f8>
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <_vfiprintf_r+0x224>)
 8004ef6:	bb1b      	cbnz	r3, 8004f40 <_vfiprintf_r+0x1d4>
 8004ef8:	9b03      	ldr	r3, [sp, #12]
 8004efa:	3307      	adds	r3, #7
 8004efc:	f023 0307 	bic.w	r3, r3, #7
 8004f00:	3308      	adds	r3, #8
 8004f02:	9303      	str	r3, [sp, #12]
 8004f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f06:	444b      	add	r3, r9
 8004f08:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0a:	e750      	b.n	8004dae <_vfiprintf_r+0x42>
 8004f0c:	fb05 3202 	mla	r2, r5, r2, r3
 8004f10:	2001      	movs	r0, #1
 8004f12:	4688      	mov	r8, r1
 8004f14:	e78a      	b.n	8004e2c <_vfiprintf_r+0xc0>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f108 0801 	add.w	r8, r8, #1
 8004f1c:	9305      	str	r3, [sp, #20]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	250a      	movs	r5, #10
 8004f22:	4640      	mov	r0, r8
 8004f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f28:	3a30      	subs	r2, #48	; 0x30
 8004f2a:	2a09      	cmp	r2, #9
 8004f2c:	d903      	bls.n	8004f36 <_vfiprintf_r+0x1ca>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0c3      	beq.n	8004eba <_vfiprintf_r+0x14e>
 8004f32:	9105      	str	r1, [sp, #20]
 8004f34:	e7c1      	b.n	8004eba <_vfiprintf_r+0x14e>
 8004f36:	fb05 2101 	mla	r1, r5, r1, r2
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	e7f0      	b.n	8004f22 <_vfiprintf_r+0x1b6>
 8004f40:	ab03      	add	r3, sp, #12
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4622      	mov	r2, r4
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <_vfiprintf_r+0x228>)
 8004f48:	a904      	add	r1, sp, #16
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f3af 8000 	nop.w
 8004f50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f54:	4681      	mov	r9, r0
 8004f56:	d1d5      	bne.n	8004f04 <_vfiprintf_r+0x198>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	065b      	lsls	r3, r3, #25
 8004f5c:	f53f af7e 	bmi.w	8004e5c <_vfiprintf_r+0xf0>
 8004f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f62:	e77d      	b.n	8004e60 <_vfiprintf_r+0xf4>
 8004f64:	ab03      	add	r3, sp, #12
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <_vfiprintf_r+0x228>)
 8004f6c:	a904      	add	r1, sp, #16
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f000 f888 	bl	8005084 <_printf_i>
 8004f74:	e7ec      	b.n	8004f50 <_vfiprintf_r+0x1e4>
 8004f76:	bf00      	nop
 8004f78:	08005ba4 	.word	0x08005ba4
 8004f7c:	08005be4 	.word	0x08005be4
 8004f80:	08005bc4 	.word	0x08005bc4
 8004f84:	08005b84 	.word	0x08005b84
 8004f88:	08005bea 	.word	0x08005bea
 8004f8c:	08005bee 	.word	0x08005bee
 8004f90:	00000000 	.word	0x00000000
 8004f94:	08004d47 	.word	0x08004d47

08004f98 <_printf_common>:
 8004f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	461f      	mov	r7, r3
 8004fa0:	688a      	ldr	r2, [r1, #8]
 8004fa2:	690b      	ldr	r3, [r1, #16]
 8004fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bfb8      	it	lt
 8004fac:	4613      	movlt	r3, r2
 8004fae:	f8c9 3000 	str.w	r3, [r9]
 8004fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	b112      	cbz	r2, 8004fc2 <_printf_common+0x2a>
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f8c9 3000 	str.w	r3, [r9]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	0699      	lsls	r1, r3, #26
 8004fc6:	bf42      	ittt	mi
 8004fc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fcc:	3302      	addmi	r3, #2
 8004fce:	f8c9 3000 	strmi.w	r3, [r9]
 8004fd2:	6825      	ldr	r5, [r4, #0]
 8004fd4:	f015 0506 	ands.w	r5, r5, #6
 8004fd8:	d107      	bne.n	8004fea <_printf_common+0x52>
 8004fda:	f104 0a19 	add.w	sl, r4, #25
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	42ab      	cmp	r3, r5
 8004fe8:	dc28      	bgt.n	800503c <_printf_common+0xa4>
 8004fea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fee:	6822      	ldr	r2, [r4, #0]
 8004ff0:	3300      	adds	r3, #0
 8004ff2:	bf18      	it	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	0692      	lsls	r2, r2, #26
 8004ff8:	d42d      	bmi.n	8005056 <_printf_common+0xbe>
 8004ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ffe:	4639      	mov	r1, r7
 8005000:	4630      	mov	r0, r6
 8005002:	47c0      	blx	r8
 8005004:	3001      	adds	r0, #1
 8005006:	d020      	beq.n	800504a <_printf_common+0xb2>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	68e5      	ldr	r5, [r4, #12]
 800500c:	f8d9 2000 	ldr.w	r2, [r9]
 8005010:	f003 0306 	and.w	r3, r3, #6
 8005014:	2b04      	cmp	r3, #4
 8005016:	bf08      	it	eq
 8005018:	1aad      	subeq	r5, r5, r2
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	bf0c      	ite	eq
 8005020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005024:	2500      	movne	r5, #0
 8005026:	4293      	cmp	r3, r2
 8005028:	bfc4      	itt	gt
 800502a:	1a9b      	subgt	r3, r3, r2
 800502c:	18ed      	addgt	r5, r5, r3
 800502e:	f04f 0900 	mov.w	r9, #0
 8005032:	341a      	adds	r4, #26
 8005034:	454d      	cmp	r5, r9
 8005036:	d11a      	bne.n	800506e <_printf_common+0xd6>
 8005038:	2000      	movs	r0, #0
 800503a:	e008      	b.n	800504e <_printf_common+0xb6>
 800503c:	2301      	movs	r3, #1
 800503e:	4652      	mov	r2, sl
 8005040:	4639      	mov	r1, r7
 8005042:	4630      	mov	r0, r6
 8005044:	47c0      	blx	r8
 8005046:	3001      	adds	r0, #1
 8005048:	d103      	bne.n	8005052 <_printf_common+0xba>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	3501      	adds	r5, #1
 8005054:	e7c3      	b.n	8004fde <_printf_common+0x46>
 8005056:	18e1      	adds	r1, r4, r3
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	2030      	movs	r0, #48	; 0x30
 800505c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005060:	4422      	add	r2, r4
 8005062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800506a:	3302      	adds	r3, #2
 800506c:	e7c5      	b.n	8004ffa <_printf_common+0x62>
 800506e:	2301      	movs	r3, #1
 8005070:	4622      	mov	r2, r4
 8005072:	4639      	mov	r1, r7
 8005074:	4630      	mov	r0, r6
 8005076:	47c0      	blx	r8
 8005078:	3001      	adds	r0, #1
 800507a:	d0e6      	beq.n	800504a <_printf_common+0xb2>
 800507c:	f109 0901 	add.w	r9, r9, #1
 8005080:	e7d8      	b.n	8005034 <_printf_common+0x9c>
	...

08005084 <_printf_i>:
 8005084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800508c:	460c      	mov	r4, r1
 800508e:	7e09      	ldrb	r1, [r1, #24]
 8005090:	b085      	sub	sp, #20
 8005092:	296e      	cmp	r1, #110	; 0x6e
 8005094:	4617      	mov	r7, r2
 8005096:	4606      	mov	r6, r0
 8005098:	4698      	mov	r8, r3
 800509a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800509c:	f000 80b3 	beq.w	8005206 <_printf_i+0x182>
 80050a0:	d822      	bhi.n	80050e8 <_printf_i+0x64>
 80050a2:	2963      	cmp	r1, #99	; 0x63
 80050a4:	d036      	beq.n	8005114 <_printf_i+0x90>
 80050a6:	d80a      	bhi.n	80050be <_printf_i+0x3a>
 80050a8:	2900      	cmp	r1, #0
 80050aa:	f000 80b9 	beq.w	8005220 <_printf_i+0x19c>
 80050ae:	2958      	cmp	r1, #88	; 0x58
 80050b0:	f000 8083 	beq.w	80051ba <_printf_i+0x136>
 80050b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050bc:	e032      	b.n	8005124 <_printf_i+0xa0>
 80050be:	2964      	cmp	r1, #100	; 0x64
 80050c0:	d001      	beq.n	80050c6 <_printf_i+0x42>
 80050c2:	2969      	cmp	r1, #105	; 0x69
 80050c4:	d1f6      	bne.n	80050b4 <_printf_i+0x30>
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	0605      	lsls	r5, r0, #24
 80050cc:	f103 0104 	add.w	r1, r3, #4
 80050d0:	d52a      	bpl.n	8005128 <_printf_i+0xa4>
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da03      	bge.n	80050e2 <_printf_i+0x5e>
 80050da:	222d      	movs	r2, #45	; 0x2d
 80050dc:	425b      	negs	r3, r3
 80050de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050e2:	486f      	ldr	r0, [pc, #444]	; (80052a0 <_printf_i+0x21c>)
 80050e4:	220a      	movs	r2, #10
 80050e6:	e039      	b.n	800515c <_printf_i+0xd8>
 80050e8:	2973      	cmp	r1, #115	; 0x73
 80050ea:	f000 809d 	beq.w	8005228 <_printf_i+0x1a4>
 80050ee:	d808      	bhi.n	8005102 <_printf_i+0x7e>
 80050f0:	296f      	cmp	r1, #111	; 0x6f
 80050f2:	d020      	beq.n	8005136 <_printf_i+0xb2>
 80050f4:	2970      	cmp	r1, #112	; 0x70
 80050f6:	d1dd      	bne.n	80050b4 <_printf_i+0x30>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	f043 0320 	orr.w	r3, r3, #32
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	e003      	b.n	800510a <_printf_i+0x86>
 8005102:	2975      	cmp	r1, #117	; 0x75
 8005104:	d017      	beq.n	8005136 <_printf_i+0xb2>
 8005106:	2978      	cmp	r1, #120	; 0x78
 8005108:	d1d4      	bne.n	80050b4 <_printf_i+0x30>
 800510a:	2378      	movs	r3, #120	; 0x78
 800510c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005110:	4864      	ldr	r0, [pc, #400]	; (80052a4 <_printf_i+0x220>)
 8005112:	e055      	b.n	80051c0 <_printf_i+0x13c>
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	1d19      	adds	r1, r3, #4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6011      	str	r1, [r2, #0]
 800511c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005124:	2301      	movs	r3, #1
 8005126:	e08c      	b.n	8005242 <_printf_i+0x1be>
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6011      	str	r1, [r2, #0]
 800512c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005130:	bf18      	it	ne
 8005132:	b21b      	sxthne	r3, r3
 8005134:	e7cf      	b.n	80050d6 <_printf_i+0x52>
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	6825      	ldr	r5, [r4, #0]
 800513a:	1d18      	adds	r0, r3, #4
 800513c:	6010      	str	r0, [r2, #0]
 800513e:	0628      	lsls	r0, r5, #24
 8005140:	d501      	bpl.n	8005146 <_printf_i+0xc2>
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	e002      	b.n	800514c <_printf_i+0xc8>
 8005146:	0668      	lsls	r0, r5, #25
 8005148:	d5fb      	bpl.n	8005142 <_printf_i+0xbe>
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	4854      	ldr	r0, [pc, #336]	; (80052a0 <_printf_i+0x21c>)
 800514e:	296f      	cmp	r1, #111	; 0x6f
 8005150:	bf14      	ite	ne
 8005152:	220a      	movne	r2, #10
 8005154:	2208      	moveq	r2, #8
 8005156:	2100      	movs	r1, #0
 8005158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515c:	6865      	ldr	r5, [r4, #4]
 800515e:	60a5      	str	r5, [r4, #8]
 8005160:	2d00      	cmp	r5, #0
 8005162:	f2c0 8095 	blt.w	8005290 <_printf_i+0x20c>
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	f021 0104 	bic.w	r1, r1, #4
 800516c:	6021      	str	r1, [r4, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d13d      	bne.n	80051ee <_printf_i+0x16a>
 8005172:	2d00      	cmp	r5, #0
 8005174:	f040 808e 	bne.w	8005294 <_printf_i+0x210>
 8005178:	4665      	mov	r5, ip
 800517a:	2a08      	cmp	r2, #8
 800517c:	d10b      	bne.n	8005196 <_printf_i+0x112>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	07db      	lsls	r3, r3, #31
 8005182:	d508      	bpl.n	8005196 <_printf_i+0x112>
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	6862      	ldr	r2, [r4, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	bfde      	ittt	le
 800518c:	2330      	movle	r3, #48	; 0x30
 800518e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005192:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005196:	ebac 0305 	sub.w	r3, ip, r5
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	f8cd 8000 	str.w	r8, [sp]
 80051a0:	463b      	mov	r3, r7
 80051a2:	aa03      	add	r2, sp, #12
 80051a4:	4621      	mov	r1, r4
 80051a6:	4630      	mov	r0, r6
 80051a8:	f7ff fef6 	bl	8004f98 <_printf_common>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d14d      	bne.n	800524c <_printf_i+0x1c8>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	b005      	add	sp, #20
 80051b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ba:	4839      	ldr	r0, [pc, #228]	; (80052a0 <_printf_i+0x21c>)
 80051bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051c0:	6813      	ldr	r3, [r2, #0]
 80051c2:	6821      	ldr	r1, [r4, #0]
 80051c4:	1d1d      	adds	r5, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6015      	str	r5, [r2, #0]
 80051ca:	060a      	lsls	r2, r1, #24
 80051cc:	d50b      	bpl.n	80051e6 <_printf_i+0x162>
 80051ce:	07ca      	lsls	r2, r1, #31
 80051d0:	bf44      	itt	mi
 80051d2:	f041 0120 	orrmi.w	r1, r1, #32
 80051d6:	6021      	strmi	r1, [r4, #0]
 80051d8:	b91b      	cbnz	r3, 80051e2 <_printf_i+0x15e>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	f022 0220 	bic.w	r2, r2, #32
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	e7b7      	b.n	8005156 <_printf_i+0xd2>
 80051e6:	064d      	lsls	r5, r1, #25
 80051e8:	bf48      	it	mi
 80051ea:	b29b      	uxthmi	r3, r3
 80051ec:	e7ef      	b.n	80051ce <_printf_i+0x14a>
 80051ee:	4665      	mov	r5, ip
 80051f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80051f4:	fb02 3311 	mls	r3, r2, r1, r3
 80051f8:	5cc3      	ldrb	r3, [r0, r3]
 80051fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051fe:	460b      	mov	r3, r1
 8005200:	2900      	cmp	r1, #0
 8005202:	d1f5      	bne.n	80051f0 <_printf_i+0x16c>
 8005204:	e7b9      	b.n	800517a <_printf_i+0xf6>
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	6961      	ldr	r1, [r4, #20]
 800520c:	1d18      	adds	r0, r3, #4
 800520e:	6010      	str	r0, [r2, #0]
 8005210:	0628      	lsls	r0, r5, #24
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	d501      	bpl.n	800521a <_printf_i+0x196>
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	e002      	b.n	8005220 <_printf_i+0x19c>
 800521a:	066a      	lsls	r2, r5, #25
 800521c:	d5fb      	bpl.n	8005216 <_printf_i+0x192>
 800521e:	8019      	strh	r1, [r3, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	4665      	mov	r5, ip
 8005226:	e7b9      	b.n	800519c <_printf_i+0x118>
 8005228:	6813      	ldr	r3, [r2, #0]
 800522a:	1d19      	adds	r1, r3, #4
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	681d      	ldr	r5, [r3, #0]
 8005230:	6862      	ldr	r2, [r4, #4]
 8005232:	2100      	movs	r1, #0
 8005234:	4628      	mov	r0, r5
 8005236:	f7fa ffeb 	bl	8000210 <memchr>
 800523a:	b108      	cbz	r0, 8005240 <_printf_i+0x1bc>
 800523c:	1b40      	subs	r0, r0, r5
 800523e:	6060      	str	r0, [r4, #4]
 8005240:	6863      	ldr	r3, [r4, #4]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2300      	movs	r3, #0
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524a:	e7a7      	b.n	800519c <_printf_i+0x118>
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	462a      	mov	r2, r5
 8005250:	4639      	mov	r1, r7
 8005252:	4630      	mov	r0, r6
 8005254:	47c0      	blx	r8
 8005256:	3001      	adds	r0, #1
 8005258:	d0aa      	beq.n	80051b0 <_printf_i+0x12c>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	079b      	lsls	r3, r3, #30
 800525e:	d413      	bmi.n	8005288 <_printf_i+0x204>
 8005260:	68e0      	ldr	r0, [r4, #12]
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	4298      	cmp	r0, r3
 8005266:	bfb8      	it	lt
 8005268:	4618      	movlt	r0, r3
 800526a:	e7a3      	b.n	80051b4 <_printf_i+0x130>
 800526c:	2301      	movs	r3, #1
 800526e:	464a      	mov	r2, r9
 8005270:	4639      	mov	r1, r7
 8005272:	4630      	mov	r0, r6
 8005274:	47c0      	blx	r8
 8005276:	3001      	adds	r0, #1
 8005278:	d09a      	beq.n	80051b0 <_printf_i+0x12c>
 800527a:	3501      	adds	r5, #1
 800527c:	68e3      	ldr	r3, [r4, #12]
 800527e:	9a03      	ldr	r2, [sp, #12]
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	42ab      	cmp	r3, r5
 8005284:	dcf2      	bgt.n	800526c <_printf_i+0x1e8>
 8005286:	e7eb      	b.n	8005260 <_printf_i+0x1dc>
 8005288:	2500      	movs	r5, #0
 800528a:	f104 0919 	add.w	r9, r4, #25
 800528e:	e7f5      	b.n	800527c <_printf_i+0x1f8>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ac      	bne.n	80051ee <_printf_i+0x16a>
 8005294:	7803      	ldrb	r3, [r0, #0]
 8005296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800529e:	e76c      	b.n	800517a <_printf_i+0xf6>
 80052a0:	08005bf5 	.word	0x08005bf5
 80052a4:	08005c06 	.word	0x08005c06

080052a8 <_sbrk_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4c06      	ldr	r4, [pc, #24]	; (80052c4 <_sbrk_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4605      	mov	r5, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	f7fc fca4 	bl	8001c00 <_sbrk>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_sbrk_r+0x1a>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_sbrk_r+0x1a>
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20002940 	.word	0x20002940

080052c8 <__sread>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	f000 f8e0 	bl	8005494 <_read_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	bfab      	itete	ge
 80052d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052da:	89a3      	ldrhlt	r3, [r4, #12]
 80052dc:	181b      	addge	r3, r3, r0
 80052de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052e2:	bfac      	ite	ge
 80052e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e6:	81a3      	strhlt	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__swrite>:
 80052ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	461f      	mov	r7, r3
 80052f0:	898b      	ldrh	r3, [r1, #12]
 80052f2:	05db      	lsls	r3, r3, #23
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4616      	mov	r6, r2
 80052fa:	d505      	bpl.n	8005308 <__swrite+0x1e>
 80052fc:	2302      	movs	r3, #2
 80052fe:	2200      	movs	r2, #0
 8005300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005304:	f000 f868 	bl	80053d8 <_lseek_r>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	4628      	mov	r0, r5
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f000 b817 	b.w	8005350 <_write_r>

08005322 <__sseek>:
 8005322:	b510      	push	{r4, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 f855 	bl	80053d8 <_lseek_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	bf15      	itete	ne
 8005334:	6560      	strne	r0, [r4, #84]	; 0x54
 8005336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800533a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533e:	81a3      	strheq	r3, [r4, #12]
 8005340:	bf18      	it	ne
 8005342:	81a3      	strhne	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__sclose>:
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 b813 	b.w	8005374 <_close_r>
	...

08005350 <_write_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4c07      	ldr	r4, [pc, #28]	; (8005370 <_write_r+0x20>)
 8005354:	4605      	mov	r5, r0
 8005356:	4608      	mov	r0, r1
 8005358:	4611      	mov	r1, r2
 800535a:	2200      	movs	r2, #0
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f7fc fbfd 	bl	8001b5e <_write>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_write_r+0x1e>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	b103      	cbz	r3, 800536e <_write_r+0x1e>
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20002940 	.word	0x20002940

08005374 <_close_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4c06      	ldr	r4, [pc, #24]	; (8005390 <_close_r+0x1c>)
 8005378:	2300      	movs	r3, #0
 800537a:	4605      	mov	r5, r0
 800537c:	4608      	mov	r0, r1
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	f7fc fc09 	bl	8001b96 <_close>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_close_r+0x1a>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	b103      	cbz	r3, 800538e <_close_r+0x1a>
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	20002940 	.word	0x20002940

08005394 <_fstat_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4c07      	ldr	r4, [pc, #28]	; (80053b4 <_fstat_r+0x20>)
 8005398:	2300      	movs	r3, #0
 800539a:	4605      	mov	r5, r0
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	f7fc fc04 	bl	8001bae <_fstat>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d102      	bne.n	80053b0 <_fstat_r+0x1c>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	b103      	cbz	r3, 80053b0 <_fstat_r+0x1c>
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	bf00      	nop
 80053b4:	20002940 	.word	0x20002940

080053b8 <_isatty_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4c06      	ldr	r4, [pc, #24]	; (80053d4 <_isatty_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4605      	mov	r5, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	6023      	str	r3, [r4, #0]
 80053c4:	f7fc fc03 	bl	8001bce <_isatty>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_isatty_r+0x1a>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_isatty_r+0x1a>
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20002940 	.word	0x20002940

080053d8 <_lseek_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4c07      	ldr	r4, [pc, #28]	; (80053f8 <_lseek_r+0x20>)
 80053dc:	4605      	mov	r5, r0
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	6022      	str	r2, [r4, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fc fbfc 	bl	8001be4 <_lseek>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_lseek_r+0x1e>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_lseek_r+0x1e>
 80053f4:	602b      	str	r3, [r5, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	20002940 	.word	0x20002940

080053fc <memcpy>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	1e43      	subs	r3, r0, #1
 8005400:	440a      	add	r2, r1
 8005402:	4291      	cmp	r1, r2
 8005404:	d100      	bne.n	8005408 <memcpy+0xc>
 8005406:	bd10      	pop	{r4, pc}
 8005408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005410:	e7f7      	b.n	8005402 <memcpy+0x6>

08005412 <memmove>:
 8005412:	4288      	cmp	r0, r1
 8005414:	b510      	push	{r4, lr}
 8005416:	eb01 0302 	add.w	r3, r1, r2
 800541a:	d807      	bhi.n	800542c <memmove+0x1a>
 800541c:	1e42      	subs	r2, r0, #1
 800541e:	4299      	cmp	r1, r3
 8005420:	d00a      	beq.n	8005438 <memmove+0x26>
 8005422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005426:	f802 4f01 	strb.w	r4, [r2, #1]!
 800542a:	e7f8      	b.n	800541e <memmove+0xc>
 800542c:	4283      	cmp	r3, r0
 800542e:	d9f5      	bls.n	800541c <memmove+0xa>
 8005430:	1881      	adds	r1, r0, r2
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	42d3      	cmn	r3, r2
 8005436:	d100      	bne.n	800543a <memmove+0x28>
 8005438:	bd10      	pop	{r4, pc}
 800543a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800543e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005442:	e7f7      	b.n	8005434 <memmove+0x22>

08005444 <__malloc_lock>:
 8005444:	4770      	bx	lr

08005446 <__malloc_unlock>:
 8005446:	4770      	bx	lr

08005448 <_realloc_r>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	4607      	mov	r7, r0
 800544c:	4614      	mov	r4, r2
 800544e:	460e      	mov	r6, r1
 8005450:	b921      	cbnz	r1, 800545c <_realloc_r+0x14>
 8005452:	4611      	mov	r1, r2
 8005454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005458:	f7ff bab2 	b.w	80049c0 <_malloc_r>
 800545c:	b922      	cbnz	r2, 8005468 <_realloc_r+0x20>
 800545e:	f7ff fa61 	bl	8004924 <_free_r>
 8005462:	4625      	mov	r5, r4
 8005464:	4628      	mov	r0, r5
 8005466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005468:	f000 f826 	bl	80054b8 <_malloc_usable_size_r>
 800546c:	42a0      	cmp	r0, r4
 800546e:	d20f      	bcs.n	8005490 <_realloc_r+0x48>
 8005470:	4621      	mov	r1, r4
 8005472:	4638      	mov	r0, r7
 8005474:	f7ff faa4 	bl	80049c0 <_malloc_r>
 8005478:	4605      	mov	r5, r0
 800547a:	2800      	cmp	r0, #0
 800547c:	d0f2      	beq.n	8005464 <_realloc_r+0x1c>
 800547e:	4631      	mov	r1, r6
 8005480:	4622      	mov	r2, r4
 8005482:	f7ff ffbb 	bl	80053fc <memcpy>
 8005486:	4631      	mov	r1, r6
 8005488:	4638      	mov	r0, r7
 800548a:	f7ff fa4b 	bl	8004924 <_free_r>
 800548e:	e7e9      	b.n	8005464 <_realloc_r+0x1c>
 8005490:	4635      	mov	r5, r6
 8005492:	e7e7      	b.n	8005464 <_realloc_r+0x1c>

08005494 <_read_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4c07      	ldr	r4, [pc, #28]	; (80054b4 <_read_r+0x20>)
 8005498:	4605      	mov	r5, r0
 800549a:	4608      	mov	r0, r1
 800549c:	4611      	mov	r1, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	6022      	str	r2, [r4, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f7fc fb3e 	bl	8001b24 <_read>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_read_r+0x1e>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_read_r+0x1e>
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	20002940 	.word	0x20002940

080054b8 <_malloc_usable_size_r>:
 80054b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054bc:	1f18      	subs	r0, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfbc      	itt	lt
 80054c2:	580b      	ldrlt	r3, [r1, r0]
 80054c4:	18c0      	addlt	r0, r0, r3
 80054c6:	4770      	bx	lr

080054c8 <_init>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr

080054d4 <_fini>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr
