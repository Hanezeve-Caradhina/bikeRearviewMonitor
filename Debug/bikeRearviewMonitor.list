
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011ec  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008830  08008830  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008838  08008838  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08008840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000258c  200001a0  080089e0  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000272c  080089e0  0002272c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017909  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e0e  00000000  00000000  00037ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  0003a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  0003ba88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195e9  00000000  00000000  0003cad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e447  00000000  00000000  000560b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009503f  00000000  00000000  00064500  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f953f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  000f95bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800762c 	.word	0x0800762c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	0800762c 	.word	0x0800762c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <str_Capitalized>:
	{NULL, NULL , NULL}
};

char Buff[2048];

void str_Capitalized (char *dest, char *str) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	int pos = 0, len = strlen (str);
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	6838      	ldr	r0, [r7, #0]
 80005c0:	f7ff fe18 	bl	80001f4 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
	for (; pos<len; ++ pos) {
 80005c8:	e021      	b.n	800060e <str_Capitalized+0x5e>
		if (str[pos]<='z' && str[pos]>='a') dest[pos]=str[pos]-32;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b7a      	cmp	r3, #122	; 0x7a
 80005d4:	d810      	bhi.n	80005f8 <str_Capitalized+0x48>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b60      	cmp	r3, #96	; 0x60
 80005e0:	d90a      	bls.n	80005f8 <str_Capitalized+0x48>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	3a20      	subs	r2, #32
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e007      	b.n	8000608 <str_Capitalized+0x58>
		else dest[pos] = str[pos];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	441a      	add	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	440b      	add	r3, r1
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	701a      	strb	r2, [r3, #0]
	for (; pos<len; ++ pos) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbd9      	blt.n	80005ca <str_Capitalized+0x1a>
	} dest[pos] = '\0';
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <AT_CMD_Dispose>:

u8 AT_CMD_Dispose(struct tok *tok) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	struct at_cmd_hanld_t *atcmd, *match = NULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	char name[32];
	atcmd = at_cmd_hanld;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <AT_CMD_Dispose+0x6c>)
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	str_Capitalized(name, tok->name);
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <str_Capitalized>
	while(atcmd->atcmd) {
 8000646:	e010      	b.n	800066a <AT_CMD_Dispose+0x42>
		if(strcmp(atcmd->atcmd, name) == 0) {
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <AT_CMD_Dispose+0x3c>
			match = atcmd; break;
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
 8000662:	e006      	b.n	8000672 <AT_CMD_Dispose+0x4a>
		} atcmd ++;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	330c      	adds	r3, #12
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(atcmd->atcmd) {
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ea      	bne.n	8000648 <AT_CMD_Dispose+0x20>
	} if(match) return match->send_hanld(match->atcmd, tok);
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <AT_CMD_Dispose+0x62>
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4610      	mov	r0, r2
 8000684:	4798      	blx	r3
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <AT_CMD_Dispose+0x64>
	else {return 1;}
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <CMD_Send>:

void CMD_Send(char *buff, char *atcmd, struct tok *tok) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b0c6      	sub	sp, #280	; 0x118
 800069c:	af00      	add	r7, sp, #0
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	6019      	str	r1, [r3, #0]
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	601a      	str	r2, [r3, #0]
	int i = 0; char temp[256];
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sprintf (buff, "%s", atcmd);
 80006b4:	f107 0208 	add.w	r2, r7, #8
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f005 ff21 	bl	8006506 <strcpy>
	if (tok->num != 0) {
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d071      	beq.n	80007b4 <CMD_Send+0x11c>
		for (i=0; i<tok->num; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006d6:	e064      	b.n	80007a2 <CMD_Send+0x10a>
			if(i == 0 && tok->sendstr[i][0] == '?') {
 80006d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d120      	bne.n	8000722 <CMD_Send+0x8a>
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	4413      	add	r3, r2
 80006ec:	3321      	adds	r3, #33	; 0x21
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b3f      	cmp	r3, #63	; 0x3f
 80006f2:	d116      	bne.n	8000722 <CMD_Send+0x8a>
				sprintf(temp,"=%s",tok->sendstr[i]);
 80006f4:	1d3a      	adds	r2, r7, #4
 80006f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	3320      	adds	r3, #32
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	4413      	add	r3, r2
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4935      	ldr	r1, [pc, #212]	; (80007e0 <CMD_Send+0x148>)
 800070a:	4618      	mov	r0, r3
 800070c:	f005 fecc 	bl	80064a8 <siprintf>
				strcat(buff,temp);
 8000710:	f107 0214 	add.w	r2, r7, #20
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4611      	mov	r1, r2
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	f005 fee4 	bl	80064e8 <strcat>
 8000720:	e03a      	b.n	8000798 <CMD_Send+0x100>
			} else if(i == 0 && tok->sendstr[i][0] != '?') {
 8000722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000726:	2b00      	cmp	r3, #0
 8000728:	d120      	bne.n	800076c <CMD_Send+0xd4>
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	4413      	add	r3, r2
 8000736:	3321      	adds	r3, #33	; 0x21
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b3f      	cmp	r3, #63	; 0x3f
 800073c:	d016      	beq.n	800076c <CMD_Send+0xd4>
				sprintf(temp,"=%s",tok->sendstr[i]);
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	3320      	adds	r3, #32
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4923      	ldr	r1, [pc, #140]	; (80007e0 <CMD_Send+0x148>)
 8000754:	4618      	mov	r0, r3
 8000756:	f005 fea7 	bl	80064a8 <siprintf>
				strcat(buff,temp);
 800075a:	f107 0214 	add.w	r2, r7, #20
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4611      	mov	r1, r2
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	f005 febf 	bl	80064e8 <strcat>
 800076a:	e015      	b.n	8000798 <CMD_Send+0x100>
			} else {
				sprintf(temp,",%s",tok->sendstr[i]);
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	3320      	adds	r3, #32
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	4413      	add	r3, r2
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4918      	ldr	r1, [pc, #96]	; (80007e4 <CMD_Send+0x14c>)
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fe90 	bl	80064a8 <siprintf>
				strcat(buff,temp);
 8000788:	f107 0214 	add.w	r2, r7, #20
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4611      	mov	r1, r2
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	f005 fea8 	bl	80064e8 <strcat>
		for (i=0; i<tok->num; i++) {
 8000798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b0:	4293      	cmp	r3, r2
 80007b2:	db91      	blt.n	80006d8 <CMD_Send+0x40>
			}
		}
	} strcat(buff,"\r\n");
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f7ff fd1b 	bl	80001f4 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <CMD_Send+0x150>)
 80007cc:	8811      	ldrh	r1, [r2, #0]
 80007ce:	7892      	ldrb	r2, [r2, #2]
 80007d0:	8019      	strh	r1, [r3, #0]
 80007d2:	709a      	strb	r2, [r3, #2]
}
 80007d4:	bf00      	nop
 80007d6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08007708 	.word	0x08007708
 80007e4:	0800770c 	.word	0x0800770c
 80007e8:	08007710 	.word	0x08007710

080007ec <AT_Send>:

u8 AT_Send(char *atcmd, struct tok *tok) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0c4      	sub	sp, #272	; 0x110
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	6018      	str	r0, [r3, #0]
 80007f6:	463b      	mov	r3, r7
 80007f8:	6019      	str	r1, [r3, #0]
	int i; char buff[256];
	for(i=0; i<Retime; ++ i) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000800:	e027      	b.n	8000852 <AT_Send+0x66>
		CMD_Send(buff, atcmd, tok);
 8000802:	463a      	mov	r2, r7
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	f107 000c 	add.w	r0, r7, #12
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	f7ff ff43 	bl	8000698 <CMD_Send>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)buff, strlen(buff));
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcec 	bl	80001f4 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <AT_Send+0x7c>)
 8000828:	f004 fefa 	bl	8005620 <HAL_UART_Transmit_IT>
		if(!AT_Return(tok->ret, 1)) {return 0;}
 800082c:	463b      	mov	r3, r7
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000834:	3301      	adds	r3, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f817 	bl	800086c <AT_Return>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <AT_Send+0x5c>
 8000844:	2300      	movs	r3, #0
 8000846:	e009      	b.n	800085c <AT_Send+0x70>
	for(i=0; i<Retime; ++ i) {
 8000848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800084c:	3301      	adds	r3, #1
 800084e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000856:	2b01      	cmp	r3, #1
 8000858:	ddd3      	ble.n	8000802 <AT_Send+0x16>
	} return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000eb4 	.word	0x20000eb4

0800086c <AT_Return>:

u8 AT_Return(char *str, int flag) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t Time_count = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
	Time_count = Timeout;
 800087a:	230a      	movs	r3, #10
 800087c:	60fb      	str	r3, [r7, #12]
	memset(Buff, 0, sizeof Buff);
 800087e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <AT_Return+0x60>)
 8000886:	f005 fd8b 	bl	80063a0 <memset>
	while(Time_count --) {
 800088a:	e015      	b.n	80008b8 <AT_Return+0x4c>
		if (flag) HAL_UART_Receive(&huart2, (uint8_t *)Buff, sizeof Buff, 100);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <AT_Return+0x34>
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <AT_Return+0x60>)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <AT_Return+0x64>)
 800089c:	f004 fe1a 	bl	80054d4 <HAL_UART_Receive>
		if(strstr((const char *)Buff,str)!=NULL) {return 0;}
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <AT_Return+0x60>)
 80008a4:	f005 fe37 	bl	8006516 <strstr>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <AT_Return+0x46>
 80008ae:	2300      	movs	r3, #0
 80008b0:	e008      	b.n	80008c4 <AT_Return+0x58>
		HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f002 fa92 	bl	8002ddc <HAL_Delay>
	while(Time_count --) {
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	60fa      	str	r2, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1e4      	bne.n	800088c <AT_Return+0x20>
	} return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000061c 	.word	0x2000061c
 80008d0:	20000eb4 	.word	0x20000eb4

080008d4 <Buff_clear>:

void Buff_clear(struct tok *tok) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	tok->num = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
	memset(tok->sendstr, 0, sizeof(tok->sendstr));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3321      	adds	r3, #33	; 0x21
 80008e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 fd56 	bl	80063a0 <memset>
	memset(tok->ret, 0, sizeof(tok->ret));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80008fa:	3301      	adds	r3, #1
 80008fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 fd4c 	bl	80063a0 <memset>
	memset(Buff, 0, sizeof(Buff));
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	2100      	movs	r1, #0
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <Buff_clear+0x48>)
 8000910:	f005 fd46 	bl	80063a0 <memset>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000061c 	.word	0x2000061c

08000920 <Set_TFT_Backlight_PWM>:
u8 BgPWMLight = 99;

#define ADDR_PREFIX 0x70
#define DATA_PREFIX 0x72

void Set_TFT_Backlight_PWM(u8 PWMtoSet) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, PWMtoSet);
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <Set_TFT_Backlight_PWM+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000e74 	.word	0x20000e74

08000944 <Cnange_TFT_Backlight>:

void Cnange_TFT_Backlight() {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	BgPWMLight = BgPWMLight<99? BgPWMLight+33:0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b62      	cmp	r3, #98	; 0x62
 800094e:	d804      	bhi.n	800095a <Cnange_TFT_Backlight+0x16>
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <Cnange_TFT_Backlight+0x38>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3321      	adds	r3, #33	; 0x21
 8000956:	b2db      	uxtb	r3, r3
 8000958:	e000      	b.n	800095c <Cnange_TFT_Backlight+0x18>
 800095a:	2300      	movs	r3, #0
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800095e:	7013      	strb	r3, [r2, #0]
	Set_TFT_Backlight_PWM(BgPWMLight);
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <Cnange_TFT_Backlight+0x38>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffdb 	bl	8000920 <Set_TFT_Backlight_PWM>
	printf("[INT0] BGLT: %d\r\n", BgPWMLight);
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <Cnange_TFT_Backlight+0x3c>)
 8000972:	f005 fd1d 	bl	80063b0 <iprintf>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000f0 	.word	0x200000f0
 8000980:	08007714 	.word	0x08007714

08000984 <SPI_WriteByte_u8>:
u8 SPI_WriteByte(u8 *content, u16 size) {
	return 0;
	//return HAL_SPI_Transmit(&hspi1, content, size, 10);
}

void SPI_WriteByte_u8(u8 content) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	//TFT_WriteBus(content);
	HAL_SPI_Transmit(&hspi1, &content, 1, 10);
 800098e:	1df9      	adds	r1, r7, #7
 8000990:	230a      	movs	r3, #10
 8000992:	2201      	movs	r2, #1
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <SPI_WriteByte_u8+0x20>)
 8000996:	f003 fd8d 	bl	80044b4 <HAL_SPI_Transmit>
	//SPI_WriteByte(&content, 1);
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000e1c 	.word	0x20000e1c

080009a8 <TFT_ReStart>:
void TFT_WriteRegi(u8 addr, u16 data) {
	TFT_WriteComm(addr);
	TFT_WriteData_u16(data);
}

void TFT_ReStart(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	DISPLAY_RST_CLR;
 80009ac:	2200      	movs	r2, #0
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <TFT_ReStart+0x28>)
 80009b2:	f003 f8ad 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80009b6:	20c8      	movs	r0, #200	; 0xc8
 80009b8:	f002 fa10 	bl	8002ddc <HAL_Delay>
	DISPLAY_RST_SET;
 80009bc:	2201      	movs	r2, #1
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <TFT_ReStart+0x28>)
 80009c2:	f003 f8a5 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	; 0x64
 80009c8:	f002 fa08 	bl	8002ddc <HAL_Delay>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020400 	.word	0x40020400

080009d4 <LCD_WR_REG>:

void LCD_WR_REG(u8 dat) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	DISPLAY_RS_CLR;
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <LCD_WR_REG+0x30>)
 80009e4:	f003 f894 	bl	8003b10 <HAL_GPIO_WritePin>
	//SPI_WriteByte_u8(dat>>8);
	SPI_WriteByte_u8(dat);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffca 	bl	8000984 <SPI_WriteByte_u8>
	DISPLAY_RS_SET;
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <LCD_WR_REG+0x30>)
 80009f6:	f003 f88b 	bl	8003b10 <HAL_GPIO_WritePin>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40020400 	.word	0x40020400

08000a08 <LCD_WR_DATA8>:

void LCD_WR_DATA8(u16 dat) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	DISPLAY_RS_SET;
 8000a12:	2201      	movs	r2, #1
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <LCD_WR_DATA8+0x28>)
 8000a18:	f003 f87a 	bl	8003b10 <HAL_GPIO_WritePin>
	SPI_WriteByte_u8(dat);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffaf 	bl	8000984 <SPI_WriteByte_u8>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020400 	.word	0x40020400

08000a34 <LCD_WR_DATA>:

void LCD_WR_DATA(u16 dat) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
	DISPLAY_RS_SET;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <LCD_WR_DATA+0x34>)
 8000a44:	f003 f864 	bl	8003b10 <HAL_GPIO_WritePin>
	SPI_WriteByte_u8(dat>>8);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff97 	bl	8000984 <SPI_WriteByte_u8>
	SPI_WriteByte_u8(dat);
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff92 	bl	8000984 <SPI_WriteByte_u8>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40020400 	.word	0x40020400

08000a6c <LCD_Address_Set>:

void LCD_Address_Set(u16 x1, u16 y1, u16 x2, u16 y2) {
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8000a8a:	202a      	movs	r0, #42	; 0x2a
 8000a8c:	f7ff ffa2 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA(x1);
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffce 	bl	8000a34 <LCD_WR_DATA>
	LCD_WR_DATA(x2);
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffca 	bl	8000a34 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000aa0:	202b      	movs	r0, #43	; 0x2b
 8000aa2:	f7ff ff97 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA(y1);
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ffc3 	bl	8000a34 <LCD_WR_DATA>
	LCD_WR_DATA(y2);
 8000aae:	883b      	ldrh	r3, [r7, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffbf 	bl	8000a34 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000ab6:	202c      	movs	r0, #44	; 0x2c
 8000ab8:	f7ff ff8c 	bl	80009d4 <LCD_WR_REG>
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}

08000ac4 <LCD_Fill>:
		SPI_WriteByte_u8(color >> 8);
		SPI_WriteByte_u8(color&0xFF);
	} DISPLAY_CS_SET;
}

void LCD_Fill(u16 xsta, u16 ysta, u16 xend, u16 yend, u16 color) {
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	4608      	mov	r0, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80bb      	strh	r3, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	807b      	strh	r3, [r7, #2]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	LCD_Address_Set(xsta, ysta, xend-1, yend-1);
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	883b      	ldrh	r3, [r7, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	88b9      	ldrh	r1, [r7, #4]
 8000af0:	88f8      	ldrh	r0, [r7, #6]
 8000af2:	f7ff ffbb 	bl	8000a6c <LCD_Address_Set>
	for(i = ysta; i<yend; ++ i) {
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	81fb      	strh	r3, [r7, #14]
 8000afa:	e010      	b.n	8000b1e <LCD_Fill+0x5a>
		for(j = xsta; j<xend; ++ j) {
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	81bb      	strh	r3, [r7, #12]
 8000b00:	e006      	b.n	8000b10 <LCD_Fill+0x4c>
			LCD_WR_DATA(color);
 8000b02:	8c3b      	ldrh	r3, [r7, #32]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff95 	bl	8000a34 <LCD_WR_DATA>
		for(j = xsta; j<xend; ++ j) {
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	81bb      	strh	r3, [r7, #12]
 8000b10:	89ba      	ldrh	r2, [r7, #12]
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3f4      	bcc.n	8000b02 <LCD_Fill+0x3e>
	for(i = ysta; i<yend; ++ i) {
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	89fa      	ldrh	r2, [r7, #14]
 8000b20:	883b      	ldrh	r3, [r7, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ea      	bcc.n	8000afc <LCD_Fill+0x38>
		}
	}
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}

08000b2e <LCD_DrawPoint>:


void LCD_DrawPoint(u16 x, u16 y, u16 color) {
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	80bb      	strh	r3, [r7, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	807b      	strh	r3, [r7, #2]
	if (x<0||x>LCD_W||y<0||y>LCD_H) return;
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000b46:	d80e      	bhi.n	8000b66 <LCD_DrawPoint+0x38>
 8000b48:	88bb      	ldrh	r3, [r7, #4]
 8000b4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b4e:	d80a      	bhi.n	8000b66 <LCD_DrawPoint+0x38>
	LCD_Address_Set(x, y, x, y);
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	88b9      	ldrh	r1, [r7, #4]
 8000b56:	88f8      	ldrh	r0, [r7, #6]
 8000b58:	f7ff ff88 	bl	8000a6c <LCD_Address_Set>
	LCD_WR_DATA(color);
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff68 	bl	8000a34 <LCD_WR_DATA>
 8000b64:	e000      	b.n	8000b68 <LCD_DrawPoint+0x3a>
	if (x<0||x>LCD_W||y<0||y>LCD_H) return;
 8000b66:	bf00      	nop
}
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <Draw_Circle>:
	LCD_DrawLine(x1,y1,x1,y2,color);
	LCD_DrawLine(x1,y2,x2,y2,color);
	LCD_DrawLine(x2,y1,x2,y2,color);
}

void Draw_Circle(u16 x0,u16 y0,u8 r,u16 color) {
 8000b6e:	b590      	push	{r4, r7, lr}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4604      	mov	r4, r0
 8000b76:	4608      	mov	r0, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4623      	mov	r3, r4
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	4603      	mov	r3, r0
 8000b82:	80bb      	strh	r3, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	803b      	strh	r3, [r7, #0]
	int a,b;
	a = 0; b = r;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	60bb      	str	r3, [r7, #8]
	while(a <= b) {
 8000b94:	e084      	b.n	8000ca0 <Draw_Circle+0x132>
		LCD_DrawPoint(x0-b, y0-a, color);             //3
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	88fa      	ldrh	r2, [r7, #6]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	b298      	uxth	r0, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	883a      	ldrh	r2, [r7, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f7ff ffbe 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0+b, y0-a, color);             //0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b298      	uxth	r0, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	883a      	ldrh	r2, [r7, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f7ff ffb0 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0-a, y0+b, color);             //1
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	88fa      	ldrh	r2, [r7, #6]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	b298      	uxth	r0, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	883a      	ldrh	r2, [r7, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f7ff ffa2 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0-a, y0-b, color);             //2
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	88fa      	ldrh	r2, [r7, #6]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	b298      	uxth	r0, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	883a      	ldrh	r2, [r7, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff ff94 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0+b, y0+a, color);             //4
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b298      	uxth	r0, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	883a      	ldrh	r2, [r7, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff ff86 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0+a, y0-b, color);             //5
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b298      	uxth	r0, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	88ba      	ldrh	r2, [r7, #4]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	883a      	ldrh	r2, [r7, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f7ff ff78 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0+a, y0+b, color);             //6
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	4413      	add	r3, r2
 8000c46:	b298      	uxth	r0, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	883a      	ldrh	r2, [r7, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff ff6a 	bl	8000b2e <LCD_DrawPoint>
		LCD_DrawPoint(x0-b, y0+a, color);             //7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	b298      	uxth	r0, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	883a      	ldrh	r2, [r7, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f7ff ff5c 	bl	8000b2e <LCD_DrawPoint>
		++ a;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
		if((a*a+b*b)>(r*r)) b --;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	fb02 f203 	mul.w	r2, r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	fb01 f303 	mul.w	r3, r1, r3
 8000c8c:	441a      	add	r2, r3
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	78f9      	ldrb	r1, [r7, #3]
 8000c92:	fb01 f303 	mul.w	r3, r1, r3
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dd02      	ble.n	8000ca0 <Draw_Circle+0x132>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
	while(a <= b) {
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f77f af76 	ble.w	8000b96 <Draw_Circle+0x28>
	}
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}
	...

08000cb4 <LCD_ShowChar>:


void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode) {
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4604      	mov	r4, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80bb      	strh	r3, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	70fb      	strb	r3, [r7, #3]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	803b      	strh	r3, [r7, #0]
	u8 temp, sizex, t, m = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	757b      	strb	r3, [r7, #21]
	u16 i, TypefaceNum;
	u16 x0 = x;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	823b      	strh	r3, [r7, #16]
	sizex = sizey/2;
 8000cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cde:	085b      	lsrs	r3, r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex/8+((sizex%8)?1:0))*sizey;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	fb12 f303 	smulbb	r3, r2, r3
 8000d0a:	81bb      	strh	r3, [r7, #12]
	num = num-' ';
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	3b20      	subs	r3, #32
 8000d10:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x, y, x+sizex-1, y+sizey-1);
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b29c      	uxth	r4, r3
 8000d20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	88b9      	ldrh	r1, [r7, #4]
 8000d32:	88f8      	ldrh	r0, [r7, #6]
 8000d34:	4622      	mov	r2, r4
 8000d36:	f7ff fe99 	bl	8000a6c <LCD_Address_Set>
	for(i = 0; i<TypefaceNum; ++ i) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	827b      	strh	r3, [r7, #18]
 8000d3e:	e069      	b.n	8000e14 <LCD_ShowChar+0x160>
		if(sizey==12) temp=ascii_1206[num][i];
 8000d40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d44:	2b0c      	cmp	r3, #12
 8000d46:	d10b      	bne.n	8000d60 <LCD_ShowChar+0xac>
 8000d48:	78fa      	ldrb	r2, [r7, #3]
 8000d4a:	8a79      	ldrh	r1, [r7, #18]
 8000d4c:	4836      	ldr	r0, [pc, #216]	; (8000e28 <LCD_ShowChar+0x174>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4403      	add	r3, r0
 8000d58:	440b      	add	r3, r1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	75fb      	strb	r3, [r7, #23]
 8000d5e:	e00b      	b.n	8000d78 <LCD_ShowChar+0xc4>
		else if(sizey==16) temp=ascii_1608[num][i];
 8000d60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d64:	2b10      	cmp	r3, #16
 8000d66:	d15a      	bne.n	8000e1e <LCD_ShowChar+0x16a>
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	8a7b      	ldrh	r3, [r7, #18]
 8000d6c:	492f      	ldr	r1, [pc, #188]	; (8000e2c <LCD_ShowChar+0x178>)
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	440a      	add	r2, r1
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	75fb      	strb	r3, [r7, #23]
		//else if(sizey==24) temp=ascii_2412[num][i];
		//else if(sizey==32) temp=ascii_3216[num][i];
		else return;
		for(t = 0; t<8; ++ t) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	e044      	b.n	8000e08 <LCD_ShowChar+0x154>
			if(!mode) {
 8000d7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d120      	bne.n	8000dc8 <LCD_ShowChar+0x114>
				if(temp&(0x01<<t)) LCD_WR_DATA(fc);
 8000d86:	7dfa      	ldrb	r2, [r7, #23]
 8000d88:	7dbb      	ldrb	r3, [r7, #22]
 8000d8a:	fa42 f303 	asr.w	r3, r2, r3
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <LCD_ShowChar+0xec>
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe4b 	bl	8000a34 <LCD_WR_DATA>
 8000d9e:	e003      	b.n	8000da8 <LCD_ShowChar+0xf4>
				else LCD_WR_DATA(bc);
 8000da0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fe46 	bl	8000a34 <LCD_WR_DATA>
				++ m;
 8000da8:	7d7b      	ldrb	r3, [r7, #21]
 8000daa:	3301      	adds	r3, #1
 8000dac:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0) {m=0; break;}
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000db6:	fb02 f201 	mul.w	r2, r2, r1
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d11f      	bne.n	8000e02 <LCD_ShowChar+0x14e>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	757b      	strb	r3, [r7, #21]
 8000dc6:	e022      	b.n	8000e0e <LCD_ShowChar+0x15a>
			} else {
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);
 8000dc8:	7dfa      	ldrb	r2, [r7, #23]
 8000dca:	7dbb      	ldrb	r3, [r7, #22]
 8000dcc:	fa42 f303 	asr.w	r3, r2, r3
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <LCD_ShowChar+0x130>
 8000dd8:	883a      	ldrh	r2, [r7, #0]
 8000dda:	88b9      	ldrh	r1, [r7, #4]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fea5 	bl	8000b2e <LCD_DrawPoint>
				++ x;
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	3301      	adds	r3, #1
 8000de8:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex) {x=x0; y++;break;}
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	8a3b      	ldrh	r3, [r7, #16]
 8000dee:	1ad2      	subs	r2, r2, r3
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d105      	bne.n	8000e02 <LCD_ShowChar+0x14e>
 8000df6:	8a3b      	ldrh	r3, [r7, #16]
 8000df8:	80fb      	strh	r3, [r7, #6]
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	80bb      	strh	r3, [r7, #4]
 8000e00:	e005      	b.n	8000e0e <LCD_ShowChar+0x15a>
		for(t = 0; t<8; ++ t) {
 8000e02:	7dbb      	ldrb	r3, [r7, #22]
 8000e04:	3301      	adds	r3, #1
 8000e06:	75bb      	strb	r3, [r7, #22]
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9b7      	bls.n	8000d7e <LCD_ShowChar+0xca>
	for(i = 0; i<TypefaceNum; ++ i) {
 8000e0e:	8a7b      	ldrh	r3, [r7, #18]
 8000e10:	3301      	adds	r3, #1
 8000e12:	827b      	strh	r3, [r7, #18]
 8000e14:	8a7a      	ldrh	r2, [r7, #18]
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d391      	bcc.n	8000d40 <LCD_ShowChar+0x8c>
 8000e1c:	e000      	b.n	8000e20 <LCD_ShowChar+0x16c>
		else return;
 8000e1e:	bf00      	nop
			}
		}
	}
}
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08007d1c 	.word	0x08007d1c
 8000e2c:	08008190 	.word	0x08008190

08000e30 <LCD_ShowString>:


void LCD_ShowString(u16 x, u16 y, const u8 *p, u16 fc, u16 bc, u8 sizey, u8 mode) {
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	81fb      	strh	r3, [r7, #14]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	81bb      	strh	r3, [r7, #12]
 8000e42:	4613      	mov	r3, r2
 8000e44:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0') {
 8000e46:	e01a      	b.n	8000e7e <LCD_ShowString+0x4e>
		LCD_ShowChar(x, y, *p, fc, bc, sizey, mode);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	88fc      	ldrh	r4, [r7, #6]
 8000e4e:	89b9      	ldrh	r1, [r7, #12]
 8000e50:	89f8      	ldrh	r0, [r7, #14]
 8000e52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	8c3b      	ldrh	r3, [r7, #32]
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4623      	mov	r3, r4
 8000e64:	f7ff ff26 	bl	8000cb4 <LCD_ShowChar>
		x += sizey/2; ++ p;
 8000e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	4413      	add	r3, r2
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
	while(*p!='\0') {
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1e0      	bne.n	8000e48 <LCD_ShowString+0x18>
	}
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}

08000e8e <TFT_INIT>:


void TFT_INIT(void) {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
	TFT_ReStart();
 8000e92:	f7ff fd89 	bl	80009a8 <TFT_ReStart>
	HAL_Delay(40); // Waiting 2 frames al least
	TFT_WriteComm(0x0028); TFT_WriteData(0x003C);
#endif
#ifdef NWE_USAGE
	//************* Start Initial Sequence **********//
	LCD_WR_REG(0x11); //Sleep out
 8000e96:	2011      	movs	r0, #17
 8000e98:	f7ff fd9c 	bl	80009d4 <LCD_WR_REG>
	HAL_Delay(120);    //Delay 120ms
 8000e9c:	2078      	movs	r0, #120	; 0x78
 8000e9e:	f001 ff9d 	bl	8002ddc <HAL_Delay>
	//************* Start Initial Sequence **********//
	LCD_WR_REG(0Xf0);
 8000ea2:	20f0      	movs	r0, #240	; 0xf0
 8000ea4:	f7ff fd96 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0xc3);
 8000ea8:	20c3      	movs	r0, #195	; 0xc3
 8000eaa:	f7ff fdad 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_REG(0Xf0);
 8000eae:	20f0      	movs	r0, #240	; 0xf0
 8000eb0:	f7ff fd90 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0x96);
 8000eb4:	2096      	movs	r0, #150	; 0x96
 8000eb6:	f7ff fda7 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000eba:	2036      	movs	r0, #54	; 0x36
 8000ebc:	f7ff fd8a 	bl	80009d4 <LCD_WR_REG>
	if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x48);
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d103      	bne.n	8000ece <TFT_INIT+0x40>
 8000ec6:	2048      	movs	r0, #72	; 0x48
 8000ec8:	f7ff fd9e 	bl	8000a08 <LCD_WR_DATA8>
 8000ecc:	e010      	b.n	8000ef0 <TFT_INIT+0x62>
	else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0x88);
 8000ece:	2302      	movs	r3, #2
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d103      	bne.n	8000edc <TFT_INIT+0x4e>
 8000ed4:	2088      	movs	r0, #136	; 0x88
 8000ed6:	f7ff fd97 	bl	8000a08 <LCD_WR_DATA8>
 8000eda:	e009      	b.n	8000ef0 <TFT_INIT+0x62>
	else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x28);
 8000edc:	2302      	movs	r3, #2
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d103      	bne.n	8000eea <TFT_INIT+0x5c>
 8000ee2:	2028      	movs	r0, #40	; 0x28
 8000ee4:	f7ff fd90 	bl	8000a08 <LCD_WR_DATA8>
 8000ee8:	e002      	b.n	8000ef0 <TFT_INIT+0x62>
	else LCD_WR_DATA8(0xE8);
 8000eea:	20e8      	movs	r0, #232	; 0xe8
 8000eec:	f7ff fd8c 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0x3A);
 8000ef0:	203a      	movs	r0, #58	; 0x3a
 8000ef2:	f7ff fd6f 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f7ff fd86 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xe8);
 8000efc:	20e8      	movs	r0, #232	; 0xe8
 8000efe:	f7ff fd69 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0x40);
 8000f02:	2040      	movs	r0, #64	; 0x40
 8000f04:	f7ff fd80 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x82);
 8000f08:	2082      	movs	r0, #130	; 0x82
 8000f0a:	f7ff fd7d 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f7ff fd7a 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x18);
 8000f14:	2018      	movs	r0, #24
 8000f16:	f7ff fd77 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x27);
 8000f1a:	2027      	movs	r0, #39	; 0x27
 8000f1c:	f7ff fd74 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0a);
 8000f20:	200a      	movs	r0, #10
 8000f22:	f7ff fd71 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xb6);
 8000f26:	20b6      	movs	r0, #182	; 0xb6
 8000f28:	f7ff fd6e 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33);
 8000f2c:	2033      	movs	r0, #51	; 0x33
 8000f2e:	f7ff fd6b 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xc5);
 8000f32:	20c5      	movs	r0, #197	; 0xc5
 8000f34:	f7ff fd4e 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0x27);
 8000f38:	2027      	movs	r0, #39	; 0x27
 8000f3a:	f7ff fd65 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xc2);
 8000f3e:	20c2      	movs	r0, #194	; 0xc2
 8000f40:	f7ff fd48 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0xa7);
 8000f44:	20a7      	movs	r0, #167	; 0xa7
 8000f46:	f7ff fd5f 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xe0);
 8000f4a:	20e0      	movs	r0, #224	; 0xe0
 8000f4c:	f7ff fd42 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0xf0);
 8000f50:	20f0      	movs	r0, #240	; 0xf0
 8000f52:	f7ff fd59 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fd56 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x06);
 8000f5c:	2006      	movs	r0, #6
 8000f5e:	f7ff fd53 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0f);
 8000f62:	200f      	movs	r0, #15
 8000f64:	f7ff fd50 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x12);
 8000f68:	2012      	movs	r0, #18
 8000f6a:	f7ff fd4d 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1d);
 8000f6e:	201d      	movs	r0, #29
 8000f70:	f7ff fd4a 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x36);
 8000f74:	2036      	movs	r0, #54	; 0x36
 8000f76:	f7ff fd47 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x54);
 8000f7a:	2054      	movs	r0, #84	; 0x54
 8000f7c:	f7ff fd44 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x44);
 8000f80:	2044      	movs	r0, #68	; 0x44
 8000f82:	f7ff fd41 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0c);
 8000f86:	200c      	movs	r0, #12
 8000f88:	f7ff fd3e 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x18);
 8000f8c:	2018      	movs	r0, #24
 8000f8e:	f7ff fd3b 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x16);
 8000f92:	2016      	movs	r0, #22
 8000f94:	f7ff fd38 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 8000f98:	2013      	movs	r0, #19
 8000f9a:	f7ff fd35 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x15);
 8000f9e:	2015      	movs	r0, #21
 8000fa0:	f7ff fd32 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xe1);
 8000fa4:	20e1      	movs	r0, #225	; 0xe1
 8000fa6:	f7ff fd15 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0xf0);
 8000faa:	20f0      	movs	r0, #240	; 0xf0
 8000fac:	f7ff fd2c 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fd29 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x05);
 8000fb6:	2005      	movs	r0, #5
 8000fb8:	f7ff fd26 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0a);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f7ff fd23 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0b);
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f7ff fd20 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8000fc8:	2007      	movs	r0, #7
 8000fca:	f7ff fd1d 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x32);
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	f7ff fd1a 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x44);
 8000fd4:	2044      	movs	r0, #68	; 0x44
 8000fd6:	f7ff fd17 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x44);
 8000fda:	2044      	movs	r0, #68	; 0x44
 8000fdc:	f7ff fd14 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0c);
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f7ff fd11 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x18);
 8000fe6:	2018      	movs	r0, #24
 8000fe8:	f7ff fd0e 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x17);
 8000fec:	2017      	movs	r0, #23
 8000fee:	f7ff fd0b 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 8000ff2:	2013      	movs	r0, #19
 8000ff4:	f7ff fd08 	bl	8000a08 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x16);
 8000ff8:	2016      	movs	r0, #22
 8000ffa:	f7ff fd05 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xf0);
 8000ffe:	20f0      	movs	r0, #240	; 0xf0
 8001000:	f7ff fce8 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0x3c);
 8001004:	203c      	movs	r0, #60	; 0x3c
 8001006:	f7ff fcff 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0Xf0);
 800100a:	20f0      	movs	r0, #240	; 0xf0
 800100c:	f7ff fce2 	bl	80009d4 <LCD_WR_REG>
	LCD_WR_DATA8(0x69);
 8001010:	2069      	movs	r0, #105	; 0x69
 8001012:	f7ff fcf9 	bl	8000a08 <LCD_WR_DATA8>

	LCD_WR_REG(0X29);
 8001016:	2029      	movs	r0, #41	; 0x29
 8001018:	f7ff fcdc 	bl	80009d4 <LCD_WR_REG>

	//LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
#endif
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <ADC_Calibration>:
u8  batVal;
u16 adcBase = 1<<6;

char strtmp[30];

void ADC_Calibration() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_Delay(100);
 8001024:	2064      	movs	r0, #100	; 0x64
 8001026:	f001 fed9 	bl	8002ddc <HAL_Delay>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <ADC_Read_Data>:

u32 ADC_Read_Data() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <ADC_Read_Data+0x20>)
 8001036:	f001 ff37 	bl	8002ea8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 50);
 800103a:	2132      	movs	r1, #50	; 0x32
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <ADC_Read_Data+0x20>)
 800103e:	f001 ffd9 	bl	8002ff4 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <ADC_Read_Data+0x20>)
 8001044:	f002 f85a 	bl	80030fc <HAL_ADC_GetValue>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200005d4 	.word	0x200005d4

08001054 <Read_Battery_Life>:

void Read_Battery_Life() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af04      	add	r7, sp, #16
	adcVal = ADC_Read_Data(&hadc1);
 800105a:	4816      	ldr	r0, [pc, #88]	; (80010b4 <Read_Battery_Life+0x60>)
 800105c:	f7ff ffe8 	bl	8001030 <ADC_Read_Data>
 8001060:	4602      	mov	r2, r0
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <Read_Battery_Life+0x64>)
 8001064:	601a      	str	r2, [r3, #0]
	// double RealVoltage = adcVal * (double)3.3 / (double) adcBase;
	printf("[ADC Voltage] %d\r\n", (int)adcVal);
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <Read_Battery_Life+0x64>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <Read_Battery_Life+0x68>)
 800106e:	f005 f99f 	bl	80063b0 <iprintf>
	sprintf(strtmp, "BAT:%d%%", (int)adcVal*100/256);
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <Read_Battery_Life+0x64>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	fb03 f302 	mul.w	r3, r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	da00      	bge.n	8001084 <Read_Battery_Life+0x30>
 8001082:	33ff      	adds	r3, #255	; 0xff
 8001084:	121b      	asrs	r3, r3, #8
 8001086:	461a      	mov	r2, r3
 8001088:	490d      	ldr	r1, [pc, #52]	; (80010c0 <Read_Battery_Life+0x6c>)
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <Read_Battery_Life+0x70>)
 800108c:	f005 fa0c 	bl	80064a8 <siprintf>
	LCD_ShowString(215, 0, (const u8*) strtmp, 0X01CF, 0XC618, 16, 0);
 8001090:	2300      	movs	r3, #0
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2310      	movs	r3, #16
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	f24c 6318 	movw	r3, #50712	; 0xc618
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	f240 13cf 	movw	r3, #463	; 0x1cf
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <Read_Battery_Life+0x70>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	20d7      	movs	r0, #215	; 0xd7
 80010a8:	f7ff fec2 	bl	8000e30 <LCD_ShowString>
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200005d4 	.word	0x200005d4
 80010b8:	20002418 	.word	0x20002418
 80010bc:	08007728 	.word	0x08007728
 80010c0:	0800773c 	.word	0x0800773c
 80010c4:	2000241c 	.word	0x2000241c

080010c8 <BLE_reboot>:
	if(ret) printf("[BLEINIT][ERR] set to default fail!\r\n");
	else printf("[BLEINIT][SUC] set to default.\r\n");
	return ret;
}

u8 BLE_reboot(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+RESET");
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <BLE_reboot+0x58>)
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <BLE_reboot+0x5c>)
 80010d2:	cb03      	ldmia	r3!, {r0, r1}
 80010d4:	6010      	str	r0, [r2, #0]
 80010d6:	6051      	str	r1, [r2, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	7213      	strb	r3, [r2, #8]
	tok.num = 0;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <BLE_reboot+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.ret, "OK");
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <BLE_reboot+0x60>)
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <BLE_reboot+0x64>)
 80010e8:	8811      	ldrh	r1, [r2, #0]
 80010ea:	7892      	ldrb	r2, [r2, #2]
 80010ec:	8019      	strh	r1, [r3, #0]
 80010ee:	709a      	strb	r2, [r3, #2]
	u8 ret = AT_CMD_Dispose(&tok);
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <BLE_reboot+0x58>)
 80010f2:	f7ff fa99 	bl	8000628 <AT_CMD_Dispose>
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <BLE_reboot+0x58>)
 80010fc:	f7ff fbea 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] restart fail!\r\n");
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <BLE_reboot+0x46>
 8001106:	480a      	ldr	r0, [pc, #40]	; (8001130 <BLE_reboot+0x68>)
 8001108:	f005 f9c6 	bl	8006498 <puts>
 800110c:	e002      	b.n	8001114 <BLE_reboot+0x4c>
	else printf("[BLEINIT][SUC] restarted.\r\n");
 800110e:	4809      	ldr	r0, [pc, #36]	; (8001134 <BLE_reboot+0x6c>)
 8001110:	f005 f9c2 	bl	8006498 <puts>
	return ret;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000ef4 	.word	0x20000ef4
 8001124:	080077a0 	.word	0x080077a0
 8001128:	20002315 	.word	0x20002315
 800112c:	08007754 	.word	0x08007754
 8001130:	080077ac 	.word	0x080077ac
 8001134:	080077cc 	.word	0x080077cc

08001138 <Qst_UART_Baud>:

u8 Qst_UART_Baud(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BAUD");
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <Qst_UART_Baud+0x5c>)
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <Qst_UART_Baud+0x60>)
 8001142:	cb03      	ldmia	r3!, {r0, r1}
 8001144:	6010      	str	r0, [r2, #0]
 8001146:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <Qst_UART_Baud+0x5c>)
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <Qst_UART_Baud+0x64>)
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <Qst_UART_Baud+0x68>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BAUD=%s,NONE", BAUD);
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <Qst_UART_Baud+0x6c>)
 800115a:	4913      	ldr	r1, [pc, #76]	; (80011a8 <Qst_UART_Baud+0x70>)
 800115c:	4813      	ldr	r0, [pc, #76]	; (80011ac <Qst_UART_Baud+0x74>)
 800115e:	f005 f9a3 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <Qst_UART_Baud+0x5c>)
 8001164:	f7ff fa60 	bl	8000628 <AT_CMD_Dispose>
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <Qst_UART_Baud+0x5c>)
 800116e:	f7ff fbb1 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BAUD not correct\r\n");
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <Qst_UART_Baud+0x48>
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <Qst_UART_Baud+0x78>)
 800117a:	f005 f98d 	bl	8006498 <puts>
 800117e:	e003      	b.n	8001188 <Qst_UART_Baud+0x50>
	else printf("[BLEINIT][SUC]Q: BAUD now is %s\r\n", BAUD);
 8001180:	4908      	ldr	r1, [pc, #32]	; (80011a4 <Qst_UART_Baud+0x6c>)
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <Qst_UART_Baud+0x7c>)
 8001184:	f005 f914 	bl	80063b0 <iprintf>
	return ret;
 8001188:	79fb      	ldrb	r3, [r7, #7]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000ef4 	.word	0x20000ef4
 8001198:	080077e8 	.word	0x080077e8
 800119c:	20000f15 	.word	0x20000f15
 80011a0:	080077f0 	.word	0x080077f0
 80011a4:	200000f4 	.word	0x200000f4
 80011a8:	080077f4 	.word	0x080077f4
 80011ac:	20002315 	.word	0x20002315
 80011b0:	08007804 	.word	0x08007804
 80011b4:	08007828 	.word	0x08007828

080011b8 <Set_UART_Baud>:

u8 Set_UART_Baud(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	if (!Qst_UART_Baud()) return 0;
 80011be:	f7ff ffbb 	bl	8001138 <Qst_UART_Baud>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <Set_UART_Baud+0x14>
 80011c8:	2300      	movs	r3, #0
 80011ca:	e025      	b.n	8001218 <Set_UART_Baud+0x60>
	strcpy(tok.name, "AT+BAUD");
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <Set_UART_Baud+0x68>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <Set_UART_Baud+0x6c>)
 80011d0:	cb03      	ldmia	r3!, {r0, r1}
 80011d2:	6010      	str	r0, [r2, #0]
 80011d4:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <Set_UART_Baud+0x68>)
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], BAUD);
 80011de:	4912      	ldr	r1, [pc, #72]	; (8001228 <Set_UART_Baud+0x70>)
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <Set_UART_Baud+0x74>)
 80011e2:	f005 f990 	bl	8006506 <strcpy>
	sprintf(tok.ret, "OK+BAUD=%s", BAUD);
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <Set_UART_Baud+0x70>)
 80011e8:	4911      	ldr	r1, [pc, #68]	; (8001230 <Set_UART_Baud+0x78>)
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <Set_UART_Baud+0x7c>)
 80011ec:	f005 f95c 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80011f0:	480b      	ldr	r0, [pc, #44]	; (8001220 <Set_UART_Baud+0x68>)
 80011f2:	f7ff fa19 	bl	8000628 <AT_CMD_Dispose>
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <Set_UART_Baud+0x68>)
 80011fc:	f7ff fb6a 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BAUD set fail!\r\n");
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <Set_UART_Baud+0x56>
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <Set_UART_Baud+0x80>)
 8001208:	f005 f946 	bl	8006498 <puts>
 800120c:	e003      	b.n	8001216 <Set_UART_Baud+0x5e>
	else printf("[BLEINIT][SUC] BAUD set as %s\r\n", BAUD);
 800120e:	4906      	ldr	r1, [pc, #24]	; (8001228 <Set_UART_Baud+0x70>)
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <Set_UART_Baud+0x84>)
 8001212:	f005 f8cd 	bl	80063b0 <iprintf>
	return ret;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000ef4 	.word	0x20000ef4
 8001224:	080077e8 	.word	0x080077e8
 8001228:	200000f4 	.word	0x200000f4
 800122c:	20000f15 	.word	0x20000f15
 8001230:	0800784c 	.word	0x0800784c
 8001234:	20002315 	.word	0x20002315
 8001238:	08007858 	.word	0x08007858
 800123c:	08007878 	.word	0x08007878

08001240 <Qst_Role>:

u8 Qst_Role(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+ROLE");
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <Qst_Role+0x5c>)
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <Qst_Role+0x60>)
 800124a:	cb03      	ldmia	r3!, {r0, r1}
 800124c:	6010      	str	r0, [r2, #0]
 800124e:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <Qst_Role+0x5c>)
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <Qst_Role+0x64>)
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <Qst_Role+0x68>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <Qst_Role+0x6c>)
 8001262:	4913      	ldr	r1, [pc, #76]	; (80012b0 <Qst_Role+0x70>)
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <Qst_Role+0x74>)
 8001266:	f005 f91f 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <Qst_Role+0x5c>)
 800126c:	f7ff f9dc 	bl	8000628 <AT_CMD_Dispose>
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <Qst_Role+0x5c>)
 8001276:	f7ff fb2d 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: ROLE not correct\r\n");
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <Qst_Role+0x48>
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <Qst_Role+0x78>)
 8001282:	f005 f909 	bl	8006498 <puts>
 8001286:	e003      	b.n	8001290 <Qst_Role+0x50>
	else printf("[BLEINIT][SUC]Q: ROLE now is %s\r\n", ROLE[1]);
 8001288:	4908      	ldr	r1, [pc, #32]	; (80012ac <Qst_Role+0x6c>)
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <Qst_Role+0x7c>)
 800128c:	f005 f890 	bl	80063b0 <iprintf>
	return ret;
 8001290:	79fb      	ldrb	r3, [r7, #7]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000ef4 	.word	0x20000ef4
 80012a0:	08007898 	.word	0x08007898
 80012a4:	20000f15 	.word	0x20000f15
 80012a8:	080077f0 	.word	0x080077f0
 80012ac:	20000103 	.word	0x20000103
 80012b0:	080078a0 	.word	0x080078a0
 80012b4:	20002315 	.word	0x20002315
 80012b8:	080078ac 	.word	0x080078ac
 80012bc:	080078d0 	.word	0x080078d0

080012c0 <Set_Role>:

u8 Set_Role(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	if (!Qst_Role()) return 0;
 80012c6:	f7ff ffbb 	bl	8001240 <Qst_Role>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <Set_Role+0x14>
 80012d0:	2300      	movs	r3, #0
 80012d2:	e025      	b.n	8001320 <Set_Role+0x60>
	strcpy(tok.name, "AT+ROLE");
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <Set_Role+0x68>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <Set_Role+0x6c>)
 80012d8:	cb03      	ldmia	r3!, {r0, r1}
 80012da:	6010      	str	r0, [r2, #0]
 80012dc:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <Set_Role+0x68>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], ROLE[0]);
 80012e6:	4912      	ldr	r1, [pc, #72]	; (8001330 <Set_Role+0x70>)
 80012e8:	4812      	ldr	r0, [pc, #72]	; (8001334 <Set_Role+0x74>)
 80012ea:	f005 f90c 	bl	8006506 <strcpy>
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <Set_Role+0x78>)
 80012f0:	4912      	ldr	r1, [pc, #72]	; (800133c <Set_Role+0x7c>)
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <Set_Role+0x80>)
 80012f4:	f005 f8d8 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <Set_Role+0x68>)
 80012fa:	f7ff f995 	bl	8000628 <AT_CMD_Dispose>
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <Set_Role+0x68>)
 8001304:	f7ff fae6 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] ROLE set fail!\r\n");
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <Set_Role+0x56>
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <Set_Role+0x84>)
 8001310:	f005 f8c2 	bl	8006498 <puts>
 8001314:	e003      	b.n	800131e <Set_Role+0x5e>
	else printf("[BLEINIT][SUC] ROLE set as %s\r\n", ROLE[1]);
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <Set_Role+0x78>)
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <Set_Role+0x88>)
 800131a:	f005 f849 	bl	80063b0 <iprintf>
	return ret;
 800131e:	79fb      	ldrb	r3, [r7, #7]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000ef4 	.word	0x20000ef4
 800132c:	08007898 	.word	0x08007898
 8001330:	200000fc 	.word	0x200000fc
 8001334:	20000f15 	.word	0x20000f15
 8001338:	20000103 	.word	0x20000103
 800133c:	080078a0 	.word	0x080078a0
 8001340:	20002315 	.word	0x20002315
 8001344:	080078f4 	.word	0x080078f4
 8001348:	08007914 	.word	0x08007914

0800134c <Qst_SPP_Name>:

u8 Qst_SPP_Name(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+NAME");
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <Qst_SPP_Name+0x5c>)
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <Qst_SPP_Name+0x60>)
 8001356:	cb03      	ldmia	r3!, {r0, r1}
 8001358:	6010      	str	r0, [r2, #0]
 800135a:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <Qst_SPP_Name+0x5c>)
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <Qst_SPP_Name+0x64>)
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <Qst_SPP_Name+0x68>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+NAME=%s", NAME[1]);
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <Qst_SPP_Name+0x6c>)
 800136e:	4913      	ldr	r1, [pc, #76]	; (80013bc <Qst_SPP_Name+0x70>)
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <Qst_SPP_Name+0x74>)
 8001372:	f005 f899 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001376:	480c      	ldr	r0, [pc, #48]	; (80013a8 <Qst_SPP_Name+0x5c>)
 8001378:	f7ff f956 	bl	8000628 <AT_CMD_Dispose>
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <Qst_SPP_Name+0x5c>)
 8001382:	f7ff faa7 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: SPP name not correct\r\n");
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <Qst_SPP_Name+0x48>
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <Qst_SPP_Name+0x78>)
 800138e:	f005 f883 	bl	8006498 <puts>
 8001392:	e003      	b.n	800139c <Qst_SPP_Name+0x50>
	else printf("[BLEINIT][SUC]Q: SPP name now is %s\r\n", NAME[1]);
 8001394:	4908      	ldr	r1, [pc, #32]	; (80013b8 <Qst_SPP_Name+0x6c>)
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <Qst_SPP_Name+0x7c>)
 8001398:	f005 f80a 	bl	80063b0 <iprintf>
	return ret;
 800139c:	79fb      	ldrb	r3, [r7, #7]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000ef4 	.word	0x20000ef4
 80013ac:	08007934 	.word	0x08007934
 80013b0:	20000f15 	.word	0x20000f15
 80013b4:	080077f0 	.word	0x080077f0
 80013b8:	20000116 	.word	0x20000116
 80013bc:	0800793c 	.word	0x0800793c
 80013c0:	20002315 	.word	0x20002315
 80013c4:	08007948 	.word	0x08007948
 80013c8:	08007970 	.word	0x08007970

080013cc <Set_SPP_Name>:

u8 Set_SPP_Name(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	if (!Qst_SPP_Name()) return 0;
 80013d2:	f7ff ffbb 	bl	800134c <Qst_SPP_Name>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <Set_SPP_Name+0x14>
 80013dc:	2300      	movs	r3, #0
 80013de:	e027      	b.n	8001430 <Set_SPP_Name+0x64>
	strcpy(tok.name, "AT+NAME");
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <Set_SPP_Name+0x6c>)
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <Set_SPP_Name+0x70>)
 80013e4:	cb03      	ldmia	r3!, {r0, r1}
 80013e6:	6010      	str	r0, [r2, #0]
 80013e8:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <Set_SPP_Name+0x6c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[1]);
 80013f2:	4913      	ldr	r1, [pc, #76]	; (8001440 <Set_SPP_Name+0x74>)
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <Set_SPP_Name+0x78>)
 80013f6:	f005 f886 	bl	8006506 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <Set_SPP_Name+0x7c>)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <Set_SPP_Name+0x80>)
 80013fe:	cb03      	ldmia	r3!, {r0, r1}
 8001400:	6010      	str	r0, [r2, #0]
 8001402:	6051      	str	r1, [r2, #4]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <Set_SPP_Name+0x6c>)
 800140a:	f7ff f90d 	bl	8000628 <AT_CMD_Dispose>
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <Set_SPP_Name+0x6c>)
 8001414:	f7ff fa5e 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] SPP name set fail!\r\n");
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <Set_SPP_Name+0x5a>
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <Set_SPP_Name+0x84>)
 8001420:	f005 f83a 	bl	8006498 <puts>
 8001424:	e003      	b.n	800142e <Set_SPP_Name+0x62>
	else printf("[BLEINIT][SUC] SPP name set as %s\r\n", NAME[1]);
 8001426:	4906      	ldr	r1, [pc, #24]	; (8001440 <Set_SPP_Name+0x74>)
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <Set_SPP_Name+0x88>)
 800142a:	f004 ffc1 	bl	80063b0 <iprintf>
	return ret;
 800142e:	79fb      	ldrb	r3, [r7, #7]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000ef4 	.word	0x20000ef4
 800143c:	08007934 	.word	0x08007934
 8001440:	20000116 	.word	0x20000116
 8001444:	20000f15 	.word	0x20000f15
 8001448:	20002315 	.word	0x20002315
 800144c:	08007998 	.word	0x08007998
 8001450:	080079a4 	.word	0x080079a4
 8001454:	080079c8 	.word	0x080079c8

08001458 <Qst_BLE_Name>:

u8 Qst_BLE_Name(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BNAME");
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <Qst_BLE_Name+0x60>)
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <Qst_BLE_Name+0x64>)
 8001462:	cb03      	ldmia	r3!, {r0, r1}
 8001464:	6010      	str	r0, [r2, #0]
 8001466:	6051      	str	r1, [r2, #4]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <Qst_BLE_Name+0x60>)
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <Qst_BLE_Name+0x68>)
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <Qst_BLE_Name+0x6c>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BNAME=%s", NAME[0]);
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <Qst_BLE_Name+0x70>)
 800147e:	4913      	ldr	r1, [pc, #76]	; (80014cc <Qst_BLE_Name+0x74>)
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <Qst_BLE_Name+0x78>)
 8001482:	f005 f811 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <Qst_BLE_Name+0x60>)
 8001488:	f7ff f8ce 	bl	8000628 <AT_CMD_Dispose>
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <Qst_BLE_Name+0x60>)
 8001492:	f7ff fa1f 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE name not correct\r\n");
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <Qst_BLE_Name+0x4c>
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <Qst_BLE_Name+0x7c>)
 800149e:	f004 fffb 	bl	8006498 <puts>
 80014a2:	e003      	b.n	80014ac <Qst_BLE_Name+0x54>
	else printf("[BLEINIT][SUC]Q: BLE name now is %s\r\n", NAME[0]);
 80014a4:	4908      	ldr	r1, [pc, #32]	; (80014c8 <Qst_BLE_Name+0x70>)
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <Qst_BLE_Name+0x80>)
 80014a8:	f004 ff82 	bl	80063b0 <iprintf>
	return ret;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000ef4 	.word	0x20000ef4
 80014bc:	080079ec 	.word	0x080079ec
 80014c0:	20000f15 	.word	0x20000f15
 80014c4:	080077f0 	.word	0x080077f0
 80014c8:	2000010c 	.word	0x2000010c
 80014cc:	080079f8 	.word	0x080079f8
 80014d0:	20002315 	.word	0x20002315
 80014d4:	08007a04 	.word	0x08007a04
 80014d8:	08007a2c 	.word	0x08007a2c

080014dc <Set_BLE_Name>:

u8 Set_BLE_Name(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	if (!Qst_BLE_Name()) return 0;
 80014e2:	f7ff ffb9 	bl	8001458 <Qst_BLE_Name>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <Set_BLE_Name+0x14>
 80014ec:	2300      	movs	r3, #0
 80014ee:	e029      	b.n	8001544 <Set_BLE_Name+0x68>
	strcpy(tok.name, "AT+BNAME");
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <Set_BLE_Name+0x70>)
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <Set_BLE_Name+0x74>)
 80014f4:	cb03      	ldmia	r3!, {r0, r1}
 80014f6:	6010      	str	r0, [r2, #0]
 80014f8:	6051      	str	r1, [r2, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <Set_BLE_Name+0x70>)
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[0]);
 8001506:	4913      	ldr	r1, [pc, #76]	; (8001554 <Set_BLE_Name+0x78>)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <Set_BLE_Name+0x7c>)
 800150a:	f004 fffc 	bl	8006506 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <Set_BLE_Name+0x80>)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <Set_BLE_Name+0x84>)
 8001512:	cb03      	ldmia	r3!, {r0, r1}
 8001514:	6010      	str	r0, [r2, #0]
 8001516:	6051      	str	r1, [r2, #4]
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <Set_BLE_Name+0x70>)
 800151e:	f7ff f883 	bl	8000628 <AT_CMD_Dispose>
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <Set_BLE_Name+0x70>)
 8001528:	f7ff f9d4 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE name set fail!\r\n");
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <Set_BLE_Name+0x5e>
 8001532:	480c      	ldr	r0, [pc, #48]	; (8001564 <Set_BLE_Name+0x88>)
 8001534:	f004 ffb0 	bl	8006498 <puts>
 8001538:	e003      	b.n	8001542 <Set_BLE_Name+0x66>
	else printf("[BLEINIT][SUC] BLE name set as %s\r\n", NAME[0]);
 800153a:	4906      	ldr	r1, [pc, #24]	; (8001554 <Set_BLE_Name+0x78>)
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <Set_BLE_Name+0x8c>)
 800153e:	f004 ff37 	bl	80063b0 <iprintf>
	return ret;
 8001542:	79fb      	ldrb	r3, [r7, #7]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000ef4 	.word	0x20000ef4
 8001550:	080079ec 	.word	0x080079ec
 8001554:	2000010c 	.word	0x2000010c
 8001558:	20000f15 	.word	0x20000f15
 800155c:	20002315 	.word	0x20002315
 8001560:	08007998 	.word	0x08007998
 8001564:	08007a54 	.word	0x08007a54
 8001568:	08007a78 	.word	0x08007a78

0800156c <Qst_PIN>:

u8 Qst_PIN(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+PIN");
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <Qst_PIN+0x60>)
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <Qst_PIN+0x64>)
 8001576:	6810      	ldr	r0, [r2, #0]
 8001578:	6018      	str	r0, [r3, #0]
 800157a:	8891      	ldrh	r1, [r2, #4]
 800157c:	7992      	ldrb	r2, [r2, #6]
 800157e:	8099      	strh	r1, [r3, #4]
 8001580:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <Qst_PIN+0x60>)
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <Qst_PIN+0x68>)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <Qst_PIN+0x6c>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+PIN=%s", PIN);
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <Qst_PIN+0x70>)
 8001594:	4912      	ldr	r1, [pc, #72]	; (80015e0 <Qst_PIN+0x74>)
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <Qst_PIN+0x78>)
 8001598:	f004 ff86 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <Qst_PIN+0x60>)
 800159e:	f7ff f843 	bl	8000628 <AT_CMD_Dispose>
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <Qst_PIN+0x60>)
 80015a8:	f7ff f994 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: PIN not correct\r\n");
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <Qst_PIN+0x4e>
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <Qst_PIN+0x7c>)
 80015b4:	f004 ff70 	bl	8006498 <puts>
 80015b8:	e003      	b.n	80015c2 <Qst_PIN+0x56>
	else printf("[BLEINIT][SUC]Q: PIN now is %s\r\n", PIN);
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <Qst_PIN+0x70>)
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <Qst_PIN+0x80>)
 80015be:	f004 fef7 	bl	80063b0 <iprintf>
	return ret;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000ef4 	.word	0x20000ef4
 80015d0:	08007a9c 	.word	0x08007a9c
 80015d4:	20000f15 	.word	0x20000f15
 80015d8:	080077f0 	.word	0x080077f0
 80015dc:	20000120 	.word	0x20000120
 80015e0:	08007aa4 	.word	0x08007aa4
 80015e4:	20002315 	.word	0x20002315
 80015e8:	08007ab0 	.word	0x08007ab0
 80015ec:	08007ad4 	.word	0x08007ad4

080015f0 <Set_PIN>:

u8 Set_PIN(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	if (!Qst_PIN()) return 0;
 80015f6:	f7ff ffb9 	bl	800156c <Qst_PIN>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <Set_PIN+0x14>
 8001600:	2300      	movs	r3, #0
 8001602:	e02a      	b.n	800165a <Set_PIN+0x6a>
	strcpy(tok.name, "AT+PIN");
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <Set_PIN+0x74>)
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <Set_PIN+0x78>)
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	6018      	str	r0, [r3, #0]
 800160c:	8891      	ldrh	r1, [r2, #4]
 800160e:	7992      	ldrb	r2, [r2, #6]
 8001610:	8099      	strh	r1, [r3, #4]
 8001612:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <Set_PIN+0x74>)
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], PIN);
 800161c:	4913      	ldr	r1, [pc, #76]	; (800166c <Set_PIN+0x7c>)
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <Set_PIN+0x80>)
 8001620:	f004 ff71 	bl	8006506 <strcpy>
	strcpy(tok.ret, "OKsetPIN");
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <Set_PIN+0x84>)
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <Set_PIN+0x88>)
 8001628:	cb03      	ldmia	r3!, {r0, r1}
 800162a:	6010      	str	r0, [r2, #0]
 800162c:	6051      	str	r1, [r2, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <Set_PIN+0x74>)
 8001634:	f7fe fff8 	bl	8000628 <AT_CMD_Dispose>
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <Set_PIN+0x74>)
 800163e:	f7ff f949 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] PIN set fail!\r\n");
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <Set_PIN+0x60>
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <Set_PIN+0x8c>)
 800164a:	f004 ff25 	bl	8006498 <puts>
 800164e:	e003      	b.n	8001658 <Set_PIN+0x68>
	else printf("[BLEINIT][SUC] PIN set as %s\r\n", PIN);
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <Set_PIN+0x7c>)
 8001652:	480b      	ldr	r0, [pc, #44]	; (8001680 <Set_PIN+0x90>)
 8001654:	f004 feac 	bl	80063b0 <iprintf>
	return ret;
 8001658:	79fb      	ldrb	r3, [r7, #7]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000ef4 	.word	0x20000ef4
 8001668:	08007a9c 	.word	0x08007a9c
 800166c:	20000120 	.word	0x20000120
 8001670:	20000f15 	.word	0x20000f15
 8001674:	20002315 	.word	0x20002315
 8001678:	08007af8 	.word	0x08007af8
 800167c:	08007b04 	.word	0x08007b04
 8001680:	08007b24 	.word	0x08007b24

08001684 <Qst_BLE>:

u8 Qst_BLE(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BLE");
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <Qst_BLE+0x64>)
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <Qst_BLE+0x68>)
 800168e:	6810      	ldr	r0, [r2, #0]
 8001690:	6018      	str	r0, [r3, #0]
 8001692:	8891      	ldrh	r1, [r2, #4]
 8001694:	7992      	ldrb	r2, [r2, #6]
 8001696:	8099      	strh	r1, [r3, #4]
 8001698:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <Qst_BLE+0x64>)
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <Qst_BLE+0x6c>)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <Qst_BLE+0x70>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <Qst_BLE+0x74>)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <Qst_BLE+0x78>)
 80016ae:	cb03      	ldmia	r3!, {r0, r1}
 80016b0:	6010      	str	r0, [r2, #0]
 80016b2:	6051      	str	r1, [r2, #4]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <Qst_BLE+0x64>)
 80016ba:	f7fe ffb5 	bl	8000628 <AT_CMD_Dispose>
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80016c2:	4809      	ldr	r0, [pc, #36]	; (80016e8 <Qst_BLE+0x64>)
 80016c4:	f7ff f906 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE not correct\r\n");
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <Qst_BLE+0x52>
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <Qst_BLE+0x7c>)
 80016d0:	f004 fee2 	bl	8006498 <puts>
 80016d4:	e003      	b.n	80016de <Qst_BLE+0x5a>
	else printf("[BLEINIT][SUC]Q: BLE now is %s\r\n", "0");
 80016d6:	490b      	ldr	r1, [pc, #44]	; (8001704 <Qst_BLE+0x80>)
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <Qst_BLE+0x84>)
 80016da:	f004 fe69 	bl	80063b0 <iprintf>
	return ret;
 80016de:	79fb      	ldrb	r3, [r7, #7]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000ef4 	.word	0x20000ef4
 80016ec:	08007b44 	.word	0x08007b44
 80016f0:	20000f15 	.word	0x20000f15
 80016f4:	080077f0 	.word	0x080077f0
 80016f8:	20002315 	.word	0x20002315
 80016fc:	08007b4c 	.word	0x08007b4c
 8001700:	08007b58 	.word	0x08007b58
 8001704:	08007b7c 	.word	0x08007b7c
 8001708:	08007b80 	.word	0x08007b80

0800170c <Set_BLE>:

u8 Set_BLE(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	if (!Qst_BLE()) return 0;
 8001712:	f7ff ffb7 	bl	8001684 <Qst_BLE>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <Set_BLE+0x14>
 800171c:	2300      	movs	r3, #0
 800171e:	e02a      	b.n	8001776 <Set_BLE+0x6a>
	strcpy(tok.name, "AT+BLE");
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <Set_BLE+0x74>)
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <Set_BLE+0x78>)
 8001724:	6810      	ldr	r0, [r2, #0]
 8001726:	6018      	str	r0, [r3, #0]
 8001728:	8891      	ldrh	r1, [r2, #4]
 800172a:	7992      	ldrb	r2, [r2, #6]
 800172c:	8099      	strh	r1, [r3, #4]
 800172e:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <Set_BLE+0x74>)
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "0");
 8001738:	4a13      	ldr	r2, [pc, #76]	; (8001788 <Set_BLE+0x7c>)
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <Set_BLE+0x80>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <Set_BLE+0x84>)
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <Set_BLE+0x88>)
 8001744:	cb03      	ldmia	r3!, {r0, r1}
 8001746:	6010      	str	r0, [r2, #0]
 8001748:	6051      	str	r1, [r2, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <Set_BLE+0x74>)
 8001750:	f7fe ff6a 	bl	8000628 <AT_CMD_Dispose>
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <Set_BLE+0x74>)
 800175a:	f7ff f8bb 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE set fail!\r\n");
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <Set_BLE+0x60>
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <Set_BLE+0x8c>)
 8001766:	f004 fe97 	bl	8006498 <puts>
 800176a:	e003      	b.n	8001774 <Set_BLE+0x68>
	else printf("[BLEINIT][SUC] BLE set as %s\r\n", "0");
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <Set_BLE+0x80>)
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <Set_BLE+0x90>)
 8001770:	f004 fe1e 	bl	80063b0 <iprintf>
	return ret;
 8001774:	79fb      	ldrb	r3, [r7, #7]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000ef4 	.word	0x20000ef4
 8001784:	08007b44 	.word	0x08007b44
 8001788:	20000f15 	.word	0x20000f15
 800178c:	08007b7c 	.word	0x08007b7c
 8001790:	20002315 	.word	0x20002315
 8001794:	08007b4c 	.word	0x08007b4c
 8001798:	08007ba4 	.word	0x08007ba4
 800179c:	08007bc4 	.word	0x08007bc4

080017a0 <Qst_TUUID>:

u8 Qst_TUUID(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+TUUID");
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <Qst_TUUID+0x60>)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <Qst_TUUID+0x64>)
 80017aa:	cb03      	ldmia	r3!, {r0, r1}
 80017ac:	6010      	str	r0, [r2, #0]
 80017ae:	6051      	str	r1, [r2, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <Qst_TUUID+0x60>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <Qst_TUUID+0x68>)
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <Qst_TUUID+0x6c>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <Qst_TUUID+0x70>)
 80017c6:	4913      	ldr	r1, [pc, #76]	; (8001814 <Qst_TUUID+0x74>)
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <Qst_TUUID+0x78>)
 80017ca:	f004 fe6d 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <Qst_TUUID+0x60>)
 80017d0:	f7fe ff2a 	bl	8000628 <AT_CMD_Dispose>
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <Qst_TUUID+0x60>)
 80017da:	f7ff f87b 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: TUUID not correct\r\n");
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <Qst_TUUID+0x4c>
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <Qst_TUUID+0x7c>)
 80017e6:	f004 fe57 	bl	8006498 <puts>
 80017ea:	e003      	b.n	80017f4 <Qst_TUUID+0x54>
	else printf("[BLEINIT][SUC]Q: TUUID now is %s\r\n", TUUID);
 80017ec:	4908      	ldr	r1, [pc, #32]	; (8001810 <Qst_TUUID+0x70>)
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <Qst_TUUID+0x80>)
 80017f0:	f004 fdde 	bl	80063b0 <iprintf>
	return ret;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000ef4 	.word	0x20000ef4
 8001804:	08007be4 	.word	0x08007be4
 8001808:	20000f15 	.word	0x20000f15
 800180c:	080077f0 	.word	0x080077f0
 8001810:	20000128 	.word	0x20000128
 8001814:	08007bf0 	.word	0x08007bf0
 8001818:	20002315 	.word	0x20002315
 800181c:	08007bfc 	.word	0x08007bfc
 8001820:	08007c20 	.word	0x08007c20

08001824 <Set_TUUID>:

u8 Set_TUUID(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	if (!Qst_TUUID()) return 0;
 800182a:	f7ff ffb9 	bl	80017a0 <Qst_TUUID>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <Set_TUUID+0x14>
 8001834:	2300      	movs	r3, #0
 8001836:	e027      	b.n	8001888 <Set_TUUID+0x64>
	strcpy(tok.name, "AT+TUUID");
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <Set_TUUID+0x6c>)
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <Set_TUUID+0x70>)
 800183c:	cb03      	ldmia	r3!, {r0, r1}
 800183e:	6010      	str	r0, [r2, #0]
 8001840:	6051      	str	r1, [r2, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <Set_TUUID+0x6c>)
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], TUUID);
 800184e:	4912      	ldr	r1, [pc, #72]	; (8001898 <Set_TUUID+0x74>)
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <Set_TUUID+0x78>)
 8001852:	f004 fe58 	bl	8006506 <strcpy>
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <Set_TUUID+0x74>)
 8001858:	4911      	ldr	r1, [pc, #68]	; (80018a0 <Set_TUUID+0x7c>)
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <Set_TUUID+0x80>)
 800185c:	f004 fe24 	bl	80064a8 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <Set_TUUID+0x6c>)
 8001862:	f7fe fee1 	bl	8000628 <AT_CMD_Dispose>
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <Set_TUUID+0x6c>)
 800186c:	f7ff f832 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] TUUID set fail!\r\n");
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <Set_TUUID+0x5a>
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <Set_TUUID+0x84>)
 8001878:	f004 fe0e 	bl	8006498 <puts>
 800187c:	e003      	b.n	8001886 <Set_TUUID+0x62>
	else printf("[BLEINIT][SUC] TUUID set as %s\r\n", TUUID);
 800187e:	4906      	ldr	r1, [pc, #24]	; (8001898 <Set_TUUID+0x74>)
 8001880:	480a      	ldr	r0, [pc, #40]	; (80018ac <Set_TUUID+0x88>)
 8001882:	f004 fd95 	bl	80063b0 <iprintf>
	return ret;
 8001886:	79fb      	ldrb	r3, [r7, #7]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000ef4 	.word	0x20000ef4
 8001894:	08007be4 	.word	0x08007be4
 8001898:	20000128 	.word	0x20000128
 800189c:	20000f15 	.word	0x20000f15
 80018a0:	08007bf0 	.word	0x08007bf0
 80018a4:	20002315 	.word	0x20002315
 80018a8:	08007c44 	.word	0x08007c44
 80018ac:	08007c64 	.word	0x08007c64

080018b0 <BLE_INIT>:
#define NAN_NAN   0
#define CONN_OK   1
#define PARA_OK   2
#define ALL_GREEN 3

void BLE_INIT() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	switch(BLE_state) {
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <BLE_INIT+0x9c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d012      	beq.n	80018e2 <BLE_INIT+0x32>
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d023      	beq.n	8001908 <BLE_INIT+0x58>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d142      	bne.n	800194a <BLE_INIT+0x9a>
	case NAN_NAN:
		BLE_reboot();
 80018c4:	f7ff fc00 	bl	80010c8 <BLE_reboot>
		HAL_Delay(1000);
 80018c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018cc:	f001 fa86 	bl	8002ddc <HAL_Delay>
		if(Set_UART_Baud()) return;
 80018d0:	f7ff fc72 	bl	80011b8 <Set_UART_Baud>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d12a      	bne.n	8001930 <BLE_INIT+0x80>
		BLE_state = CONN_OK;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <BLE_INIT+0x9c>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
		break;
 80018e0:	e033      	b.n	800194a <BLE_INIT+0x9a>
	case CONN_OK:
		if(Set_Role()) return;
 80018e2:	f7ff fced 	bl	80012c0 <Set_Role>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d123      	bne.n	8001934 <BLE_INIT+0x84>
		if(Set_PIN()) return;
 80018ec:	f7ff fe80 	bl	80015f0 <Set_PIN>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d120      	bne.n	8001938 <BLE_INIT+0x88>
		if(Set_TUUID()) return;
 80018f6:	f7ff ff95 	bl	8001824 <Set_TUUID>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d11d      	bne.n	800193c <BLE_INIT+0x8c>
		BLE_state = PARA_OK;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <BLE_INIT+0x9c>)
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
		break;
 8001906:	e020      	b.n	800194a <BLE_INIT+0x9a>
	case PARA_OK:
		if(Set_SPP_Name()) return;
 8001908:	f7ff fd60 	bl	80013cc <Set_SPP_Name>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <BLE_INIT+0x90>
		if(Set_BLE_Name()) return;
 8001912:	f7ff fde3 	bl	80014dc <Set_BLE_Name>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d113      	bne.n	8001944 <BLE_INIT+0x94>
		if(Set_BLE()) return;
 800191c:	f7ff fef6 	bl	800170c <Set_BLE>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d110      	bne.n	8001948 <BLE_INIT+0x98>
		BLE_state = ALL_GREEN;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <BLE_INIT+0x9c>)
 8001928:	2203      	movs	r2, #3
 800192a:	601a      	str	r2, [r3, #0]
		break;
 800192c:	bf00      	nop
 800192e:	e00c      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_UART_Baud()) return;
 8001930:	bf00      	nop
 8001932:	e00a      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_Role()) return;
 8001934:	bf00      	nop
 8001936:	e008      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_PIN()) return;
 8001938:	bf00      	nop
 800193a:	e006      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_TUUID()) return;
 800193c:	bf00      	nop
 800193e:	e004      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_SPP_Name()) return;
 8001940:	bf00      	nop
 8001942:	e002      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_BLE_Name()) return;
 8001944:	bf00      	nop
 8001946:	e000      	b.n	800194a <BLE_INIT+0x9a>
		if(Set_BLE()) return;
 8001948:	bf00      	nop
	}
}
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000243c 	.word	0x2000243c

08001950 <readNum>:
	u8  alt;
} data[10][2];

u8 cnt, dataPos;

u16 readNum (u8 **str) {
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	u16 ret = 0ll;
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]
	while (**str< '0' || **str> '9') ++ *str;
 800195c:	e004      	b.n	8001968 <readNum+0x18>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b2f      	cmp	r3, #47	; 0x2f
 8001970:	d9f5      	bls.n	800195e <readNum+0xe>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b39      	cmp	r3, #57	; 0x39
 800197a:	d8f0      	bhi.n	800195e <readNum+0xe>
	while (**str>='0' && **str<='9') {
 800197c:	e015      	b.n	80019aa <readNum+0x5a>
		ret = (ret<<1) + (ret<<3) + ((**str)^'0');
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	b29b      	uxth	r3, r3
 800198a:	4413      	add	r3, r2
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001998:	b2db      	uxtb	r3, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	81fb      	strh	r3, [r7, #14]
		++ *str;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
	while (**str>='0' && **str<='9') {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b2f      	cmp	r3, #47	; 0x2f
 80019b2:	d904      	bls.n	80019be <readNum+0x6e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b39      	cmp	r3, #57	; 0x39
 80019bc:	d9df      	bls.n	800197e <readNum+0x2e>
	} return ret;
 80019be:	89fb      	ldrh	r3, [r7, #14]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <dispose>:

int dispose (unsigned char *str) {
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	dataPos = !dataPos;
 80019d4:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <dispose+0x11c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <dispose+0x11c>)
 80019e6:	701a      	strb	r2, [r3, #0]
	u8 *p = (u8*) strstr((const char *) str, "-=t:");
 80019e8:	4940      	ldr	r1, [pc, #256]	; (8001aec <dispose+0x120>)
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f004 fd93 	bl	8006516 <strstr>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60bb      	str	r3, [r7, #8]
	cnt = readNum(&p);
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ffa9 	bl	8001950 <readNum>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <dispose+0x124>)
 8001a04:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<cnt; ++ i) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e062      	b.n	8001ad2 <dispose+0x106>
		data[i][dataPos].cat  = readNum(&p);
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff9d 	bl	8001950 <readNum>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <dispose+0x11c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	b2d1      	uxtb	r1, r2
 8001a22:	4a34      	ldr	r2, [pc, #208]	; (8001af4 <dispose+0x128>)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4403      	add	r3, r0
 8001a2a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		if (*p ^ ',') return 1;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b2c      	cmp	r3, #44	; 0x2c
 8001a34:	d001      	beq.n	8001a3a <dispose+0x6e>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e052      	b.n	8001ae0 <dispose+0x114>
		data[i][dataPos].xVal = readNum(&p);
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <dispose+0x11c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461c      	mov	r4, r3
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff83 	bl	8001950 <readNum>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <dispose+0x128>)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4423      	add	r3, r4
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	805a      	strh	r2, [r3, #2]
		if (*p ^ ',') return 1;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b2c      	cmp	r3, #44	; 0x2c
 8001a64:	d001      	beq.n	8001a6a <dispose+0x9e>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e03a      	b.n	8001ae0 <dispose+0x114>
		data[i][dataPos].yVal = readNum(&p);
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <dispose+0x11c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461c      	mov	r4, r3
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff6b 	bl	8001950 <readNum>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <dispose+0x128>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4423      	add	r3, r4
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	809a      	strh	r2, [r3, #4]
		if (*p ^ ',') return 1;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b2c      	cmp	r3, #44	; 0x2c
 8001a94:	d001      	beq.n	8001a9a <dispose+0xce>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e022      	b.n	8001ae0 <dispose+0x114>
		data[i][dataPos].alt  = readNum(&p);
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff56 	bl	8001950 <readNum>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <dispose+0x11c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	b2d1      	uxtb	r1, r2
 8001ab0:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <dispose+0x128>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4403      	add	r3, r0
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	460a      	mov	r2, r1
 8001abe:	719a      	strb	r2, [r3, #6]
		if (*p ^ ';') return 1;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac6:	d001      	beq.n	8001acc <dispose+0x100>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e009      	b.n	8001ae0 <dispose+0x114>
	for (int i=0; i<cnt; ++ i) {
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <dispose+0x124>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4293      	cmp	r3, r2
 8001adc:	db96      	blt.n	8001a0c <dispose+0x40>
	} return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	20002641 	.word	0x20002641
 8001aec:	08007c88 	.word	0x08007c88
 8001af0:	20002640 	.word	0x20002640
 8001af4:	20002644 	.word	0x20002644

08001af8 <decoderDebugOutput>:

void decoderDebugOutput () {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	printf("n=%d\r\n", cnt);
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <decoderDebugOutput+0xa0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4825      	ldr	r0, [pc, #148]	; (8001b9c <decoderDebugOutput+0xa4>)
 8001b06:	f004 fc53 	bl	80063b0 <iprintf>
	for (int i=0; i<cnt; ++ i) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	e038      	b.n	8001b82 <decoderDebugOutput+0x8a>
		printf("[%d] ALT: %d\r\n", i, data[i][dataPos].alt);
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <decoderDebugOutput+0xa8>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <decoderDebugOutput+0xac>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	799b      	ldrb	r3, [r3, #6]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	481f      	ldr	r0, [pc, #124]	; (8001ba8 <decoderDebugOutput+0xb0>)
 8001b2a:	f004 fc41 	bl	80063b0 <iprintf>
		printf("cat = %d\r\n", data[i][dataPos].cat);
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <decoderDebugOutput+0xa8>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <decoderDebugOutput+0xac>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001b40:	4619      	mov	r1, r3
 8001b42:	481a      	ldr	r0, [pc, #104]	; (8001bac <decoderDebugOutput+0xb4>)
 8001b44:	f004 fc34 	bl	80063b0 <iprintf>
		printf("map = %d, %d\r\n", data[i][dataPos].xVal, data[i][dataPos].yVal);
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <decoderDebugOutput+0xa8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <decoderDebugOutput+0xac>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	885b      	ldrh	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <decoderDebugOutput+0xa8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <decoderDebugOutput+0xac>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	440b      	add	r3, r1
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4601      	mov	r1, r0
 8001b76:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <decoderDebugOutput+0xb8>)
 8001b78:	f004 fc1a 	bl	80063b0 <iprintf>
	for (int i=0; i<cnt; ++ i) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <decoderDebugOutput+0xa0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	dbc0      	blt.n	8001b10 <decoderDebugOutput+0x18>
	}
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20002640 	.word	0x20002640
 8001b9c:	08007c90 	.word	0x08007c90
 8001ba0:	20002641 	.word	0x20002641
 8001ba4:	20002644 	.word	0x20002644
 8001ba8:	08007c98 	.word	0x08007c98
 8001bac:	08007ca8 	.word	0x08007ca8
 8001bb0:	08007cb4 	.word	0x08007cb4

08001bb4 <situDraw>:
#define	ALT_L_SET  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET)
#define	ALT_L_CLR  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET)
#define	ALT_R_SET  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET)
#define	ALT_R_CLR  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET)

void situDraw (void) {
 8001bb4:	b5b0      	push	{r4, r5, r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af04      	add	r7, sp, #16
	dataPos = !dataPos;
 8001bba:	4bb1      	ldr	r3, [pc, #708]	; (8001e80 <situDraw+0x2cc>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4bad      	ldr	r3, [pc, #692]	; (8001e80 <situDraw+0x2cc>)
 8001bcc:	701a      	strb	r2, [r3, #0]

#ifdef SHOW_MODE
#endif

	for (int i=0; i<cnt; ++ i) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e0c1      	b.n	8001d58 <situDraw+0x1a4>
		Draw_Circle(data[i][dataPos].xVal, data[i][dataPos].yVal, data[i][dataPos].cat==2? 30:15, BLACK);
 8001bd4:	4baa      	ldr	r3, [pc, #680]	; (8001e80 <situDraw+0x2cc>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4aaa      	ldr	r2, [pc, #680]	; (8001e84 <situDraw+0x2d0>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	440b      	add	r3, r1
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	8858      	ldrh	r0, [r3, #2]
 8001be8:	4ba5      	ldr	r3, [pc, #660]	; (8001e80 <situDraw+0x2cc>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4aa5      	ldr	r2, [pc, #660]	; (8001e84 <situDraw+0x2d0>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	8899      	ldrh	r1, [r3, #4]
 8001bfc:	4ba0      	ldr	r3, [pc, #640]	; (8001e80 <situDraw+0x2cc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461c      	mov	r4, r3
 8001c02:	4aa0      	ldr	r2, [pc, #640]	; (8001e84 <situDraw+0x2d0>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4423      	add	r3, r4
 8001c0a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d101      	bne.n	8001c16 <situDraw+0x62>
 8001c12:	221e      	movs	r2, #30
 8001c14:	e000      	b.n	8001c18 <situDraw+0x64>
 8001c16:	220f      	movs	r2, #15
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f7fe ffa8 	bl	8000b6e <Draw_Circle>
		sprintf(strtmp, "%d", data[i][dataPos].yVal/27);
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <situDraw+0x2cc>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4a97      	ldr	r2, [pc, #604]	; (8001e84 <situDraw+0x2d0>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	440b      	add	r3, r1
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	889a      	ldrh	r2, [r3, #4]
 8001c32:	4b95      	ldr	r3, [pc, #596]	; (8001e88 <situDraw+0x2d4>)
 8001c34:	fba3 1302 	umull	r1, r3, r3, r2
 8001c38:	1ad2      	subs	r2, r2, r3
 8001c3a:	0852      	lsrs	r2, r2, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	4991      	ldr	r1, [pc, #580]	; (8001e8c <situDraw+0x2d8>)
 8001c46:	4892      	ldr	r0, [pc, #584]	; (8001e90 <situDraw+0x2dc>)
 8001c48:	f004 fc2e 	bl	80064a8 <siprintf>
		if (data[i][dataPos].yVal/27>10) LCD_ShowString(data[i][dataPos].xVal-5, data[i][dataPos].yVal-6, (const u8*) strtmp, BLACK, BLACK, 12, 0);
 8001c4c:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <situDraw+0x2cc>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4a8c      	ldr	r2, [pc, #560]	; (8001e84 <situDraw+0x2d0>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	440b      	add	r3, r1
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	889b      	ldrh	r3, [r3, #4]
 8001c60:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001c64:	d922      	bls.n	8001cac <situDraw+0xf8>
 8001c66:	4b86      	ldr	r3, [pc, #536]	; (8001e80 <situDraw+0x2cc>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4a85      	ldr	r2, [pc, #532]	; (8001e84 <situDraw+0x2d0>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	440b      	add	r3, r1
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	3b05      	subs	r3, #5
 8001c7c:	b298      	uxth	r0, r3
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <situDraw+0x2cc>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4a7f      	ldr	r2, [pc, #508]	; (8001e84 <situDraw+0x2d0>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	440b      	add	r3, r1
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	889b      	ldrh	r3, [r3, #4]
 8001c92:	3b06      	subs	r3, #6
 8001c94:	b299      	uxth	r1, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	4a7a      	ldr	r2, [pc, #488]	; (8001e90 <situDraw+0x2dc>)
 8001ca6:	f7ff f8c3 	bl	8000e30 <LCD_ShowString>
 8001caa:	e021      	b.n	8001cf0 <situDraw+0x13c>
		else LCD_ShowString(data[i][dataPos].xVal-2, data[i][dataPos].yVal-6, (const u8*) strtmp, BLACK, BLACK, 12, 0);
 8001cac:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <situDraw+0x2cc>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4a74      	ldr	r2, [pc, #464]	; (8001e84 <situDraw+0x2d0>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	885b      	ldrh	r3, [r3, #2]
 8001cc0:	3b02      	subs	r3, #2
 8001cc2:	b298      	uxth	r0, r3
 8001cc4:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <situDraw+0x2cc>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <situDraw+0x2d0>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	3b06      	subs	r3, #6
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <situDraw+0x2dc>)
 8001cec:	f7ff f8a0 	bl	8000e30 <LCD_ShowString>
		if (data[i][dataPos].alt) {
 8001cf0:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <situDraw+0x2cc>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <situDraw+0x2d0>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	440b      	add	r3, r1
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	799b      	ldrb	r3, [r3, #6]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d024      	beq.n	8001d52 <situDraw+0x19e>
			Draw_Circle(data[i][dataPos].xVal, data[i][dataPos].yVal, data[i][dataPos].cat==2? 28:13, BLACK);
 8001d08:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <situDraw+0x2cc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <situDraw+0x2d0>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	440b      	add	r3, r1
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	8858      	ldrh	r0, [r3, #2]
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <situDraw+0x2cc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <situDraw+0x2d0>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	440b      	add	r3, r1
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	8899      	ldrh	r1, [r3, #4]
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <situDraw+0x2cc>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461c      	mov	r4, r3
 8001d36:	4a53      	ldr	r2, [pc, #332]	; (8001e84 <situDraw+0x2d0>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4423      	add	r3, r4
 8001d3e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d101      	bne.n	8001d4a <situDraw+0x196>
 8001d46:	221c      	movs	r2, #28
 8001d48:	e000      	b.n	8001d4c <situDraw+0x198>
 8001d4a:	220d      	movs	r2, #13
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f7fe ff0e 	bl	8000b6e <Draw_Circle>
	for (int i=0; i<cnt; ++ i) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3301      	adds	r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <situDraw+0x2e0>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f6ff af37 	blt.w	8001bd4 <situDraw+0x20>
		}
	}


	dataPos = !dataPos;
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <situDraw+0x2cc>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <situDraw+0x2cc>)
 8001d78:	701a      	strb	r2, [r3, #0]


	  Draw_Circle(190, 300, 30, GBLUE);
 8001d7a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d7e:	221e      	movs	r2, #30
 8001d80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d84:	20be      	movs	r0, #190	; 0xbe
 8001d86:	f7fe fef2 	bl	8000b6e <Draw_Circle>
	  sprintf(strtmp, "%d", 11);
 8001d8a:	220b      	movs	r2, #11
 8001d8c:	493f      	ldr	r1, [pc, #252]	; (8001e8c <situDraw+0x2d8>)
 8001d8e:	4840      	ldr	r0, [pc, #256]	; (8001e90 <situDraw+0x2dc>)
 8001d90:	f004 fb8a 	bl	80064a8 <siprintf>
	  LCD_ShowString(190-6, 300-6, (const u8*) strtmp, WHITE, WHITE, 12, 1);
 8001d94:	2301      	movs	r3, #1
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	230c      	movs	r3, #12
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da6:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <situDraw+0x2dc>)
 8001da8:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001dac:	20b8      	movs	r0, #184	; 0xb8
 8001dae:	f7ff f83f 	bl	8000e30 <LCD_ShowString>

	  Draw_Circle(263, 299, 30, GBLUE);
 8001db2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001db6:	221e      	movs	r2, #30
 8001db8:	f240 112b 	movw	r1, #299	; 0x12b
 8001dbc:	f240 1007 	movw	r0, #263	; 0x107
 8001dc0:	f7fe fed5 	bl	8000b6e <Draw_Circle>
	  sprintf(strtmp, "%d", 11);
 8001dc4:	220b      	movs	r2, #11
 8001dc6:	4931      	ldr	r1, [pc, #196]	; (8001e8c <situDraw+0x2d8>)
 8001dc8:	4831      	ldr	r0, [pc, #196]	; (8001e90 <situDraw+0x2dc>)
 8001dca:	f004 fb6d 	bl	80064a8 <siprintf>
	  LCD_ShowString(263-6, 300-6, (const u8*) strtmp, WHITE, WHITE, 12, 1);
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de0:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <situDraw+0x2dc>)
 8001de2:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001de6:	f240 1001 	movw	r0, #257	; 0x101
 8001dea:	f7ff f821 	bl	8000e30 <LCD_ShowString>

	ALT_L_SET;
 8001dee:	2201      	movs	r2, #1
 8001df0:	2104      	movs	r1, #4
 8001df2:	4829      	ldr	r0, [pc, #164]	; (8001e98 <situDraw+0x2e4>)
 8001df4:	f001 fe8c 	bl	8003b10 <HAL_GPIO_WritePin>
	ALT_R_SET;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4826      	ldr	r0, [pc, #152]	; (8001e98 <situDraw+0x2e4>)
 8001dfe:	f001 fe87 	bl	8003b10 <HAL_GPIO_WritePin>

	//for (int i=0; i<cnt; ++ i)
	//	Draw_Circle(data[i][dataPos].xVal, data[i][dataPos].yVal, data[i][dataPos].cat==2? 30:15, data[i][dataPos].alt? YELLOW:(data[i][dataPos].cat==2? GREEN:GBLUE));

	for (int i=0; i<cnt; ++ i) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	e10a      	b.n	800201e <situDraw+0x46a>
		Draw_Circle(data[i][dataPos].xVal, data[i][dataPos].yVal, data[i][dataPos].cat==2? 30:15, data[i][dataPos].alt? YELLOW:(data[i][dataPos].cat==2? GREEN:GBLUE));
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <situDraw+0x2cc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <situDraw+0x2d0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	440b      	add	r3, r1
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	8858      	ldrh	r0, [r3, #2]
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <situDraw+0x2cc>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <situDraw+0x2d0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	440b      	add	r3, r1
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	8899      	ldrh	r1, [r3, #4]
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <situDraw+0x2cc>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461c      	mov	r4, r3
 8001e36:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <situDraw+0x2d0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4423      	add	r3, r4
 8001e3e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d101      	bne.n	8001e4a <situDraw+0x296>
 8001e46:	241e      	movs	r4, #30
 8001e48:	e000      	b.n	8001e4c <situDraw+0x298>
 8001e4a:	240f      	movs	r4, #15
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <situDraw+0x2cc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461d      	mov	r5, r3
 8001e52:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <situDraw+0x2d0>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	442b      	add	r3, r5
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	799b      	ldrb	r3, [r3, #6]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11e      	bne.n	8001ea2 <situDraw+0x2ee>
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <situDraw+0x2cc>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <situDraw+0x2d0>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	442b      	add	r3, r5
 8001e72:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d110      	bne.n	8001e9c <situDraw+0x2e8>
 8001e7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e7e:	e012      	b.n	8001ea6 <situDraw+0x2f2>
 8001e80:	20002641 	.word	0x20002641
 8001e84:	20002644 	.word	0x20002644
 8001e88:	2f684bdb 	.word	0x2f684bdb
 8001e8c:	08007cc4 	.word	0x08007cc4
 8001e90:	2000241c 	.word	0x2000241c
 8001e94:	20002640 	.word	0x20002640
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ea0:	e001      	b.n	8001ea6 <situDraw+0x2f2>
 8001ea2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	f7fe fe61 	bl	8000b6e <Draw_Circle>
		sprintf(strtmp, "%d", data[i][dataPos].yVal/27);
 8001eac:	4b61      	ldr	r3, [pc, #388]	; (8002034 <situDraw+0x480>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4a61      	ldr	r2, [pc, #388]	; (8002038 <situDraw+0x484>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	440b      	add	r3, r1
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	889a      	ldrh	r2, [r3, #4]
 8001ec0:	4b5e      	ldr	r3, [pc, #376]	; (800203c <situDraw+0x488>)
 8001ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec6:	1ad2      	subs	r2, r2, r3
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	495b      	ldr	r1, [pc, #364]	; (8002040 <situDraw+0x48c>)
 8001ed4:	485b      	ldr	r0, [pc, #364]	; (8002044 <situDraw+0x490>)
 8001ed6:	f004 fae7 	bl	80064a8 <siprintf>
		if (data[i][dataPos].yVal/27>10) LCD_ShowString(data[i][dataPos].xVal-5, data[i][dataPos].yVal-6, (const u8*) strtmp, WHITE, WHITE, 12, 1);
 8001eda:	4b56      	ldr	r3, [pc, #344]	; (8002034 <situDraw+0x480>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4a55      	ldr	r2, [pc, #340]	; (8002038 <situDraw+0x484>)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	889b      	ldrh	r3, [r3, #4]
 8001eee:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001ef2:	d924      	bls.n	8001f3e <situDraw+0x38a>
 8001ef4:	4b4f      	ldr	r3, [pc, #316]	; (8002034 <situDraw+0x480>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <situDraw+0x484>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	440b      	add	r3, r1
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	b298      	uxth	r0, r3
 8001f0c:	4b49      	ldr	r3, [pc, #292]	; (8002034 <situDraw+0x480>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4a49      	ldr	r2, [pc, #292]	; (8002038 <situDraw+0x484>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	440b      	add	r3, r1
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	3b06      	subs	r3, #6
 8001f22:	b299      	uxth	r1, r3
 8001f24:	2301      	movs	r3, #1
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	230c      	movs	r3, #12
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f36:	4a43      	ldr	r2, [pc, #268]	; (8002044 <situDraw+0x490>)
 8001f38:	f7fe ff7a 	bl	8000e30 <LCD_ShowString>
 8001f3c:	e023      	b.n	8001f86 <situDraw+0x3d2>
		else LCD_ShowString(data[i][dataPos].xVal-2, data[i][dataPos].yVal-6, (const u8*) strtmp, WHITE, WHITE, 12, 1);
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <situDraw+0x480>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <situDraw+0x484>)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	440b      	add	r3, r1
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	3b02      	subs	r3, #2
 8001f54:	b298      	uxth	r0, r3
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <situDraw+0x480>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4a36      	ldr	r2, [pc, #216]	; (8002038 <situDraw+0x484>)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	3b06      	subs	r3, #6
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	230c      	movs	r3, #12
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	4a30      	ldr	r2, [pc, #192]	; (8002044 <situDraw+0x490>)
 8001f82:	f7fe ff55 	bl	8000e30 <LCD_ShowString>
		if (data[i][dataPos].alt) {
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <situDraw+0x480>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <situDraw+0x484>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	440b      	add	r3, r1
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	799b      	ldrb	r3, [r3, #6]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d03c      	beq.n	8002018 <situDraw+0x464>
			if(data[i][dataPos].xVal < (LCD_W>>1)) ALT_L_CLR;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <situDraw+0x480>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <situDraw+0x484>)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	440b      	add	r3, r1
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	885b      	ldrh	r3, [r3, #2]
 8001fb2:	2bef      	cmp	r3, #239	; 0xef
 8001fb4:	d805      	bhi.n	8001fc2 <situDraw+0x40e>
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4823      	ldr	r0, [pc, #140]	; (8002048 <situDraw+0x494>)
 8001fbc:	f001 fda8 	bl	8003b10 <HAL_GPIO_WritePin>
 8001fc0:	e004      	b.n	8001fcc <situDraw+0x418>
			else ALT_R_CLR;
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4820      	ldr	r0, [pc, #128]	; (8002048 <situDraw+0x494>)
 8001fc8:	f001 fda2 	bl	8003b10 <HAL_GPIO_WritePin>
			Draw_Circle(data[i][dataPos].xVal, data[i][dataPos].yVal, data[i][dataPos].cat==2? 28:13, YELLOW);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <situDraw+0x480>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4a19      	ldr	r2, [pc, #100]	; (8002038 <situDraw+0x484>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	440b      	add	r3, r1
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	8858      	ldrh	r0, [r3, #2]
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <situDraw+0x480>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <situDraw+0x484>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	440b      	add	r3, r1
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	8899      	ldrh	r1, [r3, #4]
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <situDraw+0x480>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <situDraw+0x484>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4423      	add	r3, r4
 8002002:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d101      	bne.n	800200e <situDraw+0x45a>
 800200a:	221c      	movs	r2, #28
 800200c:	e000      	b.n	8002010 <situDraw+0x45c>
 800200e:	220d      	movs	r2, #13
 8002010:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002014:	f7fe fdab 	bl	8000b6e <Draw_Circle>
	for (int i=0; i<cnt; ++ i) {
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <situDraw+0x498>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4293      	cmp	r3, r2
 8002028:	f6ff aeee 	blt.w	8001e08 <situDraw+0x254>
		}
	}


	//Draw_Circle(xpos, ypos, r, color, 1);
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bdb0      	pop	{r4, r5, r7, pc}
 8002034:	20002641 	.word	0x20002641
 8002038:	20002644 	.word	0x20002644
 800203c:	2f684bdb 	.word	0x2f684bdb
 8002040:	08007cc4 	.word	0x08007cc4
 8002044:	2000241c 	.word	0x2000241c
 8002048:	40020400 	.word	0x40020400
 800204c:	20002640 	.word	0x20002640

08002050 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

char strtmp[30];

PUTCHAR_PROTOTYPE {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8002058:	1d39      	adds	r1, r7, #4
 800205a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800205e:	2201      	movs	r2, #1
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <__io_putchar+0x20>)
 8002062:	f003 f99e 	bl	80053a2 <HAL_UART_Transmit>
	return ch;
 8002066:	687b      	ldr	r3, [r7, #4]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200026e4 	.word	0x200026e4

08002074 <HAL_UART_RxCpltCallback>:
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};
unsigned char UART2RxUklRdFlg  = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && UART2RxUklRdFlg) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <HAL_UART_RxCpltCallback+0x78>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d12f      	bne.n	80020e6 <HAL_UART_RxCpltCallback+0x72>
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_UART_RxCpltCallback+0x7c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d02b      	beq.n	80020e6 <HAL_UART_RxCpltCallback+0x72>
		if (!(UART2Rxtmp[0]^0x0A) || !(UART2Rxtmp[0]^0x0D)) {
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_UART_RxCpltCallback+0x80>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d003      	beq.n	800209e <HAL_UART_RxCpltCallback+0x2a>
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_UART_RxCpltCallback+0x80>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b0d      	cmp	r3, #13
 800209c:	d107      	bne.n	80020ae <HAL_UART_RxCpltCallback+0x3a>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_UART_RxCpltCallback+0x84>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01e      	beq.n	80020e4 <HAL_UART_RxCpltCallback+0x70>
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_UART_RxCpltCallback+0x88>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e01a      	b.n	80020e4 <HAL_UART_RxCpltCallback+0x70>
		} if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_UART_RxCpltCallback+0x84>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d20e      	bcs.n	80020d6 <HAL_UART_RxCpltCallback+0x62>
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_UART_RxCpltCallback+0x84>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_UART_RxCpltCallback+0x84>)
 80020c0:	600a      	str	r2, [r1, #0]
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_UART_RxCpltCallback+0x80>)
 80020c4:	7811      	ldrb	r1, [r2, #0]
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_UART_RxCpltCallback+0x8c>)
 80020c8:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 80020ca:	2201      	movs	r2, #1
 80020cc:	4909      	ldr	r1, [pc, #36]	; (80020f4 <HAL_UART_RxCpltCallback+0x80>)
 80020ce:	480d      	ldr	r0, [pc, #52]	; (8002104 <HAL_UART_RxCpltCallback+0x90>)
 80020d0:	f003 faeb 	bl	80056aa <HAL_UART_Receive_IT>
 80020d4:	e007      	b.n	80020e6 <HAL_UART_RxCpltCallback+0x72>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_UART_RxCpltCallback+0x88>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	480a      	ldr	r0, [pc, #40]	; (8002108 <HAL_UART_RxCpltCallback+0x94>)
 80020de:	f004 f9db 	bl	8006498 <puts>
 80020e2:	e000      	b.n	80020e6 <HAL_UART_RxCpltCallback+0x72>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 80020e4:	bf00      	nop
	}
}
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40004400 	.word	0x40004400
 80020f0:	200005c5 	.word	0x200005c5
 80020f4:	200005c4 	.word	0x200005c4
 80020f8:	200005c0 	.word	0x200005c0
 80020fc:	200005bc 	.word	0x200005bc
 8002100:	200001bc 	.word	0x200001bc
 8002104:	20000eb4 	.word	0x20000eb4
 8002108:	08007cc8 	.word	0x08007cc8

0800210c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
//				Cnange_TFT_Backlight();
//				while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
//			}
//		}
//	}
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <UART2_Clear>:

void UART2_Clear() {
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	e007      	b.n	8002140 <UART2_Clear+0x1c>
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <UART2_Clear+0x48>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3301      	adds	r3, #1
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <UART2_Clear+0x4c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3f2      	bcc.n	8002130 <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = UART2RxUklRdFlg = 0;
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <UART2_Clear+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <UART2_Clear+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <UART2_Clear+0x4c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <UART2_Clear+0x54>)
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	200001bc 	.word	0x200001bc
 8002170:	200005c0 	.word	0x200005c0
 8002174:	200005c5 	.word	0x200005c5
 8002178:	200005bc 	.word	0x200005bc

0800217c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002182:	f000 fdb9 	bl	8002cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002186:	f000 f8bb 	bl	8002300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800218a:	f000 fa6b 	bl	8002664 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800218e:	f000 fa11 	bl	80025b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002192:	f000 fa3d 	bl	8002610 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002196:	f000 f911 	bl	80023bc <MX_ADC1_Init>
  MX_TIM2_Init();
 800219a:	f000 f997 	bl	80024cc <MX_TIM2_Init>
  MX_SPI1_Init();
 800219e:	f000 f95f 	bl	8002460 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UART2RxUklRdFlg = 0;
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <main+0x154>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  ADC_Calibration();
 80021a8:	f7fe ff3a 	bl	8001020 <ADC_Calibration>
  //TFT_ReStart();
  TFT_INIT();
 80021ac:	f7fe fe6f 	bl	8000e8e <TFT_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80021b0:	2108      	movs	r1, #8
 80021b2:	4848      	ldr	r0, [pc, #288]	; (80022d4 <main+0x158>)
 80021b4:	f002 fbbe 	bl	8004934 <HAL_TIM_PWM_Start>
  Set_TFT_Backlight_PWM(100);
 80021b8:	2064      	movs	r0, #100	; 0x64
 80021ba:	f7fe fbb1 	bl	8000920 <Set_TFT_Backlight_PWM>
  //LCD_Fill(10, 10, 50, 50, 0XFFE0);

  //Draw_Circle(100, 100, 30, 0xFFE0);

  Read_Battery_Life();
 80021be:	f7fe ff49 	bl	8001054 <Read_Battery_Life>
  printf("[%d]%s\r\n", TIME_TO_PRINT, UART2RxBuf);
 80021c2:	f000 fdff 	bl	8002dc4 <HAL_GetTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4a43      	ldr	r2, [pc, #268]	; (80022d8 <main+0x15c>)
 80021ca:	4619      	mov	r1, r3
 80021cc:	4843      	ldr	r0, [pc, #268]	; (80022dc <main+0x160>)
 80021ce:	f004 f8ef 	bl	80063b0 <iprintf>


  //sprintf(strtmp, "%s", "WAITING CONNECTION");
  //LCD_ShowString(215, 100, (const u8*) strtmp, 0X01CF, 0XC618, 16, 0);

  while (BLE_state^ALL_GREEN) BLE_INIT();
 80021d2:	e001      	b.n	80021d8 <main+0x5c>
 80021d4:	f7ff fb6c 	bl	80018b0 <BLE_INIT>
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <main+0x164>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d1f9      	bne.n	80021d4 <main+0x58>
  printf("[BLEINIT] SUCCESS.\r\n");
 80021e0:	4840      	ldr	r0, [pc, #256]	; (80022e4 <main+0x168>)
 80021e2:	f004 f959 	bl	8006498 <puts>

  //LCD_ShowString(215, 100, (const u8*) strtmp, 0X01CF, 0XC618, 16, 0);
  //LCD_ShowString(215, 100, (const u8*) strtmp, BLACK, BLACK, 16, 0);


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	2104      	movs	r1, #4
 80021ea:	483f      	ldr	r0, [pc, #252]	; (80022e8 <main+0x16c>)
 80021ec:	f001 fc90 	bl	8003b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2102      	movs	r1, #2
 80021f4:	483c      	ldr	r0, [pc, #240]	; (80022e8 <main+0x16c>)
 80021f6:	f001 fc8b 	bl	8003b10 <HAL_GPIO_WritePin>
  int PWM_TEST_STA = 0;
  int PWM_UP_OR_DN = 1;
  int PWM_UP_CNTER = 0;
#endif

  Draw_Circle(190, 300, 30, GBLUE);
 80021fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021fe:	221e      	movs	r2, #30
 8002200:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002204:	20be      	movs	r0, #190	; 0xbe
 8002206:	f7fe fcb2 	bl	8000b6e <Draw_Circle>
  sprintf(strtmp, "%d", 11);
 800220a:	220b      	movs	r2, #11
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <main+0x170>)
 800220e:	4838      	ldr	r0, [pc, #224]	; (80022f0 <main+0x174>)
 8002210:	f004 f94a 	bl	80064a8 <siprintf>
  LCD_ShowString(190-6, 300-6, (const u8*) strtmp, WHITE, WHITE, 12, 1);
 8002214:	2301      	movs	r3, #1
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	230c      	movs	r3, #12
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <main+0x174>)
 8002228:	f44f 7193 	mov.w	r1, #294	; 0x126
 800222c:	20b8      	movs	r0, #184	; 0xb8
 800222e:	f7fe fdff 	bl	8000e30 <LCD_ShowString>

  Draw_Circle(263, 299, 30, GBLUE);
 8002232:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002236:	221e      	movs	r2, #30
 8002238:	f240 112b 	movw	r1, #299	; 0x12b
 800223c:	f240 1007 	movw	r0, #263	; 0x107
 8002240:	f7fe fc95 	bl	8000b6e <Draw_Circle>
  sprintf(strtmp, "%d", 11);
 8002244:	220b      	movs	r2, #11
 8002246:	4929      	ldr	r1, [pc, #164]	; (80022ec <main+0x170>)
 8002248:	4829      	ldr	r0, [pc, #164]	; (80022f0 <main+0x174>)
 800224a:	f004 f92d 	bl	80064a8 <siprintf>
  LCD_ShowString(263-6, 300-6, (const u8*) strtmp, WHITE, WHITE, 12, 1);
 800224e:	2301      	movs	r3, #1
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	230c      	movs	r3, #12
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <main+0x174>)
 8002262:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002266:	f240 1001 	movw	r0, #257	; 0x101
 800226a:	f7fe fde1 	bl	8000e30 <LCD_ShowString>

  //UART2RxUklRd();
  while (1)
  {

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0) {
 800226e:	2110      	movs	r1, #16
 8002270:	481d      	ldr	r0, [pc, #116]	; (80022e8 <main+0x16c>)
 8002272:	f001 fc35 	bl	8003ae0 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <main+0x118>
		  TFT_INIT(); LCD_Fill(0,0,LCD_W,LCD_H,BLACK);
 800227c:	f7fe fe07 	bl	8000e8e <TFT_INIT>
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800228c:	2100      	movs	r1, #0
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe fc18 	bl	8000ac4 <LCD_Fill>
		  } PWM_UP_CNTER = 0;
	  } HAL_Delay(0);
	  //printf("[PWMTEST] PWM: %d\r\n", PWM_TEST_STA);
#endif

	  UART2RxUklRd();
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <main+0x154>)
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4915      	ldr	r1, [pc, #84]	; (80022f4 <main+0x178>)
 800229e:	4816      	ldr	r0, [pc, #88]	; (80022f8 <main+0x17c>)
 80022a0:	f003 fa03 	bl	80056aa <HAL_UART_Receive_IT>
	  //TFT_DrawRect(50, 100, 50, 100, 0x001F);
	  if (UART2RxFlg) {
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <main+0x180>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0e0      	beq.n	800226e <main+0xf2>
		  printf("[%d]%s\r\n", TIME_TO_PRINT, UART2RxBuf);
 80022ac:	f000 fd8a 	bl	8002dc4 <HAL_GetTick>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <main+0x15c>)
 80022b4:	4619      	mov	r1, r3
 80022b6:	4809      	ldr	r0, [pc, #36]	; (80022dc <main+0x160>)
 80022b8:	f004 f87a 	bl	80063b0 <iprintf>
		  dispose(UART2RxBuf);
 80022bc:	4806      	ldr	r0, [pc, #24]	; (80022d8 <main+0x15c>)
 80022be:	f7ff fb85 	bl	80019cc <dispose>
		  decoderDebugOutput();
 80022c2:	f7ff fc19 	bl	8001af8 <decoderDebugOutput>
		  situDraw();
 80022c6:	f7ff fc75 	bl	8001bb4 <situDraw>
		  UART2_Clear();
 80022ca:	f7ff ff2b 	bl	8002124 <UART2_Clear>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0) {
 80022ce:	e7ce      	b.n	800226e <main+0xf2>
 80022d0:	200005c5 	.word	0x200005c5
 80022d4:	20000e74 	.word	0x20000e74
 80022d8:	200001bc 	.word	0x200001bc
 80022dc:	08007ce4 	.word	0x08007ce4
 80022e0:	2000243c 	.word	0x2000243c
 80022e4:	08007cf0 	.word	0x08007cf0
 80022e8:	40020400 	.word	0x40020400
 80022ec:	08007d04 	.word	0x08007d04
 80022f0:	2000241c 	.word	0x2000241c
 80022f4:	200005c4 	.word	0x200005c4
 80022f8:	20000eb4 	.word	0x20000eb4
 80022fc:	200005bc 	.word	0x200005bc

08002300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b094      	sub	sp, #80	; 0x50
 8002304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	2230      	movs	r2, #48	; 0x30
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f846 	bl	80063a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <SystemClock_Config+0xb4>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <SystemClock_Config+0xb4>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <SystemClock_Config+0xb4>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <SystemClock_Config+0xb8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <SystemClock_Config+0xb8>)
 800234a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <SystemClock_Config+0xb8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800235c:	2302      	movs	r3, #2
 800235e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002360:	2301      	movs	r3, #1
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002364:	2310      	movs	r3, #16
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002368:	2300      	movs	r3, #0
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fbff 	bl	8003b74 <HAL_RCC_OscConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800237c:	f000 f9e6 	bl	800274c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002380:	230f      	movs	r3, #15
 8002382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f001 fe5a 	bl	8004054 <HAL_RCC_ClockConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023a6:	f000 f9d1 	bl	800274c <Error_Handler>
  }
}
 80023aa:	bf00      	nop
 80023ac:	3750      	adds	r7, #80	; 0x50
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000

080023bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_ADC1_Init+0x98>)
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <MX_ADC1_Init+0x9c>)
 80023d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_ADC1_Init+0x98>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <MX_ADC1_Init+0x98>)
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_ADC1_Init+0x98>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_ADC1_Init+0x98>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_ADC1_Init+0x98>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_ADC1_Init+0x98>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_ADC1_Init+0x98>)
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <MX_ADC1_Init+0xa0>)
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_ADC1_Init+0x98>)
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_ADC1_Init+0x98>)
 800240a:	2201      	movs	r2, #1
 800240c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_ADC1_Init+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_ADC1_Init+0x98>)
 8002418:	2201      	movs	r2, #1
 800241a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_ADC1_Init+0x98>)
 800241e:	f000 fcff 	bl	8002e20 <HAL_ADC_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002428:	f000 f990 	bl	800274c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800242c:	2306      	movs	r3, #6
 800242e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_ADC1_Init+0x98>)
 800243e:	f000 fe6b 	bl	8003118 <HAL_ADC_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002448:	f000 f980 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200005d4 	.word	0x200005d4
 8002458:	40012000 	.word	0x40012000
 800245c:	0f000001 	.word	0x0f000001

08002460 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_SPI1_Init+0x64>)
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <MX_SPI1_Init+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800246a:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <MX_SPI1_Init+0x64>)
 800246c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_SPI1_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_SPI1_Init+0x64>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_SPI1_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_SPI1_Init+0x64>)
 800248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002490:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_SPI1_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <MX_SPI1_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_SPI1_Init+0x64>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <MX_SPI1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_SPI1_Init+0x64>)
 80024ac:	220a      	movs	r2, #10
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <MX_SPI1_Init+0x64>)
 80024b2:	f001 ff9b 	bl	80043ec <HAL_SPI_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024bc:	f000 f946 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000e1c 	.word	0x20000e1c
 80024c8:	40013000 	.word	0x40013000

080024cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08e      	sub	sp, #56	; 0x38
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	f107 0320 	add.w	r3, r7, #32
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <MX_TIM2_Init+0xe4>)
 80024fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002506:	229f      	movs	r2, #159	; 0x9f
 8002508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <MX_TIM2_Init+0xe4>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002512:	2263      	movs	r2, #99	; 0x63
 8002514:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <MX_TIM2_Init+0xe4>)
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002522:	4823      	ldr	r0, [pc, #140]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002524:	f002 f9a6 	bl	8004874 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800252e:	f000 f90d 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253c:	4619      	mov	r1, r3
 800253e:	481c      	ldr	r0, [pc, #112]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002540:	f002 faf0 	bl	8004b24 <HAL_TIM_ConfigClockSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800254a:	f000 f8ff 	bl	800274c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800254e:	4818      	ldr	r0, [pc, #96]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002550:	f002 f9bb 	bl	80048ca <HAL_TIM_PWM_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800255a:	f000 f8f7 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002566:	f107 0320 	add.w	r3, r7, #32
 800256a:	4619      	mov	r1, r3
 800256c:	4810      	ldr	r0, [pc, #64]	; (80025b0 <MX_TIM2_Init+0xe4>)
 800256e:	f002 fe5d 	bl	800522c <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002578:	f000 f8e8 	bl	800274c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257c:	2360      	movs	r3, #96	; 0x60
 800257e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	2208      	movs	r2, #8
 8002590:	4619      	mov	r1, r3
 8002592:	4807      	ldr	r0, [pc, #28]	; (80025b0 <MX_TIM2_Init+0xe4>)
 8002594:	f002 fa00 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800259e:	f000 f8d5 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <MX_TIM2_Init+0xe4>)
 80025a4:	f000 f9aa 	bl	80028fc <HAL_TIM_MspPostInit>

}
 80025a8:	bf00      	nop
 80025aa:	3738      	adds	r7, #56	; 0x38
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000e74 	.word	0x20000e74

080025b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <MX_USART1_UART_Init+0x54>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <MX_USART1_UART_Init+0x50>)
 80025ec:	f002 fe8c 	bl	8005308 <HAL_UART_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025f6:	f000 f8a9 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 80025fa:	4804      	ldr	r0, [pc, #16]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025fc:	f003 ff4c 	bl	8006498 <puts>

  /* USER CODE END USART1_Init 2 */

}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200026e4 	.word	0x200026e4
 8002608:	40011000 	.word	0x40011000
 800260c:	08007d08 	.word	0x08007d08

08002610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_USART2_UART_Init+0x4c>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <MX_USART2_UART_Init+0x50>)
 8002618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <MX_USART2_UART_Init+0x4c>)
 800261c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_USART2_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_USART2_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_USART2_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_USART2_UART_Init+0x4c>)
 8002636:	220c      	movs	r2, #12
 8002638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_USART2_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_USART2_UART_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_USART2_UART_Init+0x4c>)
 8002648:	f002 fe5e 	bl	8005308 <HAL_UART_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002652:	f000 f87b 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000eb4 	.word	0x20000eb4
 8002660:	40004400 	.word	0x40004400

08002664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <MX_GPIO_Init+0xd8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a2e      	ldr	r2, [pc, #184]	; (800273c <MX_GPIO_Init+0xd8>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <MX_GPIO_Init+0xd8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <MX_GPIO_Init+0xd8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a27      	ldr	r2, [pc, #156]	; (800273c <MX_GPIO_Init+0xd8>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <MX_GPIO_Init+0xd8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 80026b2:	2200      	movs	r2, #0
 80026b4:	21e6      	movs	r1, #230	; 0xe6
 80026b6:	4822      	ldr	r0, [pc, #136]	; (8002740 <MX_GPIO_Init+0xdc>)
 80026b8:	f001 fa2a 	bl	8003b10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026bc:	2301      	movs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026c0:	4b20      	ldr	r3, [pc, #128]	; (8002744 <MX_GPIO_Init+0xe0>)
 80026c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4619      	mov	r1, r3
 80026ce:	481e      	ldr	r0, [pc, #120]	; (8002748 <MX_GPIO_Init+0xe4>)
 80026d0:	f001 f884 	bl	80037dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80026d4:	2306      	movs	r3, #6
 80026d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4619      	mov	r1, r3
 80026ea:	4815      	ldr	r0, [pc, #84]	; (8002740 <MX_GPIO_Init+0xdc>)
 80026ec:	f001 f876 	bl	80037dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026f0:	2310      	movs	r3, #16
 80026f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	4619      	mov	r1, r3
 8002702:	480f      	ldr	r0, [pc, #60]	; (8002740 <MX_GPIO_Init+0xdc>)
 8002704:	f001 f86a 	bl	80037dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002708:	23e0      	movs	r3, #224	; 0xe0
 800270a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270c:	2301      	movs	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4619      	mov	r1, r3
 800271e:	4808      	ldr	r0, [pc, #32]	; (8002740 <MX_GPIO_Init+0xdc>)
 8002720:	f001 f85c 	bl	80037dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	2006      	movs	r0, #6
 800272a:	f000 fffe 	bl	800372a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800272e:	2006      	movs	r0, #6
 8002730:	f001 f817 	bl	8003762 <HAL_NVIC_EnableIRQ>

}
 8002734:	bf00      	nop
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40020400 	.word	0x40020400
 8002744:	10210000 	.word	0x10210000
 8002748:	40020000 	.word	0x40020000

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002752:	e7fe      	b.n	8002752 <Error_Handler+0x6>

08002754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_MspInit+0x4c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_MspInit+0x4c>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_ADC_MspInit+0x7c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d127      	bne.n	8002816 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_ADC_MspInit+0x80>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <HAL_ADC_MspInit+0x80>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_ADC_MspInit+0x80>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_ADC_MspInit+0x80>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_ADC_MspInit+0x80>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_ADC_MspInit+0x80>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027fe:	2340      	movs	r3, #64	; 0x40
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002802:	2303      	movs	r3, #3
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <HAL_ADC_MspInit+0x84>)
 8002812:	f000 ffe3 	bl	80037dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40012000 	.word	0x40012000
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_SPI_MspInit+0x84>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12b      	bne.n	80028a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002886:	23a0      	movs	r3, #160	; 0xa0
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002896:	2305      	movs	r3, #5
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <HAL_SPI_MspInit+0x8c>)
 80028a2:	f000 ff9b 	bl	80037dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028a6:	bf00      	nop
 80028a8:	3728      	adds	r7, #40	; 0x28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40013000 	.word	0x40013000
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020000 	.word	0x40020000

080028bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d10d      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_TIM_Base_MspInit+0x3c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_TIM_Base_MspInit+0x3c>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_TIM_Base_MspInit+0x3c>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d11e      	bne.n	800295c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_TIM_MspPostInit+0x68>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <HAL_TIM_MspPostInit+0x68>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_TIM_MspPostInit+0x68>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800293a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800294c:	2301      	movs	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4619      	mov	r1, r3
 8002956:	4804      	ldr	r0, [pc, #16]	; (8002968 <HAL_TIM_MspPostInit+0x6c>)
 8002958:	f000 ff40 	bl	80037dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40020400 	.word	0x40020400

0800296c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_UART_MspInit+0xf8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12d      	bne.n	80029ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d8:	2307      	movs	r3, #7
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4822      	ldr	r0, [pc, #136]	; (8002a6c <HAL_UART_MspInit+0x100>)
 80029e4:	f000 fefa 	bl	80037dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029e8:	e038      	b.n	8002a5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <HAL_UART_MspInit+0x104>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d133      	bne.n	8002a5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_UART_MspInit+0xfc>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a2c:	230c      	movs	r3, #12
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4809      	ldr	r0, [pc, #36]	; (8002a6c <HAL_UART_MspInit+0x100>)
 8002a48:	f000 fec8 	bl	80037dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2026      	movs	r0, #38	; 0x26
 8002a52:	f000 fe6a 	bl	800372a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a56:	2026      	movs	r0, #38	; 0x26
 8002a58:	f000 fe83 	bl	8003762 <HAL_NVIC_EnableIRQ>
}
 8002a5c:	bf00      	nop
 8002a5e:	3730      	adds	r7, #48	; 0x30
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40011000 	.word	0x40011000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40004400 	.word	0x40004400

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <NMI_Handler+0x4>

08002a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <HardFault_Handler+0x4>

08002a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <MemManage_Handler+0x4>

08002a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <BusFault_Handler+0x4>

08002a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <UsageFault_Handler+0x4>

08002a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac0:	f000 f96c 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8002acc:	2101      	movs	r1, #1
 8002ace:	4811      	ldr	r0, [pc, #68]	; (8002b14 <EXTI0_IRQHandler+0x4c>)
 8002ad0:	f001 f806 	bl	8003ae0 <HAL_GPIO_ReadPin>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d113      	bne.n	8002b02 <EXTI0_IRQHandler+0x3a>
		HAL_Delay(20);
 8002ada:	2014      	movs	r0, #20
 8002adc:	f000 f97e 	bl	8002ddc <HAL_Delay>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	480c      	ldr	r0, [pc, #48]	; (8002b14 <EXTI0_IRQHandler+0x4c>)
 8002ae4:	f000 fffc 	bl	8003ae0 <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <EXTI0_IRQHandler+0x3a>
			Cnange_TFT_Backlight();
 8002aee:	f7fd ff29 	bl	8000944 <Cnange_TFT_Backlight>
			while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 8002af2:	bf00      	nop
 8002af4:	2101      	movs	r1, #1
 8002af6:	4807      	ldr	r0, [pc, #28]	; (8002b14 <EXTI0_IRQHandler+0x4c>)
 8002af8:	f000 fff2 	bl	8003ae0 <HAL_GPIO_ReadPin>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f8      	beq.n	8002af4 <EXTI0_IRQHandler+0x2c>
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f001 f81e 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <EXTI0_IRQHandler+0x50>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	615a      	str	r2, [r3, #20]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <USART2_IRQHandler+0x10>)
 8002b22:	f002 fe17 	bl	8005754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000eb4 	.word	0x20000eb4

08002b30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	e00a      	b.n	8002b58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b42:	f3af 8000 	nop.w
 8002b46:	4601      	mov	r1, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	60ba      	str	r2, [r7, #8]
 8002b4e:	b2ca      	uxtb	r2, r1
 8002b50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbf0      	blt.n	8002b42 <_read+0x12>
	}

return len;
 8002b60:	687b      	ldr	r3, [r7, #4]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e009      	b.n	8002b90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60ba      	str	r2, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fa63 	bl	8002050 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	dbf1      	blt.n	8002b7c <_write+0x12>
	}
	return len;
 8002b98:	687b      	ldr	r3, [r7, #4]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_close>:

int _close(int file)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
	return -1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bca:	605a      	str	r2, [r3, #4]
	return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_isatty>:

int _isatty(int file)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	return 1;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <_sbrk+0x5c>)
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <_sbrk+0x60>)
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <_sbrk+0x64>)
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <_sbrk+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c3c:	f003 fb86 	bl	800634c <__errno>
 8002c40:	4602      	mov	r2, r0
 8002c42:	230c      	movs	r3, #12
 8002c44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e009      	b.n	8002c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <_sbrk+0x64>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20020000 	.word	0x20020000
 8002c6c:	00000400 	.word	0x00000400
 8002c70:	200005c8 	.word	0x200005c8
 8002c74:	20002730 	.word	0x20002730

08002c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <SystemInit+0x28>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <SystemInit+0x28>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SystemInit+0x28>)
 8002c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c92:	609a      	str	r2, [r3, #8]
#endif
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ca8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002caa:	e003      	b.n	8002cb4 <LoopCopyDataInit>

08002cac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cb2:	3104      	adds	r1, #4

08002cb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cb4:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cbc:	d3f6      	bcc.n	8002cac <CopyDataInit>
  ldr  r2, =_sbss
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cc0:	e002      	b.n	8002cc8 <LoopFillZerobss>

08002cc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cc4:	f842 3b04 	str.w	r3, [r2], #4

08002cc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ccc:	d3f9      	bcc.n	8002cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cce:	f7ff ffd3 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f003 fb41 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd6:	f7ff fa51 	bl	800217c <main>
  bx  lr    
 8002cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ce0:	08008840 	.word	0x08008840
  ldr  r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ce8:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8002cec:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8002cf0:	2000272c 	.word	0x2000272c

08002cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC_IRQHandler>
	...

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_Init+0x40>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_Init+0x40>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_Init+0x40>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 fcf7 	bl	8003714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7ff fd12 	bl	8002754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fd0f 	bl	800377e <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 fcd7 	bl	800372a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000130 	.word	0x20000130
 8002d94:	20000138 	.word	0x20000138
 8002d98:	20000134 	.word	0x20000134

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000138 	.word	0x20000138
 8002dc0:	20002724 	.word	0x20002724

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20002724 	.word	0x20002724

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_Delay+0x40>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000138 	.word	0x20000138

08002e20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e033      	b.n	8002e9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fcb0 	bl	80027a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e66:	f023 0302 	bic.w	r3, r3, #2
 8002e6a:	f043 0202 	orr.w	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa82 	bl	800337c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e8e:	e001      	b.n	8002e94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Start+0x1a>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e08a      	b.n	8002fd8 <HAL_ADC_Start+0x130>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d018      	beq.n	8002f0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <HAL_ADC_Start+0x13c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3e      	ldr	r2, [pc, #248]	; (8002fe8 <HAL_ADC_Start+0x140>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0c9a      	lsrs	r2, r3, #18
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002efc:	e002      	b.n	8002f04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f9      	bne.n	8002efe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d15e      	bne.n	8002fd6 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d106      	bne.n	8002f66 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f023 0206 	bic.w	r2, r3, #6
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
 8002f64:	e002      	b.n	8002f6c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_ADC_Start+0x144>)
 8002f76:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11c      	bne.n	8002fd6 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e013      	b.n	8002fd6 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_ADC_Start+0x148>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_ADC_Start+0x12e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	20000130 	.word	0x20000130
 8002fe8:	431bde83 	.word	0x431bde83
 8002fec:	40012300 	.word	0x40012300
 8002ff0:	40012000 	.word	0x40012000

08002ff4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	d113      	bne.n	800303a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800301c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003020:	d10b      	bne.n	800303a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e05c      	b.n	80030f4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800303a:	f7ff fec3 	bl	8002dc4 <HAL_GetTick>
 800303e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003040:	e01a      	b.n	8003078 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d016      	beq.n	8003078 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_ADC_PollForConversion+0x6c>
 8003050:	f7ff feb8 	bl	8002dc4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d20b      	bcs.n	8003078 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e03d      	b.n	80030f4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d1dd      	bne.n	8003042 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0212 	mvn.w	r2, #18
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d123      	bne.n	80030f2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11f      	bne.n	80030f2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d111      	bne.n	80030f2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1c>
 8003130:	2302      	movs	r3, #2
 8003132:	e113      	b.n	800335c <HAL_ADC_ConfigChannel+0x244>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b09      	cmp	r3, #9
 8003142:	d925      	bls.n	8003190 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	3b1e      	subs	r3, #30
 800315a:	2207      	movs	r2, #7
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68d9      	ldr	r1, [r3, #12]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	4618      	mov	r0, r3
 800317c:	4603      	mov	r3, r0
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4403      	add	r3, r0
 8003182:	3b1e      	subs	r3, #30
 8003184:	409a      	lsls	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	e022      	b.n	80031d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	2207      	movs	r2, #7
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4403      	add	r3, r0
 80031cc:	409a      	lsls	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d824      	bhi.n	8003228 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b05      	subs	r3, #5
 80031f0:	221f      	movs	r2, #31
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	3b05      	subs	r3, #5
 800321a:	fa00 f203 	lsl.w	r2, r0, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	635a      	str	r2, [r3, #52]	; 0x34
 8003226:	e04c      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d824      	bhi.n	800327a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b23      	subs	r3, #35	; 0x23
 8003242:	221f      	movs	r2, #31
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43da      	mvns	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	400a      	ands	r2, r1
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	4618      	mov	r0, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	3b23      	subs	r3, #35	; 0x23
 800326c:	fa00 f203 	lsl.w	r2, r0, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
 8003278:	e023      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b41      	subs	r3, #65	; 0x41
 800328c:	221f      	movs	r2, #31
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	400a      	ands	r2, r1
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	3b41      	subs	r3, #65	; 0x41
 80032b6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_ADC_ConfigChannel+0x250>)
 80032c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a28      	ldr	r2, [pc, #160]	; (800336c <HAL_ADC_ConfigChannel+0x254>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10f      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1d8>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b12      	cmp	r3, #18
 80032d6:	d10b      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_ADC_ConfigChannel+0x254>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d12b      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x23a>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_ADC_ConfigChannel+0x258>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <HAL_ADC_ConfigChannel+0x1f4>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b11      	cmp	r3, #17
 800330a:	d122      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_ADC_ConfigChannel+0x258>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d111      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_ADC_ConfigChannel+0x25c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <HAL_ADC_ConfigChannel+0x260>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9a      	lsrs	r2, r3, #18
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003344:	e002      	b.n	800334c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3b01      	subs	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f9      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40012300 	.word	0x40012300
 800336c:	40012000 	.word	0x40012000
 8003370:	10000012 	.word	0x10000012
 8003374:	20000130 	.word	0x20000130
 8003378:	431bde83 	.word	0x431bde83

0800337c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003384:	4b79      	ldr	r3, [pc, #484]	; (800356c <ADC_Init+0x1f0>)
 8003386:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	431a      	orrs	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	021a      	lsls	r2, r3, #8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	4a58      	ldr	r2, [pc, #352]	; (8003570 <ADC_Init+0x1f4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e00f      	b.n	800347a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003478:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0202 	bic.w	r2, r2, #2
 8003488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7e1b      	ldrb	r3, [r3, #24]
 8003494:	005a      	lsls	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	3b01      	subs	r3, #1
 80034d4:	035a      	lsls	r2, r3, #13
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	e007      	b.n	80034f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	3b01      	subs	r3, #1
 800350c:	051a      	lsls	r2, r3, #20
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6899      	ldr	r1, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003532:	025a      	lsls	r2, r3, #9
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	029a      	lsls	r2, r3, #10
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40012300 	.word	0x40012300
 8003570:	0f000001 	.word	0x0f000001

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f1c3 0307 	rsb	r3, r3, #7
 8003682:	2b04      	cmp	r3, #4
 8003684:	bf28      	it	cs
 8003686:	2304      	movcs	r3, #4
 8003688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3304      	adds	r3, #4
 800368e:	2b06      	cmp	r3, #6
 8003690:	d902      	bls.n	8003698 <NVIC_EncodePriority+0x30>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3b03      	subs	r3, #3
 8003696:	e000      	b.n	800369a <NVIC_EncodePriority+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	f04f 32ff 	mov.w	r2, #4294967295
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43da      	mvns	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	401a      	ands	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43d9      	mvns	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	4313      	orrs	r3, r2
         );
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e0:	d301      	bcc.n	80036e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00f      	b.n	8003706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <SysTick_Config+0x40>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ee:	210f      	movs	r1, #15
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f7ff ff8e 	bl	8003614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <SysTick_Config+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SysTick_Config+0x40>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff29 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800373c:	f7ff ff3e 	bl	80035bc <__NVIC_GetPriorityGrouping>
 8003740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff8e 	bl	8003668 <NVIC_EncodePriority>
 800374c:	4602      	mov	r2, r0
 800374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff5d 	bl	8003614 <__NVIC_SetPriority>
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff31 	bl	80035d8 <__NVIC_EnableIRQ>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ffa2 	bl	80036d0 <SysTick_Config>
 800378c:	4603      	mov	r3, r0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d004      	beq.n	80037b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e00c      	b.n	80037ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2205      	movs	r2, #5
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e159      	b.n	8003aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	429a      	cmp	r2, r3
 8003812:	f040 8148 	bne.w	8003aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d00b      	beq.n	8003836 <HAL_GPIO_Init+0x5a>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d007      	beq.n	8003836 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382a:	2b11      	cmp	r3, #17
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b12      	cmp	r3, #18
 8003834:	d130      	bne.n	8003898 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800386c:	2201      	movs	r2, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 0201 	and.w	r2, r3, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0xfc>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b12      	cmp	r3, #18
 80038d6:	d123      	bne.n	8003920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	08da      	lsrs	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3208      	adds	r2, #8
 80038e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	08da      	lsrs	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3208      	adds	r2, #8
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0203 	and.w	r2, r3, #3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a2 	beq.w	8003aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_GPIO_Init+0x2e4>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	4a55      	ldr	r2, [pc, #340]	; (8003ac0 <HAL_GPIO_Init+0x2e4>)
 800396c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003970:	6453      	str	r3, [r2, #68]	; 0x44
 8003972:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <HAL_GPIO_Init+0x2e4>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800397e:	4a51      	ldr	r2, [pc, #324]	; (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a48      	ldr	r2, [pc, #288]	; (8003ac8 <HAL_GPIO_Init+0x2ec>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x202>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a47      	ldr	r2, [pc, #284]	; (8003acc <HAL_GPIO_Init+0x2f0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x1fe>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a46      	ldr	r2, [pc, #280]	; (8003ad0 <HAL_GPIO_Init+0x2f4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x1fa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a45      	ldr	r2, [pc, #276]	; (8003ad4 <HAL_GPIO_Init+0x2f8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x1f6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <HAL_GPIO_Init+0x2fc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x1f2>
 80039ca:	2304      	movs	r3, #4
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4934      	ldr	r1, [pc, #208]	; (8003ac4 <HAL_GPIO_Init+0x2e8>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039fe:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a22:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4c:	4a23      	ldr	r2, [pc, #140]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <HAL_GPIO_Init+0x300>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f aea2 	bls.w	80037f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3724      	adds	r7, #36	; 0x24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020400 	.word	0x40020400
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40020c00 	.word	0x40020c00
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40013c00 	.word	0x40013c00

08003ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e001      	b.n	8003b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b20:	787b      	ldrb	r3, [r7, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b2c:	e003      	b.n	8003b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b2e:	887b      	ldrh	r3, [r7, #2]
 8003b30:	041a      	lsls	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	619a      	str	r2, [r3, #24]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fad2 	bl	800210c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40013c00 	.word	0x40013c00

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e25b      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	4ba3      	ldr	r3, [pc, #652]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4ba0      	ldr	r3, [pc, #640]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e236      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x74>
 8003bda:	4b91      	ldr	r3, [pc, #580]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a90      	ldr	r2, [pc, #576]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a8a      	ldr	r2, [pc, #552]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a87      	ldr	r2, [pc, #540]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	4b84      	ldr	r3, [pc, #528]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a83      	ldr	r2, [pc, #524]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a80      	ldr	r2, [pc, #512]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7ff f8ca 	bl	8002dc4 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7ff f8c6 	bl	8002dc4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1fb      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7ff f8b6 	bl	8002dc4 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7ff f8b2 	bl	8002dc4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1e7      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1bb      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b56      	ldr	r3, [pc, #344]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4952      	ldr	r1, [pc, #328]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <HAL_RCC_OscConfig+0x2b0>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7ff f86b 	bl	8002dc4 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7ff f867 	bl	8002dc4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e19c      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4940      	ldr	r1, [pc, #256]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_OscConfig+0x2b0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7ff f84a 	bl	8002dc4 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7ff f846 	bl	8002dc4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e17b      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d030      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <HAL_RCC_OscConfig+0x2b4>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7ff f82a 	bl	8002dc4 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7ff f826 	bl	8002dc4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e15b      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x200>
 8003d92:	e015      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x2b4>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7ff f813 	bl	8002dc4 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7ff f80f 	bl	8002dc4 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e144      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a0 	beq.w	8003f0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x2b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d121      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x2b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_RCC_OscConfig+0x2b8>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fe ffd5 	bl	8002dc4 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	e011      	b.n	8003e42 <HAL_RCC_OscConfig+0x2ce>
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	42470000 	.word	0x42470000
 8003e28:	42470e80 	.word	0x42470e80
 8003e2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fe ffc8 	bl	8002dc4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0fd      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x4d4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d106      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2f0>
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
 8003e62:	e01c      	b.n	8003e9e <HAL_RCC_OscConfig+0x32a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x312>
 8003e6c:	4b77      	ldr	r3, [pc, #476]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a76      	ldr	r2, [pc, #472]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e72:	f043 0304 	orr.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a73      	ldr	r2, [pc, #460]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	e00b      	b.n	8003e9e <HAL_RCC_OscConfig+0x32a>
 8003e86:	4b71      	ldr	r3, [pc, #452]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a70      	ldr	r2, [pc, #448]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b6e      	ldr	r3, [pc, #440]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a6d      	ldr	r2, [pc, #436]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fe ff8d 	bl	8002dc4 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe ff89 	bl	8002dc4 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0bc      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec4:	4b61      	ldr	r3, [pc, #388]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ee      	beq.n	8003eae <HAL_RCC_OscConfig+0x33a>
 8003ed0:	e014      	b.n	8003efc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed2:	f7fe ff77 	bl	8002dc4 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fe ff73 	bl	8002dc4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0a6      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef0:	4b56      	ldr	r3, [pc, #344]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ee      	bne.n	8003eda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d105      	bne.n	8003f0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f02:	4b52      	ldr	r3, [pc, #328]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a51      	ldr	r2, [pc, #324]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8092 	beq.w	800403c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f18:	4b4c      	ldr	r3, [pc, #304]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d05c      	beq.n	8003fde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d141      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b48      	ldr	r3, [pc, #288]	; (8004050 <HAL_RCC_OscConfig+0x4dc>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fe ff47 	bl	8002dc4 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fe ff43 	bl	8002dc4 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e078      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4c:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	019b      	lsls	r3, r3, #6
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	3b01      	subs	r3, #1
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	4933      	ldr	r1, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f82:	4b33      	ldr	r3, [pc, #204]	; (8004050 <HAL_RCC_OscConfig+0x4dc>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe ff1c 	bl	8002dc4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe ff18 	bl	8002dc4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e04d      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x41c>
 8003fae:	e045      	b.n	800403c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x4dc>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fe ff05 	bl	8002dc4 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fe ff01 	bl	8002dc4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e036      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <HAL_RCC_OscConfig+0x44a>
 8003fdc:	e02e      	b.n	800403c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e029      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_RCC_OscConfig+0x4d8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d115      	bne.n	8004038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004018:	4293      	cmp	r3, r2
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d106      	bne.n	8004038 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40007000 	.word	0x40007000
 800404c:	40023800 	.word	0x40023800
 8004050:	42470060 	.word	0x42470060

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0cc      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b68      	ldr	r3, [pc, #416]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d90c      	bls.n	8004090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b65      	ldr	r3, [pc, #404]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b63      	ldr	r3, [pc, #396]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0b8      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a8:	4b59      	ldr	r3, [pc, #356]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a58      	ldr	r2, [pc, #352]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c0:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a52      	ldr	r2, [pc, #328]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b50      	ldr	r3, [pc, #320]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	494d      	ldr	r1, [pc, #308]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d044      	beq.n	8004174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d119      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e07f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d003      	beq.n	8004112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e067      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b37      	ldr	r3, [pc, #220]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4934      	ldr	r1, [pc, #208]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004144:	f7fe fe3e 	bl	8002dc4 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	e00a      	b.n	8004162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f7fe fe3a 	bl	8002dc4 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	; 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e04f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 020c 	and.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d1eb      	bne.n	800414c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d20c      	bcs.n	800419c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e032      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4916      	ldr	r1, [pc, #88]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	490e      	ldr	r1, [pc, #56]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041da:	f000 f821 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041de:	4601      	mov	r1, r0
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	5cd3      	ldrb	r3, [r2, r3]
 80041ee:	fa21 f303 	lsr.w	r3, r1, r3
 80041f2:	4a09      	ldr	r2, [pc, #36]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fd9e 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40023c00 	.word	0x40023c00
 8004210:	40023800 	.word	0x40023800
 8004214:	08008780 	.word	0x08008780
 8004218:	20000130 	.word	0x20000130
 800421c:	20000134 	.word	0x20000134

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	2300      	movs	r3, #0
 8004230:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004236:	4b50      	ldr	r3, [pc, #320]	; (8004378 <HAL_RCC_GetSysClockFreq+0x158>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b04      	cmp	r3, #4
 8004240:	d007      	beq.n	8004252 <HAL_RCC_GetSysClockFreq+0x32>
 8004242:	2b08      	cmp	r3, #8
 8004244:	d008      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x38>
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 808d 	bne.w	8004366 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b4b      	ldr	r3, [pc, #300]	; (800437c <HAL_RCC_GetSysClockFreq+0x15c>)
 800424e:	60bb      	str	r3, [r7, #8]
       break;
 8004250:	e08c      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004252:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCC_GetSysClockFreq+0x160>)
 8004254:	60bb      	str	r3, [r7, #8]
      break;
 8004256:	e089      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004258:	4b47      	ldr	r3, [pc, #284]	; (8004378 <HAL_RCC_GetSysClockFreq+0x158>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004260:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004262:	4b45      	ldr	r3, [pc, #276]	; (8004378 <HAL_RCC_GetSysClockFreq+0x158>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d023      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b42      	ldr	r3, [pc, #264]	; (8004378 <HAL_RCC_GetSysClockFreq+0x158>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	f04f 0400 	mov.w	r4, #0
 8004278:	f240 11ff 	movw	r1, #511	; 0x1ff
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	ea03 0501 	and.w	r5, r3, r1
 8004284:	ea04 0602 	and.w	r6, r4, r2
 8004288:	4a3d      	ldr	r2, [pc, #244]	; (8004380 <HAL_RCC_GetSysClockFreq+0x160>)
 800428a:	fb02 f106 	mul.w	r1, r2, r6
 800428e:	2200      	movs	r2, #0
 8004290:	fb02 f205 	mul.w	r2, r2, r5
 8004294:	440a      	add	r2, r1
 8004296:	493a      	ldr	r1, [pc, #232]	; (8004380 <HAL_RCC_GetSysClockFreq+0x160>)
 8004298:	fba5 0101 	umull	r0, r1, r5, r1
 800429c:	1853      	adds	r3, r2, r1
 800429e:	4619      	mov	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	461a      	mov	r2, r3
 80042a8:	4623      	mov	r3, r4
 80042aa:	f7fc f801 	bl	80002b0 <__aeabi_uldivmod>
 80042ae:	4603      	mov	r3, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e049      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <HAL_RCC_GetSysClockFreq+0x158>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	099b      	lsrs	r3, r3, #6
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	ea03 0501 	and.w	r5, r3, r1
 80042cc:	ea04 0602 	and.w	r6, r4, r2
 80042d0:	4629      	mov	r1, r5
 80042d2:	4632      	mov	r2, r6
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	0154      	lsls	r4, r2, #5
 80042de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042e2:	014b      	lsls	r3, r1, #5
 80042e4:	4619      	mov	r1, r3
 80042e6:	4622      	mov	r2, r4
 80042e8:	1b49      	subs	r1, r1, r5
 80042ea:	eb62 0206 	sbc.w	r2, r2, r6
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f04f 0400 	mov.w	r4, #0
 80042f6:	0194      	lsls	r4, r2, #6
 80042f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042fc:	018b      	lsls	r3, r1, #6
 80042fe:	1a5b      	subs	r3, r3, r1
 8004300:	eb64 0402 	sbc.w	r4, r4, r2
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	00e2      	lsls	r2, r4, #3
 800430e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004312:	00d9      	lsls	r1, r3, #3
 8004314:	460b      	mov	r3, r1
 8004316:	4614      	mov	r4, r2
 8004318:	195b      	adds	r3, r3, r5
 800431a:	eb44 0406 	adc.w	r4, r4, r6
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	02a2      	lsls	r2, r4, #10
 8004328:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800432c:	0299      	lsls	r1, r3, #10
 800432e:	460b      	mov	r3, r1
 8004330:	4614      	mov	r4, r2
 8004332:	4618      	mov	r0, r3
 8004334:	4621      	mov	r1, r4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	461a      	mov	r2, r3
 800433e:	4623      	mov	r3, r4
 8004340:	f7fb ffb6 	bl	80002b0 <__aeabi_uldivmod>
 8004344:	4603      	mov	r3, r0
 8004346:	460c      	mov	r4, r1
 8004348:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0x158>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	3301      	adds	r3, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	60bb      	str	r3, [r7, #8]
      break;
 8004364:	e002      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004368:	60bb      	str	r3, [r7, #8]
      break;
 800436a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436c:	68bb      	ldr	r3, [r7, #8]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	017d7840 	.word	0x017d7840

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000130 	.word	0x20000130

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4601      	mov	r1, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4a03      	ldr	r2, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08008790 	.word	0x08008790

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4601      	mov	r1, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	08008790 	.word	0x08008790

080043ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e056      	b.n	80044ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fe fa07 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004434:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	ea42 0103 	orr.w	r1, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	f003 0104 	and.w	r1, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_SPI_Transmit+0x22>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e11e      	b.n	8004714 <HAL_SPI_Transmit+0x260>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044de:	f7fe fc71 	bl	8002dc4 <HAL_GetTick>
 80044e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d002      	beq.n	80044fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044f8:	e103      	b.n	8004702 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_Transmit+0x52>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800450a:	e0fa      	b.n	8004702 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2203      	movs	r2, #3
 8004510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004552:	d107      	bne.n	8004564 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004562:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d007      	beq.n	8004582 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458a:	d14b      	bne.n	8004624 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_SPI_Transmit+0xe6>
 8004594:	8afb      	ldrh	r3, [r7, #22]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d13e      	bne.n	8004618 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045be:	e02b      	b.n	8004618 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d112      	bne.n	80045f4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045f2:	e011      	b.n	8004618 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045f4:	f7fe fbe6 	bl	8002dc4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d803      	bhi.n	800460c <HAL_SPI_Transmit+0x158>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d102      	bne.n	8004612 <HAL_SPI_Transmit+0x15e>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004616:	e074      	b.n	8004702 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ce      	bne.n	80045c0 <HAL_SPI_Transmit+0x10c>
 8004622:	e04c      	b.n	80046be <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_SPI_Transmit+0x17e>
 800462c:	8afb      	ldrh	r3, [r7, #22]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d140      	bne.n	80046b4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004658:	e02c      	b.n	80046b4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d113      	bne.n	8004690 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	7812      	ldrb	r2, [r2, #0]
 8004674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	86da      	strh	r2, [r3, #54]	; 0x36
 800468e:	e011      	b.n	80046b4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004690:	f7fe fb98 	bl	8002dc4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d803      	bhi.n	80046a8 <HAL_SPI_Transmit+0x1f4>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Transmit+0x1fa>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046b2:	e026      	b.n	8004702 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1cd      	bne.n	800465a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f894 	bl	80047f0 <SPI_EndRxTxTransaction>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e000      	b.n	8004702 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004700:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004712:	7ffb      	ldrb	r3, [r7, #31]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472c:	e04c      	b.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d048      	beq.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004736:	f7fe fb45 	bl	8002dc4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d902      	bls.n	800474c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d13d      	bne.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800475a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004764:	d111      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476e:	d004      	beq.n	800477a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004778:	d107      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004792:	d10f      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e00f      	b.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4013      	ands	r3, r2
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d1a3      	bne.n	800472e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <SPI_EndRxTxTransaction+0x7c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <SPI_EndRxTxTransaction+0x80>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0d5b      	lsrs	r3, r3, #21
 8004808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d112      	bne.n	8004842 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2200      	movs	r2, #0
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff ff78 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f043 0220 	orr.w	r2, r3, #32
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e00f      	b.n	8004862 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3b01      	subs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004858:	2b80      	cmp	r3, #128	; 0x80
 800485a:	d0f2      	beq.n	8004842 <SPI_EndRxTxTransaction+0x52>
 800485c:	e000      	b.n	8004860 <SPI_EndRxTxTransaction+0x70>
        break;
 800485e:	bf00      	nop
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000130 	.word	0x20000130
 8004870:	165e9f81 	.word	0x165e9f81

08004874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e01d      	b.n	80048c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fe f80e 	bl	80028bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 f9ee 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e01d      	b.n	8004918 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f815 	bl	8004920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f000 f9c3 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fc4a 	bl	80051e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <HAL_TIM_PWM_Start+0x60>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d107      	bne.n	8004966 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b06      	cmp	r3, #6
 8004976:	d007      	beq.n	8004988 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0b4      	b.n	8004b1c <HAL_TIM_PWM_ConfigChannel+0x184>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	f200 809f 	bhi.w	8004b08 <HAL_TIM_PWM_ConfigChannel+0x170>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004b09 	.word	0x08004b09
 80049d8:	08004b09 	.word	0x08004b09
 80049dc:	08004b09 	.word	0x08004b09
 80049e0:	08004a45 	.word	0x08004a45
 80049e4:	08004b09 	.word	0x08004b09
 80049e8:	08004b09 	.word	0x08004b09
 80049ec:	08004b09 	.word	0x08004b09
 80049f0:	08004a87 	.word	0x08004a87
 80049f4:	08004b09 	.word	0x08004b09
 80049f8:	08004b09 	.word	0x08004b09
 80049fc:	08004b09 	.word	0x08004b09
 8004a00:	08004ac7 	.word	0x08004ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f9c2 	bl	8004d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0208 	orr.w	r2, r2, #8
 8004a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6999      	ldr	r1, [r3, #24]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	619a      	str	r2, [r3, #24]
      break;
 8004a42:	e062      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fa08 	bl	8004e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6999      	ldr	r1, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	021a      	lsls	r2, r3, #8
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]
      break;
 8004a84:	e041      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa53 	bl	8004f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0208 	orr.w	r2, r2, #8
 8004aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0204 	bic.w	r2, r2, #4
 8004ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	61da      	str	r2, [r3, #28]
      break;
 8004ac4:	e021      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fa9d 	bl	800500c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69d9      	ldr	r1, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	61da      	str	r2, [r3, #28]
      break;
 8004b06:	e000      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIM_ConfigClockSource+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e0a6      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x166>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d067      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0x120>
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d80b      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x6c>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d073      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0x140>
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d802      	bhi.n	8004b86 <HAL_TIM_ConfigClockSource+0x62>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d06f      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b84:	e078      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d06c      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0x140>
 8004b8a:	2b30      	cmp	r3, #48	; 0x30
 8004b8c:	d06a      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004b8e:	e073      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b90:	2b70      	cmp	r3, #112	; 0x70
 8004b92:	d00d      	beq.n	8004bb0 <HAL_TIM_ConfigClockSource+0x8c>
 8004b94:	2b70      	cmp	r3, #112	; 0x70
 8004b96:	d804      	bhi.n	8004ba2 <HAL_TIM_ConfigClockSource+0x7e>
 8004b98:	2b50      	cmp	r3, #80	; 0x50
 8004b9a:	d033      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0xe0>
 8004b9c:	2b60      	cmp	r3, #96	; 0x60
 8004b9e:	d041      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ba0:	e06a      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d066      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x152>
 8004ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bac:	d017      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004bae:	e063      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f000 faee 	bl	80051a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
      break;
 8004bdc:	e04c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6899      	ldr	r1, [r3, #8]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f000 fad7 	bl	80051a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c00:	609a      	str	r2, [r3, #8]
      break;
 8004c02:	e039      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f000 fa4b 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2150      	movs	r1, #80	; 0x50
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 faa4 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004c22:	e029      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6859      	ldr	r1, [r3, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f000 fa6a 	bl	800510a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2160      	movs	r1, #96	; 0x60
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fa94 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004c42:	e019      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	461a      	mov	r2, r3
 8004c52:	f000 fa2b 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2140      	movs	r1, #64	; 0x40
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fa84 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004c62:	e009      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f000 fa7b 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004c74:	e000      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <TIM_Base_SetConfig+0xe4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00f      	beq.n	8004ccc <TIM_Base_SetConfig+0x38>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0x38>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a31      	ldr	r2, [pc, #196]	; (8004d7c <TIM_Base_SetConfig+0xe8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0x38>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <TIM_Base_SetConfig+0xec>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0x38>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <TIM_Base_SetConfig+0xf0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d108      	bne.n	8004cde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <TIM_Base_SetConfig+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01b      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d017      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <TIM_Base_SetConfig+0xe8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <TIM_Base_SetConfig+0xec>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00f      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <TIM_Base_SetConfig+0xf0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <TIM_Base_SetConfig+0xf4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <TIM_Base_SetConfig+0xf8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <TIM_Base_SetConfig+0xfc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d108      	bne.n	8004d30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <TIM_Base_SetConfig+0xe4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d103      	bne.n	8004d64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	615a      	str	r2, [r3, #20]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0302 	bic.w	r3, r3, #2
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <TIM_OC1_SetConfig+0xc8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10c      	bne.n	8004e0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0308 	bic.w	r3, r3, #8
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <TIM_OC1_SetConfig+0xc8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d111      	bne.n	8004e36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40010000 	.word	0x40010000

08004e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0210 	bic.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <TIM_OC2_SetConfig+0xd4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10d      	bne.n	8004edc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC2_SetConfig+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d113      	bne.n	8004f0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000

08004f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <TIM_OC3_SetConfig+0xd0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10d      	bne.n	8004fb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	; (8005008 <TIM_OC3_SetConfig+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d113      	bne.n	8004fe2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	621a      	str	r2, [r3, #32]
}
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40010000 	.word	0x40010000

0800500c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <TIM_OC4_SetConfig+0x9c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d109      	bne.n	8005080 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000

080050ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 030a 	bic.w	r3, r3, #10
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0210 	bic.w	r2, r3, #16
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	f043 0307 	orr.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	609a      	str	r2, [r3, #8]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2201      	movs	r2, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1a      	ldr	r2, [r3, #32]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	fa01 f303 	lsl.w	r3, r1, r3
 8005218:	431a      	orrs	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e050      	b.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d013      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a15      	ldr	r2, [pc, #84]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10c      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40014000 	.word	0x40014000

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e03f      	b.n	800539a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fd fb1c 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc81 	bl	8005c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b088      	sub	sp, #32
 80053a6:	af02      	add	r7, sp, #8
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	f040 8083 	bne.w	80054ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_UART_Transmit+0x2e>
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e07b      	b.n	80054cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Transmit+0x40>
 80053de:	2302      	movs	r3, #2
 80053e0:	e074      	b.n	80054cc <HAL_UART_Transmit+0x12a>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2221      	movs	r2, #33	; 0x21
 80053f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053f8:	f7fd fce4 	bl	8002dc4 <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005412:	e042      	b.n	800549a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	d122      	bne.n	8005472 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 faa0 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e042      	b.n	80054cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005458:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3302      	adds	r3, #2
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	e017      	b.n	800549a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3301      	adds	r3, #1
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	e013      	b.n	800549a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2200      	movs	r2, #0
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa7d 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e01f      	b.n	80054cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	60ba      	str	r2, [r7, #8]
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1b7      	bne.n	8005414 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2140      	movs	r1, #64	; 0x40
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa64 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e006      	b.n	80054cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	f040 8090 	bne.w	8005616 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_UART_Receive+0x2e>
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e088      	b.n	8005618 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_UART_Receive+0x40>
 8005510:	2302      	movs	r3, #2
 8005512:	e081      	b.n	8005618 <HAL_UART_Receive+0x144>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2222      	movs	r2, #34	; 0x22
 8005526:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800552a:	f7fd fc4b 	bl	8002dc4 <HAL_GetTick>
 800552e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005544:	e05c      	b.n	8005600 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	d12b      	bne.n	80055b6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2200      	movs	r2, #0
 8005566:	2120      	movs	r1, #32
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa07 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e04f      	b.n	8005618 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10c      	bne.n	800559e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005590:	b29a      	uxth	r2, r3
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3302      	adds	r3, #2
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	e030      	b.n	8005600 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	e024      	b.n	8005600 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2200      	movs	r2, #0
 80055be:	2120      	movs	r1, #32
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f9db 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e023      	b.n	8005618 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d108      	bne.n	80055ea <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	60ba      	str	r2, [r7, #8]
 80055e4:	b2ca      	uxtb	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e00a      	b.n	8005600 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d19d      	bne.n	8005546 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	d130      	bne.n	800569c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_UART_Transmit_IT+0x26>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e029      	b.n	800569e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Transmit_IT+0x38>
 8005654:	2302      	movs	r3, #2
 8005656:	e022      	b.n	800569e <HAL_UART_Transmit_IT+0x7e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2221      	movs	r2, #33	; 0x21
 800567c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005696:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e000      	b.n	800569e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	4613      	mov	r3, r2
 80056b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d140      	bne.n	8005746 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Receive_IT+0x26>
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e039      	b.n	8005748 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Receive_IT+0x38>
 80056de:	2302      	movs	r3, #2
 80056e0:	e032      	b.n	8005748 <HAL_UART_Receive_IT+0x9e>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2222      	movs	r2, #34	; 0x22
 8005706:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005720:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0220 	orr.w	r2, r2, #32
 8005740:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_UART_IRQHandler+0x52>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9d6 	bl	8005b50 <UART_Receive_IT>
      return;
 80057a4:	e0d1      	b.n	800594a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80b0 	beq.w	800590e <HAL_UART_IRQHandler+0x1ba>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_UART_IRQHandler+0x70>
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80a5 	beq.w	800590e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_UART_IRQHandler+0x90>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_UART_IRQHandler+0xb0>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	f043 0202 	orr.w	r2, r3, #2
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_UART_IRQHandler+0xd0>
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00f      	beq.n	800584e <HAL_UART_IRQHandler+0xfa>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <HAL_UART_IRQHandler+0xee>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	f043 0208 	orr.w	r2, r3, #8
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d078      	beq.n	8005948 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_UART_IRQHandler+0x11c>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f970 	bl	8005b50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_UART_IRQHandler+0x144>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d031      	beq.n	80058fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8b9 	bl	8005a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d123      	bne.n	80058f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d013      	beq.n	80058ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c8:	4a21      	ldr	r2, [pc, #132]	; (8005950 <HAL_UART_IRQHandler+0x1fc>)
 80058ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fd ff60 	bl	8003796 <HAL_DMA_Abort_IT>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d016      	beq.n	800590a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058e6:	4610      	mov	r0, r2
 80058e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ea:	e00e      	b.n	800590a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f83b 	bl	8005968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f2:	e00a      	b.n	800590a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f837 	bl	8005968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fa:	e006      	b.n	800590a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f833 	bl	8005968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005908:	e01e      	b.n	8005948 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590a:	bf00      	nop
    return;
 800590c:	e01c      	b.n	8005948 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_UART_IRQHandler+0x1d6>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8a6 	bl	8005a74 <UART_Transmit_IT>
    return;
 8005928:	e00f      	b.n	800594a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_UART_IRQHandler+0x1f6>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f8ee 	bl	8005b20 <UART_EndTransmit_IT>
    return;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005948:	bf00      	nop
  }
}
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	08005a4d 	.word	0x08005a4d

08005954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	e02c      	b.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d028      	beq.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <UART_WaitOnFlagUntilTimeout+0x30>
 800599c:	f7fd fa12 	bl	8002dc4 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d21d      	bcs.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e00f      	b.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d0c3      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff ff7e 	bl	8005968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b21      	cmp	r3, #33	; 0x21
 8005a86:	d144      	bne.n	8005b12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d11a      	bne.n	8005ac8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]
 8005aba:	e00e      	b.n	8005ada <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]
 8005ac6:	e008      	b.n	8005ada <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	1c59      	adds	r1, r3, #1
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6211      	str	r1, [r2, #32]
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff ff07 	bl	8005954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b22      	cmp	r3, #34	; 0x22
 8005b62:	d171      	bne.n	8005c48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d123      	bne.n	8005bb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10e      	bne.n	8005b9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	1c9a      	adds	r2, r3, #2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
 8005b98:	e029      	b.n	8005bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005bb4:	e01b      	b.n	8005bee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6858      	ldr	r0, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6291      	str	r1, [r2, #40]	; 0x28
 8005bce:	b2c2      	uxtb	r2, r0
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e00c      	b.n	8005bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	1c58      	adds	r0, r3, #1
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	6288      	str	r0, [r1, #40]	; 0x28
 8005be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d120      	bne.n	8005c44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0220 	bic.w	r2, r2, #32
 8005c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fc fa1a 	bl	8002074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e002      	b.n	8005c4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e000      	b.n	8005c4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
  }
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c96:	f023 030c 	bic.w	r3, r3, #12
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc2:	f040 818b 	bne.w	8005fdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4ac1      	ldr	r2, [pc, #772]	; (8005fd0 <UART_SetConfig+0x37c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d005      	beq.n	8005cdc <UART_SetConfig+0x88>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4abf      	ldr	r2, [pc, #764]	; (8005fd4 <UART_SetConfig+0x380>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f040 80bd 	bne.w	8005e56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fe fb72 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	461d      	mov	r5, r3
 8005ce6:	f04f 0600 	mov.w	r6, #0
 8005cea:	46a8      	mov	r8, r5
 8005cec:	46b1      	mov	r9, r6
 8005cee:	eb18 0308 	adds.w	r3, r8, r8
 8005cf2:	eb49 0409 	adc.w	r4, r9, r9
 8005cf6:	4698      	mov	r8, r3
 8005cf8:	46a1      	mov	r9, r4
 8005cfa:	eb18 0805 	adds.w	r8, r8, r5
 8005cfe:	eb49 0906 	adc.w	r9, r9, r6
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d16:	4688      	mov	r8, r1
 8005d18:	4691      	mov	r9, r2
 8005d1a:	eb18 0005 	adds.w	r0, r8, r5
 8005d1e:	eb49 0106 	adc.w	r1, r9, r6
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	461d      	mov	r5, r3
 8005d28:	f04f 0600 	mov.w	r6, #0
 8005d2c:	196b      	adds	r3, r5, r5
 8005d2e:	eb46 0406 	adc.w	r4, r6, r6
 8005d32:	461a      	mov	r2, r3
 8005d34:	4623      	mov	r3, r4
 8005d36:	f7fa fabb 	bl	80002b0 <__aeabi_uldivmod>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4ba5      	ldr	r3, [pc, #660]	; (8005fd8 <UART_SetConfig+0x384>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	461d      	mov	r5, r3
 8005d50:	f04f 0600 	mov.w	r6, #0
 8005d54:	46a9      	mov	r9, r5
 8005d56:	46b2      	mov	sl, r6
 8005d58:	eb19 0309 	adds.w	r3, r9, r9
 8005d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d60:	4699      	mov	r9, r3
 8005d62:	46a2      	mov	sl, r4
 8005d64:	eb19 0905 	adds.w	r9, r9, r5
 8005d68:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d80:	4689      	mov	r9, r1
 8005d82:	4692      	mov	sl, r2
 8005d84:	eb19 0005 	adds.w	r0, r9, r5
 8005d88:	eb4a 0106 	adc.w	r1, sl, r6
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	461d      	mov	r5, r3
 8005d92:	f04f 0600 	mov.w	r6, #0
 8005d96:	196b      	adds	r3, r5, r5
 8005d98:	eb46 0406 	adc.w	r4, r6, r6
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4623      	mov	r3, r4
 8005da0:	f7fa fa86 	bl	80002b0 <__aeabi_uldivmod>
 8005da4:	4603      	mov	r3, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b8b      	ldr	r3, [pc, #556]	; (8005fd8 <UART_SetConfig+0x384>)
 8005dac:	fba3 1302 	umull	r1, r3, r3, r2
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	2164      	movs	r1, #100	; 0x64
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	3332      	adds	r3, #50	; 0x32
 8005dbe:	4a86      	ldr	r2, [pc, #536]	; (8005fd8 <UART_SetConfig+0x384>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dcc:	4498      	add	r8, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	461d      	mov	r5, r3
 8005dd2:	f04f 0600 	mov.w	r6, #0
 8005dd6:	46a9      	mov	r9, r5
 8005dd8:	46b2      	mov	sl, r6
 8005dda:	eb19 0309 	adds.w	r3, r9, r9
 8005dde:	eb4a 040a 	adc.w	r4, sl, sl
 8005de2:	4699      	mov	r9, r3
 8005de4:	46a2      	mov	sl, r4
 8005de6:	eb19 0905 	adds.w	r9, r9, r5
 8005dea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e02:	4689      	mov	r9, r1
 8005e04:	4692      	mov	sl, r2
 8005e06:	eb19 0005 	adds.w	r0, r9, r5
 8005e0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	461d      	mov	r5, r3
 8005e14:	f04f 0600 	mov.w	r6, #0
 8005e18:	196b      	adds	r3, r5, r5
 8005e1a:	eb46 0406 	adc.w	r4, r6, r6
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4623      	mov	r3, r4
 8005e22:	f7fa fa45 	bl	80002b0 <__aeabi_uldivmod>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <UART_SetConfig+0x384>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2164      	movs	r1, #100	; 0x64
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <UART_SetConfig+0x384>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 0207 	and.w	r2, r3, #7
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4442      	add	r2, r8
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e26f      	b.n	8006336 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e56:	f7fe faa1 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8005e5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	461d      	mov	r5, r3
 8005e60:	f04f 0600 	mov.w	r6, #0
 8005e64:	46a8      	mov	r8, r5
 8005e66:	46b1      	mov	r9, r6
 8005e68:	eb18 0308 	adds.w	r3, r8, r8
 8005e6c:	eb49 0409 	adc.w	r4, r9, r9
 8005e70:	4698      	mov	r8, r3
 8005e72:	46a1      	mov	r9, r4
 8005e74:	eb18 0805 	adds.w	r8, r8, r5
 8005e78:	eb49 0906 	adc.w	r9, r9, r6
 8005e7c:	f04f 0100 	mov.w	r1, #0
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e90:	4688      	mov	r8, r1
 8005e92:	4691      	mov	r9, r2
 8005e94:	eb18 0005 	adds.w	r0, r8, r5
 8005e98:	eb49 0106 	adc.w	r1, r9, r6
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	f04f 0600 	mov.w	r6, #0
 8005ea6:	196b      	adds	r3, r5, r5
 8005ea8:	eb46 0406 	adc.w	r4, r6, r6
 8005eac:	461a      	mov	r2, r3
 8005eae:	4623      	mov	r3, r4
 8005eb0:	f7fa f9fe 	bl	80002b0 <__aeabi_uldivmod>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <UART_SetConfig+0x384>)
 8005ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	461d      	mov	r5, r3
 8005eca:	f04f 0600 	mov.w	r6, #0
 8005ece:	46a9      	mov	r9, r5
 8005ed0:	46b2      	mov	sl, r6
 8005ed2:	eb19 0309 	adds.w	r3, r9, r9
 8005ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8005eda:	4699      	mov	r9, r3
 8005edc:	46a2      	mov	sl, r4
 8005ede:	eb19 0905 	adds.w	r9, r9, r5
 8005ee2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005efa:	4689      	mov	r9, r1
 8005efc:	4692      	mov	sl, r2
 8005efe:	eb19 0005 	adds.w	r0, r9, r5
 8005f02:	eb4a 0106 	adc.w	r1, sl, r6
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	f04f 0600 	mov.w	r6, #0
 8005f10:	196b      	adds	r3, r5, r5
 8005f12:	eb46 0406 	adc.w	r4, r6, r6
 8005f16:	461a      	mov	r2, r3
 8005f18:	4623      	mov	r3, r4
 8005f1a:	f7fa f9c9 	bl	80002b0 <__aeabi_uldivmod>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <UART_SetConfig+0x384>)
 8005f26:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	2164      	movs	r1, #100	; 0x64
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	3332      	adds	r3, #50	; 0x32
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <UART_SetConfig+0x384>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f46:	4498      	add	r8, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	f04f 0600 	mov.w	r6, #0
 8005f50:	46a9      	mov	r9, r5
 8005f52:	46b2      	mov	sl, r6
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 0905 	adds.w	r9, r9, r5
 8005f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb19 0005 	adds.w	r0, r9, r5
 8005f84:	eb4a 0106 	adc.w	r1, sl, r6
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	f04f 0600 	mov.w	r6, #0
 8005f92:	196b      	adds	r3, r5, r5
 8005f94:	eb46 0406 	adc.w	r4, r6, r6
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	f7fa f988 	bl	80002b0 <__aeabi_uldivmod>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <UART_SetConfig+0x384>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a07      	ldr	r2, [pc, #28]	; (8005fd8 <UART_SetConfig+0x384>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	f003 0207 	and.w	r2, r3, #7
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4442      	add	r2, r8
 8005fcc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005fce:	e1b2      	b.n	8006336 <UART_SetConfig+0x6e2>
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4ad7      	ldr	r2, [pc, #860]	; (8006340 <UART_SetConfig+0x6ec>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d005      	beq.n	8005ff2 <UART_SetConfig+0x39e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4ad6      	ldr	r2, [pc, #856]	; (8006344 <UART_SetConfig+0x6f0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	f040 80d1 	bne.w	8006194 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ff2:	f7fe f9e7 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 8005ff6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	469a      	mov	sl, r3
 8005ffc:	f04f 0b00 	mov.w	fp, #0
 8006000:	46d0      	mov	r8, sl
 8006002:	46d9      	mov	r9, fp
 8006004:	eb18 0308 	adds.w	r3, r8, r8
 8006008:	eb49 0409 	adc.w	r4, r9, r9
 800600c:	4698      	mov	r8, r3
 800600e:	46a1      	mov	r9, r4
 8006010:	eb18 080a 	adds.w	r8, r8, sl
 8006014:	eb49 090b 	adc.w	r9, r9, fp
 8006018:	f04f 0100 	mov.w	r1, #0
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006024:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006028:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800602c:	4688      	mov	r8, r1
 800602e:	4691      	mov	r9, r2
 8006030:	eb1a 0508 	adds.w	r5, sl, r8
 8006034:	eb4b 0609 	adc.w	r6, fp, r9
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4619      	mov	r1, r3
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	f04f 0400 	mov.w	r4, #0
 800604a:	0094      	lsls	r4, r2, #2
 800604c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006050:	008b      	lsls	r3, r1, #2
 8006052:	461a      	mov	r2, r3
 8006054:	4623      	mov	r3, r4
 8006056:	4628      	mov	r0, r5
 8006058:	4631      	mov	r1, r6
 800605a:	f7fa f929 	bl	80002b0 <__aeabi_uldivmod>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	461a      	mov	r2, r3
 8006064:	4bb8      	ldr	r3, [pc, #736]	; (8006348 <UART_SetConfig+0x6f4>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	469b      	mov	fp, r3
 8006074:	f04f 0c00 	mov.w	ip, #0
 8006078:	46d9      	mov	r9, fp
 800607a:	46e2      	mov	sl, ip
 800607c:	eb19 0309 	adds.w	r3, r9, r9
 8006080:	eb4a 040a 	adc.w	r4, sl, sl
 8006084:	4699      	mov	r9, r3
 8006086:	46a2      	mov	sl, r4
 8006088:	eb19 090b 	adds.w	r9, r9, fp
 800608c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a4:	4689      	mov	r9, r1
 80060a6:	4692      	mov	sl, r2
 80060a8:	eb1b 0509 	adds.w	r5, fp, r9
 80060ac:	eb4c 060a 	adc.w	r6, ip, sl
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4619      	mov	r1, r3
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	f04f 0400 	mov.w	r4, #0
 80060c2:	0094      	lsls	r4, r2, #2
 80060c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	461a      	mov	r2, r3
 80060cc:	4623      	mov	r3, r4
 80060ce:	4628      	mov	r0, r5
 80060d0:	4631      	mov	r1, r6
 80060d2:	f7fa f8ed 	bl	80002b0 <__aeabi_uldivmod>
 80060d6:	4603      	mov	r3, r0
 80060d8:	460c      	mov	r4, r1
 80060da:	461a      	mov	r2, r3
 80060dc:	4b9a      	ldr	r3, [pc, #616]	; (8006348 <UART_SetConfig+0x6f4>)
 80060de:	fba3 1302 	umull	r1, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2164      	movs	r1, #100	; 0x64
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	3332      	adds	r3, #50	; 0x32
 80060f0:	4a95      	ldr	r2, [pc, #596]	; (8006348 <UART_SetConfig+0x6f4>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060fc:	4498      	add	r8, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	469b      	mov	fp, r3
 8006102:	f04f 0c00 	mov.w	ip, #0
 8006106:	46d9      	mov	r9, fp
 8006108:	46e2      	mov	sl, ip
 800610a:	eb19 0309 	adds.w	r3, r9, r9
 800610e:	eb4a 040a 	adc.w	r4, sl, sl
 8006112:	4699      	mov	r9, r3
 8006114:	46a2      	mov	sl, r4
 8006116:	eb19 090b 	adds.w	r9, r9, fp
 800611a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800611e:	f04f 0100 	mov.w	r1, #0
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800612a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800612e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006132:	4689      	mov	r9, r1
 8006134:	4692      	mov	sl, r2
 8006136:	eb1b 0509 	adds.w	r5, fp, r9
 800613a:	eb4c 060a 	adc.w	r6, ip, sl
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	4619      	mov	r1, r3
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	0094      	lsls	r4, r2, #2
 8006152:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006156:	008b      	lsls	r3, r1, #2
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	4628      	mov	r0, r5
 800615e:	4631      	mov	r1, r6
 8006160:	f7fa f8a6 	bl	80002b0 <__aeabi_uldivmod>
 8006164:	4603      	mov	r3, r0
 8006166:	460c      	mov	r4, r1
 8006168:	461a      	mov	r2, r3
 800616a:	4b77      	ldr	r3, [pc, #476]	; (8006348 <UART_SetConfig+0x6f4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a72      	ldr	r2, [pc, #456]	; (8006348 <UART_SetConfig+0x6f4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4442      	add	r2, r8
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	e0d0      	b.n	8006336 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7fe f902 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8006198:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	469a      	mov	sl, r3
 800619e:	f04f 0b00 	mov.w	fp, #0
 80061a2:	46d0      	mov	r8, sl
 80061a4:	46d9      	mov	r9, fp
 80061a6:	eb18 0308 	adds.w	r3, r8, r8
 80061aa:	eb49 0409 	adc.w	r4, r9, r9
 80061ae:	4698      	mov	r8, r3
 80061b0:	46a1      	mov	r9, r4
 80061b2:	eb18 080a 	adds.w	r8, r8, sl
 80061b6:	eb49 090b 	adc.w	r9, r9, fp
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061ce:	4688      	mov	r8, r1
 80061d0:	4691      	mov	r9, r2
 80061d2:	eb1a 0508 	adds.w	r5, sl, r8
 80061d6:	eb4b 0609 	adc.w	r6, fp, r9
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4619      	mov	r1, r3
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	f04f 0400 	mov.w	r4, #0
 80061ec:	0094      	lsls	r4, r2, #2
 80061ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	4631      	mov	r1, r6
 80061fc:	f7fa f858 	bl	80002b0 <__aeabi_uldivmod>
 8006200:	4603      	mov	r3, r0
 8006202:	460c      	mov	r4, r1
 8006204:	461a      	mov	r2, r3
 8006206:	4b50      	ldr	r3, [pc, #320]	; (8006348 <UART_SetConfig+0x6f4>)
 8006208:	fba3 2302 	umull	r2, r3, r3, r2
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	469b      	mov	fp, r3
 8006216:	f04f 0c00 	mov.w	ip, #0
 800621a:	46d9      	mov	r9, fp
 800621c:	46e2      	mov	sl, ip
 800621e:	eb19 0309 	adds.w	r3, r9, r9
 8006222:	eb4a 040a 	adc.w	r4, sl, sl
 8006226:	4699      	mov	r9, r3
 8006228:	46a2      	mov	sl, r4
 800622a:	eb19 090b 	adds.w	r9, r9, fp
 800622e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006232:	f04f 0100 	mov.w	r1, #0
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800623e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006246:	4689      	mov	r9, r1
 8006248:	4692      	mov	sl, r2
 800624a:	eb1b 0509 	adds.w	r5, fp, r9
 800624e:	eb4c 060a 	adc.w	r6, ip, sl
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4619      	mov	r1, r3
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	f04f 0400 	mov.w	r4, #0
 8006264:	0094      	lsls	r4, r2, #2
 8006266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800626a:	008b      	lsls	r3, r1, #2
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	4628      	mov	r0, r5
 8006272:	4631      	mov	r1, r6
 8006274:	f7fa f81c 	bl	80002b0 <__aeabi_uldivmod>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	461a      	mov	r2, r3
 800627e:	4b32      	ldr	r3, [pc, #200]	; (8006348 <UART_SetConfig+0x6f4>)
 8006280:	fba3 1302 	umull	r1, r3, r3, r2
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	2164      	movs	r1, #100	; 0x64
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	3332      	adds	r3, #50	; 0x32
 8006292:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <UART_SetConfig+0x6f4>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800629e:	4498      	add	r8, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	469b      	mov	fp, r3
 80062a4:	f04f 0c00 	mov.w	ip, #0
 80062a8:	46d9      	mov	r9, fp
 80062aa:	46e2      	mov	sl, ip
 80062ac:	eb19 0309 	adds.w	r3, r9, r9
 80062b0:	eb4a 040a 	adc.w	r4, sl, sl
 80062b4:	4699      	mov	r9, r3
 80062b6:	46a2      	mov	sl, r4
 80062b8:	eb19 090b 	adds.w	r9, r9, fp
 80062bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062d4:	4689      	mov	r9, r1
 80062d6:	4692      	mov	sl, r2
 80062d8:	eb1b 0509 	adds.w	r5, fp, r9
 80062dc:	eb4c 060a 	adc.w	r6, ip, sl
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4619      	mov	r1, r3
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	f04f 0400 	mov.w	r4, #0
 80062f2:	0094      	lsls	r4, r2, #2
 80062f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062f8:	008b      	lsls	r3, r1, #2
 80062fa:	461a      	mov	r2, r3
 80062fc:	4623      	mov	r3, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	4631      	mov	r1, r6
 8006302:	f7f9 ffd5 	bl	80002b0 <__aeabi_uldivmod>
 8006306:	4603      	mov	r3, r0
 8006308:	460c      	mov	r4, r1
 800630a:	461a      	mov	r2, r3
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <UART_SetConfig+0x6f4>)
 800630e:	fba3 1302 	umull	r1, r3, r3, r2
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	2164      	movs	r1, #100	; 0x64
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	3332      	adds	r3, #50	; 0x32
 8006320:	4a09      	ldr	r2, [pc, #36]	; (8006348 <UART_SetConfig+0x6f4>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	f003 020f 	and.w	r2, r3, #15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4442      	add	r2, r8
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	e7ff      	b.n	8006336 <UART_SetConfig+0x6e2>
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	40011000 	.word	0x40011000
 8006344:	40011400 	.word	0x40011400
 8006348:	51eb851f 	.word	0x51eb851f

0800634c <__errno>:
 800634c:	4b01      	ldr	r3, [pc, #4]	; (8006354 <__errno+0x8>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	2000013c 	.word	0x2000013c

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4e0d      	ldr	r6, [pc, #52]	; (8006390 <__libc_init_array+0x38>)
 800635c:	4c0d      	ldr	r4, [pc, #52]	; (8006394 <__libc_init_array+0x3c>)
 800635e:	1ba4      	subs	r4, r4, r6
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2500      	movs	r5, #0
 8006364:	42a5      	cmp	r5, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	4e0b      	ldr	r6, [pc, #44]	; (8006398 <__libc_init_array+0x40>)
 800636a:	4c0c      	ldr	r4, [pc, #48]	; (800639c <__libc_init_array+0x44>)
 800636c:	f001 f95e 	bl	800762c <_init>
 8006370:	1ba4      	subs	r4, r4, r6
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	2500      	movs	r5, #0
 8006376:	42a5      	cmp	r5, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006380:	4798      	blx	r3
 8006382:	3501      	adds	r5, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800638a:	4798      	blx	r3
 800638c:	3501      	adds	r5, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	08008838 	.word	0x08008838
 8006394:	08008838 	.word	0x08008838
 8006398:	08008838 	.word	0x08008838
 800639c:	0800883c 	.word	0x0800883c

080063a0 <memset>:
 80063a0:	4402      	add	r2, r0
 80063a2:	4603      	mov	r3, r0
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d100      	bne.n	80063aa <memset+0xa>
 80063a8:	4770      	bx	lr
 80063aa:	f803 1b01 	strb.w	r1, [r3], #1
 80063ae:	e7f9      	b.n	80063a4 <memset+0x4>

080063b0 <iprintf>:
 80063b0:	b40f      	push	{r0, r1, r2, r3}
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <iprintf+0x2c>)
 80063b4:	b513      	push	{r0, r1, r4, lr}
 80063b6:	681c      	ldr	r4, [r3, #0]
 80063b8:	b124      	cbz	r4, 80063c4 <iprintf+0x14>
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	b913      	cbnz	r3, 80063c4 <iprintf+0x14>
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fa74 	bl	80068ac <__sinit>
 80063c4:	ab05      	add	r3, sp, #20
 80063c6:	9a04      	ldr	r2, [sp, #16]
 80063c8:	68a1      	ldr	r1, [r4, #8]
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fd7f 	bl	8006ed0 <_vfiprintf_r>
 80063d2:	b002      	add	sp, #8
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	b004      	add	sp, #16
 80063da:	4770      	bx	lr
 80063dc:	2000013c 	.word	0x2000013c

080063e0 <_puts_r>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	460e      	mov	r6, r1
 80063e4:	4605      	mov	r5, r0
 80063e6:	b118      	cbz	r0, 80063f0 <_puts_r+0x10>
 80063e8:	6983      	ldr	r3, [r0, #24]
 80063ea:	b90b      	cbnz	r3, 80063f0 <_puts_r+0x10>
 80063ec:	f000 fa5e 	bl	80068ac <__sinit>
 80063f0:	69ab      	ldr	r3, [r5, #24]
 80063f2:	68ac      	ldr	r4, [r5, #8]
 80063f4:	b913      	cbnz	r3, 80063fc <_puts_r+0x1c>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 fa58 	bl	80068ac <__sinit>
 80063fc:	4b23      	ldr	r3, [pc, #140]	; (800648c <_puts_r+0xac>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d117      	bne.n	8006432 <_puts_r+0x52>
 8006402:	686c      	ldr	r4, [r5, #4]
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	071b      	lsls	r3, r3, #28
 8006408:	d51d      	bpl.n	8006446 <_puts_r+0x66>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	b1db      	cbz	r3, 8006446 <_puts_r+0x66>
 800640e:	3e01      	subs	r6, #1
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006416:	3b01      	subs	r3, #1
 8006418:	60a3      	str	r3, [r4, #8]
 800641a:	b9e9      	cbnz	r1, 8006458 <_puts_r+0x78>
 800641c:	2b00      	cmp	r3, #0
 800641e:	da2e      	bge.n	800647e <_puts_r+0x9e>
 8006420:	4622      	mov	r2, r4
 8006422:	210a      	movs	r1, #10
 8006424:	4628      	mov	r0, r5
 8006426:	f000 f891 	bl	800654c <__swbuf_r>
 800642a:	3001      	adds	r0, #1
 800642c:	d011      	beq.n	8006452 <_puts_r+0x72>
 800642e:	200a      	movs	r0, #10
 8006430:	e011      	b.n	8006456 <_puts_r+0x76>
 8006432:	4b17      	ldr	r3, [pc, #92]	; (8006490 <_puts_r+0xb0>)
 8006434:	429c      	cmp	r4, r3
 8006436:	d101      	bne.n	800643c <_puts_r+0x5c>
 8006438:	68ac      	ldr	r4, [r5, #8]
 800643a:	e7e3      	b.n	8006404 <_puts_r+0x24>
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <_puts_r+0xb4>)
 800643e:	429c      	cmp	r4, r3
 8006440:	bf08      	it	eq
 8006442:	68ec      	ldreq	r4, [r5, #12]
 8006444:	e7de      	b.n	8006404 <_puts_r+0x24>
 8006446:	4621      	mov	r1, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 f8d1 	bl	80065f0 <__swsetup_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	d0dd      	beq.n	800640e <_puts_r+0x2e>
 8006452:	f04f 30ff 	mov.w	r0, #4294967295
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	2b00      	cmp	r3, #0
 800645a:	da04      	bge.n	8006466 <_puts_r+0x86>
 800645c:	69a2      	ldr	r2, [r4, #24]
 800645e:	429a      	cmp	r2, r3
 8006460:	dc06      	bgt.n	8006470 <_puts_r+0x90>
 8006462:	290a      	cmp	r1, #10
 8006464:	d004      	beq.n	8006470 <_puts_r+0x90>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	7019      	strb	r1, [r3, #0]
 800646e:	e7cf      	b.n	8006410 <_puts_r+0x30>
 8006470:	4622      	mov	r2, r4
 8006472:	4628      	mov	r0, r5
 8006474:	f000 f86a 	bl	800654c <__swbuf_r>
 8006478:	3001      	adds	r0, #1
 800647a:	d1c9      	bne.n	8006410 <_puts_r+0x30>
 800647c:	e7e9      	b.n	8006452 <_puts_r+0x72>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	200a      	movs	r0, #10
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	7018      	strb	r0, [r3, #0]
 8006488:	e7e5      	b.n	8006456 <_puts_r+0x76>
 800648a:	bf00      	nop
 800648c:	080087bc 	.word	0x080087bc
 8006490:	080087dc 	.word	0x080087dc
 8006494:	0800879c 	.word	0x0800879c

08006498 <puts>:
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <puts+0xc>)
 800649a:	4601      	mov	r1, r0
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f7ff bf9f 	b.w	80063e0 <_puts_r>
 80064a2:	bf00      	nop
 80064a4:	2000013c 	.word	0x2000013c

080064a8 <siprintf>:
 80064a8:	b40e      	push	{r1, r2, r3}
 80064aa:	b500      	push	{lr}
 80064ac:	b09c      	sub	sp, #112	; 0x70
 80064ae:	ab1d      	add	r3, sp, #116	; 0x74
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	9006      	str	r0, [sp, #24]
 80064b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b8:	4809      	ldr	r0, [pc, #36]	; (80064e0 <siprintf+0x38>)
 80064ba:	9107      	str	r1, [sp, #28]
 80064bc:	9104      	str	r1, [sp, #16]
 80064be:	4909      	ldr	r1, [pc, #36]	; (80064e4 <siprintf+0x3c>)
 80064c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c4:	9105      	str	r1, [sp, #20]
 80064c6:	6800      	ldr	r0, [r0, #0]
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	a902      	add	r1, sp, #8
 80064cc:	f000 fbde 	bl	8006c8c <_svfiprintf_r>
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	b01c      	add	sp, #112	; 0x70
 80064d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064dc:	b003      	add	sp, #12
 80064de:	4770      	bx	lr
 80064e0:	2000013c 	.word	0x2000013c
 80064e4:	ffff0208 	.word	0xffff0208

080064e8 <strcat>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4603      	mov	r3, r0
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	1c5c      	adds	r4, r3, #1
 80064f0:	b93a      	cbnz	r2, 8006502 <strcat+0x1a>
 80064f2:	3b01      	subs	r3, #1
 80064f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	d1f9      	bne.n	80064f4 <strcat+0xc>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	4623      	mov	r3, r4
 8006504:	e7f2      	b.n	80064ec <strcat+0x4>

08006506 <strcpy>:
 8006506:	4603      	mov	r3, r0
 8006508:	f811 2b01 	ldrb.w	r2, [r1], #1
 800650c:	f803 2b01 	strb.w	r2, [r3], #1
 8006510:	2a00      	cmp	r2, #0
 8006512:	d1f9      	bne.n	8006508 <strcpy+0x2>
 8006514:	4770      	bx	lr

08006516 <strstr>:
 8006516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006518:	7803      	ldrb	r3, [r0, #0]
 800651a:	b17b      	cbz	r3, 800653c <strstr+0x26>
 800651c:	4604      	mov	r4, r0
 800651e:	7823      	ldrb	r3, [r4, #0]
 8006520:	4620      	mov	r0, r4
 8006522:	1c66      	adds	r6, r4, #1
 8006524:	b17b      	cbz	r3, 8006546 <strstr+0x30>
 8006526:	1e4a      	subs	r2, r1, #1
 8006528:	1e63      	subs	r3, r4, #1
 800652a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800652e:	b14d      	cbz	r5, 8006544 <strstr+0x2e>
 8006530:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006534:	42af      	cmp	r7, r5
 8006536:	4634      	mov	r4, r6
 8006538:	d0f7      	beq.n	800652a <strstr+0x14>
 800653a:	e7f0      	b.n	800651e <strstr+0x8>
 800653c:	780b      	ldrb	r3, [r1, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf18      	it	ne
 8006542:	2000      	movne	r0, #0
 8006544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006546:	4618      	mov	r0, r3
 8006548:	e7fc      	b.n	8006544 <strstr+0x2e>
	...

0800654c <__swbuf_r>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	460e      	mov	r6, r1
 8006550:	4614      	mov	r4, r2
 8006552:	4605      	mov	r5, r0
 8006554:	b118      	cbz	r0, 800655e <__swbuf_r+0x12>
 8006556:	6983      	ldr	r3, [r0, #24]
 8006558:	b90b      	cbnz	r3, 800655e <__swbuf_r+0x12>
 800655a:	f000 f9a7 	bl	80068ac <__sinit>
 800655e:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <__swbuf_r+0x98>)
 8006560:	429c      	cmp	r4, r3
 8006562:	d12a      	bne.n	80065ba <__swbuf_r+0x6e>
 8006564:	686c      	ldr	r4, [r5, #4]
 8006566:	69a3      	ldr	r3, [r4, #24]
 8006568:	60a3      	str	r3, [r4, #8]
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	071a      	lsls	r2, r3, #28
 800656e:	d52e      	bpl.n	80065ce <__swbuf_r+0x82>
 8006570:	6923      	ldr	r3, [r4, #16]
 8006572:	b363      	cbz	r3, 80065ce <__swbuf_r+0x82>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	6820      	ldr	r0, [r4, #0]
 8006578:	1ac0      	subs	r0, r0, r3
 800657a:	6963      	ldr	r3, [r4, #20]
 800657c:	b2f6      	uxtb	r6, r6
 800657e:	4283      	cmp	r3, r0
 8006580:	4637      	mov	r7, r6
 8006582:	dc04      	bgt.n	800658e <__swbuf_r+0x42>
 8006584:	4621      	mov	r1, r4
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f926 	bl	80067d8 <_fflush_r>
 800658c:	bb28      	cbnz	r0, 80065da <__swbuf_r+0x8e>
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	3b01      	subs	r3, #1
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	6022      	str	r2, [r4, #0]
 800659a:	701e      	strb	r6, [r3, #0]
 800659c:	6963      	ldr	r3, [r4, #20]
 800659e:	3001      	adds	r0, #1
 80065a0:	4283      	cmp	r3, r0
 80065a2:	d004      	beq.n	80065ae <__swbuf_r+0x62>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	07db      	lsls	r3, r3, #31
 80065a8:	d519      	bpl.n	80065de <__swbuf_r+0x92>
 80065aa:	2e0a      	cmp	r6, #10
 80065ac:	d117      	bne.n	80065de <__swbuf_r+0x92>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f911 	bl	80067d8 <_fflush_r>
 80065b6:	b190      	cbz	r0, 80065de <__swbuf_r+0x92>
 80065b8:	e00f      	b.n	80065da <__swbuf_r+0x8e>
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <__swbuf_r+0x9c>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d101      	bne.n	80065c4 <__swbuf_r+0x78>
 80065c0:	68ac      	ldr	r4, [r5, #8]
 80065c2:	e7d0      	b.n	8006566 <__swbuf_r+0x1a>
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <__swbuf_r+0xa0>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	bf08      	it	eq
 80065ca:	68ec      	ldreq	r4, [r5, #12]
 80065cc:	e7cb      	b.n	8006566 <__swbuf_r+0x1a>
 80065ce:	4621      	mov	r1, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 f80d 	bl	80065f0 <__swsetup_r>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d0cc      	beq.n	8006574 <__swbuf_r+0x28>
 80065da:	f04f 37ff 	mov.w	r7, #4294967295
 80065de:	4638      	mov	r0, r7
 80065e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	080087bc 	.word	0x080087bc
 80065e8:	080087dc 	.word	0x080087dc
 80065ec:	0800879c 	.word	0x0800879c

080065f0 <__swsetup_r>:
 80065f0:	4b32      	ldr	r3, [pc, #200]	; (80066bc <__swsetup_r+0xcc>)
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	681d      	ldr	r5, [r3, #0]
 80065f6:	4606      	mov	r6, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	b125      	cbz	r5, 8006606 <__swsetup_r+0x16>
 80065fc:	69ab      	ldr	r3, [r5, #24]
 80065fe:	b913      	cbnz	r3, 8006606 <__swsetup_r+0x16>
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f953 	bl	80068ac <__sinit>
 8006606:	4b2e      	ldr	r3, [pc, #184]	; (80066c0 <__swsetup_r+0xd0>)
 8006608:	429c      	cmp	r4, r3
 800660a:	d10f      	bne.n	800662c <__swsetup_r+0x3c>
 800660c:	686c      	ldr	r4, [r5, #4]
 800660e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006612:	b29a      	uxth	r2, r3
 8006614:	0715      	lsls	r5, r2, #28
 8006616:	d42c      	bmi.n	8006672 <__swsetup_r+0x82>
 8006618:	06d0      	lsls	r0, r2, #27
 800661a:	d411      	bmi.n	8006640 <__swsetup_r+0x50>
 800661c:	2209      	movs	r2, #9
 800661e:	6032      	str	r2, [r6, #0]
 8006620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	e03e      	b.n	80066aa <__swsetup_r+0xba>
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <__swsetup_r+0xd4>)
 800662e:	429c      	cmp	r4, r3
 8006630:	d101      	bne.n	8006636 <__swsetup_r+0x46>
 8006632:	68ac      	ldr	r4, [r5, #8]
 8006634:	e7eb      	b.n	800660e <__swsetup_r+0x1e>
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <__swsetup_r+0xd8>)
 8006638:	429c      	cmp	r4, r3
 800663a:	bf08      	it	eq
 800663c:	68ec      	ldreq	r4, [r5, #12]
 800663e:	e7e6      	b.n	800660e <__swsetup_r+0x1e>
 8006640:	0751      	lsls	r1, r2, #29
 8006642:	d512      	bpl.n	800666a <__swsetup_r+0x7a>
 8006644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006646:	b141      	cbz	r1, 800665a <__swsetup_r+0x6a>
 8006648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800664c:	4299      	cmp	r1, r3
 800664e:	d002      	beq.n	8006656 <__swsetup_r+0x66>
 8006650:	4630      	mov	r0, r6
 8006652:	f000 fa19 	bl	8006a88 <_free_r>
 8006656:	2300      	movs	r3, #0
 8006658:	6363      	str	r3, [r4, #52]	; 0x34
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	2300      	movs	r3, #0
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f043 0308 	orr.w	r3, r3, #8
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	b94b      	cbnz	r3, 800668a <__swsetup_r+0x9a>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800667c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006680:	d003      	beq.n	800668a <__swsetup_r+0x9a>
 8006682:	4621      	mov	r1, r4
 8006684:	4630      	mov	r0, r6
 8006686:	f000 f9bf 	bl	8006a08 <__smakebuf_r>
 800668a:	89a2      	ldrh	r2, [r4, #12]
 800668c:	f012 0301 	ands.w	r3, r2, #1
 8006690:	d00c      	beq.n	80066ac <__swsetup_r+0xbc>
 8006692:	2300      	movs	r3, #0
 8006694:	60a3      	str	r3, [r4, #8]
 8006696:	6963      	ldr	r3, [r4, #20]
 8006698:	425b      	negs	r3, r3
 800669a:	61a3      	str	r3, [r4, #24]
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	b953      	cbnz	r3, 80066b6 <__swsetup_r+0xc6>
 80066a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80066a8:	d1ba      	bne.n	8006620 <__swsetup_r+0x30>
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	0792      	lsls	r2, r2, #30
 80066ae:	bf58      	it	pl
 80066b0:	6963      	ldrpl	r3, [r4, #20]
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	e7f2      	b.n	800669c <__swsetup_r+0xac>
 80066b6:	2000      	movs	r0, #0
 80066b8:	e7f7      	b.n	80066aa <__swsetup_r+0xba>
 80066ba:	bf00      	nop
 80066bc:	2000013c 	.word	0x2000013c
 80066c0:	080087bc 	.word	0x080087bc
 80066c4:	080087dc 	.word	0x080087dc
 80066c8:	0800879c 	.word	0x0800879c

080066cc <__sflush_r>:
 80066cc:	898a      	ldrh	r2, [r1, #12]
 80066ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d2:	4605      	mov	r5, r0
 80066d4:	0710      	lsls	r0, r2, #28
 80066d6:	460c      	mov	r4, r1
 80066d8:	d458      	bmi.n	800678c <__sflush_r+0xc0>
 80066da:	684b      	ldr	r3, [r1, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dc05      	bgt.n	80066ec <__sflush_r+0x20>
 80066e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dc02      	bgt.n	80066ec <__sflush_r+0x20>
 80066e6:	2000      	movs	r0, #0
 80066e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	d0f9      	beq.n	80066e6 <__sflush_r+0x1a>
 80066f2:	2300      	movs	r3, #0
 80066f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066f8:	682f      	ldr	r7, [r5, #0]
 80066fa:	6a21      	ldr	r1, [r4, #32]
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	d032      	beq.n	8006766 <__sflush_r+0x9a>
 8006700:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	075a      	lsls	r2, r3, #29
 8006706:	d505      	bpl.n	8006714 <__sflush_r+0x48>
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	1ac0      	subs	r0, r0, r3
 800670c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800670e:	b10b      	cbz	r3, 8006714 <__sflush_r+0x48>
 8006710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006712:	1ac0      	subs	r0, r0, r3
 8006714:	2300      	movs	r3, #0
 8006716:	4602      	mov	r2, r0
 8006718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800671a:	6a21      	ldr	r1, [r4, #32]
 800671c:	4628      	mov	r0, r5
 800671e:	47b0      	blx	r6
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	d106      	bne.n	8006734 <__sflush_r+0x68>
 8006726:	6829      	ldr	r1, [r5, #0]
 8006728:	291d      	cmp	r1, #29
 800672a:	d848      	bhi.n	80067be <__sflush_r+0xf2>
 800672c:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <__sflush_r+0x108>)
 800672e:	40ca      	lsrs	r2, r1
 8006730:	07d6      	lsls	r6, r2, #31
 8006732:	d544      	bpl.n	80067be <__sflush_r+0xf2>
 8006734:	2200      	movs	r2, #0
 8006736:	6062      	str	r2, [r4, #4]
 8006738:	04d9      	lsls	r1, r3, #19
 800673a:	6922      	ldr	r2, [r4, #16]
 800673c:	6022      	str	r2, [r4, #0]
 800673e:	d504      	bpl.n	800674a <__sflush_r+0x7e>
 8006740:	1c42      	adds	r2, r0, #1
 8006742:	d101      	bne.n	8006748 <__sflush_r+0x7c>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b903      	cbnz	r3, 800674a <__sflush_r+0x7e>
 8006748:	6560      	str	r0, [r4, #84]	; 0x54
 800674a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800674c:	602f      	str	r7, [r5, #0]
 800674e:	2900      	cmp	r1, #0
 8006750:	d0c9      	beq.n	80066e6 <__sflush_r+0x1a>
 8006752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006756:	4299      	cmp	r1, r3
 8006758:	d002      	beq.n	8006760 <__sflush_r+0x94>
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f994 	bl	8006a88 <_free_r>
 8006760:	2000      	movs	r0, #0
 8006762:	6360      	str	r0, [r4, #52]	; 0x34
 8006764:	e7c0      	b.n	80066e8 <__sflush_r+0x1c>
 8006766:	2301      	movs	r3, #1
 8006768:	4628      	mov	r0, r5
 800676a:	47b0      	blx	r6
 800676c:	1c41      	adds	r1, r0, #1
 800676e:	d1c8      	bne.n	8006702 <__sflush_r+0x36>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0c5      	beq.n	8006702 <__sflush_r+0x36>
 8006776:	2b1d      	cmp	r3, #29
 8006778:	d001      	beq.n	800677e <__sflush_r+0xb2>
 800677a:	2b16      	cmp	r3, #22
 800677c:	d101      	bne.n	8006782 <__sflush_r+0xb6>
 800677e:	602f      	str	r7, [r5, #0]
 8006780:	e7b1      	b.n	80066e6 <__sflush_r+0x1a>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006788:	81a3      	strh	r3, [r4, #12]
 800678a:	e7ad      	b.n	80066e8 <__sflush_r+0x1c>
 800678c:	690f      	ldr	r7, [r1, #16]
 800678e:	2f00      	cmp	r7, #0
 8006790:	d0a9      	beq.n	80066e6 <__sflush_r+0x1a>
 8006792:	0793      	lsls	r3, r2, #30
 8006794:	680e      	ldr	r6, [r1, #0]
 8006796:	bf08      	it	eq
 8006798:	694b      	ldreq	r3, [r1, #20]
 800679a:	600f      	str	r7, [r1, #0]
 800679c:	bf18      	it	ne
 800679e:	2300      	movne	r3, #0
 80067a0:	eba6 0807 	sub.w	r8, r6, r7
 80067a4:	608b      	str	r3, [r1, #8]
 80067a6:	f1b8 0f00 	cmp.w	r8, #0
 80067aa:	dd9c      	ble.n	80066e6 <__sflush_r+0x1a>
 80067ac:	4643      	mov	r3, r8
 80067ae:	463a      	mov	r2, r7
 80067b0:	6a21      	ldr	r1, [r4, #32]
 80067b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b0      	blx	r6
 80067b8:	2800      	cmp	r0, #0
 80067ba:	dc06      	bgt.n	80067ca <__sflush_r+0xfe>
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e78e      	b.n	80066e8 <__sflush_r+0x1c>
 80067ca:	4407      	add	r7, r0
 80067cc:	eba8 0800 	sub.w	r8, r8, r0
 80067d0:	e7e9      	b.n	80067a6 <__sflush_r+0xda>
 80067d2:	bf00      	nop
 80067d4:	20400001 	.word	0x20400001

080067d8 <_fflush_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	690b      	ldr	r3, [r1, #16]
 80067dc:	4605      	mov	r5, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	b1db      	cbz	r3, 800681a <_fflush_r+0x42>
 80067e2:	b118      	cbz	r0, 80067ec <_fflush_r+0x14>
 80067e4:	6983      	ldr	r3, [r0, #24]
 80067e6:	b90b      	cbnz	r3, 80067ec <_fflush_r+0x14>
 80067e8:	f000 f860 	bl	80068ac <__sinit>
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <_fflush_r+0x48>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d109      	bne.n	8006806 <_fflush_r+0x2e>
 80067f2:	686c      	ldr	r4, [r5, #4]
 80067f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f8:	b17b      	cbz	r3, 800681a <_fflush_r+0x42>
 80067fa:	4621      	mov	r1, r4
 80067fc:	4628      	mov	r0, r5
 80067fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006802:	f7ff bf63 	b.w	80066cc <__sflush_r>
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <_fflush_r+0x4c>)
 8006808:	429c      	cmp	r4, r3
 800680a:	d101      	bne.n	8006810 <_fflush_r+0x38>
 800680c:	68ac      	ldr	r4, [r5, #8]
 800680e:	e7f1      	b.n	80067f4 <_fflush_r+0x1c>
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <_fflush_r+0x50>)
 8006812:	429c      	cmp	r4, r3
 8006814:	bf08      	it	eq
 8006816:	68ec      	ldreq	r4, [r5, #12]
 8006818:	e7ec      	b.n	80067f4 <_fflush_r+0x1c>
 800681a:	2000      	movs	r0, #0
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	080087bc 	.word	0x080087bc
 8006824:	080087dc 	.word	0x080087dc
 8006828:	0800879c 	.word	0x0800879c

0800682c <std>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	4604      	mov	r4, r0
 8006832:	e9c0 3300 	strd	r3, r3, [r0]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	; 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006842:	6183      	str	r3, [r0, #24]
 8006844:	4619      	mov	r1, r3
 8006846:	2208      	movs	r2, #8
 8006848:	305c      	adds	r0, #92	; 0x5c
 800684a:	f7ff fda9 	bl	80063a0 <memset>
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x38>)
 8006850:	6263      	str	r3, [r4, #36]	; 0x24
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <std+0x3c>)
 8006854:	62a3      	str	r3, [r4, #40]	; 0x28
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x40>)
 8006858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <std+0x44>)
 800685c:	6224      	str	r4, [r4, #32]
 800685e:	6323      	str	r3, [r4, #48]	; 0x30
 8006860:	bd10      	pop	{r4, pc}
 8006862:	bf00      	nop
 8006864:	0800742d 	.word	0x0800742d
 8006868:	0800744f 	.word	0x0800744f
 800686c:	08007487 	.word	0x08007487
 8006870:	080074ab 	.word	0x080074ab

08006874 <_cleanup_r>:
 8006874:	4901      	ldr	r1, [pc, #4]	; (800687c <_cleanup_r+0x8>)
 8006876:	f000 b885 	b.w	8006984 <_fwalk_reent>
 800687a:	bf00      	nop
 800687c:	080067d9 	.word	0x080067d9

08006880 <__sfmoreglue>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	1e4a      	subs	r2, r1, #1
 8006884:	2568      	movs	r5, #104	; 0x68
 8006886:	4355      	muls	r5, r2
 8006888:	460e      	mov	r6, r1
 800688a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800688e:	f000 f949 	bl	8006b24 <_malloc_r>
 8006892:	4604      	mov	r4, r0
 8006894:	b140      	cbz	r0, 80068a8 <__sfmoreglue+0x28>
 8006896:	2100      	movs	r1, #0
 8006898:	e9c0 1600 	strd	r1, r6, [r0]
 800689c:	300c      	adds	r0, #12
 800689e:	60a0      	str	r0, [r4, #8]
 80068a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a4:	f7ff fd7c 	bl	80063a0 <memset>
 80068a8:	4620      	mov	r0, r4
 80068aa:	bd70      	pop	{r4, r5, r6, pc}

080068ac <__sinit>:
 80068ac:	6983      	ldr	r3, [r0, #24]
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	bb33      	cbnz	r3, 8006902 <__sinit+0x56>
 80068b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80068b8:	6503      	str	r3, [r0, #80]	; 0x50
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <__sinit+0x58>)
 80068bc:	4a12      	ldr	r2, [pc, #72]	; (8006908 <__sinit+0x5c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6282      	str	r2, [r0, #40]	; 0x28
 80068c2:	4298      	cmp	r0, r3
 80068c4:	bf04      	itt	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	6183      	streq	r3, [r0, #24]
 80068ca:	f000 f81f 	bl	800690c <__sfp>
 80068ce:	6060      	str	r0, [r4, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 f81b 	bl	800690c <__sfp>
 80068d6:	60a0      	str	r0, [r4, #8]
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 f817 	bl	800690c <__sfp>
 80068de:	2200      	movs	r2, #0
 80068e0:	60e0      	str	r0, [r4, #12]
 80068e2:	2104      	movs	r1, #4
 80068e4:	6860      	ldr	r0, [r4, #4]
 80068e6:	f7ff ffa1 	bl	800682c <std>
 80068ea:	2201      	movs	r2, #1
 80068ec:	2109      	movs	r1, #9
 80068ee:	68a0      	ldr	r0, [r4, #8]
 80068f0:	f7ff ff9c 	bl	800682c <std>
 80068f4:	2202      	movs	r2, #2
 80068f6:	2112      	movs	r1, #18
 80068f8:	68e0      	ldr	r0, [r4, #12]
 80068fa:	f7ff ff97 	bl	800682c <std>
 80068fe:	2301      	movs	r3, #1
 8006900:	61a3      	str	r3, [r4, #24]
 8006902:	bd10      	pop	{r4, pc}
 8006904:	08008798 	.word	0x08008798
 8006908:	08006875 	.word	0x08006875

0800690c <__sfp>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	4b1b      	ldr	r3, [pc, #108]	; (800697c <__sfp+0x70>)
 8006910:	681e      	ldr	r6, [r3, #0]
 8006912:	69b3      	ldr	r3, [r6, #24]
 8006914:	4607      	mov	r7, r0
 8006916:	b913      	cbnz	r3, 800691e <__sfp+0x12>
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff ffc7 	bl	80068ac <__sinit>
 800691e:	3648      	adds	r6, #72	; 0x48
 8006920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006924:	3b01      	subs	r3, #1
 8006926:	d503      	bpl.n	8006930 <__sfp+0x24>
 8006928:	6833      	ldr	r3, [r6, #0]
 800692a:	b133      	cbz	r3, 800693a <__sfp+0x2e>
 800692c:	6836      	ldr	r6, [r6, #0]
 800692e:	e7f7      	b.n	8006920 <__sfp+0x14>
 8006930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006934:	b16d      	cbz	r5, 8006952 <__sfp+0x46>
 8006936:	3468      	adds	r4, #104	; 0x68
 8006938:	e7f4      	b.n	8006924 <__sfp+0x18>
 800693a:	2104      	movs	r1, #4
 800693c:	4638      	mov	r0, r7
 800693e:	f7ff ff9f 	bl	8006880 <__sfmoreglue>
 8006942:	6030      	str	r0, [r6, #0]
 8006944:	2800      	cmp	r0, #0
 8006946:	d1f1      	bne.n	800692c <__sfp+0x20>
 8006948:	230c      	movs	r3, #12
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	4604      	mov	r4, r0
 800694e:	4620      	mov	r0, r4
 8006950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <__sfp+0x74>)
 8006954:	6665      	str	r5, [r4, #100]	; 0x64
 8006956:	e9c4 5500 	strd	r5, r5, [r4]
 800695a:	60a5      	str	r5, [r4, #8]
 800695c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006960:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006964:	2208      	movs	r2, #8
 8006966:	4629      	mov	r1, r5
 8006968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800696c:	f7ff fd18 	bl	80063a0 <memset>
 8006970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006978:	e7e9      	b.n	800694e <__sfp+0x42>
 800697a:	bf00      	nop
 800697c:	08008798 	.word	0x08008798
 8006980:	ffff0001 	.word	0xffff0001

08006984 <_fwalk_reent>:
 8006984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006988:	4680      	mov	r8, r0
 800698a:	4689      	mov	r9, r1
 800698c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006990:	2600      	movs	r6, #0
 8006992:	b914      	cbnz	r4, 800699a <_fwalk_reent+0x16>
 8006994:	4630      	mov	r0, r6
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800699e:	3f01      	subs	r7, #1
 80069a0:	d501      	bpl.n	80069a6 <_fwalk_reent+0x22>
 80069a2:	6824      	ldr	r4, [r4, #0]
 80069a4:	e7f5      	b.n	8006992 <_fwalk_reent+0xe>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d907      	bls.n	80069bc <_fwalk_reent+0x38>
 80069ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069b0:	3301      	adds	r3, #1
 80069b2:	d003      	beq.n	80069bc <_fwalk_reent+0x38>
 80069b4:	4629      	mov	r1, r5
 80069b6:	4640      	mov	r0, r8
 80069b8:	47c8      	blx	r9
 80069ba:	4306      	orrs	r6, r0
 80069bc:	3568      	adds	r5, #104	; 0x68
 80069be:	e7ee      	b.n	800699e <_fwalk_reent+0x1a>

080069c0 <__swhatbuf_r>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	460e      	mov	r6, r1
 80069c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c8:	2900      	cmp	r1, #0
 80069ca:	b096      	sub	sp, #88	; 0x58
 80069cc:	4614      	mov	r4, r2
 80069ce:	461d      	mov	r5, r3
 80069d0:	da07      	bge.n	80069e2 <__swhatbuf_r+0x22>
 80069d2:	2300      	movs	r3, #0
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	89b3      	ldrh	r3, [r6, #12]
 80069d8:	061a      	lsls	r2, r3, #24
 80069da:	d410      	bmi.n	80069fe <__swhatbuf_r+0x3e>
 80069dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069e0:	e00e      	b.n	8006a00 <__swhatbuf_r+0x40>
 80069e2:	466a      	mov	r2, sp
 80069e4:	f000 fd88 	bl	80074f8 <_fstat_r>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dbf2      	blt.n	80069d2 <__swhatbuf_r+0x12>
 80069ec:	9a01      	ldr	r2, [sp, #4]
 80069ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069f6:	425a      	negs	r2, r3
 80069f8:	415a      	adcs	r2, r3
 80069fa:	602a      	str	r2, [r5, #0]
 80069fc:	e7ee      	b.n	80069dc <__swhatbuf_r+0x1c>
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	2000      	movs	r0, #0
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	b016      	add	sp, #88	; 0x58
 8006a06:	bd70      	pop	{r4, r5, r6, pc}

08006a08 <__smakebuf_r>:
 8006a08:	898b      	ldrh	r3, [r1, #12]
 8006a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a0c:	079d      	lsls	r5, r3, #30
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	d507      	bpl.n	8006a24 <__smakebuf_r+0x1c>
 8006a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	6163      	str	r3, [r4, #20]
 8006a20:	b002      	add	sp, #8
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	ab01      	add	r3, sp, #4
 8006a26:	466a      	mov	r2, sp
 8006a28:	f7ff ffca 	bl	80069c0 <__swhatbuf_r>
 8006a2c:	9900      	ldr	r1, [sp, #0]
 8006a2e:	4605      	mov	r5, r0
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 f877 	bl	8006b24 <_malloc_r>
 8006a36:	b948      	cbnz	r0, 8006a4c <__smakebuf_r+0x44>
 8006a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3c:	059a      	lsls	r2, r3, #22
 8006a3e:	d4ef      	bmi.n	8006a20 <__smakebuf_r+0x18>
 8006a40:	f023 0303 	bic.w	r3, r3, #3
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	e7e3      	b.n	8006a14 <__smakebuf_r+0xc>
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <__smakebuf_r+0x7c>)
 8006a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	6163      	str	r3, [r4, #20]
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	6120      	str	r0, [r4, #16]
 8006a62:	b15b      	cbz	r3, 8006a7c <__smakebuf_r+0x74>
 8006a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 fd57 	bl	800751c <_isatty_r>
 8006a6e:	b128      	cbz	r0, 8006a7c <__smakebuf_r+0x74>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	431d      	orrs	r5, r3
 8006a80:	81a5      	strh	r5, [r4, #12]
 8006a82:	e7cd      	b.n	8006a20 <__smakebuf_r+0x18>
 8006a84:	08006875 	.word	0x08006875

08006a88 <_free_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	d045      	beq.n	8006b1c <_free_r+0x94>
 8006a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a94:	1f0c      	subs	r4, r1, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb8      	it	lt
 8006a9a:	18e4      	addlt	r4, r4, r3
 8006a9c:	f000 fd84 	bl	80075a8 <__malloc_lock>
 8006aa0:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <_free_r+0x98>)
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	b933      	cbnz	r3, 8006ab6 <_free_r+0x2e>
 8006aa8:	6063      	str	r3, [r4, #4]
 8006aaa:	6014      	str	r4, [r2, #0]
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab2:	f000 bd7a 	b.w	80075aa <__malloc_unlock>
 8006ab6:	42a3      	cmp	r3, r4
 8006ab8:	d90c      	bls.n	8006ad4 <_free_r+0x4c>
 8006aba:	6821      	ldr	r1, [r4, #0]
 8006abc:	1862      	adds	r2, r4, r1
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	bf04      	itt	eq
 8006ac2:	681a      	ldreq	r2, [r3, #0]
 8006ac4:	685b      	ldreq	r3, [r3, #4]
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	bf04      	itt	eq
 8006aca:	1852      	addeq	r2, r2, r1
 8006acc:	6022      	streq	r2, [r4, #0]
 8006ace:	6004      	str	r4, [r0, #0]
 8006ad0:	e7ec      	b.n	8006aac <_free_r+0x24>
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	b10a      	cbz	r2, 8006adc <_free_r+0x54>
 8006ad8:	42a2      	cmp	r2, r4
 8006ada:	d9fa      	bls.n	8006ad2 <_free_r+0x4a>
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	1858      	adds	r0, r3, r1
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d10b      	bne.n	8006afc <_free_r+0x74>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	1858      	adds	r0, r3, r1
 8006aea:	4282      	cmp	r2, r0
 8006aec:	6019      	str	r1, [r3, #0]
 8006aee:	d1dd      	bne.n	8006aac <_free_r+0x24>
 8006af0:	6810      	ldr	r0, [r2, #0]
 8006af2:	6852      	ldr	r2, [r2, #4]
 8006af4:	605a      	str	r2, [r3, #4]
 8006af6:	4401      	add	r1, r0
 8006af8:	6019      	str	r1, [r3, #0]
 8006afa:	e7d7      	b.n	8006aac <_free_r+0x24>
 8006afc:	d902      	bls.n	8006b04 <_free_r+0x7c>
 8006afe:	230c      	movs	r3, #12
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	e7d3      	b.n	8006aac <_free_r+0x24>
 8006b04:	6820      	ldr	r0, [r4, #0]
 8006b06:	1821      	adds	r1, r4, r0
 8006b08:	428a      	cmp	r2, r1
 8006b0a:	bf04      	itt	eq
 8006b0c:	6811      	ldreq	r1, [r2, #0]
 8006b0e:	6852      	ldreq	r2, [r2, #4]
 8006b10:	6062      	str	r2, [r4, #4]
 8006b12:	bf04      	itt	eq
 8006b14:	1809      	addeq	r1, r1, r0
 8006b16:	6021      	streq	r1, [r4, #0]
 8006b18:	605c      	str	r4, [r3, #4]
 8006b1a:	e7c7      	b.n	8006aac <_free_r+0x24>
 8006b1c:	bd38      	pop	{r3, r4, r5, pc}
 8006b1e:	bf00      	nop
 8006b20:	200005cc 	.word	0x200005cc

08006b24 <_malloc_r>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	1ccd      	adds	r5, r1, #3
 8006b28:	f025 0503 	bic.w	r5, r5, #3
 8006b2c:	3508      	adds	r5, #8
 8006b2e:	2d0c      	cmp	r5, #12
 8006b30:	bf38      	it	cc
 8006b32:	250c      	movcc	r5, #12
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	4606      	mov	r6, r0
 8006b38:	db01      	blt.n	8006b3e <_malloc_r+0x1a>
 8006b3a:	42a9      	cmp	r1, r5
 8006b3c:	d903      	bls.n	8006b46 <_malloc_r+0x22>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	bd70      	pop	{r4, r5, r6, pc}
 8006b46:	f000 fd2f 	bl	80075a8 <__malloc_lock>
 8006b4a:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <_malloc_r+0xac>)
 8006b4c:	6814      	ldr	r4, [r2, #0]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	b991      	cbnz	r1, 8006b78 <_malloc_r+0x54>
 8006b52:	4c20      	ldr	r4, [pc, #128]	; (8006bd4 <_malloc_r+0xb0>)
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	b91b      	cbnz	r3, 8006b60 <_malloc_r+0x3c>
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 fc57 	bl	800740c <_sbrk_r>
 8006b5e:	6020      	str	r0, [r4, #0]
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f000 fc52 	bl	800740c <_sbrk_r>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d124      	bne.n	8006bb6 <_malloc_r+0x92>
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	4630      	mov	r0, r6
 8006b72:	f000 fd1a 	bl	80075aa <__malloc_unlock>
 8006b76:	e7e4      	b.n	8006b42 <_malloc_r+0x1e>
 8006b78:	680b      	ldr	r3, [r1, #0]
 8006b7a:	1b5b      	subs	r3, r3, r5
 8006b7c:	d418      	bmi.n	8006bb0 <_malloc_r+0x8c>
 8006b7e:	2b0b      	cmp	r3, #11
 8006b80:	d90f      	bls.n	8006ba2 <_malloc_r+0x7e>
 8006b82:	600b      	str	r3, [r1, #0]
 8006b84:	50cd      	str	r5, [r1, r3]
 8006b86:	18cc      	adds	r4, r1, r3
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 fd0e 	bl	80075aa <__malloc_unlock>
 8006b8e:	f104 000b 	add.w	r0, r4, #11
 8006b92:	1d23      	adds	r3, r4, #4
 8006b94:	f020 0007 	bic.w	r0, r0, #7
 8006b98:	1ac3      	subs	r3, r0, r3
 8006b9a:	d0d3      	beq.n	8006b44 <_malloc_r+0x20>
 8006b9c:	425a      	negs	r2, r3
 8006b9e:	50e2      	str	r2, [r4, r3]
 8006ba0:	e7d0      	b.n	8006b44 <_malloc_r+0x20>
 8006ba2:	428c      	cmp	r4, r1
 8006ba4:	684b      	ldr	r3, [r1, #4]
 8006ba6:	bf16      	itet	ne
 8006ba8:	6063      	strne	r3, [r4, #4]
 8006baa:	6013      	streq	r3, [r2, #0]
 8006bac:	460c      	movne	r4, r1
 8006bae:	e7eb      	b.n	8006b88 <_malloc_r+0x64>
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	6849      	ldr	r1, [r1, #4]
 8006bb4:	e7cc      	b.n	8006b50 <_malloc_r+0x2c>
 8006bb6:	1cc4      	adds	r4, r0, #3
 8006bb8:	f024 0403 	bic.w	r4, r4, #3
 8006bbc:	42a0      	cmp	r0, r4
 8006bbe:	d005      	beq.n	8006bcc <_malloc_r+0xa8>
 8006bc0:	1a21      	subs	r1, r4, r0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f000 fc22 	bl	800740c <_sbrk_r>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0cf      	beq.n	8006b6c <_malloc_r+0x48>
 8006bcc:	6025      	str	r5, [r4, #0]
 8006bce:	e7db      	b.n	8006b88 <_malloc_r+0x64>
 8006bd0:	200005cc 	.word	0x200005cc
 8006bd4:	200005d0 	.word	0x200005d0

08006bd8 <__ssputs_r>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	688e      	ldr	r6, [r1, #8]
 8006bde:	429e      	cmp	r6, r3
 8006be0:	4682      	mov	sl, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4690      	mov	r8, r2
 8006be6:	4699      	mov	r9, r3
 8006be8:	d837      	bhi.n	8006c5a <__ssputs_r+0x82>
 8006bea:	898a      	ldrh	r2, [r1, #12]
 8006bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bf0:	d031      	beq.n	8006c56 <__ssputs_r+0x7e>
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	6909      	ldr	r1, [r1, #16]
 8006bf6:	1a6f      	subs	r7, r5, r1
 8006bf8:	6965      	ldr	r5, [r4, #20]
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c00:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c04:	f109 0301 	add.w	r3, r9, #1
 8006c08:	443b      	add	r3, r7
 8006c0a:	429d      	cmp	r5, r3
 8006c0c:	bf38      	it	cc
 8006c0e:	461d      	movcc	r5, r3
 8006c10:	0553      	lsls	r3, r2, #21
 8006c12:	d530      	bpl.n	8006c76 <__ssputs_r+0x9e>
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7ff ff85 	bl	8006b24 <_malloc_r>
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	b950      	cbnz	r0, 8006c34 <__ssputs_r+0x5c>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	f8ca 3000 	str.w	r3, [sl]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c34:	463a      	mov	r2, r7
 8006c36:	6921      	ldr	r1, [r4, #16]
 8006c38:	f000 fc92 	bl	8007560 <memcpy>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	6126      	str	r6, [r4, #16]
 8006c4a:	6165      	str	r5, [r4, #20]
 8006c4c:	443e      	add	r6, r7
 8006c4e:	1bed      	subs	r5, r5, r7
 8006c50:	6026      	str	r6, [r4, #0]
 8006c52:	60a5      	str	r5, [r4, #8]
 8006c54:	464e      	mov	r6, r9
 8006c56:	454e      	cmp	r6, r9
 8006c58:	d900      	bls.n	8006c5c <__ssputs_r+0x84>
 8006c5a:	464e      	mov	r6, r9
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4641      	mov	r1, r8
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	f000 fc88 	bl	8007576 <memmove>
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	1b9b      	subs	r3, r3, r6
 8006c6a:	60a3      	str	r3, [r4, #8]
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	441e      	add	r6, r3
 8006c70:	6026      	str	r6, [r4, #0]
 8006c72:	2000      	movs	r0, #0
 8006c74:	e7dc      	b.n	8006c30 <__ssputs_r+0x58>
 8006c76:	462a      	mov	r2, r5
 8006c78:	f000 fc98 	bl	80075ac <_realloc_r>
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1e2      	bne.n	8006c48 <__ssputs_r+0x70>
 8006c82:	6921      	ldr	r1, [r4, #16]
 8006c84:	4650      	mov	r0, sl
 8006c86:	f7ff feff 	bl	8006a88 <_free_r>
 8006c8a:	e7c8      	b.n	8006c1e <__ssputs_r+0x46>

08006c8c <_svfiprintf_r>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	461d      	mov	r5, r3
 8006c92:	898b      	ldrh	r3, [r1, #12]
 8006c94:	061f      	lsls	r7, r3, #24
 8006c96:	b09d      	sub	sp, #116	; 0x74
 8006c98:	4680      	mov	r8, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	d50f      	bpl.n	8006cc0 <_svfiprintf_r+0x34>
 8006ca0:	690b      	ldr	r3, [r1, #16]
 8006ca2:	b96b      	cbnz	r3, 8006cc0 <_svfiprintf_r+0x34>
 8006ca4:	2140      	movs	r1, #64	; 0x40
 8006ca6:	f7ff ff3d 	bl	8006b24 <_malloc_r>
 8006caa:	6020      	str	r0, [r4, #0]
 8006cac:	6120      	str	r0, [r4, #16]
 8006cae:	b928      	cbnz	r0, 8006cbc <_svfiprintf_r+0x30>
 8006cb0:	230c      	movs	r3, #12
 8006cb2:	f8c8 3000 	str.w	r3, [r8]
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cba:	e0c8      	b.n	8006e4e <_svfiprintf_r+0x1c2>
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	6163      	str	r3, [r4, #20]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cca:	2330      	movs	r3, #48	; 0x30
 8006ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cd0:	9503      	str	r5, [sp, #12]
 8006cd2:	f04f 0b01 	mov.w	fp, #1
 8006cd6:	4637      	mov	r7, r6
 8006cd8:	463d      	mov	r5, r7
 8006cda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cde:	b10b      	cbz	r3, 8006ce4 <_svfiprintf_r+0x58>
 8006ce0:	2b25      	cmp	r3, #37	; 0x25
 8006ce2:	d13e      	bne.n	8006d62 <_svfiprintf_r+0xd6>
 8006ce4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ce8:	d00b      	beq.n	8006d02 <_svfiprintf_r+0x76>
 8006cea:	4653      	mov	r3, sl
 8006cec:	4632      	mov	r2, r6
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	f7ff ff71 	bl	8006bd8 <__ssputs_r>
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	f000 80a4 	beq.w	8006e44 <_svfiprintf_r+0x1b8>
 8006cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfe:	4453      	add	r3, sl
 8006d00:	9309      	str	r3, [sp, #36]	; 0x24
 8006d02:	783b      	ldrb	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 809d 	beq.w	8006e44 <_svfiprintf_r+0x1b8>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	9307      	str	r3, [sp, #28]
 8006d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d1e:	462f      	mov	r7, r5
 8006d20:	2205      	movs	r2, #5
 8006d22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d26:	4850      	ldr	r0, [pc, #320]	; (8006e68 <_svfiprintf_r+0x1dc>)
 8006d28:	f7f9 fa72 	bl	8000210 <memchr>
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	b9d0      	cbnz	r0, 8006d66 <_svfiprintf_r+0xda>
 8006d30:	06d9      	lsls	r1, r3, #27
 8006d32:	bf44      	itt	mi
 8006d34:	2220      	movmi	r2, #32
 8006d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d3a:	071a      	lsls	r2, r3, #28
 8006d3c:	bf44      	itt	mi
 8006d3e:	222b      	movmi	r2, #43	; 0x2b
 8006d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d44:	782a      	ldrb	r2, [r5, #0]
 8006d46:	2a2a      	cmp	r2, #42	; 0x2a
 8006d48:	d015      	beq.n	8006d76 <_svfiprintf_r+0xea>
 8006d4a:	9a07      	ldr	r2, [sp, #28]
 8006d4c:	462f      	mov	r7, r5
 8006d4e:	2000      	movs	r0, #0
 8006d50:	250a      	movs	r5, #10
 8006d52:	4639      	mov	r1, r7
 8006d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d58:	3b30      	subs	r3, #48	; 0x30
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d94d      	bls.n	8006dfa <_svfiprintf_r+0x16e>
 8006d5e:	b1b8      	cbz	r0, 8006d90 <_svfiprintf_r+0x104>
 8006d60:	e00f      	b.n	8006d82 <_svfiprintf_r+0xf6>
 8006d62:	462f      	mov	r7, r5
 8006d64:	e7b8      	b.n	8006cd8 <_svfiprintf_r+0x4c>
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <_svfiprintf_r+0x1dc>)
 8006d68:	1a80      	subs	r0, r0, r2
 8006d6a:	fa0b f000 	lsl.w	r0, fp, r0
 8006d6e:	4318      	orrs	r0, r3
 8006d70:	9004      	str	r0, [sp, #16]
 8006d72:	463d      	mov	r5, r7
 8006d74:	e7d3      	b.n	8006d1e <_svfiprintf_r+0x92>
 8006d76:	9a03      	ldr	r2, [sp, #12]
 8006d78:	1d11      	adds	r1, r2, #4
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	9103      	str	r1, [sp, #12]
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	db01      	blt.n	8006d86 <_svfiprintf_r+0xfa>
 8006d82:	9207      	str	r2, [sp, #28]
 8006d84:	e004      	b.n	8006d90 <_svfiprintf_r+0x104>
 8006d86:	4252      	negs	r2, r2
 8006d88:	f043 0302 	orr.w	r3, r3, #2
 8006d8c:	9207      	str	r2, [sp, #28]
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	783b      	ldrb	r3, [r7, #0]
 8006d92:	2b2e      	cmp	r3, #46	; 0x2e
 8006d94:	d10c      	bne.n	8006db0 <_svfiprintf_r+0x124>
 8006d96:	787b      	ldrb	r3, [r7, #1]
 8006d98:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9a:	d133      	bne.n	8006e04 <_svfiprintf_r+0x178>
 8006d9c:	9b03      	ldr	r3, [sp, #12]
 8006d9e:	1d1a      	adds	r2, r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	9203      	str	r2, [sp, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bfb8      	it	lt
 8006da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dac:	3702      	adds	r7, #2
 8006dae:	9305      	str	r3, [sp, #20]
 8006db0:	4d2e      	ldr	r5, [pc, #184]	; (8006e6c <_svfiprintf_r+0x1e0>)
 8006db2:	7839      	ldrb	r1, [r7, #0]
 8006db4:	2203      	movs	r2, #3
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7f9 fa2a 	bl	8000210 <memchr>
 8006dbc:	b138      	cbz	r0, 8006dce <_svfiprintf_r+0x142>
 8006dbe:	2340      	movs	r3, #64	; 0x40
 8006dc0:	1b40      	subs	r0, r0, r5
 8006dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	4303      	orrs	r3, r0
 8006dca:	3701      	adds	r7, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	7839      	ldrb	r1, [r7, #0]
 8006dd0:	4827      	ldr	r0, [pc, #156]	; (8006e70 <_svfiprintf_r+0x1e4>)
 8006dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dd6:	2206      	movs	r2, #6
 8006dd8:	1c7e      	adds	r6, r7, #1
 8006dda:	f7f9 fa19 	bl	8000210 <memchr>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d038      	beq.n	8006e54 <_svfiprintf_r+0x1c8>
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <_svfiprintf_r+0x1e8>)
 8006de4:	bb13      	cbnz	r3, 8006e2c <_svfiprintf_r+0x1a0>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	3307      	adds	r3, #7
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	3308      	adds	r3, #8
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	444b      	add	r3, r9
 8006df6:	9309      	str	r3, [sp, #36]	; 0x24
 8006df8:	e76d      	b.n	8006cd6 <_svfiprintf_r+0x4a>
 8006dfa:	fb05 3202 	mla	r2, r5, r2, r3
 8006dfe:	2001      	movs	r0, #1
 8006e00:	460f      	mov	r7, r1
 8006e02:	e7a6      	b.n	8006d52 <_svfiprintf_r+0xc6>
 8006e04:	2300      	movs	r3, #0
 8006e06:	3701      	adds	r7, #1
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	250a      	movs	r5, #10
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e14:	3a30      	subs	r2, #48	; 0x30
 8006e16:	2a09      	cmp	r2, #9
 8006e18:	d903      	bls.n	8006e22 <_svfiprintf_r+0x196>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0c8      	beq.n	8006db0 <_svfiprintf_r+0x124>
 8006e1e:	9105      	str	r1, [sp, #20]
 8006e20:	e7c6      	b.n	8006db0 <_svfiprintf_r+0x124>
 8006e22:	fb05 2101 	mla	r1, r5, r1, r2
 8006e26:	2301      	movs	r3, #1
 8006e28:	4607      	mov	r7, r0
 8006e2a:	e7f0      	b.n	8006e0e <_svfiprintf_r+0x182>
 8006e2c:	ab03      	add	r3, sp, #12
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4622      	mov	r2, r4
 8006e32:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <_svfiprintf_r+0x1ec>)
 8006e34:	a904      	add	r1, sp, #16
 8006e36:	4640      	mov	r0, r8
 8006e38:	f3af 8000 	nop.w
 8006e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e40:	4681      	mov	r9, r0
 8006e42:	d1d6      	bne.n	8006df2 <_svfiprintf_r+0x166>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	065b      	lsls	r3, r3, #25
 8006e48:	f53f af35 	bmi.w	8006cb6 <_svfiprintf_r+0x2a>
 8006e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e4e:	b01d      	add	sp, #116	; 0x74
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	ab03      	add	r3, sp, #12
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <_svfiprintf_r+0x1ec>)
 8006e5c:	a904      	add	r1, sp, #16
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f000 f9c2 	bl	80071e8 <_printf_i>
 8006e64:	e7ea      	b.n	8006e3c <_svfiprintf_r+0x1b0>
 8006e66:	bf00      	nop
 8006e68:	080087fc 	.word	0x080087fc
 8006e6c:	08008802 	.word	0x08008802
 8006e70:	08008806 	.word	0x08008806
 8006e74:	00000000 	.word	0x00000000
 8006e78:	08006bd9 	.word	0x08006bd9

08006e7c <__sfputc_r>:
 8006e7c:	6893      	ldr	r3, [r2, #8]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	b410      	push	{r4}
 8006e84:	6093      	str	r3, [r2, #8]
 8006e86:	da08      	bge.n	8006e9a <__sfputc_r+0x1e>
 8006e88:	6994      	ldr	r4, [r2, #24]
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	db01      	blt.n	8006e92 <__sfputc_r+0x16>
 8006e8e:	290a      	cmp	r1, #10
 8006e90:	d103      	bne.n	8006e9a <__sfputc_r+0x1e>
 8006e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e96:	f7ff bb59 	b.w	800654c <__swbuf_r>
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	1c58      	adds	r0, r3, #1
 8006e9e:	6010      	str	r0, [r2, #0]
 8006ea0:	7019      	strb	r1, [r3, #0]
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <__sfputs_r>:
 8006eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eac:	4606      	mov	r6, r0
 8006eae:	460f      	mov	r7, r1
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	18d5      	adds	r5, r2, r3
 8006eb4:	42ac      	cmp	r4, r5
 8006eb6:	d101      	bne.n	8006ebc <__sfputs_r+0x12>
 8006eb8:	2000      	movs	r0, #0
 8006eba:	e007      	b.n	8006ecc <__sfputs_r+0x22>
 8006ebc:	463a      	mov	r2, r7
 8006ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffda 	bl	8006e7c <__sfputc_r>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d1f3      	bne.n	8006eb4 <__sfputs_r+0xa>
 8006ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ed0 <_vfiprintf_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	b09d      	sub	sp, #116	; 0x74
 8006ed8:	4617      	mov	r7, r2
 8006eda:	461d      	mov	r5, r3
 8006edc:	4606      	mov	r6, r0
 8006ede:	b118      	cbz	r0, 8006ee8 <_vfiprintf_r+0x18>
 8006ee0:	6983      	ldr	r3, [r0, #24]
 8006ee2:	b90b      	cbnz	r3, 8006ee8 <_vfiprintf_r+0x18>
 8006ee4:	f7ff fce2 	bl	80068ac <__sinit>
 8006ee8:	4b7c      	ldr	r3, [pc, #496]	; (80070dc <_vfiprintf_r+0x20c>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d158      	bne.n	8006fa0 <_vfiprintf_r+0xd0>
 8006eee:	6874      	ldr	r4, [r6, #4]
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	0718      	lsls	r0, r3, #28
 8006ef4:	d55e      	bpl.n	8006fb4 <_vfiprintf_r+0xe4>
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d05b      	beq.n	8006fb4 <_vfiprintf_r+0xe4>
 8006efc:	2300      	movs	r3, #0
 8006efe:	9309      	str	r3, [sp, #36]	; 0x24
 8006f00:	2320      	movs	r3, #32
 8006f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f06:	2330      	movs	r3, #48	; 0x30
 8006f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f0c:	9503      	str	r5, [sp, #12]
 8006f0e:	f04f 0b01 	mov.w	fp, #1
 8006f12:	46b8      	mov	r8, r7
 8006f14:	4645      	mov	r5, r8
 8006f16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f1a:	b10b      	cbz	r3, 8006f20 <_vfiprintf_r+0x50>
 8006f1c:	2b25      	cmp	r3, #37	; 0x25
 8006f1e:	d154      	bne.n	8006fca <_vfiprintf_r+0xfa>
 8006f20:	ebb8 0a07 	subs.w	sl, r8, r7
 8006f24:	d00b      	beq.n	8006f3e <_vfiprintf_r+0x6e>
 8006f26:	4653      	mov	r3, sl
 8006f28:	463a      	mov	r2, r7
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff ffbc 	bl	8006eaa <__sfputs_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	f000 80c2 	beq.w	80070bc <_vfiprintf_r+0x1ec>
 8006f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3a:	4453      	add	r3, sl
 8006f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3e:	f898 3000 	ldrb.w	r3, [r8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80ba 	beq.w	80070bc <_vfiprintf_r+0x1ec>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	9307      	str	r3, [sp, #28]
 8006f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006f5c:	46a8      	mov	r8, r5
 8006f5e:	2205      	movs	r2, #5
 8006f60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006f64:	485e      	ldr	r0, [pc, #376]	; (80070e0 <_vfiprintf_r+0x210>)
 8006f66:	f7f9 f953 	bl	8000210 <memchr>
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	bb78      	cbnz	r0, 8006fce <_vfiprintf_r+0xfe>
 8006f6e:	06d9      	lsls	r1, r3, #27
 8006f70:	bf44      	itt	mi
 8006f72:	2220      	movmi	r2, #32
 8006f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f78:	071a      	lsls	r2, r3, #28
 8006f7a:	bf44      	itt	mi
 8006f7c:	222b      	movmi	r2, #43	; 0x2b
 8006f7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f82:	782a      	ldrb	r2, [r5, #0]
 8006f84:	2a2a      	cmp	r2, #42	; 0x2a
 8006f86:	d02a      	beq.n	8006fde <_vfiprintf_r+0x10e>
 8006f88:	9a07      	ldr	r2, [sp, #28]
 8006f8a:	46a8      	mov	r8, r5
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	250a      	movs	r5, #10
 8006f90:	4641      	mov	r1, r8
 8006f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f96:	3b30      	subs	r3, #48	; 0x30
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d969      	bls.n	8007070 <_vfiprintf_r+0x1a0>
 8006f9c:	b360      	cbz	r0, 8006ff8 <_vfiprintf_r+0x128>
 8006f9e:	e024      	b.n	8006fea <_vfiprintf_r+0x11a>
 8006fa0:	4b50      	ldr	r3, [pc, #320]	; (80070e4 <_vfiprintf_r+0x214>)
 8006fa2:	429c      	cmp	r4, r3
 8006fa4:	d101      	bne.n	8006faa <_vfiprintf_r+0xda>
 8006fa6:	68b4      	ldr	r4, [r6, #8]
 8006fa8:	e7a2      	b.n	8006ef0 <_vfiprintf_r+0x20>
 8006faa:	4b4f      	ldr	r3, [pc, #316]	; (80070e8 <_vfiprintf_r+0x218>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	bf08      	it	eq
 8006fb0:	68f4      	ldreq	r4, [r6, #12]
 8006fb2:	e79d      	b.n	8006ef0 <_vfiprintf_r+0x20>
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff fb1a 	bl	80065f0 <__swsetup_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	d09d      	beq.n	8006efc <_vfiprintf_r+0x2c>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	b01d      	add	sp, #116	; 0x74
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	46a8      	mov	r8, r5
 8006fcc:	e7a2      	b.n	8006f14 <_vfiprintf_r+0x44>
 8006fce:	4a44      	ldr	r2, [pc, #272]	; (80070e0 <_vfiprintf_r+0x210>)
 8006fd0:	1a80      	subs	r0, r0, r2
 8006fd2:	fa0b f000 	lsl.w	r0, fp, r0
 8006fd6:	4318      	orrs	r0, r3
 8006fd8:	9004      	str	r0, [sp, #16]
 8006fda:	4645      	mov	r5, r8
 8006fdc:	e7be      	b.n	8006f5c <_vfiprintf_r+0x8c>
 8006fde:	9a03      	ldr	r2, [sp, #12]
 8006fe0:	1d11      	adds	r1, r2, #4
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	9103      	str	r1, [sp, #12]
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	db01      	blt.n	8006fee <_vfiprintf_r+0x11e>
 8006fea:	9207      	str	r2, [sp, #28]
 8006fec:	e004      	b.n	8006ff8 <_vfiprintf_r+0x128>
 8006fee:	4252      	negs	r2, r2
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	9207      	str	r2, [sp, #28]
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	f898 3000 	ldrb.w	r3, [r8]
 8006ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ffe:	d10e      	bne.n	800701e <_vfiprintf_r+0x14e>
 8007000:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007004:	2b2a      	cmp	r3, #42	; 0x2a
 8007006:	d138      	bne.n	800707a <_vfiprintf_r+0x1aa>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	1d1a      	adds	r2, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	9203      	str	r2, [sp, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfb8      	it	lt
 8007014:	f04f 33ff 	movlt.w	r3, #4294967295
 8007018:	f108 0802 	add.w	r8, r8, #2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	4d33      	ldr	r5, [pc, #204]	; (80070ec <_vfiprintf_r+0x21c>)
 8007020:	f898 1000 	ldrb.w	r1, [r8]
 8007024:	2203      	movs	r2, #3
 8007026:	4628      	mov	r0, r5
 8007028:	f7f9 f8f2 	bl	8000210 <memchr>
 800702c:	b140      	cbz	r0, 8007040 <_vfiprintf_r+0x170>
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	1b40      	subs	r0, r0, r5
 8007032:	fa03 f000 	lsl.w	r0, r3, r0
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	4303      	orrs	r3, r0
 800703a:	f108 0801 	add.w	r8, r8, #1
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	f898 1000 	ldrb.w	r1, [r8]
 8007044:	482a      	ldr	r0, [pc, #168]	; (80070f0 <_vfiprintf_r+0x220>)
 8007046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704a:	2206      	movs	r2, #6
 800704c:	f108 0701 	add.w	r7, r8, #1
 8007050:	f7f9 f8de 	bl	8000210 <memchr>
 8007054:	2800      	cmp	r0, #0
 8007056:	d037      	beq.n	80070c8 <_vfiprintf_r+0x1f8>
 8007058:	4b26      	ldr	r3, [pc, #152]	; (80070f4 <_vfiprintf_r+0x224>)
 800705a:	bb1b      	cbnz	r3, 80070a4 <_vfiprintf_r+0x1d4>
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	3307      	adds	r3, #7
 8007060:	f023 0307 	bic.w	r3, r3, #7
 8007064:	3308      	adds	r3, #8
 8007066:	9303      	str	r3, [sp, #12]
 8007068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706a:	444b      	add	r3, r9
 800706c:	9309      	str	r3, [sp, #36]	; 0x24
 800706e:	e750      	b.n	8006f12 <_vfiprintf_r+0x42>
 8007070:	fb05 3202 	mla	r2, r5, r2, r3
 8007074:	2001      	movs	r0, #1
 8007076:	4688      	mov	r8, r1
 8007078:	e78a      	b.n	8006f90 <_vfiprintf_r+0xc0>
 800707a:	2300      	movs	r3, #0
 800707c:	f108 0801 	add.w	r8, r8, #1
 8007080:	9305      	str	r3, [sp, #20]
 8007082:	4619      	mov	r1, r3
 8007084:	250a      	movs	r5, #10
 8007086:	4640      	mov	r0, r8
 8007088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800708c:	3a30      	subs	r2, #48	; 0x30
 800708e:	2a09      	cmp	r2, #9
 8007090:	d903      	bls.n	800709a <_vfiprintf_r+0x1ca>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0c3      	beq.n	800701e <_vfiprintf_r+0x14e>
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	e7c1      	b.n	800701e <_vfiprintf_r+0x14e>
 800709a:	fb05 2101 	mla	r1, r5, r1, r2
 800709e:	2301      	movs	r3, #1
 80070a0:	4680      	mov	r8, r0
 80070a2:	e7f0      	b.n	8007086 <_vfiprintf_r+0x1b6>
 80070a4:	ab03      	add	r3, sp, #12
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4622      	mov	r2, r4
 80070aa:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <_vfiprintf_r+0x228>)
 80070ac:	a904      	add	r1, sp, #16
 80070ae:	4630      	mov	r0, r6
 80070b0:	f3af 8000 	nop.w
 80070b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80070b8:	4681      	mov	r9, r0
 80070ba:	d1d5      	bne.n	8007068 <_vfiprintf_r+0x198>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	065b      	lsls	r3, r3, #25
 80070c0:	f53f af7e 	bmi.w	8006fc0 <_vfiprintf_r+0xf0>
 80070c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c6:	e77d      	b.n	8006fc4 <_vfiprintf_r+0xf4>
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4622      	mov	r2, r4
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <_vfiprintf_r+0x228>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 f888 	bl	80071e8 <_printf_i>
 80070d8:	e7ec      	b.n	80070b4 <_vfiprintf_r+0x1e4>
 80070da:	bf00      	nop
 80070dc:	080087bc 	.word	0x080087bc
 80070e0:	080087fc 	.word	0x080087fc
 80070e4:	080087dc 	.word	0x080087dc
 80070e8:	0800879c 	.word	0x0800879c
 80070ec:	08008802 	.word	0x08008802
 80070f0:	08008806 	.word	0x08008806
 80070f4:	00000000 	.word	0x00000000
 80070f8:	08006eab 	.word	0x08006eab

080070fc <_printf_common>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	4691      	mov	r9, r2
 8007102:	461f      	mov	r7, r3
 8007104:	688a      	ldr	r2, [r1, #8]
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800710c:	4293      	cmp	r3, r2
 800710e:	bfb8      	it	lt
 8007110:	4613      	movlt	r3, r2
 8007112:	f8c9 3000 	str.w	r3, [r9]
 8007116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800711a:	4606      	mov	r6, r0
 800711c:	460c      	mov	r4, r1
 800711e:	b112      	cbz	r2, 8007126 <_printf_common+0x2a>
 8007120:	3301      	adds	r3, #1
 8007122:	f8c9 3000 	str.w	r3, [r9]
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	0699      	lsls	r1, r3, #26
 800712a:	bf42      	ittt	mi
 800712c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007130:	3302      	addmi	r3, #2
 8007132:	f8c9 3000 	strmi.w	r3, [r9]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d107      	bne.n	800714e <_printf_common+0x52>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	f8d9 2000 	ldr.w	r2, [r9]
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	42ab      	cmp	r3, r5
 800714c:	dc28      	bgt.n	80071a0 <_printf_common+0xa4>
 800714e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	3300      	adds	r3, #0
 8007156:	bf18      	it	ne
 8007158:	2301      	movne	r3, #1
 800715a:	0692      	lsls	r2, r2, #26
 800715c:	d42d      	bmi.n	80071ba <_printf_common+0xbe>
 800715e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007162:	4639      	mov	r1, r7
 8007164:	4630      	mov	r0, r6
 8007166:	47c0      	blx	r8
 8007168:	3001      	adds	r0, #1
 800716a:	d020      	beq.n	80071ae <_printf_common+0xb2>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	68e5      	ldr	r5, [r4, #12]
 8007170:	f8d9 2000 	ldr.w	r2, [r9]
 8007174:	f003 0306 	and.w	r3, r3, #6
 8007178:	2b04      	cmp	r3, #4
 800717a:	bf08      	it	eq
 800717c:	1aad      	subeq	r5, r5, r2
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	6922      	ldr	r2, [r4, #16]
 8007182:	bf0c      	ite	eq
 8007184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007188:	2500      	movne	r5, #0
 800718a:	4293      	cmp	r3, r2
 800718c:	bfc4      	itt	gt
 800718e:	1a9b      	subgt	r3, r3, r2
 8007190:	18ed      	addgt	r5, r5, r3
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	341a      	adds	r4, #26
 8007198:	454d      	cmp	r5, r9
 800719a:	d11a      	bne.n	80071d2 <_printf_common+0xd6>
 800719c:	2000      	movs	r0, #0
 800719e:	e008      	b.n	80071b2 <_printf_common+0xb6>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4652      	mov	r2, sl
 80071a4:	4639      	mov	r1, r7
 80071a6:	4630      	mov	r0, r6
 80071a8:	47c0      	blx	r8
 80071aa:	3001      	adds	r0, #1
 80071ac:	d103      	bne.n	80071b6 <_printf_common+0xba>
 80071ae:	f04f 30ff 	mov.w	r0, #4294967295
 80071b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b6:	3501      	adds	r5, #1
 80071b8:	e7c3      	b.n	8007142 <_printf_common+0x46>
 80071ba:	18e1      	adds	r1, r4, r3
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	2030      	movs	r0, #48	; 0x30
 80071c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071c4:	4422      	add	r2, r4
 80071c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071ce:	3302      	adds	r3, #2
 80071d0:	e7c5      	b.n	800715e <_printf_common+0x62>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4622      	mov	r2, r4
 80071d6:	4639      	mov	r1, r7
 80071d8:	4630      	mov	r0, r6
 80071da:	47c0      	blx	r8
 80071dc:	3001      	adds	r0, #1
 80071de:	d0e6      	beq.n	80071ae <_printf_common+0xb2>
 80071e0:	f109 0901 	add.w	r9, r9, #1
 80071e4:	e7d8      	b.n	8007198 <_printf_common+0x9c>
	...

080071e8 <_printf_i>:
 80071e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071f0:	460c      	mov	r4, r1
 80071f2:	7e09      	ldrb	r1, [r1, #24]
 80071f4:	b085      	sub	sp, #20
 80071f6:	296e      	cmp	r1, #110	; 0x6e
 80071f8:	4617      	mov	r7, r2
 80071fa:	4606      	mov	r6, r0
 80071fc:	4698      	mov	r8, r3
 80071fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007200:	f000 80b3 	beq.w	800736a <_printf_i+0x182>
 8007204:	d822      	bhi.n	800724c <_printf_i+0x64>
 8007206:	2963      	cmp	r1, #99	; 0x63
 8007208:	d036      	beq.n	8007278 <_printf_i+0x90>
 800720a:	d80a      	bhi.n	8007222 <_printf_i+0x3a>
 800720c:	2900      	cmp	r1, #0
 800720e:	f000 80b9 	beq.w	8007384 <_printf_i+0x19c>
 8007212:	2958      	cmp	r1, #88	; 0x58
 8007214:	f000 8083 	beq.w	800731e <_printf_i+0x136>
 8007218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800721c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007220:	e032      	b.n	8007288 <_printf_i+0xa0>
 8007222:	2964      	cmp	r1, #100	; 0x64
 8007224:	d001      	beq.n	800722a <_printf_i+0x42>
 8007226:	2969      	cmp	r1, #105	; 0x69
 8007228:	d1f6      	bne.n	8007218 <_printf_i+0x30>
 800722a:	6820      	ldr	r0, [r4, #0]
 800722c:	6813      	ldr	r3, [r2, #0]
 800722e:	0605      	lsls	r5, r0, #24
 8007230:	f103 0104 	add.w	r1, r3, #4
 8007234:	d52a      	bpl.n	800728c <_printf_i+0xa4>
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6011      	str	r1, [r2, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	da03      	bge.n	8007246 <_printf_i+0x5e>
 800723e:	222d      	movs	r2, #45	; 0x2d
 8007240:	425b      	negs	r3, r3
 8007242:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007246:	486f      	ldr	r0, [pc, #444]	; (8007404 <_printf_i+0x21c>)
 8007248:	220a      	movs	r2, #10
 800724a:	e039      	b.n	80072c0 <_printf_i+0xd8>
 800724c:	2973      	cmp	r1, #115	; 0x73
 800724e:	f000 809d 	beq.w	800738c <_printf_i+0x1a4>
 8007252:	d808      	bhi.n	8007266 <_printf_i+0x7e>
 8007254:	296f      	cmp	r1, #111	; 0x6f
 8007256:	d020      	beq.n	800729a <_printf_i+0xb2>
 8007258:	2970      	cmp	r1, #112	; 0x70
 800725a:	d1dd      	bne.n	8007218 <_printf_i+0x30>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f043 0320 	orr.w	r3, r3, #32
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	e003      	b.n	800726e <_printf_i+0x86>
 8007266:	2975      	cmp	r1, #117	; 0x75
 8007268:	d017      	beq.n	800729a <_printf_i+0xb2>
 800726a:	2978      	cmp	r1, #120	; 0x78
 800726c:	d1d4      	bne.n	8007218 <_printf_i+0x30>
 800726e:	2378      	movs	r3, #120	; 0x78
 8007270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007274:	4864      	ldr	r0, [pc, #400]	; (8007408 <_printf_i+0x220>)
 8007276:	e055      	b.n	8007324 <_printf_i+0x13c>
 8007278:	6813      	ldr	r3, [r2, #0]
 800727a:	1d19      	adds	r1, r3, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6011      	str	r1, [r2, #0]
 8007280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007288:	2301      	movs	r3, #1
 800728a:	e08c      	b.n	80073a6 <_printf_i+0x1be>
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6011      	str	r1, [r2, #0]
 8007290:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007294:	bf18      	it	ne
 8007296:	b21b      	sxthne	r3, r3
 8007298:	e7cf      	b.n	800723a <_printf_i+0x52>
 800729a:	6813      	ldr	r3, [r2, #0]
 800729c:	6825      	ldr	r5, [r4, #0]
 800729e:	1d18      	adds	r0, r3, #4
 80072a0:	6010      	str	r0, [r2, #0]
 80072a2:	0628      	lsls	r0, r5, #24
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0xc2>
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	e002      	b.n	80072b0 <_printf_i+0xc8>
 80072aa:	0668      	lsls	r0, r5, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0xbe>
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	4854      	ldr	r0, [pc, #336]	; (8007404 <_printf_i+0x21c>)
 80072b2:	296f      	cmp	r1, #111	; 0x6f
 80072b4:	bf14      	ite	ne
 80072b6:	220a      	movne	r2, #10
 80072b8:	2208      	moveq	r2, #8
 80072ba:	2100      	movs	r1, #0
 80072bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072c0:	6865      	ldr	r5, [r4, #4]
 80072c2:	60a5      	str	r5, [r4, #8]
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	f2c0 8095 	blt.w	80073f4 <_printf_i+0x20c>
 80072ca:	6821      	ldr	r1, [r4, #0]
 80072cc:	f021 0104 	bic.w	r1, r1, #4
 80072d0:	6021      	str	r1, [r4, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d13d      	bne.n	8007352 <_printf_i+0x16a>
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	f040 808e 	bne.w	80073f8 <_printf_i+0x210>
 80072dc:	4665      	mov	r5, ip
 80072de:	2a08      	cmp	r2, #8
 80072e0:	d10b      	bne.n	80072fa <_printf_i+0x112>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	07db      	lsls	r3, r3, #31
 80072e6:	d508      	bpl.n	80072fa <_printf_i+0x112>
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	bfde      	ittt	le
 80072f0:	2330      	movle	r3, #48	; 0x30
 80072f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072fa:	ebac 0305 	sub.w	r3, ip, r5
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	f8cd 8000 	str.w	r8, [sp]
 8007304:	463b      	mov	r3, r7
 8007306:	aa03      	add	r2, sp, #12
 8007308:	4621      	mov	r1, r4
 800730a:	4630      	mov	r0, r6
 800730c:	f7ff fef6 	bl	80070fc <_printf_common>
 8007310:	3001      	adds	r0, #1
 8007312:	d14d      	bne.n	80073b0 <_printf_i+0x1c8>
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	b005      	add	sp, #20
 800731a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731e:	4839      	ldr	r0, [pc, #228]	; (8007404 <_printf_i+0x21c>)
 8007320:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007324:	6813      	ldr	r3, [r2, #0]
 8007326:	6821      	ldr	r1, [r4, #0]
 8007328:	1d1d      	adds	r5, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6015      	str	r5, [r2, #0]
 800732e:	060a      	lsls	r2, r1, #24
 8007330:	d50b      	bpl.n	800734a <_printf_i+0x162>
 8007332:	07ca      	lsls	r2, r1, #31
 8007334:	bf44      	itt	mi
 8007336:	f041 0120 	orrmi.w	r1, r1, #32
 800733a:	6021      	strmi	r1, [r4, #0]
 800733c:	b91b      	cbnz	r3, 8007346 <_printf_i+0x15e>
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	f022 0220 	bic.w	r2, r2, #32
 8007344:	6022      	str	r2, [r4, #0]
 8007346:	2210      	movs	r2, #16
 8007348:	e7b7      	b.n	80072ba <_printf_i+0xd2>
 800734a:	064d      	lsls	r5, r1, #25
 800734c:	bf48      	it	mi
 800734e:	b29b      	uxthmi	r3, r3
 8007350:	e7ef      	b.n	8007332 <_printf_i+0x14a>
 8007352:	4665      	mov	r5, ip
 8007354:	fbb3 f1f2 	udiv	r1, r3, r2
 8007358:	fb02 3311 	mls	r3, r2, r1, r3
 800735c:	5cc3      	ldrb	r3, [r0, r3]
 800735e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007362:	460b      	mov	r3, r1
 8007364:	2900      	cmp	r1, #0
 8007366:	d1f5      	bne.n	8007354 <_printf_i+0x16c>
 8007368:	e7b9      	b.n	80072de <_printf_i+0xf6>
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	6825      	ldr	r5, [r4, #0]
 800736e:	6961      	ldr	r1, [r4, #20]
 8007370:	1d18      	adds	r0, r3, #4
 8007372:	6010      	str	r0, [r2, #0]
 8007374:	0628      	lsls	r0, r5, #24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	d501      	bpl.n	800737e <_printf_i+0x196>
 800737a:	6019      	str	r1, [r3, #0]
 800737c:	e002      	b.n	8007384 <_printf_i+0x19c>
 800737e:	066a      	lsls	r2, r5, #25
 8007380:	d5fb      	bpl.n	800737a <_printf_i+0x192>
 8007382:	8019      	strh	r1, [r3, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	4665      	mov	r5, ip
 800738a:	e7b9      	b.n	8007300 <_printf_i+0x118>
 800738c:	6813      	ldr	r3, [r2, #0]
 800738e:	1d19      	adds	r1, r3, #4
 8007390:	6011      	str	r1, [r2, #0]
 8007392:	681d      	ldr	r5, [r3, #0]
 8007394:	6862      	ldr	r2, [r4, #4]
 8007396:	2100      	movs	r1, #0
 8007398:	4628      	mov	r0, r5
 800739a:	f7f8 ff39 	bl	8000210 <memchr>
 800739e:	b108      	cbz	r0, 80073a4 <_printf_i+0x1bc>
 80073a0:	1b40      	subs	r0, r0, r5
 80073a2:	6060      	str	r0, [r4, #4]
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	2300      	movs	r3, #0
 80073aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ae:	e7a7      	b.n	8007300 <_printf_i+0x118>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	462a      	mov	r2, r5
 80073b4:	4639      	mov	r1, r7
 80073b6:	4630      	mov	r0, r6
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d0aa      	beq.n	8007314 <_printf_i+0x12c>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	079b      	lsls	r3, r3, #30
 80073c2:	d413      	bmi.n	80073ec <_printf_i+0x204>
 80073c4:	68e0      	ldr	r0, [r4, #12]
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	4298      	cmp	r0, r3
 80073ca:	bfb8      	it	lt
 80073cc:	4618      	movlt	r0, r3
 80073ce:	e7a3      	b.n	8007318 <_printf_i+0x130>
 80073d0:	2301      	movs	r3, #1
 80073d2:	464a      	mov	r2, r9
 80073d4:	4639      	mov	r1, r7
 80073d6:	4630      	mov	r0, r6
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d09a      	beq.n	8007314 <_printf_i+0x12c>
 80073de:	3501      	adds	r5, #1
 80073e0:	68e3      	ldr	r3, [r4, #12]
 80073e2:	9a03      	ldr	r2, [sp, #12]
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	42ab      	cmp	r3, r5
 80073e8:	dcf2      	bgt.n	80073d0 <_printf_i+0x1e8>
 80073ea:	e7eb      	b.n	80073c4 <_printf_i+0x1dc>
 80073ec:	2500      	movs	r5, #0
 80073ee:	f104 0919 	add.w	r9, r4, #25
 80073f2:	e7f5      	b.n	80073e0 <_printf_i+0x1f8>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1ac      	bne.n	8007352 <_printf_i+0x16a>
 80073f8:	7803      	ldrb	r3, [r0, #0]
 80073fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007402:	e76c      	b.n	80072de <_printf_i+0xf6>
 8007404:	0800880d 	.word	0x0800880d
 8007408:	0800881e 	.word	0x0800881e

0800740c <_sbrk_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4c06      	ldr	r4, [pc, #24]	; (8007428 <_sbrk_r+0x1c>)
 8007410:	2300      	movs	r3, #0
 8007412:	4605      	mov	r5, r0
 8007414:	4608      	mov	r0, r1
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	f7fb fbf8 	bl	8002c0c <_sbrk>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_sbrk_r+0x1a>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	b103      	cbz	r3, 8007426 <_sbrk_r+0x1a>
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20002728 	.word	0x20002728

0800742c <__sread>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	f000 f8e0 	bl	80075f8 <_read_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	bfab      	itete	ge
 800743c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800743e:	89a3      	ldrhlt	r3, [r4, #12]
 8007440:	181b      	addge	r3, r3, r0
 8007442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007446:	bfac      	ite	ge
 8007448:	6563      	strge	r3, [r4, #84]	; 0x54
 800744a:	81a3      	strhlt	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__swrite>:
 800744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	461f      	mov	r7, r3
 8007454:	898b      	ldrh	r3, [r1, #12]
 8007456:	05db      	lsls	r3, r3, #23
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4616      	mov	r6, r2
 800745e:	d505      	bpl.n	800746c <__swrite+0x1e>
 8007460:	2302      	movs	r3, #2
 8007462:	2200      	movs	r2, #0
 8007464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007468:	f000 f868 	bl	800753c <_lseek_r>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	f000 b817 	b.w	80074b4 <_write_r>

08007486 <__sseek>:
 8007486:	b510      	push	{r4, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 f855 	bl	800753c <_lseek_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	bf15      	itete	ne
 8007498:	6560      	strne	r0, [r4, #84]	; 0x54
 800749a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800749e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074a2:	81a3      	strheq	r3, [r4, #12]
 80074a4:	bf18      	it	ne
 80074a6:	81a3      	strhne	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__sclose>:
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	f000 b813 	b.w	80074d8 <_close_r>
	...

080074b4 <_write_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4c07      	ldr	r4, [pc, #28]	; (80074d4 <_write_r+0x20>)
 80074b8:	4605      	mov	r5, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	6022      	str	r2, [r4, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fb fb51 	bl	8002b6a <_write>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_write_r+0x1e>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_write_r+0x1e>
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	20002728 	.word	0x20002728

080074d8 <_close_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4c06      	ldr	r4, [pc, #24]	; (80074f4 <_close_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4605      	mov	r5, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	f7fb fb5d 	bl	8002ba2 <_close>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_close_r+0x1a>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_close_r+0x1a>
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20002728 	.word	0x20002728

080074f8 <_fstat_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4c07      	ldr	r4, [pc, #28]	; (8007518 <_fstat_r+0x20>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4605      	mov	r5, r0
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	f7fb fb58 	bl	8002bba <_fstat>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d102      	bne.n	8007514 <_fstat_r+0x1c>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	b103      	cbz	r3, 8007514 <_fstat_r+0x1c>
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	20002728 	.word	0x20002728

0800751c <_isatty_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4c06      	ldr	r4, [pc, #24]	; (8007538 <_isatty_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4605      	mov	r5, r0
 8007524:	4608      	mov	r0, r1
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	f7fb fb57 	bl	8002bda <_isatty>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_isatty_r+0x1a>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	b103      	cbz	r3, 8007536 <_isatty_r+0x1a>
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20002728 	.word	0x20002728

0800753c <_lseek_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4c07      	ldr	r4, [pc, #28]	; (800755c <_lseek_r+0x20>)
 8007540:	4605      	mov	r5, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7fb fb50 	bl	8002bf0 <_lseek>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_lseek_r+0x1e>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	b103      	cbz	r3, 800755a <_lseek_r+0x1e>
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	20002728 	.word	0x20002728

08007560 <memcpy>:
 8007560:	b510      	push	{r4, lr}
 8007562:	1e43      	subs	r3, r0, #1
 8007564:	440a      	add	r2, r1
 8007566:	4291      	cmp	r1, r2
 8007568:	d100      	bne.n	800756c <memcpy+0xc>
 800756a:	bd10      	pop	{r4, pc}
 800756c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007574:	e7f7      	b.n	8007566 <memcpy+0x6>

08007576 <memmove>:
 8007576:	4288      	cmp	r0, r1
 8007578:	b510      	push	{r4, lr}
 800757a:	eb01 0302 	add.w	r3, r1, r2
 800757e:	d807      	bhi.n	8007590 <memmove+0x1a>
 8007580:	1e42      	subs	r2, r0, #1
 8007582:	4299      	cmp	r1, r3
 8007584:	d00a      	beq.n	800759c <memmove+0x26>
 8007586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800758a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800758e:	e7f8      	b.n	8007582 <memmove+0xc>
 8007590:	4283      	cmp	r3, r0
 8007592:	d9f5      	bls.n	8007580 <memmove+0xa>
 8007594:	1881      	adds	r1, r0, r2
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	42d3      	cmn	r3, r2
 800759a:	d100      	bne.n	800759e <memmove+0x28>
 800759c:	bd10      	pop	{r4, pc}
 800759e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80075a6:	e7f7      	b.n	8007598 <memmove+0x22>

080075a8 <__malloc_lock>:
 80075a8:	4770      	bx	lr

080075aa <__malloc_unlock>:
 80075aa:	4770      	bx	lr

080075ac <_realloc_r>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	4607      	mov	r7, r0
 80075b0:	4614      	mov	r4, r2
 80075b2:	460e      	mov	r6, r1
 80075b4:	b921      	cbnz	r1, 80075c0 <_realloc_r+0x14>
 80075b6:	4611      	mov	r1, r2
 80075b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075bc:	f7ff bab2 	b.w	8006b24 <_malloc_r>
 80075c0:	b922      	cbnz	r2, 80075cc <_realloc_r+0x20>
 80075c2:	f7ff fa61 	bl	8006a88 <_free_r>
 80075c6:	4625      	mov	r5, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075cc:	f000 f826 	bl	800761c <_malloc_usable_size_r>
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d20f      	bcs.n	80075f4 <_realloc_r+0x48>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4638      	mov	r0, r7
 80075d8:	f7ff faa4 	bl	8006b24 <_malloc_r>
 80075dc:	4605      	mov	r5, r0
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0f2      	beq.n	80075c8 <_realloc_r+0x1c>
 80075e2:	4631      	mov	r1, r6
 80075e4:	4622      	mov	r2, r4
 80075e6:	f7ff ffbb 	bl	8007560 <memcpy>
 80075ea:	4631      	mov	r1, r6
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff fa4b 	bl	8006a88 <_free_r>
 80075f2:	e7e9      	b.n	80075c8 <_realloc_r+0x1c>
 80075f4:	4635      	mov	r5, r6
 80075f6:	e7e7      	b.n	80075c8 <_realloc_r+0x1c>

080075f8 <_read_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4c07      	ldr	r4, [pc, #28]	; (8007618 <_read_r+0x20>)
 80075fc:	4605      	mov	r5, r0
 80075fe:	4608      	mov	r0, r1
 8007600:	4611      	mov	r1, r2
 8007602:	2200      	movs	r2, #0
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f7fb fa92 	bl	8002b30 <_read>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_read_r+0x1e>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	b103      	cbz	r3, 8007616 <_read_r+0x1e>
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	20002728 	.word	0x20002728

0800761c <_malloc_usable_size_r>:
 800761c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007620:	1f18      	subs	r0, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfbc      	itt	lt
 8007626:	580b      	ldrlt	r3, [r1, r0]
 8007628:	18c0      	addlt	r0, r0, r3
 800762a:	4770      	bx	lr

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
