
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007534  08007534  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800753c  0800753c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08007544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027f0  200001a0  080076e4  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002990  080076e4  00022990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001640a  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb4  00000000  00000000  000365da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00039290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  0003a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000192e2  00000000  00000000  0003b358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dccc  00000000  00000000  0005463a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094aa5  00000000  00000000  00062306  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6dab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  000f6e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a0 	.word	0x200001a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006da8 	.word	0x08006da8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	08006da8 	.word	0x08006da8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <str_Capitalized>:
	{NULL, NULL , NULL}
};

char Buff[2048];

void str_Capitalized (char *dest, char *str) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	int pos = 0, len = strlen (str);
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	6838      	ldr	r0, [r7, #0]
 80005c0:	f7ff fe18 	bl	80001f4 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60bb      	str	r3, [r7, #8]
	for (; pos<len; ++ pos) {
 80005c8:	e021      	b.n	800060e <str_Capitalized+0x5e>
		if (str[pos]<='z' && str[pos]>='a') dest[pos]=str[pos]-32;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b7a      	cmp	r3, #122	; 0x7a
 80005d4:	d810      	bhi.n	80005f8 <str_Capitalized+0x48>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b60      	cmp	r3, #96	; 0x60
 80005e0:	d90a      	bls.n	80005f8 <str_Capitalized+0x48>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	3a20      	subs	r2, #32
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e007      	b.n	8000608 <str_Capitalized+0x58>
		else dest[pos] = str[pos];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	683a      	ldr	r2, [r7, #0]
 80005fc:	441a      	add	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	440b      	add	r3, r1
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	701a      	strb	r2, [r3, #0]
	for (; pos<len; ++ pos) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	dbd9      	blt.n	80005ca <str_Capitalized+0x1a>
	} dest[pos] = '\0';
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <AT_CMD_Dispose>:

u8 AT_CMD_Dispose(struct tok *tok) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	struct at_cmd_hanld_t *atcmd, *match = NULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
	char name[32];
	atcmd = at_cmd_hanld;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <AT_CMD_Dispose+0x6c>)
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
	str_Capitalized(name, tok->name);
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb5 	bl	80005b0 <str_Capitalized>
	while(atcmd->atcmd) {
 8000646:	e010      	b.n	800066a <AT_CMD_Dispose+0x42>
		if(strcmp(atcmd->atcmd, name) == 0) {
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <AT_CMD_Dispose+0x3c>
			match = atcmd; break;
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
 8000662:	e006      	b.n	8000672 <AT_CMD_Dispose+0x4a>
		} atcmd ++;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	330c      	adds	r3, #12
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(atcmd->atcmd) {
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ea      	bne.n	8000648 <AT_CMD_Dispose+0x20>
	} if(match) return match->send_hanld(match->atcmd, tok);
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <AT_CMD_Dispose+0x62>
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067e:	6812      	ldr	r2, [r2, #0]
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4610      	mov	r0, r2
 8000684:	4798      	blx	r3
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <AT_CMD_Dispose+0x64>
	else {return 1;}
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <CMD_Send>:

void CMD_Send(char *buff, char *atcmd, struct tok *tok) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b0c6      	sub	sp, #280	; 0x118
 800069c:	af00      	add	r7, sp, #0
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	6018      	str	r0, [r3, #0]
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	6019      	str	r1, [r3, #0]
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	601a      	str	r2, [r3, #0]
	int i = 0; char temp[256];
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sprintf (buff, "%s", atcmd);
 80006b4:	f107 0208 	add.w	r2, r7, #8
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	f005 fadf 	bl	8005c82 <strcpy>
	if (tok->num != 0) {
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d071      	beq.n	80007b4 <CMD_Send+0x11c>
		for (i=0; i<tok->num; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006d6:	e064      	b.n	80007a2 <CMD_Send+0x10a>
			if(i == 0 && tok->sendstr[i][0] == '?') {
 80006d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d120      	bne.n	8000722 <CMD_Send+0x8a>
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	4413      	add	r3, r2
 80006ec:	3321      	adds	r3, #33	; 0x21
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b3f      	cmp	r3, #63	; 0x3f
 80006f2:	d116      	bne.n	8000722 <CMD_Send+0x8a>
				sprintf(temp,"=%s",tok->sendstr[i]);
 80006f4:	1d3a      	adds	r2, r7, #4
 80006f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	3320      	adds	r3, #32
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	4413      	add	r3, r2
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4935      	ldr	r1, [pc, #212]	; (80007e0 <CMD_Send+0x148>)
 800070a:	4618      	mov	r0, r3
 800070c:	f005 fa8a 	bl	8005c24 <siprintf>
				strcat(buff,temp);
 8000710:	f107 0214 	add.w	r2, r7, #20
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4611      	mov	r1, r2
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	f005 faa2 	bl	8005c64 <strcat>
 8000720:	e03a      	b.n	8000798 <CMD_Send+0x100>
			} else if(i == 0 && tok->sendstr[i][0] != '?') {
 8000722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000726:	2b00      	cmp	r3, #0
 8000728:	d120      	bne.n	800076c <CMD_Send+0xd4>
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	4413      	add	r3, r2
 8000736:	3321      	adds	r3, #33	; 0x21
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b3f      	cmp	r3, #63	; 0x3f
 800073c:	d016      	beq.n	800076c <CMD_Send+0xd4>
				sprintf(temp,"=%s",tok->sendstr[i]);
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	3320      	adds	r3, #32
 8000748:	6812      	ldr	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4923      	ldr	r1, [pc, #140]	; (80007e0 <CMD_Send+0x148>)
 8000754:	4618      	mov	r0, r3
 8000756:	f005 fa65 	bl	8005c24 <siprintf>
				strcat(buff,temp);
 800075a:	f107 0214 	add.w	r2, r7, #20
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4611      	mov	r1, r2
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	f005 fa7d 	bl	8005c64 <strcat>
 800076a:	e015      	b.n	8000798 <CMD_Send+0x100>
			} else {
				sprintf(temp,",%s",tok->sendstr[i]);
 800076c:	1d3a      	adds	r2, r7, #4
 800076e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	3320      	adds	r3, #32
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	4413      	add	r3, r2
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4918      	ldr	r1, [pc, #96]	; (80007e4 <CMD_Send+0x14c>)
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fa4e 	bl	8005c24 <siprintf>
				strcat(buff,temp);
 8000788:	f107 0214 	add.w	r2, r7, #20
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4611      	mov	r1, r2
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	f005 fa66 	bl	8005c64 <strcat>
		for (i=0; i<tok->num; i++) {
 8000798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b0:	4293      	cmp	r3, r2
 80007b2:	db91      	blt.n	80006d8 <CMD_Send+0x40>
			}
		}
	} strcat(buff,"\r\n");
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f7ff fd1b 	bl	80001f4 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <CMD_Send+0x150>)
 80007cc:	8811      	ldrh	r1, [r2, #0]
 80007ce:	7892      	ldrb	r2, [r2, #2]
 80007d0:	8019      	strh	r1, [r3, #0]
 80007d2:	709a      	strb	r2, [r3, #2]
}
 80007d4:	bf00      	nop
 80007d6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08006e84 	.word	0x08006e84
 80007e4:	08006e88 	.word	0x08006e88
 80007e8:	08006e8c 	.word	0x08006e8c

080007ec <AT_Send>:

u8 AT_Send(char *atcmd, struct tok *tok) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0c4      	sub	sp, #272	; 0x110
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	6018      	str	r0, [r3, #0]
 80007f6:	463b      	mov	r3, r7
 80007f8:	6019      	str	r1, [r3, #0]
	int i; char buff[256];
	for(i=0; i<Retime; ++ i) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000800:	e027      	b.n	8000852 <AT_Send+0x66>
		CMD_Send(buff, atcmd, tok);
 8000802:	463a      	mov	r2, r7
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	f107 000c 	add.w	r0, r7, #12
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	f7ff ff43 	bl	8000698 <CMD_Send>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)buff, strlen(buff));
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcec 	bl	80001f4 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <AT_Send+0x7c>)
 8000828:	f004 fab8 	bl	8004d9c <HAL_UART_Transmit_IT>
		if(!AT_Return(tok->ret, 1)) {return 0;}
 800082c:	463b      	mov	r3, r7
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8000834:	3301      	adds	r3, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f817 	bl	800086c <AT_Return>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <AT_Send+0x5c>
 8000844:	2300      	movs	r3, #0
 8000846:	e009      	b.n	800085c <AT_Send+0x70>
	for(i=0; i<Retime; ++ i) {
 8000848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800084c:	3301      	adds	r3, #1
 800084e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000856:	2b01      	cmp	r3, #1
 8000858:	ddd3      	ble.n	8000802 <AT_Send+0x16>
	} return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000eb4 	.word	0x20000eb4

0800086c <AT_Return>:

u8 AT_Return(char *str, int flag) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint32_t Time_count = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
	Time_count = Timeout;
 800087a:	230a      	movs	r3, #10
 800087c:	60fb      	str	r3, [r7, #12]
	memset(Buff, 0, sizeof Buff);
 800087e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <AT_Return+0x60>)
 8000886:	f005 f949 	bl	8005b1c <memset>
	while(Time_count --) {
 800088a:	e015      	b.n	80008b8 <AT_Return+0x4c>
		if (flag) HAL_UART_Receive(&huart2, (uint8_t *)Buff, sizeof Buff, 100);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <AT_Return+0x34>
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <AT_Return+0x60>)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <AT_Return+0x64>)
 800089c:	f004 f9d8 	bl	8004c50 <HAL_UART_Receive>
		if(strstr((const char *)Buff,str)!=NULL) {return 0;}
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <AT_Return+0x60>)
 80008a4:	f005 f9f5 	bl	8005c92 <strstr>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <AT_Return+0x46>
 80008ae:	2300      	movs	r3, #0
 80008b0:	e008      	b.n	80008c4 <AT_Return+0x58>
		HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f001 fe50 	bl	8002558 <HAL_Delay>
	while(Time_count --) {
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	60fa      	str	r2, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1e4      	bne.n	800088c <AT_Return+0x20>
	} return 1;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000061c 	.word	0x2000061c
 80008d0:	20000eb4 	.word	0x20000eb4

080008d4 <Buff_clear>:

void Buff_clear(struct tok *tok) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	tok->num = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
	memset(tok->sendstr, 0, sizeof(tok->sendstr));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3321      	adds	r3, #33	; 0x21
 80008e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 f914 	bl	8005b1c <memset>
	memset(tok->ret, 0, sizeof(tok->ret));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80008fa:	3301      	adds	r3, #1
 80008fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 f90a 	bl	8005b1c <memset>
	memset(Buff, 0, sizeof(Buff));
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	2100      	movs	r1, #0
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <Buff_clear+0x48>)
 8000910:	f005 f904 	bl	8005b1c <memset>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000061c 	.word	0x2000061c

08000920 <Set_TFT_Backlight_PWM>:
typedef uint16_t u16;
typedef uint32_t u32;

u8 BgPWMLight = 99;

void Set_TFT_Backlight_PWM(u8 PWMtoSet) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, PWMtoSet);
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <Set_TFT_Backlight_PWM+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000e74 	.word	0x20000e74

08000944 <Cnange_TFT_Backlight>:

void Cnange_TFT_Backlight() {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	BgPWMLight = BgPWMLight<99? BgPWMLight+33:0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b62      	cmp	r3, #98	; 0x62
 800094e:	d804      	bhi.n	800095a <Cnange_TFT_Backlight+0x16>
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <Cnange_TFT_Backlight+0x38>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3321      	adds	r3, #33	; 0x21
 8000956:	b2db      	uxtb	r3, r3
 8000958:	e000      	b.n	800095c <Cnange_TFT_Backlight+0x18>
 800095a:	2300      	movs	r3, #0
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800095e:	7013      	strb	r3, [r2, #0]
	Set_TFT_Backlight_PWM(BgPWMLight);
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <Cnange_TFT_Backlight+0x38>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffdb 	bl	8000920 <Set_TFT_Backlight_PWM>
	printf("[INT0] BGLT: %d\r\n", BgPWMLight);
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <Cnange_TFT_Backlight+0x38>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <Cnange_TFT_Backlight+0x3c>)
 8000972:	f005 f8db 	bl	8005b2c <iprintf>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000f0 	.word	0x200000f0
 8000980:	08006e90 	.word	0x08006e90

08000984 <SPI_WriteByte>:
#define	DISPLAY_RS_CLR  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET)

#define	DISPLAY_RST_SET  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET)
#define	DISPLAY_RST_CLR  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET)

u8 SPI_WriteByte(uint8_t *content, uint16_t size) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Transmit(&hspi1, content, size, 1000);
 8000990:	887a      	ldrh	r2, [r7, #2]
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <SPI_WriteByte+0x24>)
 800099a:	f003 f949 	bl	8003c30 <HAL_SPI_Transmit>
 800099e:	4603      	mov	r3, r0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000e1c 	.word	0x20000e1c

080009ac <TFT_WriteComm>:

void TFT_WriteComm(u8 addr) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	DISPLAY_CS_CLR;
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <TFT_WriteComm+0x3c>)
 80009bc:	f002 fc66 	bl	800328c <HAL_GPIO_WritePin>
	DISPLAY_RS_CLR;
 80009c0:	2200      	movs	r2, #0
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <TFT_WriteComm+0x3c>)
 80009c6:	f002 fc61 	bl	800328c <HAL_GPIO_WritePin>
	SPI_WriteByte(&addr, 1);
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ffd8 	bl	8000984 <SPI_WriteByte>
	DISPLAY_CS_SET;
 80009d4:	2201      	movs	r2, #1
 80009d6:	2120      	movs	r1, #32
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <TFT_WriteComm+0x3c>)
 80009da:	f002 fc57 	bl	800328c <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020400 	.word	0x40020400

080009ec <TFT_WriteData>:

void TFT_WriteData(u8 data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	DISPLAY_CS_CLR;
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <TFT_WriteData+0x3c>)
 80009fc:	f002 fc46 	bl	800328c <HAL_GPIO_WritePin>
	DISPLAY_RS_SET;
 8000a00:	2201      	movs	r2, #1
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <TFT_WriteData+0x3c>)
 8000a06:	f002 fc41 	bl	800328c <HAL_GPIO_WritePin>
	SPI_WriteByte(&data, 1);
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffb8 	bl	8000984 <SPI_WriteByte>
	DISPLAY_CS_SET;
 8000a14:	2201      	movs	r2, #1
 8000a16:	2120      	movs	r1, #32
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <TFT_WriteData+0x3c>)
 8000a1a:	f002 fc37 	bl	800328c <HAL_GPIO_WritePin>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40020400 	.word	0x40020400

08000a2c <TFT_ReStart>:
void TFT_WriteRegi(u8 addr, u16 data) {
	TFT_WriteComm(addr);
	TFT_WriteData_u16(data);
}

void TFT_ReStart(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	DISPLAY_RST_CLR;
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <TFT_ReStart+0x28>)
 8000a36:	f002 fc29 	bl	800328c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a3a:	20c8      	movs	r0, #200	; 0xc8
 8000a3c:	f001 fd8c 	bl	8002558 <HAL_Delay>
	DISPLAY_RST_SET;
 8000a40:	2201      	movs	r2, #1
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <TFT_ReStart+0x28>)
 8000a46:	f002 fc21 	bl	800328c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f001 fd84 	bl	8002558 <HAL_Delay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40020400 	.word	0x40020400

08000a58 <TFT_INIT>:

void TFT_INIT(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	TFT_ReStart();
 8000a5c:	f7ff ffe6 	bl	8000a2c <TFT_ReStart>

	// HX8352B
	TFT_WriteComm(0x00E2); TFT_WriteData(0x0015);
 8000a60:	20e2      	movs	r0, #226	; 0xe2
 8000a62:	f7ff ffa3 	bl	80009ac <TFT_WriteComm>
 8000a66:	2015      	movs	r0, #21
 8000a68:	f7ff ffc0 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00E5); TFT_WriteData(0x0018);
 8000a6c:	20e5      	movs	r0, #229	; 0xe5
 8000a6e:	f7ff ff9d 	bl	80009ac <TFT_WriteComm>
 8000a72:	2018      	movs	r0, #24
 8000a74:	f7ff ffba 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00E7); TFT_WriteData(0x0018);
 8000a78:	20e7      	movs	r0, #231	; 0xe7
 8000a7a:	f7ff ff97 	bl	80009ac <TFT_WriteComm>
 8000a7e:	2018      	movs	r0, #24
 8000a80:	f7ff ffb4 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00E8); TFT_WriteData(0x0040);
 8000a84:	20e8      	movs	r0, #232	; 0xe8
 8000a86:	f7ff ff91 	bl	80009ac <TFT_WriteComm>
 8000a8a:	2040      	movs	r0, #64	; 0x40
 8000a8c:	f7ff ffae 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00EC); TFT_WriteData(0x0009);
 8000a90:	20ec      	movs	r0, #236	; 0xec
 8000a92:	f7ff ff8b 	bl	80009ac <TFT_WriteComm>
 8000a96:	2009      	movs	r0, #9
 8000a98:	f7ff ffa8 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00ED); TFT_WriteData(0x0006);
 8000a9c:	20ed      	movs	r0, #237	; 0xed
 8000a9e:	f7ff ff85 	bl	80009ac <TFT_WriteComm>
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f7ff ffa2 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00EE); TFT_WriteData(0x0020); // 0x0020
 8000aa8:	20ee      	movs	r0, #238	; 0xee
 8000aaa:	f7ff ff7f 	bl	80009ac <TFT_WriteComm>
 8000aae:	2020      	movs	r0, #32
 8000ab0:	f7ff ff9c 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x00EF); TFT_WriteData(0x0050);
 8000ab4:	20ef      	movs	r0, #239	; 0xef
 8000ab6:	f7ff ff79 	bl	80009ac <TFT_WriteComm>
 8000aba:	2050      	movs	r0, #80	; 0x50
 8000abc:	f7ff ff96 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0029); TFT_WriteData(0x0001);
 8000ac0:	2029      	movs	r0, #41	; 0x29
 8000ac2:	f7ff ff73 	bl	80009ac <TFT_WriteComm>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff ff90 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x002B); TFT_WriteData(0x0003);
 8000acc:	202b      	movs	r0, #43	; 0x2b
 8000ace:	f7ff ff6d 	bl	80009ac <TFT_WriteComm>
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f7ff ff8a 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x002E); TFT_WriteData(0x0085);
 8000ad8:	202e      	movs	r0, #46	; 0x2e
 8000ada:	f7ff ff67 	bl	80009ac <TFT_WriteComm>
 8000ade:	2085      	movs	r0, #133	; 0x85
 8000ae0:	f7ff ff84 	bl	80009ec <TFT_WriteData>

	// Power on Setting
	TFT_WriteComm(0x0017); TFT_WriteData(0x0005); // 18BIT:0006,16BIT:0005,
 8000ae4:	2017      	movs	r0, #23
 8000ae6:	f7ff ff61 	bl	80009ac <TFT_WriteComm>
 8000aea:	2005      	movs	r0, #5
 8000aec:	f7ff ff7e 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0023); TFT_WriteData(0x0076);
 8000af0:	2023      	movs	r0, #35	; 0x23
 8000af2:	f7ff ff5b 	bl	80009ac <TFT_WriteComm>
 8000af6:	2076      	movs	r0, #118	; 0x76
 8000af8:	f7ff ff78 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0024); TFT_WriteData(0x0050); // 0x57,0x4e
 8000afc:	2024      	movs	r0, #36	; 0x24
 8000afe:	f7ff ff55 	bl	80009ac <TFT_WriteComm>
 8000b02:	2050      	movs	r0, #80	; 0x50
 8000b04:	f7ff ff72 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0025); TFT_WriteData(0x0071); // 0x67
 8000b08:	2025      	movs	r0, #37	; 0x25
 8000b0a:	f7ff ff4f 	bl	80009ac <TFT_WriteComm>
 8000b0e:	2071      	movs	r0, #113	; 0x71
 8000b10:	f7ff ff6c 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x002f); TFT_WriteData(0x0001); // 1: 1_LINE INVERSION,0:FRAME INVERSION
 8000b14:	202f      	movs	r0, #47	; 0x2f
 8000b16:	f7ff ff49 	bl	80009ac <TFT_WriteComm>
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff ff66 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x001B); TFT_WriteData(0x001E);
 8000b20:	201b      	movs	r0, #27
 8000b22:	f7ff ff43 	bl	80009ac <TFT_WriteComm>
 8000b26:	201e      	movs	r0, #30
 8000b28:	f7ff ff60 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0001); TFT_WriteData(0x0000);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ff3d 	bl	80009ac <TFT_WriteComm>
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff5a 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x001C); TFT_WriteData(0x0004);
 8000b38:	201c      	movs	r0, #28
 8000b3a:	f7ff ff37 	bl	80009ac <TFT_WriteComm>
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f7ff ff54 	bl	80009ec <TFT_WriteData>

	// Power on sequence
	TFT_WriteComm(0x0018); TFT_WriteData(0x00CC);
 8000b44:	2018      	movs	r0, #24
 8000b46:	f7ff ff31 	bl	80009ac <TFT_WriteComm>
 8000b4a:	20cc      	movs	r0, #204	; 0xcc
 8000b4c:	f7ff ff4e 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0019); TFT_WriteData(0x0001);
 8000b50:	2019      	movs	r0, #25
 8000b52:	f7ff ff2b 	bl	80009ac <TFT_WriteComm>
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff ff48 	bl	80009ec <TFT_WriteData>
	HAL_Delay(5);
 8000b5c:	2005      	movs	r0, #5
 8000b5e:	f001 fcfb 	bl	8002558 <HAL_Delay>
	TFT_WriteComm(0x001F); TFT_WriteData(0x008C);
 8000b62:	201f      	movs	r0, #31
 8000b64:	f7ff ff22 	bl	80009ac <TFT_WriteComm>
 8000b68:	208c      	movs	r0, #140	; 0x8c
 8000b6a:	f7ff ff3f 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x001F); TFT_WriteData(0x0084);
 8000b6e:	201f      	movs	r0, #31
 8000b70:	f7ff ff1c 	bl	80009ac <TFT_WriteComm>
 8000b74:	2084      	movs	r0, #132	; 0x84
 8000b76:	f7ff ff39 	bl	80009ec <TFT_WriteData>
	HAL_Delay(10);
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f001 fcec 	bl	8002558 <HAL_Delay>
	TFT_WriteComm(0x001F); TFT_WriteData(0x0094);
 8000b80:	201f      	movs	r0, #31
 8000b82:	f7ff ff13 	bl	80009ac <TFT_WriteComm>
 8000b86:	2094      	movs	r0, #148	; 0x94
 8000b88:	f7ff ff30 	bl	80009ec <TFT_WriteData>
	HAL_Delay(10);
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f001 fce3 	bl	8002558 <HAL_Delay>
	TFT_WriteComm(0x001F); TFT_WriteData(0x00D4);
 8000b92:	201f      	movs	r0, #31
 8000b94:	f7ff ff0a 	bl	80009ac <TFT_WriteComm>
 8000b98:	20d4      	movs	r0, #212	; 0xd4
 8000b9a:	f7ff ff27 	bl	80009ec <TFT_WriteData>
	HAL_Delay(5);
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f001 fcda 	bl	8002558 <HAL_Delay>

	// Gamma Setting
	TFT_WriteComm(0x0040); TFT_WriteData(0x0008);
 8000ba4:	2040      	movs	r0, #64	; 0x40
 8000ba6:	f7ff ff01 	bl	80009ac <TFT_WriteComm>
 8000baa:	2008      	movs	r0, #8
 8000bac:	f7ff ff1e 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0041); TFT_WriteData(0x0031);
 8000bb0:	2041      	movs	r0, #65	; 0x41
 8000bb2:	f7ff fefb 	bl	80009ac <TFT_WriteComm>
 8000bb6:	2031      	movs	r0, #49	; 0x31
 8000bb8:	f7ff ff18 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0042); TFT_WriteData(0x002F);
 8000bbc:	2042      	movs	r0, #66	; 0x42
 8000bbe:	f7ff fef5 	bl	80009ac <TFT_WriteComm>
 8000bc2:	202f      	movs	r0, #47	; 0x2f
 8000bc4:	f7ff ff12 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0043); TFT_WriteData(0x003E);
 8000bc8:	2043      	movs	r0, #67	; 0x43
 8000bca:	f7ff feef 	bl	80009ac <TFT_WriteComm>
 8000bce:	203e      	movs	r0, #62	; 0x3e
 8000bd0:	f7ff ff0c 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0044); TFT_WriteData(0x003D);
 8000bd4:	2044      	movs	r0, #68	; 0x44
 8000bd6:	f7ff fee9 	bl	80009ac <TFT_WriteComm>
 8000bda:	203d      	movs	r0, #61	; 0x3d
 8000bdc:	f7ff ff06 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0045); TFT_WriteData(0x003F);
 8000be0:	2045      	movs	r0, #69	; 0x45
 8000be2:	f7ff fee3 	bl	80009ac <TFT_WriteComm>
 8000be6:	203f      	movs	r0, #63	; 0x3f
 8000be8:	f7ff ff00 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0046); TFT_WriteData(0x002F);
 8000bec:	2046      	movs	r0, #70	; 0x46
 8000bee:	f7ff fedd 	bl	80009ac <TFT_WriteComm>
 8000bf2:	202f      	movs	r0, #47	; 0x2f
 8000bf4:	f7ff fefa 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0047); TFT_WriteData(0x0079);
 8000bf8:	2047      	movs	r0, #71	; 0x47
 8000bfa:	f7ff fed7 	bl	80009ac <TFT_WriteComm>
 8000bfe:	2079      	movs	r0, #121	; 0x79
 8000c00:	f7ff fef4 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0048); TFT_WriteData(0x0008);
 8000c04:	2048      	movs	r0, #72	; 0x48
 8000c06:	f7ff fed1 	bl	80009ac <TFT_WriteComm>
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f7ff feee 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0049); TFT_WriteData(0x0006);
 8000c10:	2049      	movs	r0, #73	; 0x49
 8000c12:	f7ff fecb 	bl	80009ac <TFT_WriteComm>
 8000c16:	2006      	movs	r0, #6
 8000c18:	f7ff fee8 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x004A); TFT_WriteData(0x0008);
 8000c1c:	204a      	movs	r0, #74	; 0x4a
 8000c1e:	f7ff fec5 	bl	80009ac <TFT_WriteComm>
 8000c22:	2008      	movs	r0, #8
 8000c24:	f7ff fee2 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x004B); TFT_WriteData(0x000E);
 8000c28:	204b      	movs	r0, #75	; 0x4b
 8000c2a:	f7ff febf 	bl	80009ac <TFT_WriteComm>
 8000c2e:	200e      	movs	r0, #14
 8000c30:	f7ff fedc 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x004C); TFT_WriteData(0x0017);
 8000c34:	204c      	movs	r0, #76	; 0x4c
 8000c36:	f7ff feb9 	bl	80009ac <TFT_WriteComm>
 8000c3a:	2017      	movs	r0, #23
 8000c3c:	f7ff fed6 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0050); TFT_WriteData(0x0000);
 8000c40:	2050      	movs	r0, #80	; 0x50
 8000c42:	f7ff feb3 	bl	80009ac <TFT_WriteComm>
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fed0 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0051); TFT_WriteData(0x0002);
 8000c4c:	2051      	movs	r0, #81	; 0x51
 8000c4e:	f7ff fead 	bl	80009ac <TFT_WriteComm>
 8000c52:	2002      	movs	r0, #2
 8000c54:	f7ff feca 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0052); TFT_WriteData(0x0001);
 8000c58:	2052      	movs	r0, #82	; 0x52
 8000c5a:	f7ff fea7 	bl	80009ac <TFT_WriteComm>
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fec4 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0053); TFT_WriteData(0x0010);
 8000c64:	2053      	movs	r0, #83	; 0x53
 8000c66:	f7ff fea1 	bl	80009ac <TFT_WriteComm>
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f7ff febe 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0054); TFT_WriteData(0x000E);
 8000c70:	2054      	movs	r0, #84	; 0x54
 8000c72:	f7ff fe9b 	bl	80009ac <TFT_WriteComm>
 8000c76:	200e      	movs	r0, #14
 8000c78:	f7ff feb8 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0055); TFT_WriteData(0x0037);
 8000c7c:	2055      	movs	r0, #85	; 0x55
 8000c7e:	f7ff fe95 	bl	80009ac <TFT_WriteComm>
 8000c82:	2037      	movs	r0, #55	; 0x37
 8000c84:	f7ff feb2 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0056); TFT_WriteData(0x0006);
 8000c88:	2056      	movs	r0, #86	; 0x56
 8000c8a:	f7ff fe8f 	bl	80009ac <TFT_WriteComm>
 8000c8e:	2006      	movs	r0, #6
 8000c90:	f7ff feac 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0057); TFT_WriteData(0x0050);
 8000c94:	2057      	movs	r0, #87	; 0x57
 8000c96:	f7ff fe89 	bl	80009ac <TFT_WriteComm>
 8000c9a:	2050      	movs	r0, #80	; 0x50
 8000c9c:	f7ff fea6 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0058); TFT_WriteData(0x0008);
 8000ca0:	2058      	movs	r0, #88	; 0x58
 8000ca2:	f7ff fe83 	bl	80009ac <TFT_WriteComm>
 8000ca6:	2008      	movs	r0, #8
 8000ca8:	f7ff fea0 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0059); TFT_WriteData(0x0011);
 8000cac:	2059      	movs	r0, #89	; 0x59
 8000cae:	f7ff fe7d 	bl	80009ac <TFT_WriteComm>
 8000cb2:	2011      	movs	r0, #17
 8000cb4:	f7ff fe9a 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x005A); TFT_WriteData(0x0017);
 8000cb8:	205a      	movs	r0, #90	; 0x5a
 8000cba:	f7ff fe77 	bl	80009ac <TFT_WriteComm>
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f7ff fe94 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x005B); TFT_WriteData(0x0019);
 8000cc4:	205b      	movs	r0, #91	; 0x5b
 8000cc6:	f7ff fe71 	bl	80009ac <TFT_WriteComm>
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f7ff fe8e 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x005C); TFT_WriteData(0x0017);
 8000cd0:	205c      	movs	r0, #92	; 0x5c
 8000cd2:	f7ff fe6b 	bl	80009ac <TFT_WriteComm>
 8000cd6:	2017      	movs	r0, #23
 8000cd8:	f7ff fe88 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x005D); TFT_WriteData(0x00FF);
 8000cdc:	205d      	movs	r0, #93	; 0x5d
 8000cde:	f7ff fe65 	bl	80009ac <TFT_WriteComm>
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	f7ff fe82 	bl	80009ec <TFT_WriteData>

	 //Window set
	TFT_WriteComm(0x0002); TFT_WriteData(0x0000); // Column Address Start Register, High 8 bit
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fe5f 	bl	80009ac <TFT_WriteComm>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fe7c 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0003); TFT_WriteData(0x0000); // Column Address Start Register, Low 8bit
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f7ff fe59 	bl	80009ac <TFT_WriteComm>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe76 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0004); TFT_WriteData(0x0000); // Column Address end Register, High 8 bit
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff fe53 	bl	80009ac <TFT_WriteComm>
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fe70 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0005); TFT_WriteData(0x00EF); // Column Address end Start Register, Low 8 bit
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f7ff fe4d 	bl	80009ac <TFT_WriteComm>
 8000d12:	20ef      	movs	r0, #239	; 0xef
 8000d14:	f7ff fe6a 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0006); TFT_WriteData(0x0000); // Row Address Start Register, High 8 bit
 8000d18:	2006      	movs	r0, #6
 8000d1a:	f7ff fe47 	bl	80009ac <TFT_WriteComm>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fe64 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0007); TFT_WriteData(0x0000); // Row Address Start Register, Low 8bit
 8000d24:	2007      	movs	r0, #7
 8000d26:	f7ff fe41 	bl	80009ac <TFT_WriteComm>
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fe5e 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0008); TFT_WriteData(0x0001); // Row Address end Register, High 8 bit
 8000d30:	2008      	movs	r0, #8
 8000d32:	f7ff fe3b 	bl	80009ac <TFT_WriteComm>
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fe58 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0009); TFT_WriteData(0x008F); // Row Address end Register, Low 8bit
 8000d3c:	2009      	movs	r0, #9
 8000d3e:	f7ff fe35 	bl	80009ac <TFT_WriteComm>
 8000d42:	208f      	movs	r0, #143	; 0x8f
 8000d44:	f7ff fe52 	bl	80009ec <TFT_WriteData>

	// Set start address
	TFT_WriteComm(0x80); TFT_WriteData(0x00);
 8000d48:	2080      	movs	r0, #128	; 0x80
 8000d4a:	f7ff fe2f 	bl	80009ac <TFT_WriteComm>
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fe4c 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x81); TFT_WriteData(0x00); // CAC[8:0]
 8000d54:	2081      	movs	r0, #129	; 0x81
 8000d56:	f7ff fe29 	bl	80009ac <TFT_WriteComm>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fe46 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x82); TFT_WriteData(0x00);
 8000d60:	2082      	movs	r0, #130	; 0x82
 8000d62:	f7ff fe23 	bl	80009ac <TFT_WriteComm>
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fe40 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x83); TFT_WriteData(0x00); // RAC[8:0]
 8000d6c:	2083      	movs	r0, #131	; 0x83
 8000d6e:	f7ff fe1d 	bl	80009ac <TFT_WriteComm>
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fe3a 	bl	80009ec <TFT_WriteData>

	// Display ON Setting
	TFT_WriteComm(0x0016); TFT_WriteData(0x00C8); // 0x0B,0x09,0xC8
 8000d78:	2016      	movs	r0, #22
 8000d7a:	f7ff fe17 	bl	80009ac <TFT_WriteComm>
 8000d7e:	20c8      	movs	r0, #200	; 0xc8
 8000d80:	f7ff fe34 	bl	80009ec <TFT_WriteData>
	TFT_WriteComm(0x0028); TFT_WriteData(0x0020);
 8000d84:	2028      	movs	r0, #40	; 0x28
 8000d86:	f7ff fe11 	bl	80009ac <TFT_WriteComm>
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	f7ff fe2e 	bl	80009ec <TFT_WriteData>
	HAL_Delay(40);
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f001 fbe1 	bl	8002558 <HAL_Delay>
	TFT_WriteComm(0x0028); TFT_WriteData(0x0038);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f7ff fe08 	bl	80009ac <TFT_WriteComm>
 8000d9c:	2038      	movs	r0, #56	; 0x38
 8000d9e:	f7ff fe25 	bl	80009ec <TFT_WriteData>
	HAL_Delay(40); // Waiting 2 frames al least
 8000da2:	2028      	movs	r0, #40	; 0x28
 8000da4:	f001 fbd8 	bl	8002558 <HAL_Delay>
	TFT_WriteComm(0x0028); TFT_WriteData(0x003C);
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f7ff fdff 	bl	80009ac <TFT_WriteComm>
 8000dae:	203c      	movs	r0, #60	; 0x3c
 8000db0:	f7ff fe1c 	bl	80009ec <TFT_WriteData>

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <ADC_Calibration>:

u32 adcVal;
u8  batVal;
u16 adcBase = 1<<6;

void ADC_Calibration() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	// HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_Delay(100);
 8000dbc:	2064      	movs	r0, #100	; 0x64
 8000dbe:	f001 fbcb 	bl	8002558 <HAL_Delay>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <ADC_Read_Data>:

u32 ADC_Read_Data() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <ADC_Read_Data+0x20>)
 8000dce:	f001 fc29 	bl	8002624 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 50);
 8000dd2:	2132      	movs	r1, #50	; 0x32
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <ADC_Read_Data+0x20>)
 8000dd6:	f001 fccb 	bl	8002770 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <ADC_Read_Data+0x20>)
 8000ddc:	f001 fd4c 	bl	8002878 <HAL_ADC_GetValue>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200005d4 	.word	0x200005d4

08000dec <Read_Battery_Life>:

void Read_Battery_Life() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	adcVal = ADC_Read_Data(&hadc1);
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <Read_Battery_Life+0x20>)
 8000df2:	f7ff ffe9 	bl	8000dc8 <ADC_Read_Data>
 8000df6:	4602      	mov	r2, r0
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <Read_Battery_Life+0x24>)
 8000dfa:	601a      	str	r2, [r3, #0]
	// double RealVoltage = adcVal * (double)3.3 / (double) adcBase;
	printf("[ADC Voltage] %d\r\n", (int)adcVal);
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <Read_Battery_Life+0x24>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <Read_Battery_Life+0x28>)
 8000e04:	f004 fe92 	bl	8005b2c <iprintf>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200005d4 	.word	0x200005d4
 8000e10:	20002418 	.word	0x20002418
 8000e14:	08006ea4 	.word	0x08006ea4

08000e18 <BLE_reboot>:
	if(ret) printf("[BLEINIT][ERR] set to default fail!\r\n");
	else printf("[BLEINIT][SUC] set to default.\r\n");
	return ret;
}

u8 BLE_reboot(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+RESET");
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <BLE_reboot+0x58>)
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <BLE_reboot+0x5c>)
 8000e22:	cb03      	ldmia	r3!, {r0, r1}
 8000e24:	6010      	str	r0, [r2, #0]
 8000e26:	6051      	str	r1, [r2, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	7213      	strb	r3, [r2, #8]
	tok.num = 0;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <BLE_reboot+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.ret, "OK");
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <BLE_reboot+0x60>)
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <BLE_reboot+0x64>)
 8000e38:	8811      	ldrh	r1, [r2, #0]
 8000e3a:	7892      	ldrb	r2, [r2, #2]
 8000e3c:	8019      	strh	r1, [r3, #0]
 8000e3e:	709a      	strb	r2, [r3, #2]
	u8 ret = AT_CMD_Dispose(&tok);
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <BLE_reboot+0x58>)
 8000e42:	f7ff fbf1 	bl	8000628 <AT_CMD_Dispose>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <BLE_reboot+0x58>)
 8000e4c:	f7ff fd42 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] restart fail!\r\n");
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <BLE_reboot+0x46>
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <BLE_reboot+0x68>)
 8000e58:	f004 fedc 	bl	8005c14 <puts>
 8000e5c:	e002      	b.n	8000e64 <BLE_reboot+0x4c>
	else printf("[BLEINIT][SUC] restarted.\r\n");
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <BLE_reboot+0x6c>)
 8000e60:	f004 fed8 	bl	8005c14 <puts>
	return ret;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000ef4 	.word	0x20000ef4
 8000e74:	08006f10 	.word	0x08006f10
 8000e78:	20002315 	.word	0x20002315
 8000e7c:	08006ec4 	.word	0x08006ec4
 8000e80:	08006f1c 	.word	0x08006f1c
 8000e84:	08006f3c 	.word	0x08006f3c

08000e88 <Qst_UART_Baud>:

u8 Qst_UART_Baud(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BAUD");
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <Qst_UART_Baud+0x5c>)
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <Qst_UART_Baud+0x60>)
 8000e92:	cb03      	ldmia	r3!, {r0, r1}
 8000e94:	6010      	str	r0, [r2, #0]
 8000e96:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <Qst_UART_Baud+0x5c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <Qst_UART_Baud+0x64>)
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <Qst_UART_Baud+0x68>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BAUD=%s,NONE", BAUD);
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <Qst_UART_Baud+0x6c>)
 8000eaa:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <Qst_UART_Baud+0x70>)
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <Qst_UART_Baud+0x74>)
 8000eae:	f004 feb9 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000eb2:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <Qst_UART_Baud+0x5c>)
 8000eb4:	f7ff fbb8 	bl	8000628 <AT_CMD_Dispose>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <Qst_UART_Baud+0x5c>)
 8000ebe:	f7ff fd09 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BAUD not correct\r\n");
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <Qst_UART_Baud+0x48>
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <Qst_UART_Baud+0x78>)
 8000eca:	f004 fea3 	bl	8005c14 <puts>
 8000ece:	e003      	b.n	8000ed8 <Qst_UART_Baud+0x50>
	else printf("[BLEINIT][SUC]Q: BAUD now is %s\r\n", BAUD);
 8000ed0:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <Qst_UART_Baud+0x6c>)
 8000ed2:	480c      	ldr	r0, [pc, #48]	; (8000f04 <Qst_UART_Baud+0x7c>)
 8000ed4:	f004 fe2a 	bl	8005b2c <iprintf>
	return ret;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000ef4 	.word	0x20000ef4
 8000ee8:	08006f58 	.word	0x08006f58
 8000eec:	20000f15 	.word	0x20000f15
 8000ef0:	08006f60 	.word	0x08006f60
 8000ef4:	200000f4 	.word	0x200000f4
 8000ef8:	08006f64 	.word	0x08006f64
 8000efc:	20002315 	.word	0x20002315
 8000f00:	08006f74 	.word	0x08006f74
 8000f04:	08006f98 	.word	0x08006f98

08000f08 <Set_UART_Baud>:

u8 Set_UART_Baud(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	if (!Qst_UART_Baud()) return 0;
 8000f0e:	f7ff ffbb 	bl	8000e88 <Qst_UART_Baud>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <Set_UART_Baud+0x14>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e025      	b.n	8000f68 <Set_UART_Baud+0x60>
	strcpy(tok.name, "AT+BAUD");
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <Set_UART_Baud+0x68>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <Set_UART_Baud+0x6c>)
 8000f20:	cb03      	ldmia	r3!, {r0, r1}
 8000f22:	6010      	str	r0, [r2, #0]
 8000f24:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <Set_UART_Baud+0x68>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], BAUD);
 8000f2e:	4912      	ldr	r1, [pc, #72]	; (8000f78 <Set_UART_Baud+0x70>)
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <Set_UART_Baud+0x74>)
 8000f32:	f004 fea6 	bl	8005c82 <strcpy>
	sprintf(tok.ret, "OK+BAUD=%s", BAUD);
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <Set_UART_Baud+0x70>)
 8000f38:	4911      	ldr	r1, [pc, #68]	; (8000f80 <Set_UART_Baud+0x78>)
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <Set_UART_Baud+0x7c>)
 8000f3c:	f004 fe72 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <Set_UART_Baud+0x68>)
 8000f42:	f7ff fb71 	bl	8000628 <AT_CMD_Dispose>
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <Set_UART_Baud+0x68>)
 8000f4c:	f7ff fcc2 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BAUD set fail!\r\n");
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <Set_UART_Baud+0x56>
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <Set_UART_Baud+0x80>)
 8000f58:	f004 fe5c 	bl	8005c14 <puts>
 8000f5c:	e003      	b.n	8000f66 <Set_UART_Baud+0x5e>
	else printf("[BLEINIT][SUC] BAUD set as %s\r\n", BAUD);
 8000f5e:	4906      	ldr	r1, [pc, #24]	; (8000f78 <Set_UART_Baud+0x70>)
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <Set_UART_Baud+0x84>)
 8000f62:	f004 fde3 	bl	8005b2c <iprintf>
	return ret;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000ef4 	.word	0x20000ef4
 8000f74:	08006f58 	.word	0x08006f58
 8000f78:	200000f4 	.word	0x200000f4
 8000f7c:	20000f15 	.word	0x20000f15
 8000f80:	08006fbc 	.word	0x08006fbc
 8000f84:	20002315 	.word	0x20002315
 8000f88:	08006fc8 	.word	0x08006fc8
 8000f8c:	08006fe8 	.word	0x08006fe8

08000f90 <Qst_Role>:

u8 Qst_Role(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+ROLE");
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <Qst_Role+0x5c>)
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <Qst_Role+0x60>)
 8000f9a:	cb03      	ldmia	r3!, {r0, r1}
 8000f9c:	6010      	str	r0, [r2, #0]
 8000f9e:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <Qst_Role+0x5c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <Qst_Role+0x64>)
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <Qst_Role+0x68>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <Qst_Role+0x6c>)
 8000fb2:	4913      	ldr	r1, [pc, #76]	; (8001000 <Qst_Role+0x70>)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <Qst_Role+0x74>)
 8000fb6:	f004 fe35 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <Qst_Role+0x5c>)
 8000fbc:	f7ff fb34 	bl	8000628 <AT_CMD_Dispose>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <Qst_Role+0x5c>)
 8000fc6:	f7ff fc85 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: ROLE not correct\r\n");
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <Qst_Role+0x48>
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <Qst_Role+0x78>)
 8000fd2:	f004 fe1f 	bl	8005c14 <puts>
 8000fd6:	e003      	b.n	8000fe0 <Qst_Role+0x50>
	else printf("[BLEINIT][SUC]Q: ROLE now is %s\r\n", ROLE[1]);
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <Qst_Role+0x6c>)
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <Qst_Role+0x7c>)
 8000fdc:	f004 fda6 	bl	8005b2c <iprintf>
	return ret;
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000ef4 	.word	0x20000ef4
 8000ff0:	08007008 	.word	0x08007008
 8000ff4:	20000f15 	.word	0x20000f15
 8000ff8:	08006f60 	.word	0x08006f60
 8000ffc:	20000103 	.word	0x20000103
 8001000:	08007010 	.word	0x08007010
 8001004:	20002315 	.word	0x20002315
 8001008:	0800701c 	.word	0x0800701c
 800100c:	08007040 	.word	0x08007040

08001010 <Set_Role>:

u8 Set_Role(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	if (!Qst_Role()) return 0;
 8001016:	f7ff ffbb 	bl	8000f90 <Qst_Role>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <Set_Role+0x14>
 8001020:	2300      	movs	r3, #0
 8001022:	e025      	b.n	8001070 <Set_Role+0x60>
	strcpy(tok.name, "AT+ROLE");
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <Set_Role+0x68>)
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <Set_Role+0x6c>)
 8001028:	cb03      	ldmia	r3!, {r0, r1}
 800102a:	6010      	str	r0, [r2, #0]
 800102c:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <Set_Role+0x68>)
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], ROLE[0]);
 8001036:	4912      	ldr	r1, [pc, #72]	; (8001080 <Set_Role+0x70>)
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <Set_Role+0x74>)
 800103a:	f004 fe22 	bl	8005c82 <strcpy>
	sprintf(tok.ret, "OK+ROLE=%s", ROLE[1]);
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <Set_Role+0x78>)
 8001040:	4912      	ldr	r1, [pc, #72]	; (800108c <Set_Role+0x7c>)
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <Set_Role+0x80>)
 8001044:	f004 fdee 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <Set_Role+0x68>)
 800104a:	f7ff faed 	bl	8000628 <AT_CMD_Dispose>
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <Set_Role+0x68>)
 8001054:	f7ff fc3e 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] ROLE set fail!\r\n");
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <Set_Role+0x56>
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <Set_Role+0x84>)
 8001060:	f004 fdd8 	bl	8005c14 <puts>
 8001064:	e003      	b.n	800106e <Set_Role+0x5e>
	else printf("[BLEINIT][SUC] ROLE set as %s\r\n", ROLE[1]);
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <Set_Role+0x78>)
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <Set_Role+0x88>)
 800106a:	f004 fd5f 	bl	8005b2c <iprintf>
	return ret;
 800106e:	79fb      	ldrb	r3, [r7, #7]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000ef4 	.word	0x20000ef4
 800107c:	08007008 	.word	0x08007008
 8001080:	200000fc 	.word	0x200000fc
 8001084:	20000f15 	.word	0x20000f15
 8001088:	20000103 	.word	0x20000103
 800108c:	08007010 	.word	0x08007010
 8001090:	20002315 	.word	0x20002315
 8001094:	08007064 	.word	0x08007064
 8001098:	08007084 	.word	0x08007084

0800109c <Qst_SPP_Name>:

u8 Qst_SPP_Name(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+NAME");
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <Qst_SPP_Name+0x5c>)
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <Qst_SPP_Name+0x60>)
 80010a6:	cb03      	ldmia	r3!, {r0, r1}
 80010a8:	6010      	str	r0, [r2, #0]
 80010aa:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <Qst_SPP_Name+0x5c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <Qst_SPP_Name+0x64>)
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <Qst_SPP_Name+0x68>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+NAME=%s", NAME[1]);
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <Qst_SPP_Name+0x6c>)
 80010be:	4913      	ldr	r1, [pc, #76]	; (800110c <Qst_SPP_Name+0x70>)
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <Qst_SPP_Name+0x74>)
 80010c2:	f004 fdaf 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <Qst_SPP_Name+0x5c>)
 80010c8:	f7ff faae 	bl	8000628 <AT_CMD_Dispose>
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <Qst_SPP_Name+0x5c>)
 80010d2:	f7ff fbff 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: SPP name not correct\r\n");
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <Qst_SPP_Name+0x48>
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <Qst_SPP_Name+0x78>)
 80010de:	f004 fd99 	bl	8005c14 <puts>
 80010e2:	e003      	b.n	80010ec <Qst_SPP_Name+0x50>
	else printf("[BLEINIT][SUC]Q: SPP name now is %s\r\n", NAME[1]);
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <Qst_SPP_Name+0x6c>)
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <Qst_SPP_Name+0x7c>)
 80010e8:	f004 fd20 	bl	8005b2c <iprintf>
	return ret;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000ef4 	.word	0x20000ef4
 80010fc:	080070a4 	.word	0x080070a4
 8001100:	20000f15 	.word	0x20000f15
 8001104:	08006f60 	.word	0x08006f60
 8001108:	20000116 	.word	0x20000116
 800110c:	080070ac 	.word	0x080070ac
 8001110:	20002315 	.word	0x20002315
 8001114:	080070b8 	.word	0x080070b8
 8001118:	080070e0 	.word	0x080070e0

0800111c <Set_SPP_Name>:

u8 Set_SPP_Name(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	if (!Qst_SPP_Name()) return 0;
 8001122:	f7ff ffbb 	bl	800109c <Qst_SPP_Name>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <Set_SPP_Name+0x14>
 800112c:	2300      	movs	r3, #0
 800112e:	e027      	b.n	8001180 <Set_SPP_Name+0x64>
	strcpy(tok.name, "AT+NAME");
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <Set_SPP_Name+0x6c>)
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <Set_SPP_Name+0x70>)
 8001134:	cb03      	ldmia	r3!, {r0, r1}
 8001136:	6010      	str	r0, [r2, #0]
 8001138:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <Set_SPP_Name+0x6c>)
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[1]);
 8001142:	4913      	ldr	r1, [pc, #76]	; (8001190 <Set_SPP_Name+0x74>)
 8001144:	4813      	ldr	r0, [pc, #76]	; (8001194 <Set_SPP_Name+0x78>)
 8001146:	f004 fd9c 	bl	8005c82 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <Set_SPP_Name+0x7c>)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <Set_SPP_Name+0x80>)
 800114e:	cb03      	ldmia	r3!, {r0, r1}
 8001150:	6010      	str	r0, [r2, #0]
 8001152:	6051      	str	r1, [r2, #4]
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <Set_SPP_Name+0x6c>)
 800115a:	f7ff fa65 	bl	8000628 <AT_CMD_Dispose>
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <Set_SPP_Name+0x6c>)
 8001164:	f7ff fbb6 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] SPP name set fail!\r\n");
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <Set_SPP_Name+0x5a>
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <Set_SPP_Name+0x84>)
 8001170:	f004 fd50 	bl	8005c14 <puts>
 8001174:	e003      	b.n	800117e <Set_SPP_Name+0x62>
	else printf("[BLEINIT][SUC] SPP name set as %s\r\n", NAME[1]);
 8001176:	4906      	ldr	r1, [pc, #24]	; (8001190 <Set_SPP_Name+0x74>)
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <Set_SPP_Name+0x88>)
 800117a:	f004 fcd7 	bl	8005b2c <iprintf>
	return ret;
 800117e:	79fb      	ldrb	r3, [r7, #7]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000ef4 	.word	0x20000ef4
 800118c:	080070a4 	.word	0x080070a4
 8001190:	20000116 	.word	0x20000116
 8001194:	20000f15 	.word	0x20000f15
 8001198:	20002315 	.word	0x20002315
 800119c:	08007108 	.word	0x08007108
 80011a0:	08007114 	.word	0x08007114
 80011a4:	08007138 	.word	0x08007138

080011a8 <Qst_BLE_Name>:

u8 Qst_BLE_Name(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BNAME");
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <Qst_BLE_Name+0x60>)
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <Qst_BLE_Name+0x64>)
 80011b2:	cb03      	ldmia	r3!, {r0, r1}
 80011b4:	6010      	str	r0, [r2, #0]
 80011b6:	6051      	str	r1, [r2, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <Qst_BLE_Name+0x60>)
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <Qst_BLE_Name+0x68>)
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <Qst_BLE_Name+0x6c>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+BNAME=%s", NAME[0]);
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <Qst_BLE_Name+0x70>)
 80011ce:	4913      	ldr	r1, [pc, #76]	; (800121c <Qst_BLE_Name+0x74>)
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <Qst_BLE_Name+0x78>)
 80011d2:	f004 fd27 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <Qst_BLE_Name+0x60>)
 80011d8:	f7ff fa26 	bl	8000628 <AT_CMD_Dispose>
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <Qst_BLE_Name+0x60>)
 80011e2:	f7ff fb77 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE name not correct\r\n");
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <Qst_BLE_Name+0x4c>
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <Qst_BLE_Name+0x7c>)
 80011ee:	f004 fd11 	bl	8005c14 <puts>
 80011f2:	e003      	b.n	80011fc <Qst_BLE_Name+0x54>
	else printf("[BLEINIT][SUC]Q: BLE name now is %s\r\n", NAME[0]);
 80011f4:	4908      	ldr	r1, [pc, #32]	; (8001218 <Qst_BLE_Name+0x70>)
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <Qst_BLE_Name+0x80>)
 80011f8:	f004 fc98 	bl	8005b2c <iprintf>
	return ret;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000ef4 	.word	0x20000ef4
 800120c:	0800715c 	.word	0x0800715c
 8001210:	20000f15 	.word	0x20000f15
 8001214:	08006f60 	.word	0x08006f60
 8001218:	2000010c 	.word	0x2000010c
 800121c:	08007168 	.word	0x08007168
 8001220:	20002315 	.word	0x20002315
 8001224:	08007174 	.word	0x08007174
 8001228:	0800719c 	.word	0x0800719c

0800122c <Set_BLE_Name>:

u8 Set_BLE_Name(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
	if (!Qst_BLE_Name()) return 0;
 8001232:	f7ff ffb9 	bl	80011a8 <Qst_BLE_Name>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <Set_BLE_Name+0x14>
 800123c:	2300      	movs	r3, #0
 800123e:	e029      	b.n	8001294 <Set_BLE_Name+0x68>
	strcpy(tok.name, "AT+BNAME");
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <Set_BLE_Name+0x70>)
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <Set_BLE_Name+0x74>)
 8001244:	cb03      	ldmia	r3!, {r0, r1}
 8001246:	6010      	str	r0, [r2, #0]
 8001248:	6051      	str	r1, [r2, #4]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <Set_BLE_Name+0x70>)
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], NAME[0]);
 8001256:	4913      	ldr	r1, [pc, #76]	; (80012a4 <Set_BLE_Name+0x78>)
 8001258:	4813      	ldr	r0, [pc, #76]	; (80012a8 <Set_BLE_Name+0x7c>)
 800125a:	f004 fd12 	bl	8005c82 <strcpy>
	strcpy(tok.ret, "OKsetNAME");
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <Set_BLE_Name+0x80>)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <Set_BLE_Name+0x84>)
 8001262:	cb03      	ldmia	r3!, {r0, r1}
 8001264:	6010      	str	r0, [r2, #0]
 8001266:	6051      	str	r1, [r2, #4]
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	8113      	strh	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <Set_BLE_Name+0x70>)
 800126e:	f7ff f9db 	bl	8000628 <AT_CMD_Dispose>
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <Set_BLE_Name+0x70>)
 8001278:	f7ff fb2c 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE name set fail!\r\n");
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <Set_BLE_Name+0x5e>
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <Set_BLE_Name+0x88>)
 8001284:	f004 fcc6 	bl	8005c14 <puts>
 8001288:	e003      	b.n	8001292 <Set_BLE_Name+0x66>
	else printf("[BLEINIT][SUC] BLE name set as %s\r\n", NAME[0]);
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <Set_BLE_Name+0x78>)
 800128c:	480a      	ldr	r0, [pc, #40]	; (80012b8 <Set_BLE_Name+0x8c>)
 800128e:	f004 fc4d 	bl	8005b2c <iprintf>
	return ret;
 8001292:	79fb      	ldrb	r3, [r7, #7]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000ef4 	.word	0x20000ef4
 80012a0:	0800715c 	.word	0x0800715c
 80012a4:	2000010c 	.word	0x2000010c
 80012a8:	20000f15 	.word	0x20000f15
 80012ac:	20002315 	.word	0x20002315
 80012b0:	08007108 	.word	0x08007108
 80012b4:	080071c4 	.word	0x080071c4
 80012b8:	080071e8 	.word	0x080071e8

080012bc <Qst_PIN>:

u8 Qst_PIN(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+PIN");
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <Qst_PIN+0x60>)
 80012c4:	4a16      	ldr	r2, [pc, #88]	; (8001320 <Qst_PIN+0x64>)
 80012c6:	6810      	ldr	r0, [r2, #0]
 80012c8:	6018      	str	r0, [r3, #0]
 80012ca:	8891      	ldrh	r1, [r2, #4]
 80012cc:	7992      	ldrb	r2, [r2, #6]
 80012ce:	8099      	strh	r1, [r3, #4]
 80012d0:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <Qst_PIN+0x60>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <Qst_PIN+0x68>)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <Qst_PIN+0x6c>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+PIN=%s", PIN);
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <Qst_PIN+0x70>)
 80012e4:	4912      	ldr	r1, [pc, #72]	; (8001330 <Qst_PIN+0x74>)
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <Qst_PIN+0x78>)
 80012e8:	f004 fc9c 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <Qst_PIN+0x60>)
 80012ee:	f7ff f99b 	bl	8000628 <AT_CMD_Dispose>
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <Qst_PIN+0x60>)
 80012f8:	f7ff faec 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: PIN not correct\r\n");
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <Qst_PIN+0x4e>
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <Qst_PIN+0x7c>)
 8001304:	f004 fc86 	bl	8005c14 <puts>
 8001308:	e003      	b.n	8001312 <Qst_PIN+0x56>
	else printf("[BLEINIT][SUC]Q: PIN now is %s\r\n", PIN);
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <Qst_PIN+0x70>)
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <Qst_PIN+0x80>)
 800130e:	f004 fc0d 	bl	8005b2c <iprintf>
	return ret;
 8001312:	79fb      	ldrb	r3, [r7, #7]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000ef4 	.word	0x20000ef4
 8001320:	0800720c 	.word	0x0800720c
 8001324:	20000f15 	.word	0x20000f15
 8001328:	08006f60 	.word	0x08006f60
 800132c:	20000120 	.word	0x20000120
 8001330:	08007214 	.word	0x08007214
 8001334:	20002315 	.word	0x20002315
 8001338:	08007220 	.word	0x08007220
 800133c:	08007244 	.word	0x08007244

08001340 <Set_PIN>:

u8 Set_PIN(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	if (!Qst_PIN()) return 0;
 8001346:	f7ff ffb9 	bl	80012bc <Qst_PIN>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <Set_PIN+0x14>
 8001350:	2300      	movs	r3, #0
 8001352:	e02a      	b.n	80013aa <Set_PIN+0x6a>
	strcpy(tok.name, "AT+PIN");
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <Set_PIN+0x74>)
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <Set_PIN+0x78>)
 8001358:	6810      	ldr	r0, [r2, #0]
 800135a:	6018      	str	r0, [r3, #0]
 800135c:	8891      	ldrh	r1, [r2, #4]
 800135e:	7992      	ldrb	r2, [r2, #6]
 8001360:	8099      	strh	r1, [r3, #4]
 8001362:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <Set_PIN+0x74>)
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], PIN);
 800136c:	4913      	ldr	r1, [pc, #76]	; (80013bc <Set_PIN+0x7c>)
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <Set_PIN+0x80>)
 8001370:	f004 fc87 	bl	8005c82 <strcpy>
	strcpy(tok.ret, "OKsetPIN");
 8001374:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <Set_PIN+0x84>)
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <Set_PIN+0x88>)
 8001378:	cb03      	ldmia	r3!, {r0, r1}
 800137a:	6010      	str	r0, [r2, #0]
 800137c:	6051      	str	r1, [r2, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <Set_PIN+0x74>)
 8001384:	f7ff f950 	bl	8000628 <AT_CMD_Dispose>
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <Set_PIN+0x74>)
 800138e:	f7ff faa1 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] PIN set fail!\r\n");
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <Set_PIN+0x60>
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <Set_PIN+0x8c>)
 800139a:	f004 fc3b 	bl	8005c14 <puts>
 800139e:	e003      	b.n	80013a8 <Set_PIN+0x68>
	else printf("[BLEINIT][SUC] PIN set as %s\r\n", PIN);
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <Set_PIN+0x7c>)
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <Set_PIN+0x90>)
 80013a4:	f004 fbc2 	bl	8005b2c <iprintf>
	return ret;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000ef4 	.word	0x20000ef4
 80013b8:	0800720c 	.word	0x0800720c
 80013bc:	20000120 	.word	0x20000120
 80013c0:	20000f15 	.word	0x20000f15
 80013c4:	20002315 	.word	0x20002315
 80013c8:	08007268 	.word	0x08007268
 80013cc:	08007274 	.word	0x08007274
 80013d0:	08007294 	.word	0x08007294

080013d4 <Qst_BLE>:

u8 Qst_BLE(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+BLE");
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <Qst_BLE+0x64>)
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <Qst_BLE+0x68>)
 80013de:	6810      	ldr	r0, [r2, #0]
 80013e0:	6018      	str	r0, [r3, #0]
 80013e2:	8891      	ldrh	r1, [r2, #4]
 80013e4:	7992      	ldrb	r2, [r2, #6]
 80013e6:	8099      	strh	r1, [r3, #4]
 80013e8:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <Qst_BLE+0x64>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <Qst_BLE+0x6c>)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <Qst_BLE+0x70>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <Qst_BLE+0x74>)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <Qst_BLE+0x78>)
 80013fe:	cb03      	ldmia	r3!, {r0, r1}
 8001400:	6010      	str	r0, [r2, #0]
 8001402:	6051      	str	r1, [r2, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <Qst_BLE+0x64>)
 800140a:	f7ff f90d 	bl	8000628 <AT_CMD_Dispose>
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <Qst_BLE+0x64>)
 8001414:	f7ff fa5e 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: BLE not correct\r\n");
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <Qst_BLE+0x52>
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <Qst_BLE+0x7c>)
 8001420:	f004 fbf8 	bl	8005c14 <puts>
 8001424:	e003      	b.n	800142e <Qst_BLE+0x5a>
	else printf("[BLEINIT][SUC]Q: BLE now is %s\r\n", "0");
 8001426:	490b      	ldr	r1, [pc, #44]	; (8001454 <Qst_BLE+0x80>)
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <Qst_BLE+0x84>)
 800142a:	f004 fb7f 	bl	8005b2c <iprintf>
	return ret;
 800142e:	79fb      	ldrb	r3, [r7, #7]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000ef4 	.word	0x20000ef4
 800143c:	080072b4 	.word	0x080072b4
 8001440:	20000f15 	.word	0x20000f15
 8001444:	08006f60 	.word	0x08006f60
 8001448:	20002315 	.word	0x20002315
 800144c:	080072bc 	.word	0x080072bc
 8001450:	080072c8 	.word	0x080072c8
 8001454:	080072ec 	.word	0x080072ec
 8001458:	080072f0 	.word	0x080072f0

0800145c <Set_BLE>:

u8 Set_BLE(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if (!Qst_BLE()) return 0;
 8001462:	f7ff ffb7 	bl	80013d4 <Qst_BLE>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <Set_BLE+0x14>
 800146c:	2300      	movs	r3, #0
 800146e:	e02a      	b.n	80014c6 <Set_BLE+0x6a>
	strcpy(tok.name, "AT+BLE");
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <Set_BLE+0x74>)
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <Set_BLE+0x78>)
 8001474:	6810      	ldr	r0, [r2, #0]
 8001476:	6018      	str	r0, [r3, #0]
 8001478:	8891      	ldrh	r1, [r2, #4]
 800147a:	7992      	ldrb	r2, [r2, #6]
 800147c:	8099      	strh	r1, [r3, #4]
 800147e:	719a      	strb	r2, [r3, #6]
	tok.num = 1;
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <Set_BLE+0x74>)
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "0");
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <Set_BLE+0x7c>)
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <Set_BLE+0x80>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret, "OK+BLE=0");
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <Set_BLE+0x84>)
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <Set_BLE+0x88>)
 8001494:	cb03      	ldmia	r3!, {r0, r1}
 8001496:	6010      	str	r0, [r2, #0]
 8001498:	6051      	str	r1, [r2, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	7213      	strb	r3, [r2, #8]
	u8 ret = AT_CMD_Dispose(&tok);
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <Set_BLE+0x74>)
 80014a0:	f7ff f8c2 	bl	8000628 <AT_CMD_Dispose>
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <Set_BLE+0x74>)
 80014aa:	f7ff fa13 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] BLE set fail!\r\n");
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <Set_BLE+0x60>
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <Set_BLE+0x8c>)
 80014b6:	f004 fbad 	bl	8005c14 <puts>
 80014ba:	e003      	b.n	80014c4 <Set_BLE+0x68>
	else printf("[BLEINIT][SUC] BLE set as %s\r\n", "0");
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <Set_BLE+0x80>)
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <Set_BLE+0x90>)
 80014c0:	f004 fb34 	bl	8005b2c <iprintf>
	return ret;
 80014c4:	79fb      	ldrb	r3, [r7, #7]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000ef4 	.word	0x20000ef4
 80014d4:	080072b4 	.word	0x080072b4
 80014d8:	20000f15 	.word	0x20000f15
 80014dc:	080072ec 	.word	0x080072ec
 80014e0:	20002315 	.word	0x20002315
 80014e4:	080072bc 	.word	0x080072bc
 80014e8:	08007314 	.word	0x08007314
 80014ec:	08007334 	.word	0x08007334

080014f0 <Qst_TUUID>:

u8 Qst_TUUID(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	strcpy(tok.name, "AT+TUUID");
 80014f6:	4a16      	ldr	r2, [pc, #88]	; (8001550 <Qst_TUUID+0x60>)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <Qst_TUUID+0x64>)
 80014fa:	cb03      	ldmia	r3!, {r0, r1}
 80014fc:	6010      	str	r0, [r2, #0]
 80014fe:	6051      	str	r1, [r2, #4]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <Qst_TUUID+0x60>)
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], "?");
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <Qst_TUUID+0x68>)
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <Qst_TUUID+0x6c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	8013      	strh	r3, [r2, #0]
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <Qst_TUUID+0x70>)
 8001516:	4913      	ldr	r1, [pc, #76]	; (8001564 <Qst_TUUID+0x74>)
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <Qst_TUUID+0x78>)
 800151a:	f004 fb83 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <Qst_TUUID+0x60>)
 8001520:	f7ff f882 	bl	8000628 <AT_CMD_Dispose>
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <Qst_TUUID+0x60>)
 800152a:	f7ff f9d3 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR]Q: TUUID not correct\r\n");
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <Qst_TUUID+0x4c>
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <Qst_TUUID+0x7c>)
 8001536:	f004 fb6d 	bl	8005c14 <puts>
 800153a:	e003      	b.n	8001544 <Qst_TUUID+0x54>
	else printf("[BLEINIT][SUC]Q: TUUID now is %s\r\n", TUUID);
 800153c:	4908      	ldr	r1, [pc, #32]	; (8001560 <Qst_TUUID+0x70>)
 800153e:	480c      	ldr	r0, [pc, #48]	; (8001570 <Qst_TUUID+0x80>)
 8001540:	f004 faf4 	bl	8005b2c <iprintf>
	return ret;
 8001544:	79fb      	ldrb	r3, [r7, #7]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000ef4 	.word	0x20000ef4
 8001554:	08007354 	.word	0x08007354
 8001558:	20000f15 	.word	0x20000f15
 800155c:	08006f60 	.word	0x08006f60
 8001560:	20000128 	.word	0x20000128
 8001564:	08007360 	.word	0x08007360
 8001568:	20002315 	.word	0x20002315
 800156c:	0800736c 	.word	0x0800736c
 8001570:	08007390 	.word	0x08007390

08001574 <Set_TUUID>:

u8 Set_TUUID(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	if (!Qst_TUUID()) return 0;
 800157a:	f7ff ffb9 	bl	80014f0 <Qst_TUUID>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <Set_TUUID+0x14>
 8001584:	2300      	movs	r3, #0
 8001586:	e027      	b.n	80015d8 <Set_TUUID+0x64>
	strcpy(tok.name, "AT+TUUID");
 8001588:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <Set_TUUID+0x6c>)
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <Set_TUUID+0x70>)
 800158c:	cb03      	ldmia	r3!, {r0, r1}
 800158e:	6010      	str	r0, [r2, #0]
 8001590:	6051      	str	r1, [r2, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <Set_TUUID+0x6c>)
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0], TUUID);
 800159e:	4912      	ldr	r1, [pc, #72]	; (80015e8 <Set_TUUID+0x74>)
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <Set_TUUID+0x78>)
 80015a2:	f004 fb6e 	bl	8005c82 <strcpy>
	sprintf(tok.ret, "OK+TUUID=%s", TUUID);
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <Set_TUUID+0x74>)
 80015a8:	4911      	ldr	r1, [pc, #68]	; (80015f0 <Set_TUUID+0x7c>)
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <Set_TUUID+0x80>)
 80015ac:	f004 fb3a 	bl	8005c24 <siprintf>
	u8 ret = AT_CMD_Dispose(&tok);
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <Set_TUUID+0x6c>)
 80015b2:	f7ff f839 	bl	8000628 <AT_CMD_Dispose>
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	Buff_clear(&tok);
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <Set_TUUID+0x6c>)
 80015bc:	f7ff f98a 	bl	80008d4 <Buff_clear>
	if(ret) printf("[BLEINIT][ERR] TUUID set fail!\r\n");
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <Set_TUUID+0x5a>
 80015c6:	480c      	ldr	r0, [pc, #48]	; (80015f8 <Set_TUUID+0x84>)
 80015c8:	f004 fb24 	bl	8005c14 <puts>
 80015cc:	e003      	b.n	80015d6 <Set_TUUID+0x62>
	else printf("[BLEINIT][SUC] TUUID set as %s\r\n", TUUID);
 80015ce:	4906      	ldr	r1, [pc, #24]	; (80015e8 <Set_TUUID+0x74>)
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <Set_TUUID+0x88>)
 80015d2:	f004 faab 	bl	8005b2c <iprintf>
	return ret;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000ef4 	.word	0x20000ef4
 80015e4:	08007354 	.word	0x08007354
 80015e8:	20000128 	.word	0x20000128
 80015ec:	20000f15 	.word	0x20000f15
 80015f0:	08007360 	.word	0x08007360
 80015f4:	20002315 	.word	0x20002315
 80015f8:	080073b4 	.word	0x080073b4
 80015fc:	080073d4 	.word	0x080073d4

08001600 <BLE_INIT>:
#define NAN_NAN   0
#define CONN_OK   1
#define PARA_OK   2
#define ALL_GREEN 3

void BLE_INIT() {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	switch(BLE_state) {
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <BLE_INIT+0x9c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d012      	beq.n	8001632 <BLE_INIT+0x32>
 800160c:	2b02      	cmp	r3, #2
 800160e:	d023      	beq.n	8001658 <BLE_INIT+0x58>
 8001610:	2b00      	cmp	r3, #0
 8001612:	d142      	bne.n	800169a <BLE_INIT+0x9a>
	case NAN_NAN:
		BLE_reboot();
 8001614:	f7ff fc00 	bl	8000e18 <BLE_reboot>
		HAL_Delay(1000);
 8001618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161c:	f000 ff9c 	bl	8002558 <HAL_Delay>
		if(Set_UART_Baud()) return;
 8001620:	f7ff fc72 	bl	8000f08 <Set_UART_Baud>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d12a      	bne.n	8001680 <BLE_INIT+0x80>
		BLE_state = CONN_OK;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <BLE_INIT+0x9c>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
		break;
 8001630:	e033      	b.n	800169a <BLE_INIT+0x9a>
	case CONN_OK:
		if(Set_Role()) return;
 8001632:	f7ff fced 	bl	8001010 <Set_Role>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d123      	bne.n	8001684 <BLE_INIT+0x84>
		if(Set_PIN()) return;
 800163c:	f7ff fe80 	bl	8001340 <Set_PIN>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d120      	bne.n	8001688 <BLE_INIT+0x88>
		if(Set_TUUID()) return;
 8001646:	f7ff ff95 	bl	8001574 <Set_TUUID>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11d      	bne.n	800168c <BLE_INIT+0x8c>
		BLE_state = PARA_OK;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <BLE_INIT+0x9c>)
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
		break;
 8001656:	e020      	b.n	800169a <BLE_INIT+0x9a>
	case PARA_OK:
		if(Set_SPP_Name()) return;
 8001658:	f7ff fd60 	bl	800111c <Set_SPP_Name>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <BLE_INIT+0x90>
		if(Set_BLE_Name()) return;
 8001662:	f7ff fde3 	bl	800122c <Set_BLE_Name>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d113      	bne.n	8001694 <BLE_INIT+0x94>
		if(Set_BLE()) return;
 800166c:	f7ff fef6 	bl	800145c <Set_BLE>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d110      	bne.n	8001698 <BLE_INIT+0x98>
		BLE_state = ALL_GREEN;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <BLE_INIT+0x9c>)
 8001678:	2203      	movs	r2, #3
 800167a:	601a      	str	r2, [r3, #0]
		break;
 800167c:	bf00      	nop
 800167e:	e00c      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_UART_Baud()) return;
 8001680:	bf00      	nop
 8001682:	e00a      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_Role()) return;
 8001684:	bf00      	nop
 8001686:	e008      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_PIN()) return;
 8001688:	bf00      	nop
 800168a:	e006      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_TUUID()) return;
 800168c:	bf00      	nop
 800168e:	e004      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_SPP_Name()) return;
 8001690:	bf00      	nop
 8001692:	e002      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_BLE_Name()) return;
 8001694:	bf00      	nop
 8001696:	e000      	b.n	800169a <BLE_INIT+0x9a>
		if(Set_BLE()) return;
 8001698:	bf00      	nop
	}
}
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20002420 	.word	0x20002420

080016a0 <readNum>:
	u8  alt;
} data[MAX_VEHICLE_CNT];

u8 cnt;

u16 readNum (u8 **str) {
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	u16 ret = 0ll;
 80016a8:	2300      	movs	r3, #0
 80016aa:	81fb      	strh	r3, [r7, #14]
	while (**str< '0' || **str> '9') ++ *str;
 80016ac:	e004      	b.n	80016b8 <readNum+0x18>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b2f      	cmp	r3, #47	; 0x2f
 80016c0:	d9f5      	bls.n	80016ae <readNum+0xe>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b39      	cmp	r3, #57	; 0x39
 80016ca:	d8f0      	bhi.n	80016ae <readNum+0xe>
	while (**str>='0' && **str<='9') {
 80016cc:	e015      	b.n	80016fa <readNum+0x5a>
		ret = (ret<<1) + (ret<<3) + ((**str)^'0');
 80016ce:	89fb      	ldrh	r3, [r7, #14]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	81fb      	strh	r3, [r7, #14]
		++ *str;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
	while (**str>='0' && **str<='9') {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b2f      	cmp	r3, #47	; 0x2f
 8001702:	d904      	bls.n	800170e <readNum+0x6e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b39      	cmp	r3, #57	; 0x39
 800170c:	d9df      	bls.n	80016ce <readNum+0x2e>
	} return ret;
 800170e:	89fb      	ldrh	r3, [r7, #14]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <dispose>:

int dispose (unsigned char *str) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	u8 *p = (u8*) strstr((const char *) str, "-=t:");
 8001724:	4934      	ldr	r1, [pc, #208]	; (80017f8 <dispose+0xdc>)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f004 fab3 	bl	8005c92 <strstr>
 800172c:	4603      	mov	r3, r0
 800172e:	60bb      	str	r3, [r7, #8]
	cnt = readNum(&p);
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ffb3 	bl	80016a0 <readNum>
 800173a:	4603      	mov	r3, r0
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <dispose+0xe0>)
 8001740:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<cnt; ++ i) {
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e04c      	b.n	80017e2 <dispose+0xc6>
		data[i].cat  = readNum(&p);
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ffa7 	bl	80016a0 <readNum>
 8001752:	4603      	mov	r3, r0
 8001754:	b2d9      	uxtb	r1, r3
 8001756:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <dispose+0xe4>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b2c      	cmp	r3, #44	; 0x2c
 8001764:	d001      	beq.n	800176a <dispose+0x4e>
 8001766:	2301      	movs	r3, #1
 8001768:	e042      	b.n	80017f0 <dispose+0xd4>
		data[i].xVal = readNum(&p);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff96 	bl	80016a0 <readNum>
 8001774:	4603      	mov	r3, r0
 8001776:	4619      	mov	r1, r3
 8001778:	4a21      	ldr	r2, [pc, #132]	; (8001800 <dispose+0xe4>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	460a      	mov	r2, r1
 8001782:	805a      	strh	r2, [r3, #2]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b2c      	cmp	r3, #44	; 0x2c
 800178a:	d001      	beq.n	8001790 <dispose+0x74>
 800178c:	2301      	movs	r3, #1
 800178e:	e02f      	b.n	80017f0 <dispose+0xd4>
		data[i].yVal = readNum(&p);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff83 	bl	80016a0 <readNum>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <dispose+0xe4>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	460a      	mov	r2, r1
 80017a8:	809a      	strh	r2, [r3, #4]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b2c      	cmp	r3, #44	; 0x2c
 80017b0:	d001      	beq.n	80017b6 <dispose+0x9a>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e01c      	b.n	80017f0 <dispose+0xd4>
		data[i].alt  = readNum(&p);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff70 	bl	80016a0 <readNum>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b2d9      	uxtb	r1, r3
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <dispose+0xe4>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	460a      	mov	r2, r1
 80017ce:	719a      	strb	r2, [r3, #6]
		// printf("[s]%s\r\n", p);
		if (*p ^ ';') return 1;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b3b      	cmp	r3, #59	; 0x3b
 80017d6:	d001      	beq.n	80017dc <dispose+0xc0>
 80017d8:	2301      	movs	r3, #1
 80017da:	e009      	b.n	80017f0 <dispose+0xd4>
	for (int i=0; i<cnt; ++ i) {
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3301      	adds	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <dispose+0xe0>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	dbac      	blt.n	8001748 <dispose+0x2c>
	} return 0;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	080073f8 	.word	0x080073f8
 80017fc:	20002624 	.word	0x20002624
 8001800:	20002628 	.word	0x20002628

08001804 <decoderDebugOutput>:

void decoderDebugOutput () {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	printf("n=%d\r\n", cnt);
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <decoderDebugOutput+0x74>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	481a      	ldr	r0, [pc, #104]	; (800187c <decoderDebugOutput+0x78>)
 8001812:	f004 f98b 	bl	8005b2c <iprintf>
	for (int i=0; i<cnt; ++ i) {
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	e023      	b.n	8001864 <decoderDebugOutput+0x60>
		printf("[%d] ALT: %d\r\n", i, data[i].alt);
 800181c:	4a18      	ldr	r2, [pc, #96]	; (8001880 <decoderDebugOutput+0x7c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	799b      	ldrb	r3, [r3, #6]
 8001826:	461a      	mov	r2, r3
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <decoderDebugOutput+0x80>)
 800182c:	f004 f97e 	bl	8005b2c <iprintf>
		printf("cat = %d\r\n", data[i].cat);
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <decoderDebugOutput+0x7c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001838:	4619      	mov	r1, r3
 800183a:	4813      	ldr	r0, [pc, #76]	; (8001888 <decoderDebugOutput+0x84>)
 800183c:	f004 f976 	bl	8005b2c <iprintf>
		printf("map = %d, %d\r\n", data[i].xVal, data[i].yVal);
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <decoderDebugOutput+0x7c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4413      	add	r3, r2
 8001848:	885b      	ldrh	r3, [r3, #2]
 800184a:	4619      	mov	r1, r3
 800184c:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <decoderDebugOutput+0x7c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	889b      	ldrh	r3, [r3, #4]
 8001856:	461a      	mov	r2, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <decoderDebugOutput+0x88>)
 800185a:	f004 f967 	bl	8005b2c <iprintf>
	for (int i=0; i<cnt; ++ i) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3301      	adds	r3, #1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <decoderDebugOutput+0x74>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4293      	cmp	r3, r2
 800186e:	dbd5      	blt.n	800181c <decoderDebugOutput+0x18>
	}
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20002624 	.word	0x20002624
 800187c:	08007400 	.word	0x08007400
 8001880:	20002628 	.word	0x20002628
 8001884:	08007408 	.word	0x08007408
 8001888:	08007418 	.word	0x08007418
 800188c:	08007424 	.word	0x08007424

08001890 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001898:	1d39      	adds	r1, r7, #4
 800189a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189e:	2201      	movs	r2, #1
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <__io_putchar+0x20>)
 80018a2:	f003 f93c 	bl	8004b1e <HAL_UART_Transmit>
	return ch;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20002948 	.word	0x20002948

080018b4 <HAL_UART_RxCpltCallback>:
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};
unsigned char UART2RxUklRdFlg  = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && UART2RxUklRdFlg) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <HAL_UART_RxCpltCallback+0x78>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12f      	bne.n	8001926 <HAL_UART_RxCpltCallback+0x72>
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d02b      	beq.n	8001926 <HAL_UART_RxCpltCallback+0x72>
		if (!(UART2Rxtmp[0]^0x0A) || !(UART2Rxtmp[0]^0x0D)) {
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_UART_RxCpltCallback+0x80>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d003      	beq.n	80018de <HAL_UART_RxCpltCallback+0x2a>
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_UART_RxCpltCallback+0x80>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b0d      	cmp	r3, #13
 80018dc:	d107      	bne.n	80018ee <HAL_UART_RxCpltCallback+0x3a>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_UART_RxCpltCallback+0x84>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01e      	beq.n	8001924 <HAL_UART_RxCpltCallback+0x70>
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_UART_RxCpltCallback+0x88>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e01a      	b.n	8001924 <HAL_UART_RxCpltCallback+0x70>
		} if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_UART_RxCpltCallback+0x84>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f6:	d20e      	bcs.n	8001916 <HAL_UART_RxCpltCallback+0x62>
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_UART_RxCpltCallback+0x84>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_UART_RxCpltCallback+0x84>)
 8001900:	600a      	str	r2, [r1, #0]
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <HAL_UART_RxCpltCallback+0x80>)
 8001904:	7811      	ldrb	r1, [r2, #0]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_UART_RxCpltCallback+0x8c>)
 8001908:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	4909      	ldr	r1, [pc, #36]	; (8001934 <HAL_UART_RxCpltCallback+0x80>)
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <HAL_UART_RxCpltCallback+0x90>)
 8001910:	f003 fa89 	bl	8004e26 <HAL_UART_Receive_IT>
 8001914:	e007      	b.n	8001926 <HAL_UART_RxCpltCallback+0x72>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_UART_RxCpltCallback+0x88>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <HAL_UART_RxCpltCallback+0x94>)
 800191e:	f004 f979 	bl	8005c14 <puts>
 8001922:	e000      	b.n	8001926 <HAL_UART_RxCpltCallback+0x72>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 8001924:	bf00      	nop
	}
}
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40004400 	.word	0x40004400
 8001930:	200005c5 	.word	0x200005c5
 8001934:	200005c4 	.word	0x200005c4
 8001938:	200005c0 	.word	0x200005c0
 800193c:	200005bc 	.word	0x200005bc
 8001940:	200001bc 	.word	0x200001bc
 8001944:	20000eb4 	.word	0x20000eb4
 8001948:	08007434 	.word	0x08007434

0800194c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
//				Cnange_TFT_Backlight();
//				while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
//			}
//		}
//	}
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <UART2_Clear>:

void UART2_Clear() {
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	e007      	b.n	8001980 <UART2_Clear+0x1c>
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <UART2_Clear+0x48>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <UART2_Clear+0x4c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f2      	bcc.n	8001970 <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = UART2RxUklRdFlg = 0;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <UART2_Clear+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <UART2_Clear+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <UART2_Clear+0x4c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <UART2_Clear+0x54>)
 800199e:	701a      	strb	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	200001bc 	.word	0x200001bc
 80019b0:	200005c0 	.word	0x200005c0
 80019b4:	200005c5 	.word	0x200005c5
 80019b8:	200005bc 	.word	0x200005bc

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f000 fd58 	bl	8002474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f854 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 fa04 	bl	8001dd4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019cc:	f000 f9aa 	bl	8001d24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019d0:	f000 f9d6 	bl	8001d80 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80019d4:	f000 f8aa 	bl	8001b2c <MX_ADC1_Init>
  MX_SPI1_Init();
 80019d8:	f000 f8fa 	bl	8001bd0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80019dc:	f000 f92e 	bl	8001c3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  UART2RxUklRdFlg = 0;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <main+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  ADC_Calibration();
 80019e6:	f7ff f9e7 	bl	8000db8 <ADC_Calibration>
  TFT_INIT();
 80019ea:	f7ff f835 	bl	8000a58 <TFT_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019ee:	2108      	movs	r1, #8
 80019f0:	4817      	ldr	r0, [pc, #92]	; (8001a50 <main+0x94>)
 80019f2:	f002 fb5d 	bl	80040b0 <HAL_TIM_PWM_Start>
  Set_TFT_Backlight_PWM(100);
 80019f6:	2064      	movs	r0, #100	; 0x64
 80019f8:	f7fe ff92 	bl	8000920 <Set_TFT_Backlight_PWM>
  while (BLE_state^ALL_GREEN) BLE_INIT();
 80019fc:	e001      	b.n	8001a02 <main+0x46>
 80019fe:	f7ff fdff 	bl	8001600 <BLE_INIT>
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <main+0x98>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d1f9      	bne.n	80019fe <main+0x42>
  printf("[BLEINIT] SUCCESS.\r\n");
 8001a0a:	4813      	ldr	r0, [pc, #76]	; (8001a58 <main+0x9c>)
 8001a0c:	f004 f902 	bl	8005c14 <puts>
		  } PWM_UP_CNTER = 0;
	  } HAL_Delay(0);
	  //printf("[PWMTEST] PWM: %d\r\n", PWM_TEST_STA);
#endif

	  UART2RxUklRd();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <main+0x90>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4910      	ldr	r1, [pc, #64]	; (8001a5c <main+0xa0>)
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <main+0xa4>)
 8001a1c:	f003 fa03 	bl	8004e26 <HAL_UART_Receive_IT>
	  if (UART2RxFlg) {
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <main+0xa8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f3      	beq.n	8001a10 <main+0x54>
		  Read_Battery_Life();
 8001a28:	f7ff f9e0 	bl	8000dec <Read_Battery_Life>
		  printf("[%d]%s\r\n", TIME_TO_PRINT, UART2RxBuf);
 8001a2c:	f000 fd88 	bl	8002540 <HAL_GetTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <main+0xac>)
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <main+0xb0>)
 8001a38:	f004 f878 	bl	8005b2c <iprintf>
		  dispose(UART2RxBuf);
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <main+0xac>)
 8001a3e:	f7ff fe6d 	bl	800171c <dispose>
		  decoderDebugOutput();
 8001a42:	f7ff fedf 	bl	8001804 <decoderDebugOutput>
		  UART2_Clear();
 8001a46:	f7ff ff8d 	bl	8001964 <UART2_Clear>
	  UART2RxUklRd();
 8001a4a:	e7e1      	b.n	8001a10 <main+0x54>
 8001a4c:	200005c5 	.word	0x200005c5
 8001a50:	20000e74 	.word	0x20000e74
 8001a54:	20002420 	.word	0x20002420
 8001a58:	08007450 	.word	0x08007450
 8001a5c:	200005c4 	.word	0x200005c4
 8001a60:	20000eb4 	.word	0x20000eb4
 8001a64:	200005bc 	.word	0x200005bc
 8001a68:	200001bc 	.word	0x200001bc
 8001a6c:	08007464 	.word	0x08007464

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	2230      	movs	r2, #48	; 0x30
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 f84c 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <SystemClock_Config+0xb4>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <SystemClock_Config+0xb4>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <SystemClock_Config+0xb4>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <SystemClock_Config+0xb8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <SystemClock_Config+0xb8>)
 8001aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <SystemClock_Config+0xb8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fc05 	bl	80032f0 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001aec:	f000 f9cc 	bl	8001e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 fe60 	bl	80037d0 <HAL_RCC_ClockConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b16:	f000 f9b7 	bl	8001e88 <Error_Handler>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3750      	adds	r7, #80	; 0x50
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000

08001b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <MX_ADC1_Init+0x9c>)
 8001b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <MX_ADC1_Init+0xa0>)
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001b8e:	f000 fd05 	bl	800259c <HAL_ADC_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b98:	f000 f976 	bl	8001e88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_ADC1_Init+0x98>)
 8001bae:	f000 fe71 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bb8:	f000 f966 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200005d4 	.word	0x200005d4
 8001bc8:	40012000 	.word	0x40012000
 8001bcc:	0f000001 	.word	0x0f000001

08001bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <MX_SPI1_Init+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c1c:	220a      	movs	r2, #10
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <MX_SPI1_Init+0x64>)
 8001c22:	f001 ffa1 	bl	8003b68 <HAL_SPI_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c2c:	f000 f92c 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000e1c 	.word	0x20000e1c
 8001c38:	40013000 	.word	0x40013000

08001c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]
 8001c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c76:	229f      	movs	r2, #159	; 0x9f
 8001c78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c82:	2263      	movs	r2, #99	; 0x63
 8001c84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c92:	4823      	ldr	r0, [pc, #140]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001c94:	f002 f9ac 	bl	8003ff0 <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001c9e:	f000 f8f3 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cac:	4619      	mov	r1, r3
 8001cae:	481c      	ldr	r0, [pc, #112]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001cb0:	f002 faf6 	bl	80042a0 <HAL_TIM_ConfigClockSource>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001cba:	f000 f8e5 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cbe:	4818      	ldr	r0, [pc, #96]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001cc0:	f002 f9c1 	bl	8004046 <HAL_TIM_PWM_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001cca:	f000 f8dd 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd6:	f107 0320 	add.w	r3, r7, #32
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4810      	ldr	r0, [pc, #64]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001cde:	f002 fe63 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001ce8:	f000 f8ce 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cec:	2360      	movs	r3, #96	; 0x60
 8001cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2208      	movs	r2, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001d04:	f002 fa06 	bl	8004114 <HAL_TIM_PWM_ConfigChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d0e:	f000 f8bb 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <MX_TIM2_Init+0xe4>)
 8001d14:	f000 f9b0 	bl	8002078 <HAL_TIM_MspPostInit>

}
 8001d18:	bf00      	nop
 8001d1a:	3738      	adds	r7, #56	; 0x38
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000e74 	.word	0x20000e74

08001d24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <MX_USART1_UART_Init+0x54>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d5c:	f002 fe92 	bl	8004a84 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f000 f88f 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 8001d6a:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_USART1_UART_Init+0x58>)
 8001d6c:	f003 ff52 	bl	8005c14 <puts>

  /* USER CODE END USART1_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20002948 	.word	0x20002948
 8001d78:	40011000 	.word	0x40011000
 8001d7c:	08007470 	.word	0x08007470

08001d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_USART2_UART_Init+0x50>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART2_UART_Init+0x4c>)
 8001db8:	f002 fe64 	bl	8004a84 <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dc2:	f000 f861 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000eb4 	.word	0x20000eb4
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_GPIO_Init+0xa4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <MX_GPIO_Init+0xa4>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <MX_GPIO_Init+0xa4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_GPIO_Init+0xa4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <MX_GPIO_Init+0xa4>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_GPIO_Init+0xa4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	21e0      	movs	r1, #224	; 0xe0
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <MX_GPIO_Init+0xa8>)
 8001e28:	f001 fa30 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_GPIO_Init+0xac>)
 8001e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <MX_GPIO_Init+0xb0>)
 8001e40:	f001 f88a 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e44:	23e0      	movs	r3, #224	; 0xe0
 8001e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4808      	ldr	r0, [pc, #32]	; (8001e7c <MX_GPIO_Init+0xa8>)
 8001e5c:	f001 f87c 	bl	8002f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2101      	movs	r1, #1
 8001e64:	2006      	movs	r0, #6
 8001e66:	f001 f81e 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e6a:	2006      	movs	r0, #6
 8001e6c:	f001 f837 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	10210000 	.word	0x10210000
 8001e84:	40020000 	.word	0x40020000

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <Error_Handler+0x6>

08001e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_MspInit+0x4c>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x4c>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x4c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_ADC_MspInit+0x7c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d127      	bne.n	8001f52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_ADC_MspInit+0x80>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <HAL_ADC_MspInit+0x80>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_ADC_MspInit+0x80>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_ADC_MspInit+0x80>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_ADC_MspInit+0x80>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_ADC_MspInit+0x80>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f3a:	2340      	movs	r3, #64	; 0x40
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_ADC_MspInit+0x84>)
 8001f4e:	f001 f803 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40012000 	.word	0x40012000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <HAL_SPI_MspInit+0xc0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d149      	bne.n	800201e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_SPI_MspInit+0xc4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fde:	23a0      	movs	r3, #160	; 0xa0
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <HAL_SPI_MspInit+0xc8>)
 8001ffa:	f000 ffad 	bl	8002f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ffe:	2310      	movs	r3, #16
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_SPI_MspInit+0xcc>)
 800201a:	f000 ff9d 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40013000 	.word	0x40013000
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002048:	d10d      	bne.n	8002066 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d11e      	bne.n	80020d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_TIM_MspPostInit+0x68>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_TIM_MspPostInit+0x68>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_TIM_MspPostInit+0x68>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	4804      	ldr	r0, [pc, #16]	; (80020e4 <HAL_TIM_MspPostInit+0x6c>)
 80020d4:	f000 ff40 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020400 	.word	0x40020400

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_UART_MspInit+0xf8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12d      	bne.n	8002166 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a2d      	ldr	r2, [pc, #180]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002142:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002154:	2307      	movs	r3, #7
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4822      	ldr	r0, [pc, #136]	; (80021e8 <HAL_UART_MspInit+0x100>)
 8002160:	f000 fefa 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002164:	e038      	b.n	80021d8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_UART_MspInit+0x104>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d133      	bne.n	80021d8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a1a      	ldr	r2, [pc, #104]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 800217a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_UART_MspInit+0xfc>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a8:	230c      	movs	r3, #12
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b8:	2307      	movs	r3, #7
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_UART_MspInit+0x100>)
 80021c4:	f000 fec8 	bl	8002f58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	2026      	movs	r0, #38	; 0x26
 80021ce:	f000 fe6a 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021d2:	2026      	movs	r0, #38	; 0x26
 80021d4:	f000 fe83 	bl	8002ede <HAL_NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	3730      	adds	r7, #48	; 0x30
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40004400 	.word	0x40004400

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <NMI_Handler+0x4>

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler+0x4>

08002202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <UsageFault_Handler+0x4>

0800220e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223c:	f000 f96c 	bl	8002518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8002248:	2101      	movs	r1, #1
 800224a:	4811      	ldr	r0, [pc, #68]	; (8002290 <EXTI0_IRQHandler+0x4c>)
 800224c:	f001 f806 	bl	800325c <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d113      	bne.n	800227e <EXTI0_IRQHandler+0x3a>
		HAL_Delay(20);
 8002256:	2014      	movs	r0, #20
 8002258:	f000 f97e 	bl	8002558 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 800225c:	2101      	movs	r1, #1
 800225e:	480c      	ldr	r0, [pc, #48]	; (8002290 <EXTI0_IRQHandler+0x4c>)
 8002260:	f000 fffc 	bl	800325c <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <EXTI0_IRQHandler+0x3a>
			Cnange_TFT_Backlight();
 800226a:	f7fe fb6b 	bl	8000944 <Cnange_TFT_Backlight>
			while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 800226e:	bf00      	nop
 8002270:	2101      	movs	r1, #1
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <EXTI0_IRQHandler+0x4c>)
 8002274:	f000 fff2 	bl	800325c <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f8      	beq.n	8002270 <EXTI0_IRQHandler+0x2c>
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800227e:	2001      	movs	r0, #1
 8002280:	f001 f81e 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <EXTI0_IRQHandler+0x50>)
 8002286:	2201      	movs	r2, #1
 8002288:	615a      	str	r2, [r3, #20]
  /* USER CODE END EXTI0_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40020000 	.word	0x40020000
 8002294:	40013c00 	.word	0x40013c00

08002298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART2_IRQHandler+0x10>)
 800229e:	f002 fe17 	bl	8004ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000eb4 	.word	0x20000eb4

080022ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e00a      	b.n	80022d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022be:	f3af 8000 	nop.w
 80022c2:	4601      	mov	r1, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	dbf0      	blt.n	80022be <_read+0x12>
	}

return len;
 80022dc:	687b      	ldr	r3, [r7, #4]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e009      	b.n	800230c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fac5 	bl	8001890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf1      	blt.n	80022f8 <_write+0x12>
	}
	return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_close>:

int _close(int file)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002346:	605a      	str	r2, [r3, #4]
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_isatty>:

int _isatty(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	return 1;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <_sbrk+0x5c>)
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <_sbrk+0x60>)
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_sbrk+0x64>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <_sbrk+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d207      	bcs.n	80023c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b8:	f003 fb86 	bl	8005ac8 <__errno>
 80023bc:	4602      	mov	r2, r0
 80023be:	230c      	movs	r3, #12
 80023c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	e009      	b.n	80023dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <_sbrk+0x64>)
 80023d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20020000 	.word	0x20020000
 80023e8:	00000400 	.word	0x00000400
 80023ec:	200005c8 	.word	0x200005c8
 80023f0:	20002990 	.word	0x20002990

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <SystemInit+0x28>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <SystemInit+0x28>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <SystemInit+0x28>)
 800240a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240e:	609a      	str	r2, [r3, #8]
#endif
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002426:	e003      	b.n	8002430 <LoopCopyDataInit>

08002428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800242a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800242c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800242e:	3104      	adds	r1, #4

08002430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002430:	480b      	ldr	r0, [pc, #44]	; (8002460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002438:	d3f6      	bcc.n	8002428 <CopyDataInit>
  ldr  r2, =_sbss
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800243c:	e002      	b.n	8002444 <LoopFillZerobss>

0800243e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800243e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002440:	f842 3b04 	str.w	r3, [r2], #4

08002444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002448:	d3f9      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800244a:	f7ff ffd3 	bl	80023f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244e:	f003 fb41 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002452:	f7ff fab3 	bl	80019bc <main>
  bx  lr    
 8002456:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800245c:	08007544 	.word	0x08007544
  ldr  r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002464:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8002468:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 800246c:	20002990 	.word	0x20002990

08002470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC_IRQHandler>
	...

08002474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_Init+0x40>)
 800247e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <HAL_Init+0x40>)
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_Init+0x40>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249c:	2003      	movs	r0, #3
 800249e:	f000 fcf7 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f000 f808 	bl	80024b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a8:	f7ff fcf2 	bl	8001e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00

080024b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x54>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x58>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fd0f 	bl	8002efa <HAL_SYSTICK_Config>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00e      	b.n	8002504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d80a      	bhi.n	8002502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ec:	2200      	movs	r2, #0
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f000 fcd7 	bl	8002ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f8:	4a06      	ldr	r2, [pc, #24]	; (8002514 <HAL_InitTick+0x5c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000130 	.word	0x20000130
 8002510:	20000138 	.word	0x20000138
 8002514:	20000134 	.word	0x20000134

08002518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x20>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x24>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4413      	add	r3, r2
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_IncTick+0x24>)
 800252a:	6013      	str	r3, [r2, #0]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000138 	.word	0x20000138
 800253c:	20002988 	.word	0x20002988

08002540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return uwTick;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_GetTick+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20002988 	.word	0x20002988

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff ffee 	bl	8002540 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_Delay+0x40>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffde 	bl	8002540 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000138 	.word	0x20000138

0800259c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e033      	b.n	800261a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fc90 	bl	8001ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025e2:	f023 0302 	bic.w	r3, r3, #2
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa82 	bl	8002af8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
 800260a:	e001      	b.n	8002610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_Start+0x1a>
 800263a:	2302      	movs	r3, #2
 800263c:	e08a      	b.n	8002754 <HAL_ADC_Start+0x130>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d018      	beq.n	8002686 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002664:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_ADC_Start+0x13c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a3e      	ldr	r2, [pc, #248]	; (8002764 <HAL_ADC_Start+0x140>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9a      	lsrs	r2, r3, #18
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002678:	e002      	b.n	8002680 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3b01      	subs	r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f9      	bne.n	800267a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d15e      	bne.n	8002752 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	d106      	bne.n	80026e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f023 0206 	bic.w	r2, r3, #6
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_ADC_Start+0x144>)
 80026f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11c      	bne.n	8002752 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e013      	b.n	8002752 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_ADC_Start+0x148>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10e      	bne.n	8002752 <HAL_ADC_Start+0x12e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002750:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000130 	.word	0x20000130
 8002764:	431bde83 	.word	0x431bde83
 8002768:	40012300 	.word	0x40012300
 800276c:	40012000 	.word	0x40012000

08002770 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278c:	d113      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d10b      	bne.n	80027b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e05c      	b.n	8002870 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027b6:	f7ff fec3 	bl	8002540 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027bc:	e01a      	b.n	80027f4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d016      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_ADC_PollForConversion+0x6c>
 80027cc:	f7ff feb8 	bl	8002540 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d20b      	bcs.n	80027f4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f043 0204 	orr.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e03d      	b.n	8002870 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d1dd      	bne.n	80027be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f06f 0212 	mvn.w	r2, #18
 800280a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d123      	bne.n	800286e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11f      	bne.n	800286e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002846:	2b00      	cmp	r3, #0
 8002848:	d111      	bne.n	800286e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e113      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x244>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d925      	bls.n	800290c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68d9      	ldr	r1, [r3, #12]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	3b1e      	subs	r3, #30
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68d9      	ldr	r1, [r3, #12]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	4603      	mov	r3, r0
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4403      	add	r3, r0
 80028fe:	3b1e      	subs	r3, #30
 8002900:	409a      	lsls	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	e022      	b.n	8002952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6919      	ldr	r1, [r3, #16]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	2207      	movs	r2, #7
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	400a      	ands	r2, r1
 800292e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	4603      	mov	r3, r0
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4403      	add	r3, r0
 8002948:	409a      	lsls	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b06      	cmp	r3, #6
 8002958:	d824      	bhi.n	80029a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b05      	subs	r3, #5
 800296c:	221f      	movs	r2, #31
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b05      	subs	r3, #5
 8002996:	fa00 f203 	lsl.w	r2, r0, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
 80029a2:	e04c      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d824      	bhi.n	80029f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	3b23      	subs	r3, #35	; 0x23
 80029be:	221f      	movs	r2, #31
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b23      	subs	r3, #35	; 0x23
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
 80029f4:	e023      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b41      	subs	r3, #65	; 0x41
 8002a08:	221f      	movs	r2, #31
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b41      	subs	r3, #65	; 0x41
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_ADC_ConfigChannel+0x250>)
 8002a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_ADC_ConfigChannel+0x254>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10f      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1d8>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b12      	cmp	r3, #18
 8002a52:	d10b      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <HAL_ADC_ConfigChannel+0x254>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12b      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x23a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_ADC_ConfigChannel+0x258>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <HAL_ADC_ConfigChannel+0x1f4>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b11      	cmp	r3, #17
 8002a86:	d122      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_ADC_ConfigChannel+0x258>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_ADC_ConfigChannel+0x25c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_ADC_ConfigChannel+0x260>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	0c9a      	lsrs	r2, r3, #18
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac0:	e002      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f9      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	40012000 	.word	0x40012000
 8002aec:	10000012 	.word	0x10000012
 8002af0:	20000130 	.word	0x20000130
 8002af4:	431bde83 	.word	0x431bde83

08002af8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b00:	4b79      	ldr	r3, [pc, #484]	; (8002ce8 <ADC_Init+0x1f0>)
 8002b02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	021a      	lsls	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	4a58      	ldr	r2, [pc, #352]	; (8002cec <ADC_Init+0x1f4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e00f      	b.n	8002bf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0202 	bic.w	r2, r2, #2
 8002c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7e1b      	ldrb	r3, [r3, #24]
 8002c10:	005a      	lsls	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	035a      	lsls	r2, r3, #13
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e007      	b.n	8002c6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	051a      	lsls	r2, r3, #20
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cae:	025a      	lsls	r2, r3, #9
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	029a      	lsls	r2, r3, #10
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40012300 	.word	0x40012300
 8002cec:	0f000001 	.word	0x0f000001

08002cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__NVIC_GetPriorityGrouping+0x18>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0307 	and.w	r3, r3, #7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db0b      	blt.n	8002d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4907      	ldr	r1, [pc, #28]	; (8002d8c <__NVIC_EnableIRQ+0x38>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db0a      	blt.n	8002dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	490c      	ldr	r1, [pc, #48]	; (8002ddc <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db8:	e00a      	b.n	8002dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4908      	ldr	r1, [pc, #32]	; (8002de0 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	761a      	strb	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f1c3 0307 	rsb	r3, r3, #7
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf28      	it	cs
 8002e02:	2304      	movcs	r3, #4
 8002e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d902      	bls.n	8002e14 <NVIC_EncodePriority+0x30>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3b03      	subs	r3, #3
 8002e12:	e000      	b.n	8002e16 <NVIC_EncodePriority+0x32>
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	4313      	orrs	r3, r2
         );
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d301      	bcc.n	8002e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00f      	b.n	8002e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <SysTick_Config+0x40>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f7ff ff8e 	bl	8002d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SysTick_Config+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <SysTick_Config+0x40>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff29 	bl	8002cf0 <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff3e 	bl	8002d38 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff8e 	bl	8002de4 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5d 	bl	8002d90 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff31 	bl	8002d54 <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa2 	bl	8002e4c <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d004      	beq.n	8002f30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e00c      	b.n	8002f4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2205      	movs	r2, #5
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e159      	b.n	8003228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f040 8148 	bne.w	8003222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d00b      	beq.n	8002fb2 <HAL_GPIO_Init+0x5a>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d007      	beq.n	8002fb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa6:	2b11      	cmp	r3, #17
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b12      	cmp	r3, #18
 8002fb0:	d130      	bne.n	8003014 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0xfc>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b12      	cmp	r3, #18
 8003052:	d123      	bne.n	800309c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	08da      	lsrs	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3208      	adds	r2, #8
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a2 	beq.w	8003222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b56      	ldr	r3, [pc, #344]	; (800323c <HAL_GPIO_Init+0x2e4>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a55      	ldr	r2, [pc, #340]	; (800323c <HAL_GPIO_Init+0x2e4>)
 80030e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
 80030ee:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_GPIO_Init+0x2e4>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fa:	4a51      	ldr	r2, [pc, #324]	; (8003240 <HAL_GPIO_Init+0x2e8>)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a48      	ldr	r2, [pc, #288]	; (8003244 <HAL_GPIO_Init+0x2ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x202>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a47      	ldr	r2, [pc, #284]	; (8003248 <HAL_GPIO_Init+0x2f0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x1fe>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a46      	ldr	r2, [pc, #280]	; (800324c <HAL_GPIO_Init+0x2f4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x1fa>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a45      	ldr	r2, [pc, #276]	; (8003250 <HAL_GPIO_Init+0x2f8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x1f6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a44      	ldr	r2, [pc, #272]	; (8003254 <HAL_GPIO_Init+0x2fc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x1f2>
 8003146:	2304      	movs	r3, #4
 8003148:	e008      	b.n	800315c <HAL_GPIO_Init+0x204>
 800314a:	2307      	movs	r3, #7
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x204>
 800314e:	2303      	movs	r3, #3
 8003150:	e004      	b.n	800315c <HAL_GPIO_Init+0x204>
 8003152:	2302      	movs	r3, #2
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x204>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x204>
 800315a:	2300      	movs	r3, #0
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f002 0203 	and.w	r2, r2, #3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4093      	lsls	r3, r2
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316c:	4934      	ldr	r1, [pc, #208]	; (8003240 <HAL_GPIO_Init+0x2e8>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_GPIO_Init+0x300>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319e:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_GPIO_Init+0x300>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a4:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <HAL_GPIO_Init+0x300>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c8:	4a23      	ldr	r2, [pc, #140]	; (8003258 <HAL_GPIO_Init+0x300>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_GPIO_Init+0x300>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_GPIO_Init+0x300>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_GPIO_Init+0x300>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <HAL_GPIO_Init+0x300>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	f67f aea2 	bls.w	8002f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003230:	bf00      	nop
 8003232:	3724      	adds	r7, #36	; 0x24
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40013c00 	.word	0x40013c00

0800325c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e001      	b.n	800327e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fb34 	bl	800194c <HAL_GPIO_EXTI_Callback>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e25b      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d075      	beq.n	80033fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800330e:	4ba3      	ldr	r3, [pc, #652]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d00c      	beq.n	8003334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4ba0      	ldr	r3, [pc, #640]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003322:	2b08      	cmp	r3, #8
 8003324:	d112      	bne.n	800334c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003326:	4b9d      	ldr	r3, [pc, #628]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003332:	d10b      	bne.n	800334c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	4b99      	ldr	r3, [pc, #612]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05b      	beq.n	80033f8 <HAL_RCC_OscConfig+0x108>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d157      	bne.n	80033f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e236      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d106      	bne.n	8003364 <HAL_RCC_OscConfig+0x74>
 8003356:	4b91      	ldr	r3, [pc, #580]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a90      	ldr	r2, [pc, #576]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e01d      	b.n	80033a0 <HAL_RCC_OscConfig+0xb0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x98>
 800336e:	4b8b      	ldr	r3, [pc, #556]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a8a      	ldr	r2, [pc, #552]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a87      	ldr	r2, [pc, #540]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0xb0>
 8003388:	4b84      	ldr	r3, [pc, #528]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a83      	ldr	r2, [pc, #524]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a80      	ldr	r2, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7ff f8ca 	bl	8002540 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b0:	f7ff f8c6 	bl	8002540 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e1fb      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0xc0>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f8b6 	bl	8002540 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7ff f8b2 	bl	8002540 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1e7      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	4b6c      	ldr	r3, [pc, #432]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0xe8>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d063      	beq.n	80034ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003406:	4b65      	ldr	r3, [pc, #404]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b62      	ldr	r3, [pc, #392]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341a:	2b08      	cmp	r3, #8
 800341c:	d11c      	bne.n	8003458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b5f      	ldr	r3, [pc, #380]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d116      	bne.n	8003458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	4b5c      	ldr	r3, [pc, #368]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_RCC_OscConfig+0x152>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e1bb      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b56      	ldr	r3, [pc, #344]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4952      	ldr	r1, [pc, #328]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	e03a      	b.n	80034ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003460:	4b4f      	ldr	r3, [pc, #316]	; (80035a0 <HAL_RCC_OscConfig+0x2b0>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7ff f86b 	bl	8002540 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346e:	f7ff f867 	bl	8002540 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e19c      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003480:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4940      	ldr	r1, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	600b      	str	r3, [r1, #0]
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a2:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <HAL_RCC_OscConfig+0x2b0>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7ff f84a 	bl	8002540 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b0:	f7ff f846 	bl	8002540 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e17b      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d030      	beq.n	800353c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e2:	4b30      	ldr	r3, [pc, #192]	; (80035a4 <HAL_RCC_OscConfig+0x2b4>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7ff f82a 	bl	8002540 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f0:	f7ff f826 	bl	8002540 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e15b      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x200>
 800350e:	e015      	b.n	800353c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_RCC_OscConfig+0x2b4>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003516:	f7ff f813 	bl	8002540 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351e:	f7ff f80f 	bl	8002540 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e144      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a0 	beq.w	800368a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10f      	bne.n	800357a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <HAL_RCC_OscConfig+0x2ac>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x2b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d121      	bne.n	80035ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <HAL_RCC_OscConfig+0x2b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_RCC_OscConfig+0x2b8>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003592:	f7fe ffd5 	bl	8002540 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003598:	e011      	b.n	80035be <HAL_RCC_OscConfig+0x2ce>
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	42470000 	.word	0x42470000
 80035a4:	42470e80 	.word	0x42470e80
 80035a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fe ffc8 	bl	8002540 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0fd      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x4d4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2f0>
 80035d2:	4b7d      	ldr	r3, [pc, #500]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a7c      	ldr	r2, [pc, #496]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	e01c      	b.n	800361a <HAL_RCC_OscConfig+0x32a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d10c      	bne.n	8003602 <HAL_RCC_OscConfig+0x312>
 80035e8:	4b77      	ldr	r3, [pc, #476]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a76      	ldr	r2, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	4b74      	ldr	r3, [pc, #464]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a73      	ldr	r2, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0x32a>
 8003602:	4b71      	ldr	r3, [pc, #452]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a70      	ldr	r2, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	4b6e      	ldr	r3, [pc, #440]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a6d      	ldr	r2, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe ff8d 	bl	8002540 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe ff89 	bl	8002540 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0bc      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ee      	beq.n	800362a <HAL_RCC_OscConfig+0x33a>
 800364c:	e014      	b.n	8003678 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe ff77 	bl	8002540 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fe ff73 	bl	8002540 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0a6      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ee      	bne.n	8003656 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8092 	beq.w	80037b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003694:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d05c      	beq.n	800375a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d141      	bne.n	800372c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b48      	ldr	r3, [pc, #288]	; (80037cc <HAL_RCC_OscConfig+0x4dc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe ff47 	bl	8002540 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fe ff43 	bl	8002540 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e078      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	019b      	lsls	r3, r3, #6
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	4933      	ldr	r1, [pc, #204]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <HAL_RCC_OscConfig+0x4dc>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe ff1c 	bl	8002540 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fe ff18 	bl	8002540 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04d      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x41c>
 800372a:	e045      	b.n	80037b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <HAL_RCC_OscConfig+0x4dc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe ff05 	bl	8002540 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe ff01 	bl	8002540 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e036      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374c:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x44a>
 8003758:	e02e      	b.n	80037b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e029      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <HAL_RCC_OscConfig+0x4d8>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	429a      	cmp	r2, r3
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d115      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003794:	4293      	cmp	r3, r2
 8003796:	d10d      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470060 	.word	0x42470060

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0cc      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b68      	ldr	r3, [pc, #416]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d90c      	bls.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b8      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a52      	ldr	r2, [pc, #328]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	494d      	ldr	r1, [pc, #308]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3f      	ldr	r3, [pc, #252]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e067      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 0203 	bic.w	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4934      	ldr	r1, [pc, #208]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fe fe3e 	bl	8002540 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fe fe3a 	bl	8002540 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d20c      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e032      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4916      	ldr	r1, [pc, #88]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	490e      	ldr	r1, [pc, #56]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f821 	bl	800399c <HAL_RCC_GetSysClockFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
 800396a:	fa21 f303 	lsr.w	r3, r1, r3
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fd9e 	bl	80024b8 <HAL_InitTick>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023c00 	.word	0x40023c00
 800398c:	40023800 	.word	0x40023800
 8003990:	08007484 	.word	0x08007484
 8003994:	20000130 	.word	0x20000130
 8003998:	20000134 	.word	0x20000134

0800399c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b2:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d007      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x32>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d008      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x38>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 808d 	bne.w	8003ae2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b4b      	ldr	r3, [pc, #300]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80039ca:	60bb      	str	r3, [r7, #8]
       break;
 80039cc:	e08c      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ce:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_RCC_GetSysClockFreq+0x160>)
 80039d0:	60bb      	str	r3, [r7, #8]
      break;
 80039d2:	e089      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d4:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039de:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	f04f 0400 	mov.w	r4, #0
 80039f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	ea03 0501 	and.w	r5, r3, r1
 8003a00:	ea04 0602 	and.w	r6, r4, r2
 8003a04:	4a3d      	ldr	r2, [pc, #244]	; (8003afc <HAL_RCC_GetSysClockFreq+0x160>)
 8003a06:	fb02 f106 	mul.w	r1, r2, r6
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	fb02 f205 	mul.w	r2, r2, r5
 8003a10:	440a      	add	r2, r1
 8003a12:	493a      	ldr	r1, [pc, #232]	; (8003afc <HAL_RCC_GetSysClockFreq+0x160>)
 8003a14:	fba5 0101 	umull	r0, r1, r5, r1
 8003a18:	1853      	adds	r3, r2, r1
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f04f 0400 	mov.w	r4, #0
 8003a22:	461a      	mov	r2, r3
 8003a24:	4623      	mov	r3, r4
 8003a26:	f7fc fc43 	bl	80002b0 <__aeabi_uldivmod>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e049      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	f04f 0400 	mov.w	r4, #0
 8003a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	ea03 0501 	and.w	r5, r3, r1
 8003a48:	ea04 0602 	and.w	r6, r4, r2
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4632      	mov	r2, r6
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f04f 0400 	mov.w	r4, #0
 8003a58:	0154      	lsls	r4, r2, #5
 8003a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a5e:	014b      	lsls	r3, r1, #5
 8003a60:	4619      	mov	r1, r3
 8003a62:	4622      	mov	r2, r4
 8003a64:	1b49      	subs	r1, r1, r5
 8003a66:	eb62 0206 	sbc.w	r2, r2, r6
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	f04f 0400 	mov.w	r4, #0
 8003a72:	0194      	lsls	r4, r2, #6
 8003a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a78:	018b      	lsls	r3, r1, #6
 8003a7a:	1a5b      	subs	r3, r3, r1
 8003a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	00e2      	lsls	r2, r4, #3
 8003a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a8e:	00d9      	lsls	r1, r3, #3
 8003a90:	460b      	mov	r3, r1
 8003a92:	4614      	mov	r4, r2
 8003a94:	195b      	adds	r3, r3, r5
 8003a96:	eb44 0406 	adc.w	r4, r4, r6
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	02a2      	lsls	r2, r4, #10
 8003aa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa8:	0299      	lsls	r1, r3, #10
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4614      	mov	r4, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fbf8 	bl	80002b0 <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	60bb      	str	r3, [r7, #8]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ae4:	60bb      	str	r3, [r7, #8]
      break;
 8003ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	017d7840 	.word	0x017d7840

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000130 	.word	0x20000130

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	f7ff fff0 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08007494 	.word	0x08007494

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b44:	f7ff ffdc 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b48:	4601      	mov	r1, r0
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0b5b      	lsrs	r3, r3, #13
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	08007494 	.word	0x08007494

08003b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e056      	b.n	8003c28 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fe f9e7 	bl	8001f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	ea42 0103 	orr.w	r1, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	f003 0104 	and.w	r1, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_SPI_Transmit+0x22>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e11e      	b.n	8003e90 <HAL_SPI_Transmit+0x260>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c5a:	f7fe fc71 	bl	8002540 <HAL_GetTick>
 8003c5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c74:	e103      	b.n	8003e7e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Transmit+0x52>
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c86:	e0fa      	b.n	8003e7e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cce:	d107      	bne.n	8003ce0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d007      	beq.n	8003cfe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d06:	d14b      	bne.n	8003da0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Transmit+0xe6>
 8003d10:	8afb      	ldrh	r3, [r7, #22]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d13e      	bne.n	8003d94 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d3a:	e02b      	b.n	8003d94 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d112      	bne.n	8003d70 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	1c9a      	adds	r2, r3, #2
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d6e:	e011      	b.n	8003d94 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d70:	f7fe fbe6 	bl	8002540 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d803      	bhi.n	8003d88 <HAL_SPI_Transmit+0x158>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d102      	bne.n	8003d8e <HAL_SPI_Transmit+0x15e>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d92:	e074      	b.n	8003e7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ce      	bne.n	8003d3c <HAL_SPI_Transmit+0x10c>
 8003d9e:	e04c      	b.n	8003e3a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Transmit+0x17e>
 8003da8:	8afb      	ldrh	r3, [r7, #22]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d140      	bne.n	8003e30 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dd4:	e02c      	b.n	8003e30 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d113      	bne.n	8003e0c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e0a:	e011      	b.n	8003e30 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0c:	f7fe fb98 	bl	8002540 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d803      	bhi.n	8003e24 <HAL_SPI_Transmit+0x1f4>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d102      	bne.n	8003e2a <HAL_SPI_Transmit+0x1fa>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e2e:	e026      	b.n	8003e7e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1cd      	bne.n	8003dd6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	6839      	ldr	r1, [r7, #0]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f894 	bl	8003f6c <SPI_EndRxTxTransaction>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e000      	b.n	8003e7e <HAL_SPI_Transmit+0x24e>
  }

error:
 8003e7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ea8:	e04c      	b.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d048      	beq.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003eb2:	f7fe fb45 	bl	8002540 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d902      	bls.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13d      	bne.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ed6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee0:	d111      	bne.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	d004      	beq.n	8003ef6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef4:	d107      	bne.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0e:	d10f      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e00f      	b.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d1a3      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <SPI_EndRxTxTransaction+0x7c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <SPI_EndRxTxTransaction+0x80>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	0d5b      	lsrs	r3, r3, #21
 8003f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d112      	bne.n	8003fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff78 	bl	8003e98 <SPI_WaitFlagStateUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e00f      	b.n	8003fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d0f2      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x52>
 8003fd8:	e000      	b.n	8003fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8003fda:	bf00      	nop
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000130 	.word	0x20000130
 8003fec:	165e9f81 	.word	0x165e9f81

08003ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e01d      	b.n	800403e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe f80e 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f000 f9ee 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01d      	b.n	8004094 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f815 	bl	800409c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 f9c3 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fc4a 	bl	800495c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a10      	ldr	r2, [pc, #64]	; (8004110 <HAL_TIM_PWM_Start+0x60>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d107      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b06      	cmp	r3, #6
 80040f2:	d007      	beq.n	8004104 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000

08004114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800412a:	2302      	movs	r3, #2
 800412c:	e0b4      	b.n	8004298 <HAL_TIM_PWM_ConfigChannel+0x184>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	f200 809f 	bhi.w	8004284 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004181 	.word	0x08004181
 8004150:	08004285 	.word	0x08004285
 8004154:	08004285 	.word	0x08004285
 8004158:	08004285 	.word	0x08004285
 800415c:	080041c1 	.word	0x080041c1
 8004160:	08004285 	.word	0x08004285
 8004164:	08004285 	.word	0x08004285
 8004168:	08004285 	.word	0x08004285
 800416c:	08004203 	.word	0x08004203
 8004170:	08004285 	.word	0x08004285
 8004174:	08004285 	.word	0x08004285
 8004178:	08004285 	.word	0x08004285
 800417c:	08004243 	.word	0x08004243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f9c2 	bl	8004510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0208 	orr.w	r2, r2, #8
 800419a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0204 	bic.w	r2, r2, #4
 80041aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
      break;
 80041be:	e062      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fa08 	bl	80045dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6999      	ldr	r1, [r3, #24]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	619a      	str	r2, [r3, #24]
      break;
 8004200:	e041      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fa53 	bl	80046b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0208 	orr.w	r2, r2, #8
 800421c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0204 	bic.w	r2, r2, #4
 800422c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	61da      	str	r2, [r3, #28]
      break;
 8004240:	e021      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fa9d 	bl	8004788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69d9      	ldr	r1, [r3, #28]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	021a      	lsls	r2, r3, #8
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	61da      	str	r2, [r3, #28]
      break;
 8004282:	e000      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004284:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_TIM_ConfigClockSource+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e0a6      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x166>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d067      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0x120>
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d80b      	bhi.n	800430c <HAL_TIM_ConfigClockSource+0x6c>
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d073      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x140>
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d802      	bhi.n	8004302 <HAL_TIM_ConfigClockSource+0x62>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d06f      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004300:	e078      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004302:	2b20      	cmp	r3, #32
 8004304:	d06c      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x140>
 8004306:	2b30      	cmp	r3, #48	; 0x30
 8004308:	d06a      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800430a:	e073      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d00d      	beq.n	800432c <HAL_TIM_ConfigClockSource+0x8c>
 8004310:	2b70      	cmp	r3, #112	; 0x70
 8004312:	d804      	bhi.n	800431e <HAL_TIM_ConfigClockSource+0x7e>
 8004314:	2b50      	cmp	r3, #80	; 0x50
 8004316:	d033      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0xe0>
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d041      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800431c:	e06a      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d066      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x152>
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004328:	d017      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800432a:	e063      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f000 faee 	bl	800491c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800434e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e04c      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f000 fad7 	bl	800491c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437c:	609a      	str	r2, [r3, #8]
      break;
 800437e:	e039      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	461a      	mov	r2, r3
 800438e:	f000 fa4b 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2150      	movs	r1, #80	; 0x50
 8004398:	4618      	mov	r0, r3
 800439a:	f000 faa4 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 800439e:	e029      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	461a      	mov	r2, r3
 80043ae:	f000 fa6a 	bl	8004886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2160      	movs	r1, #96	; 0x60
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fa94 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80043be:	e019      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f000 fa2b 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2140      	movs	r1, #64	; 0x40
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fa84 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80043de:	e009      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f000 fa7b 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e000      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80043f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a34      	ldr	r2, [pc, #208]	; (80044f4 <TIM_Base_SetConfig+0xe4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a31      	ldr	r2, [pc, #196]	; (80044f8 <TIM_Base_SetConfig+0xe8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a30      	ldr	r2, [pc, #192]	; (80044fc <TIM_Base_SetConfig+0xec>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <TIM_Base_SetConfig+0xf0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <TIM_Base_SetConfig+0xe4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01b      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d017      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <TIM_Base_SetConfig+0xe8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a21      	ldr	r2, [pc, #132]	; (80044fc <TIM_Base_SetConfig+0xec>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00f      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a20      	ldr	r2, [pc, #128]	; (8004500 <TIM_Base_SetConfig+0xf0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <TIM_Base_SetConfig+0xf4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <TIM_Base_SetConfig+0xf8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1d      	ldr	r2, [pc, #116]	; (800450c <TIM_Base_SetConfig+0xfc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <TIM_Base_SetConfig+0xe4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800

08004510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 0302 	bic.w	r3, r3, #2
 8004558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <TIM_OC1_SetConfig+0xc8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10c      	bne.n	8004586 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0308 	bic.w	r3, r3, #8
 8004572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <TIM_OC1_SetConfig+0xc8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800459c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010000 	.word	0x40010000

080045dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <TIM_OC2_SetConfig+0xd4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10d      	bne.n	8004658 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <TIM_OC2_SetConfig+0xd4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d113      	bne.n	8004688 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800466e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000

080046b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <TIM_OC3_SetConfig+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d10d      	bne.n	800472e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <TIM_OC3_SetConfig+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d113      	bne.n	800475e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800473c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40010000 	.word	0x40010000

08004788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	031b      	lsls	r3, r3, #12
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <TIM_OC4_SetConfig+0x9c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d109      	bne.n	80047fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40010000 	.word	0x40010000

08004828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 030a 	bic.w	r3, r3, #10
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0210 	bic.w	r2, r3, #16
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	031b      	lsls	r3, r3, #12
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	f043 0307 	orr.w	r3, r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	431a      	orrs	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2201      	movs	r2, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1a      	ldr	r2, [r3, #32]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049bc:	2302      	movs	r3, #2
 80049be:	e050      	b.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0c:	d013      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10c      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40014000 	.word	0x40014000

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e03f      	b.n	8004b16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fb1c 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	; 0x24
 8004ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fc81 	bl	80053d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b088      	sub	sp, #32
 8004b22:	af02      	add	r7, sp, #8
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	f040 8083 	bne.w	8004c46 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_UART_Transmit+0x2e>
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e07b      	b.n	8004c48 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Transmit+0x40>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e074      	b.n	8004c48 <HAL_UART_Transmit+0x12a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2221      	movs	r2, #33	; 0x21
 8004b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b74:	f7fd fce4 	bl	8002540 <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b8e:	e042      	b.n	8004c16 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d122      	bne.n	8004bee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 faa0 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e042      	b.n	8004c48 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3302      	adds	r3, #2
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	e017      	b.n	8004c16 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	3301      	adds	r3, #1
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	e013      	b.n	8004c16 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fa7d 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e01f      	b.n	8004c48 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	60ba      	str	r2, [r7, #8]
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1b7      	bne.n	8004b90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa64 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e006      	b.n	8004c48 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	f040 8090 	bne.w	8004d92 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_UART_Receive+0x2e>
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e088      	b.n	8004d94 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Receive+0x40>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e081      	b.n	8004d94 <HAL_UART_Receive+0x144>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2222      	movs	r2, #34	; 0x22
 8004ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ca6:	f7fd fc4b 	bl	8002540 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cc0:	e05c      	b.n	8004d7c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd8:	d12b      	bne.n	8004d32 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fa07 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e04f      	b.n	8004d94 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10c      	bne.n	8004d1a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3302      	adds	r3, #2
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	e030      	b.n	8004d7c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	e024      	b.n	8004d7c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f9db 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e023      	b.n	8004d94 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d108      	bne.n	8004d66 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	60ba      	str	r2, [r7, #8]
 8004d60:	b2ca      	uxtb	r2, r1
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e00a      	b.n	8004d7c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d19d      	bne.n	8004cc2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	4613      	mov	r3, r2
 8004da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d130      	bne.n	8004e18 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <HAL_UART_Transmit_IT+0x26>
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e029      	b.n	8004e1a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Transmit_IT+0x38>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e022      	b.n	8004e1a <HAL_UART_Transmit_IT+0x7e>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2221      	movs	r2, #33	; 0x21
 8004df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e12:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d140      	bne.n	8004ec2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Receive_IT+0x26>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e039      	b.n	8004ec4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Receive_IT+0x38>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e032      	b.n	8004ec4 <HAL_UART_Receive_IT+0x9e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2222      	movs	r2, #34	; 0x22
 8004e82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0220 	orr.w	r2, r2, #32
 8004ebc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_UART_IRQHandler+0x52>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9d6 	bl	80052cc <UART_Receive_IT>
      return;
 8004f20:	e0d1      	b.n	80050c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80b0 	beq.w	800508a <HAL_UART_IRQHandler+0x1ba>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <HAL_UART_IRQHandler+0x70>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a5 	beq.w	800508a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_UART_IRQHandler+0x90>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_UART_IRQHandler+0xb0>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	f043 0202 	orr.w	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xd0>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	f043 0204 	orr.w	r2, r3, #4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00f      	beq.n	8004fca <HAL_UART_IRQHandler+0xfa>
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <HAL_UART_IRQHandler+0xee>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc2:	f043 0208 	orr.w	r2, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d078      	beq.n	80050c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <HAL_UART_IRQHandler+0x11c>
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f970 	bl	80052cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_UART_IRQHandler+0x144>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d031      	beq.n	8005078 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8b9 	bl	800518c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d123      	bne.n	8005070 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005036:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	4a21      	ldr	r2, [pc, #132]	; (80050cc <HAL_UART_IRQHandler+0x1fc>)
 8005046:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd ff60 	bl	8002f12 <HAL_DMA_Abort_IT>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d016      	beq.n	8005086 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005062:	4610      	mov	r0, r2
 8005064:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005066:	e00e      	b.n	8005086 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f83b 	bl	80050e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506e:	e00a      	b.n	8005086 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f837 	bl	80050e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005076:	e006      	b.n	8005086 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f833 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005084:	e01e      	b.n	80050c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005086:	bf00      	nop
    return;
 8005088:	e01c      	b.n	80050c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_UART_IRQHandler+0x1d6>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f8a6 	bl	80051f0 <UART_Transmit_IT>
    return;
 80050a4:	e00f      	b.n	80050c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1f6>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8ee 	bl	800529c <UART_EndTransmit_IT>
    return;
 80050c0:	bf00      	nop
 80050c2:	e000      	b.n	80050c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80050c4:	bf00      	nop
  }
}
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	080051c9 	.word	0x080051c9

080050d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005108:	e02c      	b.n	8005164 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d028      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <UART_WaitOnFlagUntilTimeout+0x30>
 8005118:	f7fd fa12 	bl	8002540 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d21d      	bcs.n	8005164 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005136:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e00f      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d0c3      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ff7e 	bl	80050e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b21      	cmp	r3, #33	; 0x21
 8005202:	d144      	bne.n	800528e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520c:	d11a      	bne.n	8005244 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005222:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	1c9a      	adds	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]
 8005236:	e00e      	b.n	8005256 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]
 8005242:	e008      	b.n	8005256 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6211      	str	r1, [r2, #32]
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4619      	mov	r1, r3
 8005264:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005278:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005288:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ff07 	bl	80050d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b22      	cmp	r3, #34	; 0x22
 80052de:	d171      	bne.n	80053c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d123      	bne.n	8005332 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10e      	bne.n	8005316 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	1c9a      	adds	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
 8005314:	e029      	b.n	800536a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	b29b      	uxth	r3, r3
 800531e:	b2db      	uxtb	r3, r3
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28
 8005330:	e01b      	b.n	800536a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6858      	ldr	r0, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	1c59      	adds	r1, r3, #1
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6291      	str	r1, [r2, #40]	; 0x28
 800534a:	b2c2      	uxtb	r2, r0
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e00c      	b.n	800536a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	1c58      	adds	r0, r3, #1
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	6288      	str	r0, [r1, #40]	; 0x28
 8005362:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4619      	mov	r1, r3
 8005378:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800537a:	2b00      	cmp	r3, #0
 800537c:	d120      	bne.n	80053c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0220 	bic.w	r2, r2, #32
 800538c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800539c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fc fa7c 	bl	80018b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e002      	b.n	80053c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005412:	f023 030c 	bic.w	r3, r3, #12
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	430b      	orrs	r3, r1
 800541e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	f040 818b 	bne.w	8005758 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4ac1      	ldr	r2, [pc, #772]	; (800574c <UART_SetConfig+0x37c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d005      	beq.n	8005458 <UART_SetConfig+0x88>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4abf      	ldr	r2, [pc, #764]	; (8005750 <UART_SetConfig+0x380>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f040 80bd 	bne.w	80055d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005458:	f7fe fb72 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 800545c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	461d      	mov	r5, r3
 8005462:	f04f 0600 	mov.w	r6, #0
 8005466:	46a8      	mov	r8, r5
 8005468:	46b1      	mov	r9, r6
 800546a:	eb18 0308 	adds.w	r3, r8, r8
 800546e:	eb49 0409 	adc.w	r4, r9, r9
 8005472:	4698      	mov	r8, r3
 8005474:	46a1      	mov	r9, r4
 8005476:	eb18 0805 	adds.w	r8, r8, r5
 800547a:	eb49 0906 	adc.w	r9, r9, r6
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800548a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800548e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005492:	4688      	mov	r8, r1
 8005494:	4691      	mov	r9, r2
 8005496:	eb18 0005 	adds.w	r0, r8, r5
 800549a:	eb49 0106 	adc.w	r1, r9, r6
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	461d      	mov	r5, r3
 80054a4:	f04f 0600 	mov.w	r6, #0
 80054a8:	196b      	adds	r3, r5, r5
 80054aa:	eb46 0406 	adc.w	r4, r6, r6
 80054ae:	461a      	mov	r2, r3
 80054b0:	4623      	mov	r3, r4
 80054b2:	f7fa fefd 	bl	80002b0 <__aeabi_uldivmod>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	461a      	mov	r2, r3
 80054bc:	4ba5      	ldr	r3, [pc, #660]	; (8005754 <UART_SetConfig+0x384>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	461d      	mov	r5, r3
 80054cc:	f04f 0600 	mov.w	r6, #0
 80054d0:	46a9      	mov	r9, r5
 80054d2:	46b2      	mov	sl, r6
 80054d4:	eb19 0309 	adds.w	r3, r9, r9
 80054d8:	eb4a 040a 	adc.w	r4, sl, sl
 80054dc:	4699      	mov	r9, r3
 80054de:	46a2      	mov	sl, r4
 80054e0:	eb19 0905 	adds.w	r9, r9, r5
 80054e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80054e8:	f04f 0100 	mov.w	r1, #0
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054fc:	4689      	mov	r9, r1
 80054fe:	4692      	mov	sl, r2
 8005500:	eb19 0005 	adds.w	r0, r9, r5
 8005504:	eb4a 0106 	adc.w	r1, sl, r6
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	461d      	mov	r5, r3
 800550e:	f04f 0600 	mov.w	r6, #0
 8005512:	196b      	adds	r3, r5, r5
 8005514:	eb46 0406 	adc.w	r4, r6, r6
 8005518:	461a      	mov	r2, r3
 800551a:	4623      	mov	r3, r4
 800551c:	f7fa fec8 	bl	80002b0 <__aeabi_uldivmod>
 8005520:	4603      	mov	r3, r0
 8005522:	460c      	mov	r4, r1
 8005524:	461a      	mov	r2, r3
 8005526:	4b8b      	ldr	r3, [pc, #556]	; (8005754 <UART_SetConfig+0x384>)
 8005528:	fba3 1302 	umull	r1, r3, r3, r2
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	2164      	movs	r1, #100	; 0x64
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	3332      	adds	r3, #50	; 0x32
 800553a:	4a86      	ldr	r2, [pc, #536]	; (8005754 <UART_SetConfig+0x384>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005548:	4498      	add	r8, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	461d      	mov	r5, r3
 800554e:	f04f 0600 	mov.w	r6, #0
 8005552:	46a9      	mov	r9, r5
 8005554:	46b2      	mov	sl, r6
 8005556:	eb19 0309 	adds.w	r3, r9, r9
 800555a:	eb4a 040a 	adc.w	r4, sl, sl
 800555e:	4699      	mov	r9, r3
 8005560:	46a2      	mov	sl, r4
 8005562:	eb19 0905 	adds.w	r9, r9, r5
 8005566:	eb4a 0a06 	adc.w	sl, sl, r6
 800556a:	f04f 0100 	mov.w	r1, #0
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800557a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800557e:	4689      	mov	r9, r1
 8005580:	4692      	mov	sl, r2
 8005582:	eb19 0005 	adds.w	r0, r9, r5
 8005586:	eb4a 0106 	adc.w	r1, sl, r6
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	461d      	mov	r5, r3
 8005590:	f04f 0600 	mov.w	r6, #0
 8005594:	196b      	adds	r3, r5, r5
 8005596:	eb46 0406 	adc.w	r4, r6, r6
 800559a:	461a      	mov	r2, r3
 800559c:	4623      	mov	r3, r4
 800559e:	f7fa fe87 	bl	80002b0 <__aeabi_uldivmod>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <UART_SetConfig+0x384>)
 80055aa:	fba3 1302 	umull	r1, r3, r3, r2
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2164      	movs	r1, #100	; 0x64
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	3332      	adds	r3, #50	; 0x32
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <UART_SetConfig+0x384>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	f003 0207 	and.w	r2, r3, #7
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4442      	add	r2, r8
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	e26f      	b.n	8005ab2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055d2:	f7fe faa1 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 80055d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	461d      	mov	r5, r3
 80055dc:	f04f 0600 	mov.w	r6, #0
 80055e0:	46a8      	mov	r8, r5
 80055e2:	46b1      	mov	r9, r6
 80055e4:	eb18 0308 	adds.w	r3, r8, r8
 80055e8:	eb49 0409 	adc.w	r4, r9, r9
 80055ec:	4698      	mov	r8, r3
 80055ee:	46a1      	mov	r9, r4
 80055f0:	eb18 0805 	adds.w	r8, r8, r5
 80055f4:	eb49 0906 	adc.w	r9, r9, r6
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800560c:	4688      	mov	r8, r1
 800560e:	4691      	mov	r9, r2
 8005610:	eb18 0005 	adds.w	r0, r8, r5
 8005614:	eb49 0106 	adc.w	r1, r9, r6
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	461d      	mov	r5, r3
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	196b      	adds	r3, r5, r5
 8005624:	eb46 0406 	adc.w	r4, r6, r6
 8005628:	461a      	mov	r2, r3
 800562a:	4623      	mov	r3, r4
 800562c:	f7fa fe40 	bl	80002b0 <__aeabi_uldivmod>
 8005630:	4603      	mov	r3, r0
 8005632:	460c      	mov	r4, r1
 8005634:	461a      	mov	r2, r3
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <UART_SetConfig+0x384>)
 8005638:	fba3 2302 	umull	r2, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	461d      	mov	r5, r3
 8005646:	f04f 0600 	mov.w	r6, #0
 800564a:	46a9      	mov	r9, r5
 800564c:	46b2      	mov	sl, r6
 800564e:	eb19 0309 	adds.w	r3, r9, r9
 8005652:	eb4a 040a 	adc.w	r4, sl, sl
 8005656:	4699      	mov	r9, r3
 8005658:	46a2      	mov	sl, r4
 800565a:	eb19 0905 	adds.w	r9, r9, r5
 800565e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800566e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005676:	4689      	mov	r9, r1
 8005678:	4692      	mov	sl, r2
 800567a:	eb19 0005 	adds.w	r0, r9, r5
 800567e:	eb4a 0106 	adc.w	r1, sl, r6
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	461d      	mov	r5, r3
 8005688:	f04f 0600 	mov.w	r6, #0
 800568c:	196b      	adds	r3, r5, r5
 800568e:	eb46 0406 	adc.w	r4, r6, r6
 8005692:	461a      	mov	r2, r3
 8005694:	4623      	mov	r3, r4
 8005696:	f7fa fe0b 	bl	80002b0 <__aeabi_uldivmod>
 800569a:	4603      	mov	r3, r0
 800569c:	460c      	mov	r4, r1
 800569e:	461a      	mov	r2, r3
 80056a0:	4b2c      	ldr	r3, [pc, #176]	; (8005754 <UART_SetConfig+0x384>)
 80056a2:	fba3 1302 	umull	r1, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2164      	movs	r1, #100	; 0x64
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	3332      	adds	r3, #50	; 0x32
 80056b4:	4a27      	ldr	r2, [pc, #156]	; (8005754 <UART_SetConfig+0x384>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c2:	4498      	add	r8, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	461d      	mov	r5, r3
 80056c8:	f04f 0600 	mov.w	r6, #0
 80056cc:	46a9      	mov	r9, r5
 80056ce:	46b2      	mov	sl, r6
 80056d0:	eb19 0309 	adds.w	r3, r9, r9
 80056d4:	eb4a 040a 	adc.w	r4, sl, sl
 80056d8:	4699      	mov	r9, r3
 80056da:	46a2      	mov	sl, r4
 80056dc:	eb19 0905 	adds.w	r9, r9, r5
 80056e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056f8:	4689      	mov	r9, r1
 80056fa:	4692      	mov	sl, r2
 80056fc:	eb19 0005 	adds.w	r0, r9, r5
 8005700:	eb4a 0106 	adc.w	r1, sl, r6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	461d      	mov	r5, r3
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	196b      	adds	r3, r5, r5
 8005710:	eb46 0406 	adc.w	r4, r6, r6
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	f7fa fdca 	bl	80002b0 <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	461a      	mov	r2, r3
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <UART_SetConfig+0x384>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a07      	ldr	r2, [pc, #28]	; (8005754 <UART_SetConfig+0x384>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 0207 	and.w	r2, r3, #7
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4442      	add	r2, r8
 8005748:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800574a:	e1b2      	b.n	8005ab2 <UART_SetConfig+0x6e2>
 800574c:	40011000 	.word	0x40011000
 8005750:	40011400 	.word	0x40011400
 8005754:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4ad7      	ldr	r2, [pc, #860]	; (8005abc <UART_SetConfig+0x6ec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d005      	beq.n	800576e <UART_SetConfig+0x39e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4ad6      	ldr	r2, [pc, #856]	; (8005ac0 <UART_SetConfig+0x6f0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	f040 80d1 	bne.w	8005910 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800576e:	f7fe f9e7 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8005772:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	469a      	mov	sl, r3
 8005778:	f04f 0b00 	mov.w	fp, #0
 800577c:	46d0      	mov	r8, sl
 800577e:	46d9      	mov	r9, fp
 8005780:	eb18 0308 	adds.w	r3, r8, r8
 8005784:	eb49 0409 	adc.w	r4, r9, r9
 8005788:	4698      	mov	r8, r3
 800578a:	46a1      	mov	r9, r4
 800578c:	eb18 080a 	adds.w	r8, r8, sl
 8005790:	eb49 090b 	adc.w	r9, r9, fp
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057a8:	4688      	mov	r8, r1
 80057aa:	4691      	mov	r9, r2
 80057ac:	eb1a 0508 	adds.w	r5, sl, r8
 80057b0:	eb4b 0609 	adc.w	r6, fp, r9
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4619      	mov	r1, r3
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	f04f 0400 	mov.w	r4, #0
 80057c6:	0094      	lsls	r4, r2, #2
 80057c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057cc:	008b      	lsls	r3, r1, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	4623      	mov	r3, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	4631      	mov	r1, r6
 80057d6:	f7fa fd6b 	bl	80002b0 <__aeabi_uldivmod>
 80057da:	4603      	mov	r3, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	461a      	mov	r2, r3
 80057e0:	4bb8      	ldr	r3, [pc, #736]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80057e2:	fba3 2302 	umull	r2, r3, r3, r2
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	469b      	mov	fp, r3
 80057f0:	f04f 0c00 	mov.w	ip, #0
 80057f4:	46d9      	mov	r9, fp
 80057f6:	46e2      	mov	sl, ip
 80057f8:	eb19 0309 	adds.w	r3, r9, r9
 80057fc:	eb4a 040a 	adc.w	r4, sl, sl
 8005800:	4699      	mov	r9, r3
 8005802:	46a2      	mov	sl, r4
 8005804:	eb19 090b 	adds.w	r9, r9, fp
 8005808:	eb4a 0a0c 	adc.w	sl, sl, ip
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005818:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800581c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005820:	4689      	mov	r9, r1
 8005822:	4692      	mov	sl, r2
 8005824:	eb1b 0509 	adds.w	r5, fp, r9
 8005828:	eb4c 060a 	adc.w	r6, ip, sl
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	0094      	lsls	r4, r2, #2
 8005840:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005844:	008b      	lsls	r3, r1, #2
 8005846:	461a      	mov	r2, r3
 8005848:	4623      	mov	r3, r4
 800584a:	4628      	mov	r0, r5
 800584c:	4631      	mov	r1, r6
 800584e:	f7fa fd2f 	bl	80002b0 <__aeabi_uldivmod>
 8005852:	4603      	mov	r3, r0
 8005854:	460c      	mov	r4, r1
 8005856:	461a      	mov	r2, r3
 8005858:	4b9a      	ldr	r3, [pc, #616]	; (8005ac4 <UART_SetConfig+0x6f4>)
 800585a:	fba3 1302 	umull	r1, r3, r3, r2
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	2164      	movs	r1, #100	; 0x64
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	3332      	adds	r3, #50	; 0x32
 800586c:	4a95      	ldr	r2, [pc, #596]	; (8005ac4 <UART_SetConfig+0x6f4>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005878:	4498      	add	r8, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	469b      	mov	fp, r3
 800587e:	f04f 0c00 	mov.w	ip, #0
 8005882:	46d9      	mov	r9, fp
 8005884:	46e2      	mov	sl, ip
 8005886:	eb19 0309 	adds.w	r3, r9, r9
 800588a:	eb4a 040a 	adc.w	r4, sl, sl
 800588e:	4699      	mov	r9, r3
 8005890:	46a2      	mov	sl, r4
 8005892:	eb19 090b 	adds.w	r9, r9, fp
 8005896:	eb4a 0a0c 	adc.w	sl, sl, ip
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ae:	4689      	mov	r9, r1
 80058b0:	4692      	mov	sl, r2
 80058b2:	eb1b 0509 	adds.w	r5, fp, r9
 80058b6:	eb4c 060a 	adc.w	r6, ip, sl
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	f04f 0400 	mov.w	r4, #0
 80058cc:	0094      	lsls	r4, r2, #2
 80058ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d2:	008b      	lsls	r3, r1, #2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	4631      	mov	r1, r6
 80058dc:	f7fa fce8 	bl	80002b0 <__aeabi_uldivmod>
 80058e0:	4603      	mov	r3, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b77      	ldr	r3, [pc, #476]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80058e8:	fba3 1302 	umull	r1, r3, r3, r2
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	2164      	movs	r1, #100	; 0x64
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	3332      	adds	r3, #50	; 0x32
 80058fa:	4a72      	ldr	r2, [pc, #456]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4442      	add	r2, r8
 800590c:	609a      	str	r2, [r3, #8]
 800590e:	e0d0      	b.n	8005ab2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fe f902 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8005914:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	469a      	mov	sl, r3
 800591a:	f04f 0b00 	mov.w	fp, #0
 800591e:	46d0      	mov	r8, sl
 8005920:	46d9      	mov	r9, fp
 8005922:	eb18 0308 	adds.w	r3, r8, r8
 8005926:	eb49 0409 	adc.w	r4, r9, r9
 800592a:	4698      	mov	r8, r3
 800592c:	46a1      	mov	r9, r4
 800592e:	eb18 080a 	adds.w	r8, r8, sl
 8005932:	eb49 090b 	adc.w	r9, r9, fp
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005942:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005946:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800594a:	4688      	mov	r8, r1
 800594c:	4691      	mov	r9, r2
 800594e:	eb1a 0508 	adds.w	r5, sl, r8
 8005952:	eb4b 0609 	adc.w	r6, fp, r9
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4619      	mov	r1, r3
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	0094      	lsls	r4, r2, #2
 800596a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800596e:	008b      	lsls	r3, r1, #2
 8005970:	461a      	mov	r2, r3
 8005972:	4623      	mov	r3, r4
 8005974:	4628      	mov	r0, r5
 8005976:	4631      	mov	r1, r6
 8005978:	f7fa fc9a 	bl	80002b0 <__aeabi_uldivmod>
 800597c:	4603      	mov	r3, r0
 800597e:	460c      	mov	r4, r1
 8005980:	461a      	mov	r2, r3
 8005982:	4b50      	ldr	r3, [pc, #320]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005984:	fba3 2302 	umull	r2, r3, r3, r2
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	469b      	mov	fp, r3
 8005992:	f04f 0c00 	mov.w	ip, #0
 8005996:	46d9      	mov	r9, fp
 8005998:	46e2      	mov	sl, ip
 800599a:	eb19 0309 	adds.w	r3, r9, r9
 800599e:	eb4a 040a 	adc.w	r4, sl, sl
 80059a2:	4699      	mov	r9, r3
 80059a4:	46a2      	mov	sl, r4
 80059a6:	eb19 090b 	adds.w	r9, r9, fp
 80059aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059c2:	4689      	mov	r9, r1
 80059c4:	4692      	mov	sl, r2
 80059c6:	eb1b 0509 	adds.w	r5, fp, r9
 80059ca:	eb4c 060a 	adc.w	r6, ip, sl
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	4619      	mov	r1, r3
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	0094      	lsls	r4, r2, #2
 80059e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	461a      	mov	r2, r3
 80059ea:	4623      	mov	r3, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	4631      	mov	r1, r6
 80059f0:	f7fa fc5e 	bl	80002b0 <__aeabi_uldivmod>
 80059f4:	4603      	mov	r3, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b32      	ldr	r3, [pc, #200]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80059fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	2164      	movs	r1, #100	; 0x64
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	3332      	adds	r3, #50	; 0x32
 8005a0e:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1a:	4498      	add	r8, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	469b      	mov	fp, r3
 8005a20:	f04f 0c00 	mov.w	ip, #0
 8005a24:	46d9      	mov	r9, fp
 8005a26:	46e2      	mov	sl, ip
 8005a28:	eb19 0309 	adds.w	r3, r9, r9
 8005a2c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a30:	4699      	mov	r9, r3
 8005a32:	46a2      	mov	sl, r4
 8005a34:	eb19 090b 	adds.w	r9, r9, fp
 8005a38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a50:	4689      	mov	r9, r1
 8005a52:	4692      	mov	sl, r2
 8005a54:	eb1b 0509 	adds.w	r5, fp, r9
 8005a58:	eb4c 060a 	adc.w	r6, ip, sl
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4619      	mov	r1, r3
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	f04f 0400 	mov.w	r4, #0
 8005a6e:	0094      	lsls	r4, r2, #2
 8005a70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a74:	008b      	lsls	r3, r1, #2
 8005a76:	461a      	mov	r2, r3
 8005a78:	4623      	mov	r3, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	f7fa fc17 	bl	80002b0 <__aeabi_uldivmod>
 8005a82:	4603      	mov	r3, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	461a      	mov	r2, r3
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2164      	movs	r1, #100	; 0x64
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	3332      	adds	r3, #50	; 0x32
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4442      	add	r2, r8
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	e7ff      	b.n	8005ab2 <UART_SetConfig+0x6e2>
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	40011400 	.word	0x40011400
 8005ac4:	51eb851f 	.word	0x51eb851f

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	; (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000013c 	.word	0x2000013c

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4e0d      	ldr	r6, [pc, #52]	; (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	; (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1ba4      	subs	r4, r4, r6
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2500      	movs	r5, #0
 8005ae0:	42a5      	cmp	r5, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4e0b      	ldr	r6, [pc, #44]	; (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f001 f95e 	bl	8006da8 <_init>
 8005aec:	1ba4      	subs	r4, r4, r6
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2500      	movs	r5, #0
 8005af2:	42a5      	cmp	r5, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005afc:	4798      	blx	r3
 8005afe:	3501      	adds	r5, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b06:	4798      	blx	r3
 8005b08:	3501      	adds	r5, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	0800753c 	.word	0x0800753c
 8005b10:	0800753c 	.word	0x0800753c
 8005b14:	0800753c 	.word	0x0800753c
 8005b18:	08007540 	.word	0x08007540

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <iprintf>:
 8005b2c:	b40f      	push	{r0, r1, r2, r3}
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <iprintf+0x2c>)
 8005b30:	b513      	push	{r0, r1, r4, lr}
 8005b32:	681c      	ldr	r4, [r3, #0]
 8005b34:	b124      	cbz	r4, 8005b40 <iprintf+0x14>
 8005b36:	69a3      	ldr	r3, [r4, #24]
 8005b38:	b913      	cbnz	r3, 8005b40 <iprintf+0x14>
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fa74 	bl	8006028 <__sinit>
 8005b40:	ab05      	add	r3, sp, #20
 8005b42:	9a04      	ldr	r2, [sp, #16]
 8005b44:	68a1      	ldr	r1, [r4, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fd7f 	bl	800664c <_vfiprintf_r>
 8005b4e:	b002      	add	sp, #8
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	2000013c 	.word	0x2000013c

08005b5c <_puts_r>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	4605      	mov	r5, r0
 8005b62:	b118      	cbz	r0, 8005b6c <_puts_r+0x10>
 8005b64:	6983      	ldr	r3, [r0, #24]
 8005b66:	b90b      	cbnz	r3, 8005b6c <_puts_r+0x10>
 8005b68:	f000 fa5e 	bl	8006028 <__sinit>
 8005b6c:	69ab      	ldr	r3, [r5, #24]
 8005b6e:	68ac      	ldr	r4, [r5, #8]
 8005b70:	b913      	cbnz	r3, 8005b78 <_puts_r+0x1c>
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 fa58 	bl	8006028 <__sinit>
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <_puts_r+0xac>)
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	d117      	bne.n	8005bae <_puts_r+0x52>
 8005b7e:	686c      	ldr	r4, [r5, #4]
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	071b      	lsls	r3, r3, #28
 8005b84:	d51d      	bpl.n	8005bc2 <_puts_r+0x66>
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	b1db      	cbz	r3, 8005bc2 <_puts_r+0x66>
 8005b8a:	3e01      	subs	r6, #1
 8005b8c:	68a3      	ldr	r3, [r4, #8]
 8005b8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b92:	3b01      	subs	r3, #1
 8005b94:	60a3      	str	r3, [r4, #8]
 8005b96:	b9e9      	cbnz	r1, 8005bd4 <_puts_r+0x78>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da2e      	bge.n	8005bfa <_puts_r+0x9e>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	210a      	movs	r1, #10
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f891 	bl	8005cc8 <__swbuf_r>
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d011      	beq.n	8005bce <_puts_r+0x72>
 8005baa:	200a      	movs	r0, #10
 8005bac:	e011      	b.n	8005bd2 <_puts_r+0x76>
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <_puts_r+0xb0>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d101      	bne.n	8005bb8 <_puts_r+0x5c>
 8005bb4:	68ac      	ldr	r4, [r5, #8]
 8005bb6:	e7e3      	b.n	8005b80 <_puts_r+0x24>
 8005bb8:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <_puts_r+0xb4>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	bf08      	it	eq
 8005bbe:	68ec      	ldreq	r4, [r5, #12]
 8005bc0:	e7de      	b.n	8005b80 <_puts_r+0x24>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f8d1 	bl	8005d6c <__swsetup_r>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d0dd      	beq.n	8005b8a <_puts_r+0x2e>
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da04      	bge.n	8005be2 <_puts_r+0x86>
 8005bd8:	69a2      	ldr	r2, [r4, #24]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	dc06      	bgt.n	8005bec <_puts_r+0x90>
 8005bde:	290a      	cmp	r1, #10
 8005be0:	d004      	beq.n	8005bec <_puts_r+0x90>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	6022      	str	r2, [r4, #0]
 8005be8:	7019      	strb	r1, [r3, #0]
 8005bea:	e7cf      	b.n	8005b8c <_puts_r+0x30>
 8005bec:	4622      	mov	r2, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f86a 	bl	8005cc8 <__swbuf_r>
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d1c9      	bne.n	8005b8c <_puts_r+0x30>
 8005bf8:	e7e9      	b.n	8005bce <_puts_r+0x72>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	200a      	movs	r0, #10
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	6022      	str	r2, [r4, #0]
 8005c02:	7018      	strb	r0, [r3, #0]
 8005c04:	e7e5      	b.n	8005bd2 <_puts_r+0x76>
 8005c06:	bf00      	nop
 8005c08:	080074c0 	.word	0x080074c0
 8005c0c:	080074e0 	.word	0x080074e0
 8005c10:	080074a0 	.word	0x080074a0

08005c14 <puts>:
 8005c14:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <puts+0xc>)
 8005c16:	4601      	mov	r1, r0
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	f7ff bf9f 	b.w	8005b5c <_puts_r>
 8005c1e:	bf00      	nop
 8005c20:	2000013c 	.word	0x2000013c

08005c24 <siprintf>:
 8005c24:	b40e      	push	{r1, r2, r3}
 8005c26:	b500      	push	{lr}
 8005c28:	b09c      	sub	sp, #112	; 0x70
 8005c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c2c:	9002      	str	r0, [sp, #8]
 8005c2e:	9006      	str	r0, [sp, #24]
 8005c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c34:	4809      	ldr	r0, [pc, #36]	; (8005c5c <siprintf+0x38>)
 8005c36:	9107      	str	r1, [sp, #28]
 8005c38:	9104      	str	r1, [sp, #16]
 8005c3a:	4909      	ldr	r1, [pc, #36]	; (8005c60 <siprintf+0x3c>)
 8005c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c40:	9105      	str	r1, [sp, #20]
 8005c42:	6800      	ldr	r0, [r0, #0]
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	a902      	add	r1, sp, #8
 8005c48:	f000 fbde 	bl	8006408 <_svfiprintf_r>
 8005c4c:	9b02      	ldr	r3, [sp, #8]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	b01c      	add	sp, #112	; 0x70
 8005c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c58:	b003      	add	sp, #12
 8005c5a:	4770      	bx	lr
 8005c5c:	2000013c 	.word	0x2000013c
 8005c60:	ffff0208 	.word	0xffff0208

08005c64 <strcat>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	4603      	mov	r3, r0
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	1c5c      	adds	r4, r3, #1
 8005c6c:	b93a      	cbnz	r2, 8005c7e <strcat+0x1a>
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	d1f9      	bne.n	8005c70 <strcat+0xc>
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	4623      	mov	r3, r4
 8005c80:	e7f2      	b.n	8005c68 <strcat+0x4>

08005c82 <strcpy>:
 8005c82:	4603      	mov	r3, r0
 8005c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c88:	f803 2b01 	strb.w	r2, [r3], #1
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d1f9      	bne.n	8005c84 <strcpy+0x2>
 8005c90:	4770      	bx	lr

08005c92 <strstr>:
 8005c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c94:	7803      	ldrb	r3, [r0, #0]
 8005c96:	b17b      	cbz	r3, 8005cb8 <strstr+0x26>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	7823      	ldrb	r3, [r4, #0]
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	1c66      	adds	r6, r4, #1
 8005ca0:	b17b      	cbz	r3, 8005cc2 <strstr+0x30>
 8005ca2:	1e4a      	subs	r2, r1, #1
 8005ca4:	1e63      	subs	r3, r4, #1
 8005ca6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005caa:	b14d      	cbz	r5, 8005cc0 <strstr+0x2e>
 8005cac:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005cb0:	42af      	cmp	r7, r5
 8005cb2:	4634      	mov	r4, r6
 8005cb4:	d0f7      	beq.n	8005ca6 <strstr+0x14>
 8005cb6:	e7f0      	b.n	8005c9a <strstr+0x8>
 8005cb8:	780b      	ldrb	r3, [r1, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bf18      	it	ne
 8005cbe:	2000      	movne	r0, #0
 8005cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	e7fc      	b.n	8005cc0 <strstr+0x2e>
	...

08005cc8 <__swbuf_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	4605      	mov	r5, r0
 8005cd0:	b118      	cbz	r0, 8005cda <__swbuf_r+0x12>
 8005cd2:	6983      	ldr	r3, [r0, #24]
 8005cd4:	b90b      	cbnz	r3, 8005cda <__swbuf_r+0x12>
 8005cd6:	f000 f9a7 	bl	8006028 <__sinit>
 8005cda:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <__swbuf_r+0x98>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d12a      	bne.n	8005d36 <__swbuf_r+0x6e>
 8005ce0:	686c      	ldr	r4, [r5, #4]
 8005ce2:	69a3      	ldr	r3, [r4, #24]
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	071a      	lsls	r2, r3, #28
 8005cea:	d52e      	bpl.n	8005d4a <__swbuf_r+0x82>
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	b363      	cbz	r3, 8005d4a <__swbuf_r+0x82>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	6820      	ldr	r0, [r4, #0]
 8005cf4:	1ac0      	subs	r0, r0, r3
 8005cf6:	6963      	ldr	r3, [r4, #20]
 8005cf8:	b2f6      	uxtb	r6, r6
 8005cfa:	4283      	cmp	r3, r0
 8005cfc:	4637      	mov	r7, r6
 8005cfe:	dc04      	bgt.n	8005d0a <__swbuf_r+0x42>
 8005d00:	4621      	mov	r1, r4
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 f926 	bl	8005f54 <_fflush_r>
 8005d08:	bb28      	cbnz	r0, 8005d56 <__swbuf_r+0x8e>
 8005d0a:	68a3      	ldr	r3, [r4, #8]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	60a3      	str	r3, [r4, #8]
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	6022      	str	r2, [r4, #0]
 8005d16:	701e      	strb	r6, [r3, #0]
 8005d18:	6963      	ldr	r3, [r4, #20]
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	4283      	cmp	r3, r0
 8005d1e:	d004      	beq.n	8005d2a <__swbuf_r+0x62>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	07db      	lsls	r3, r3, #31
 8005d24:	d519      	bpl.n	8005d5a <__swbuf_r+0x92>
 8005d26:	2e0a      	cmp	r6, #10
 8005d28:	d117      	bne.n	8005d5a <__swbuf_r+0x92>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f000 f911 	bl	8005f54 <_fflush_r>
 8005d32:	b190      	cbz	r0, 8005d5a <__swbuf_r+0x92>
 8005d34:	e00f      	b.n	8005d56 <__swbuf_r+0x8e>
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <__swbuf_r+0x9c>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d101      	bne.n	8005d40 <__swbuf_r+0x78>
 8005d3c:	68ac      	ldr	r4, [r5, #8]
 8005d3e:	e7d0      	b.n	8005ce2 <__swbuf_r+0x1a>
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <__swbuf_r+0xa0>)
 8005d42:	429c      	cmp	r4, r3
 8005d44:	bf08      	it	eq
 8005d46:	68ec      	ldreq	r4, [r5, #12]
 8005d48:	e7cb      	b.n	8005ce2 <__swbuf_r+0x1a>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 f80d 	bl	8005d6c <__swsetup_r>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d0cc      	beq.n	8005cf0 <__swbuf_r+0x28>
 8005d56:	f04f 37ff 	mov.w	r7, #4294967295
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	080074c0 	.word	0x080074c0
 8005d64:	080074e0 	.word	0x080074e0
 8005d68:	080074a0 	.word	0x080074a0

08005d6c <__swsetup_r>:
 8005d6c:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <__swsetup_r+0xcc>)
 8005d6e:	b570      	push	{r4, r5, r6, lr}
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	4606      	mov	r6, r0
 8005d74:	460c      	mov	r4, r1
 8005d76:	b125      	cbz	r5, 8005d82 <__swsetup_r+0x16>
 8005d78:	69ab      	ldr	r3, [r5, #24]
 8005d7a:	b913      	cbnz	r3, 8005d82 <__swsetup_r+0x16>
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f953 	bl	8006028 <__sinit>
 8005d82:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <__swsetup_r+0xd0>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	d10f      	bne.n	8005da8 <__swsetup_r+0x3c>
 8005d88:	686c      	ldr	r4, [r5, #4]
 8005d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	0715      	lsls	r5, r2, #28
 8005d92:	d42c      	bmi.n	8005dee <__swsetup_r+0x82>
 8005d94:	06d0      	lsls	r0, r2, #27
 8005d96:	d411      	bmi.n	8005dbc <__swsetup_r+0x50>
 8005d98:	2209      	movs	r2, #9
 8005d9a:	6032      	str	r2, [r6, #0]
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295
 8005da6:	e03e      	b.n	8005e26 <__swsetup_r+0xba>
 8005da8:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <__swsetup_r+0xd4>)
 8005daa:	429c      	cmp	r4, r3
 8005dac:	d101      	bne.n	8005db2 <__swsetup_r+0x46>
 8005dae:	68ac      	ldr	r4, [r5, #8]
 8005db0:	e7eb      	b.n	8005d8a <__swsetup_r+0x1e>
 8005db2:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <__swsetup_r+0xd8>)
 8005db4:	429c      	cmp	r4, r3
 8005db6:	bf08      	it	eq
 8005db8:	68ec      	ldreq	r4, [r5, #12]
 8005dba:	e7e6      	b.n	8005d8a <__swsetup_r+0x1e>
 8005dbc:	0751      	lsls	r1, r2, #29
 8005dbe:	d512      	bpl.n	8005de6 <__swsetup_r+0x7a>
 8005dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dc2:	b141      	cbz	r1, 8005dd6 <__swsetup_r+0x6a>
 8005dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	d002      	beq.n	8005dd2 <__swsetup_r+0x66>
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f000 fa19 	bl	8006204 <_free_r>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	2300      	movs	r3, #0
 8005de0:	6063      	str	r3, [r4, #4]
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	f043 0308 	orr.w	r3, r3, #8
 8005dec:	81a3      	strh	r3, [r4, #12]
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	b94b      	cbnz	r3, 8005e06 <__swsetup_r+0x9a>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfc:	d003      	beq.n	8005e06 <__swsetup_r+0x9a>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f9bf 	bl	8006184 <__smakebuf_r>
 8005e06:	89a2      	ldrh	r2, [r4, #12]
 8005e08:	f012 0301 	ands.w	r3, r2, #1
 8005e0c:	d00c      	beq.n	8005e28 <__swsetup_r+0xbc>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	6963      	ldr	r3, [r4, #20]
 8005e14:	425b      	negs	r3, r3
 8005e16:	61a3      	str	r3, [r4, #24]
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	b953      	cbnz	r3, 8005e32 <__swsetup_r+0xc6>
 8005e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005e24:	d1ba      	bne.n	8005d9c <__swsetup_r+0x30>
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	0792      	lsls	r2, r2, #30
 8005e2a:	bf58      	it	pl
 8005e2c:	6963      	ldrpl	r3, [r4, #20]
 8005e2e:	60a3      	str	r3, [r4, #8]
 8005e30:	e7f2      	b.n	8005e18 <__swsetup_r+0xac>
 8005e32:	2000      	movs	r0, #0
 8005e34:	e7f7      	b.n	8005e26 <__swsetup_r+0xba>
 8005e36:	bf00      	nop
 8005e38:	2000013c 	.word	0x2000013c
 8005e3c:	080074c0 	.word	0x080074c0
 8005e40:	080074e0 	.word	0x080074e0
 8005e44:	080074a0 	.word	0x080074a0

08005e48 <__sflush_r>:
 8005e48:	898a      	ldrh	r2, [r1, #12]
 8005e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4e:	4605      	mov	r5, r0
 8005e50:	0710      	lsls	r0, r2, #28
 8005e52:	460c      	mov	r4, r1
 8005e54:	d458      	bmi.n	8005f08 <__sflush_r+0xc0>
 8005e56:	684b      	ldr	r3, [r1, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dc05      	bgt.n	8005e68 <__sflush_r+0x20>
 8005e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	dc02      	bgt.n	8005e68 <__sflush_r+0x20>
 8005e62:	2000      	movs	r0, #0
 8005e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	d0f9      	beq.n	8005e62 <__sflush_r+0x1a>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e74:	682f      	ldr	r7, [r5, #0]
 8005e76:	6a21      	ldr	r1, [r4, #32]
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	d032      	beq.n	8005ee2 <__sflush_r+0x9a>
 8005e7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	075a      	lsls	r2, r3, #29
 8005e82:	d505      	bpl.n	8005e90 <__sflush_r+0x48>
 8005e84:	6863      	ldr	r3, [r4, #4]
 8005e86:	1ac0      	subs	r0, r0, r3
 8005e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e8a:	b10b      	cbz	r3, 8005e90 <__sflush_r+0x48>
 8005e8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e8e:	1ac0      	subs	r0, r0, r3
 8005e90:	2300      	movs	r3, #0
 8005e92:	4602      	mov	r2, r0
 8005e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e96:	6a21      	ldr	r1, [r4, #32]
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b0      	blx	r6
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	d106      	bne.n	8005eb0 <__sflush_r+0x68>
 8005ea2:	6829      	ldr	r1, [r5, #0]
 8005ea4:	291d      	cmp	r1, #29
 8005ea6:	d848      	bhi.n	8005f3a <__sflush_r+0xf2>
 8005ea8:	4a29      	ldr	r2, [pc, #164]	; (8005f50 <__sflush_r+0x108>)
 8005eaa:	40ca      	lsrs	r2, r1
 8005eac:	07d6      	lsls	r6, r2, #31
 8005eae:	d544      	bpl.n	8005f3a <__sflush_r+0xf2>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	6062      	str	r2, [r4, #4]
 8005eb4:	04d9      	lsls	r1, r3, #19
 8005eb6:	6922      	ldr	r2, [r4, #16]
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	d504      	bpl.n	8005ec6 <__sflush_r+0x7e>
 8005ebc:	1c42      	adds	r2, r0, #1
 8005ebe:	d101      	bne.n	8005ec4 <__sflush_r+0x7c>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b903      	cbnz	r3, 8005ec6 <__sflush_r+0x7e>
 8005ec4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ec8:	602f      	str	r7, [r5, #0]
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	d0c9      	beq.n	8005e62 <__sflush_r+0x1a>
 8005ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	d002      	beq.n	8005edc <__sflush_r+0x94>
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f994 	bl	8006204 <_free_r>
 8005edc:	2000      	movs	r0, #0
 8005ede:	6360      	str	r0, [r4, #52]	; 0x34
 8005ee0:	e7c0      	b.n	8005e64 <__sflush_r+0x1c>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b0      	blx	r6
 8005ee8:	1c41      	adds	r1, r0, #1
 8005eea:	d1c8      	bne.n	8005e7e <__sflush_r+0x36>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0c5      	beq.n	8005e7e <__sflush_r+0x36>
 8005ef2:	2b1d      	cmp	r3, #29
 8005ef4:	d001      	beq.n	8005efa <__sflush_r+0xb2>
 8005ef6:	2b16      	cmp	r3, #22
 8005ef8:	d101      	bne.n	8005efe <__sflush_r+0xb6>
 8005efa:	602f      	str	r7, [r5, #0]
 8005efc:	e7b1      	b.n	8005e62 <__sflush_r+0x1a>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	e7ad      	b.n	8005e64 <__sflush_r+0x1c>
 8005f08:	690f      	ldr	r7, [r1, #16]
 8005f0a:	2f00      	cmp	r7, #0
 8005f0c:	d0a9      	beq.n	8005e62 <__sflush_r+0x1a>
 8005f0e:	0793      	lsls	r3, r2, #30
 8005f10:	680e      	ldr	r6, [r1, #0]
 8005f12:	bf08      	it	eq
 8005f14:	694b      	ldreq	r3, [r1, #20]
 8005f16:	600f      	str	r7, [r1, #0]
 8005f18:	bf18      	it	ne
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	eba6 0807 	sub.w	r8, r6, r7
 8005f20:	608b      	str	r3, [r1, #8]
 8005f22:	f1b8 0f00 	cmp.w	r8, #0
 8005f26:	dd9c      	ble.n	8005e62 <__sflush_r+0x1a>
 8005f28:	4643      	mov	r3, r8
 8005f2a:	463a      	mov	r2, r7
 8005f2c:	6a21      	ldr	r1, [r4, #32]
 8005f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b0      	blx	r6
 8005f34:	2800      	cmp	r0, #0
 8005f36:	dc06      	bgt.n	8005f46 <__sflush_r+0xfe>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e78e      	b.n	8005e64 <__sflush_r+0x1c>
 8005f46:	4407      	add	r7, r0
 8005f48:	eba8 0800 	sub.w	r8, r8, r0
 8005f4c:	e7e9      	b.n	8005f22 <__sflush_r+0xda>
 8005f4e:	bf00      	nop
 8005f50:	20400001 	.word	0x20400001

08005f54 <_fflush_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	4605      	mov	r5, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b1db      	cbz	r3, 8005f96 <_fflush_r+0x42>
 8005f5e:	b118      	cbz	r0, 8005f68 <_fflush_r+0x14>
 8005f60:	6983      	ldr	r3, [r0, #24]
 8005f62:	b90b      	cbnz	r3, 8005f68 <_fflush_r+0x14>
 8005f64:	f000 f860 	bl	8006028 <__sinit>
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <_fflush_r+0x48>)
 8005f6a:	429c      	cmp	r4, r3
 8005f6c:	d109      	bne.n	8005f82 <_fflush_r+0x2e>
 8005f6e:	686c      	ldr	r4, [r5, #4]
 8005f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f74:	b17b      	cbz	r3, 8005f96 <_fflush_r+0x42>
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f7e:	f7ff bf63 	b.w	8005e48 <__sflush_r>
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <_fflush_r+0x4c>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d101      	bne.n	8005f8c <_fflush_r+0x38>
 8005f88:	68ac      	ldr	r4, [r5, #8]
 8005f8a:	e7f1      	b.n	8005f70 <_fflush_r+0x1c>
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <_fflush_r+0x50>)
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	bf08      	it	eq
 8005f92:	68ec      	ldreq	r4, [r5, #12]
 8005f94:	e7ec      	b.n	8005f70 <_fflush_r+0x1c>
 8005f96:	2000      	movs	r0, #0
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
 8005f9a:	bf00      	nop
 8005f9c:	080074c0 	.word	0x080074c0
 8005fa0:	080074e0 	.word	0x080074e0
 8005fa4:	080074a0 	.word	0x080074a0

08005fa8 <std>:
 8005fa8:	2300      	movs	r3, #0
 8005faa:	b510      	push	{r4, lr}
 8005fac:	4604      	mov	r4, r0
 8005fae:	e9c0 3300 	strd	r3, r3, [r0]
 8005fb2:	6083      	str	r3, [r0, #8]
 8005fb4:	8181      	strh	r1, [r0, #12]
 8005fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8005fb8:	81c2      	strh	r2, [r0, #14]
 8005fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fbe:	6183      	str	r3, [r0, #24]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	305c      	adds	r0, #92	; 0x5c
 8005fc6:	f7ff fda9 	bl	8005b1c <memset>
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <std+0x38>)
 8005fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <std+0x3c>)
 8005fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <std+0x40>)
 8005fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <std+0x44>)
 8005fd8:	6224      	str	r4, [r4, #32]
 8005fda:	6323      	str	r3, [r4, #48]	; 0x30
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	08006ba9 	.word	0x08006ba9
 8005fe4:	08006bcb 	.word	0x08006bcb
 8005fe8:	08006c03 	.word	0x08006c03
 8005fec:	08006c27 	.word	0x08006c27

08005ff0 <_cleanup_r>:
 8005ff0:	4901      	ldr	r1, [pc, #4]	; (8005ff8 <_cleanup_r+0x8>)
 8005ff2:	f000 b885 	b.w	8006100 <_fwalk_reent>
 8005ff6:	bf00      	nop
 8005ff8:	08005f55 	.word	0x08005f55

08005ffc <__sfmoreglue>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	1e4a      	subs	r2, r1, #1
 8006000:	2568      	movs	r5, #104	; 0x68
 8006002:	4355      	muls	r5, r2
 8006004:	460e      	mov	r6, r1
 8006006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800600a:	f000 f949 	bl	80062a0 <_malloc_r>
 800600e:	4604      	mov	r4, r0
 8006010:	b140      	cbz	r0, 8006024 <__sfmoreglue+0x28>
 8006012:	2100      	movs	r1, #0
 8006014:	e9c0 1600 	strd	r1, r6, [r0]
 8006018:	300c      	adds	r0, #12
 800601a:	60a0      	str	r0, [r4, #8]
 800601c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006020:	f7ff fd7c 	bl	8005b1c <memset>
 8006024:	4620      	mov	r0, r4
 8006026:	bd70      	pop	{r4, r5, r6, pc}

08006028 <__sinit>:
 8006028:	6983      	ldr	r3, [r0, #24]
 800602a:	b510      	push	{r4, lr}
 800602c:	4604      	mov	r4, r0
 800602e:	bb33      	cbnz	r3, 800607e <__sinit+0x56>
 8006030:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006034:	6503      	str	r3, [r0, #80]	; 0x50
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <__sinit+0x58>)
 8006038:	4a12      	ldr	r2, [pc, #72]	; (8006084 <__sinit+0x5c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6282      	str	r2, [r0, #40]	; 0x28
 800603e:	4298      	cmp	r0, r3
 8006040:	bf04      	itt	eq
 8006042:	2301      	moveq	r3, #1
 8006044:	6183      	streq	r3, [r0, #24]
 8006046:	f000 f81f 	bl	8006088 <__sfp>
 800604a:	6060      	str	r0, [r4, #4]
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f81b 	bl	8006088 <__sfp>
 8006052:	60a0      	str	r0, [r4, #8]
 8006054:	4620      	mov	r0, r4
 8006056:	f000 f817 	bl	8006088 <__sfp>
 800605a:	2200      	movs	r2, #0
 800605c:	60e0      	str	r0, [r4, #12]
 800605e:	2104      	movs	r1, #4
 8006060:	6860      	ldr	r0, [r4, #4]
 8006062:	f7ff ffa1 	bl	8005fa8 <std>
 8006066:	2201      	movs	r2, #1
 8006068:	2109      	movs	r1, #9
 800606a:	68a0      	ldr	r0, [r4, #8]
 800606c:	f7ff ff9c 	bl	8005fa8 <std>
 8006070:	2202      	movs	r2, #2
 8006072:	2112      	movs	r1, #18
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	f7ff ff97 	bl	8005fa8 <std>
 800607a:	2301      	movs	r3, #1
 800607c:	61a3      	str	r3, [r4, #24]
 800607e:	bd10      	pop	{r4, pc}
 8006080:	0800749c 	.word	0x0800749c
 8006084:	08005ff1 	.word	0x08005ff1

08006088 <__sfp>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <__sfp+0x70>)
 800608c:	681e      	ldr	r6, [r3, #0]
 800608e:	69b3      	ldr	r3, [r6, #24]
 8006090:	4607      	mov	r7, r0
 8006092:	b913      	cbnz	r3, 800609a <__sfp+0x12>
 8006094:	4630      	mov	r0, r6
 8006096:	f7ff ffc7 	bl	8006028 <__sinit>
 800609a:	3648      	adds	r6, #72	; 0x48
 800609c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	d503      	bpl.n	80060ac <__sfp+0x24>
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	b133      	cbz	r3, 80060b6 <__sfp+0x2e>
 80060a8:	6836      	ldr	r6, [r6, #0]
 80060aa:	e7f7      	b.n	800609c <__sfp+0x14>
 80060ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060b0:	b16d      	cbz	r5, 80060ce <__sfp+0x46>
 80060b2:	3468      	adds	r4, #104	; 0x68
 80060b4:	e7f4      	b.n	80060a0 <__sfp+0x18>
 80060b6:	2104      	movs	r1, #4
 80060b8:	4638      	mov	r0, r7
 80060ba:	f7ff ff9f 	bl	8005ffc <__sfmoreglue>
 80060be:	6030      	str	r0, [r6, #0]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d1f1      	bne.n	80060a8 <__sfp+0x20>
 80060c4:	230c      	movs	r3, #12
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4604      	mov	r4, r0
 80060ca:	4620      	mov	r0, r4
 80060cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ce:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <__sfp+0x74>)
 80060d0:	6665      	str	r5, [r4, #100]	; 0x64
 80060d2:	e9c4 5500 	strd	r5, r5, [r4]
 80060d6:	60a5      	str	r5, [r4, #8]
 80060d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80060dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80060e0:	2208      	movs	r2, #8
 80060e2:	4629      	mov	r1, r5
 80060e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060e8:	f7ff fd18 	bl	8005b1c <memset>
 80060ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060f4:	e7e9      	b.n	80060ca <__sfp+0x42>
 80060f6:	bf00      	nop
 80060f8:	0800749c 	.word	0x0800749c
 80060fc:	ffff0001 	.word	0xffff0001

08006100 <_fwalk_reent>:
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4680      	mov	r8, r0
 8006106:	4689      	mov	r9, r1
 8006108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800610c:	2600      	movs	r6, #0
 800610e:	b914      	cbnz	r4, 8006116 <_fwalk_reent+0x16>
 8006110:	4630      	mov	r0, r6
 8006112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006116:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800611a:	3f01      	subs	r7, #1
 800611c:	d501      	bpl.n	8006122 <_fwalk_reent+0x22>
 800611e:	6824      	ldr	r4, [r4, #0]
 8006120:	e7f5      	b.n	800610e <_fwalk_reent+0xe>
 8006122:	89ab      	ldrh	r3, [r5, #12]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d907      	bls.n	8006138 <_fwalk_reent+0x38>
 8006128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800612c:	3301      	adds	r3, #1
 800612e:	d003      	beq.n	8006138 <_fwalk_reent+0x38>
 8006130:	4629      	mov	r1, r5
 8006132:	4640      	mov	r0, r8
 8006134:	47c8      	blx	r9
 8006136:	4306      	orrs	r6, r0
 8006138:	3568      	adds	r5, #104	; 0x68
 800613a:	e7ee      	b.n	800611a <_fwalk_reent+0x1a>

0800613c <__swhatbuf_r>:
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	460e      	mov	r6, r1
 8006140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006144:	2900      	cmp	r1, #0
 8006146:	b096      	sub	sp, #88	; 0x58
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	da07      	bge.n	800615e <__swhatbuf_r+0x22>
 800614e:	2300      	movs	r3, #0
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	89b3      	ldrh	r3, [r6, #12]
 8006154:	061a      	lsls	r2, r3, #24
 8006156:	d410      	bmi.n	800617a <__swhatbuf_r+0x3e>
 8006158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615c:	e00e      	b.n	800617c <__swhatbuf_r+0x40>
 800615e:	466a      	mov	r2, sp
 8006160:	f000 fd88 	bl	8006c74 <_fstat_r>
 8006164:	2800      	cmp	r0, #0
 8006166:	dbf2      	blt.n	800614e <__swhatbuf_r+0x12>
 8006168:	9a01      	ldr	r2, [sp, #4]
 800616a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800616e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006172:	425a      	negs	r2, r3
 8006174:	415a      	adcs	r2, r3
 8006176:	602a      	str	r2, [r5, #0]
 8006178:	e7ee      	b.n	8006158 <__swhatbuf_r+0x1c>
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	2000      	movs	r0, #0
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	b016      	add	sp, #88	; 0x58
 8006182:	bd70      	pop	{r4, r5, r6, pc}

08006184 <__smakebuf_r>:
 8006184:	898b      	ldrh	r3, [r1, #12]
 8006186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006188:	079d      	lsls	r5, r3, #30
 800618a:	4606      	mov	r6, r0
 800618c:	460c      	mov	r4, r1
 800618e:	d507      	bpl.n	80061a0 <__smakebuf_r+0x1c>
 8006190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	6123      	str	r3, [r4, #16]
 8006198:	2301      	movs	r3, #1
 800619a:	6163      	str	r3, [r4, #20]
 800619c:	b002      	add	sp, #8
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	ab01      	add	r3, sp, #4
 80061a2:	466a      	mov	r2, sp
 80061a4:	f7ff ffca 	bl	800613c <__swhatbuf_r>
 80061a8:	9900      	ldr	r1, [sp, #0]
 80061aa:	4605      	mov	r5, r0
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 f877 	bl	80062a0 <_malloc_r>
 80061b2:	b948      	cbnz	r0, 80061c8 <__smakebuf_r+0x44>
 80061b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b8:	059a      	lsls	r2, r3, #22
 80061ba:	d4ef      	bmi.n	800619c <__smakebuf_r+0x18>
 80061bc:	f023 0303 	bic.w	r3, r3, #3
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	81a3      	strh	r3, [r4, #12]
 80061c6:	e7e3      	b.n	8006190 <__smakebuf_r+0xc>
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <__smakebuf_r+0x7c>)
 80061ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	6020      	str	r0, [r4, #0]
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	9b00      	ldr	r3, [sp, #0]
 80061d8:	6163      	str	r3, [r4, #20]
 80061da:	9b01      	ldr	r3, [sp, #4]
 80061dc:	6120      	str	r0, [r4, #16]
 80061de:	b15b      	cbz	r3, 80061f8 <__smakebuf_r+0x74>
 80061e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e4:	4630      	mov	r0, r6
 80061e6:	f000 fd57 	bl	8006c98 <_isatty_r>
 80061ea:	b128      	cbz	r0, 80061f8 <__smakebuf_r+0x74>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	f023 0303 	bic.w	r3, r3, #3
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	81a3      	strh	r3, [r4, #12]
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	431d      	orrs	r5, r3
 80061fc:	81a5      	strh	r5, [r4, #12]
 80061fe:	e7cd      	b.n	800619c <__smakebuf_r+0x18>
 8006200:	08005ff1 	.word	0x08005ff1

08006204 <_free_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4605      	mov	r5, r0
 8006208:	2900      	cmp	r1, #0
 800620a:	d045      	beq.n	8006298 <_free_r+0x94>
 800620c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006210:	1f0c      	subs	r4, r1, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	bfb8      	it	lt
 8006216:	18e4      	addlt	r4, r4, r3
 8006218:	f000 fd84 	bl	8006d24 <__malloc_lock>
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <_free_r+0x98>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	4610      	mov	r0, r2
 8006222:	b933      	cbnz	r3, 8006232 <_free_r+0x2e>
 8006224:	6063      	str	r3, [r4, #4]
 8006226:	6014      	str	r4, [r2, #0]
 8006228:	4628      	mov	r0, r5
 800622a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800622e:	f000 bd7a 	b.w	8006d26 <__malloc_unlock>
 8006232:	42a3      	cmp	r3, r4
 8006234:	d90c      	bls.n	8006250 <_free_r+0x4c>
 8006236:	6821      	ldr	r1, [r4, #0]
 8006238:	1862      	adds	r2, r4, r1
 800623a:	4293      	cmp	r3, r2
 800623c:	bf04      	itt	eq
 800623e:	681a      	ldreq	r2, [r3, #0]
 8006240:	685b      	ldreq	r3, [r3, #4]
 8006242:	6063      	str	r3, [r4, #4]
 8006244:	bf04      	itt	eq
 8006246:	1852      	addeq	r2, r2, r1
 8006248:	6022      	streq	r2, [r4, #0]
 800624a:	6004      	str	r4, [r0, #0]
 800624c:	e7ec      	b.n	8006228 <_free_r+0x24>
 800624e:	4613      	mov	r3, r2
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	b10a      	cbz	r2, 8006258 <_free_r+0x54>
 8006254:	42a2      	cmp	r2, r4
 8006256:	d9fa      	bls.n	800624e <_free_r+0x4a>
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	1858      	adds	r0, r3, r1
 800625c:	42a0      	cmp	r0, r4
 800625e:	d10b      	bne.n	8006278 <_free_r+0x74>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	4401      	add	r1, r0
 8006264:	1858      	adds	r0, r3, r1
 8006266:	4282      	cmp	r2, r0
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	d1dd      	bne.n	8006228 <_free_r+0x24>
 800626c:	6810      	ldr	r0, [r2, #0]
 800626e:	6852      	ldr	r2, [r2, #4]
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	4401      	add	r1, r0
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	e7d7      	b.n	8006228 <_free_r+0x24>
 8006278:	d902      	bls.n	8006280 <_free_r+0x7c>
 800627a:	230c      	movs	r3, #12
 800627c:	602b      	str	r3, [r5, #0]
 800627e:	e7d3      	b.n	8006228 <_free_r+0x24>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	1821      	adds	r1, r4, r0
 8006284:	428a      	cmp	r2, r1
 8006286:	bf04      	itt	eq
 8006288:	6811      	ldreq	r1, [r2, #0]
 800628a:	6852      	ldreq	r2, [r2, #4]
 800628c:	6062      	str	r2, [r4, #4]
 800628e:	bf04      	itt	eq
 8006290:	1809      	addeq	r1, r1, r0
 8006292:	6021      	streq	r1, [r4, #0]
 8006294:	605c      	str	r4, [r3, #4]
 8006296:	e7c7      	b.n	8006228 <_free_r+0x24>
 8006298:	bd38      	pop	{r3, r4, r5, pc}
 800629a:	bf00      	nop
 800629c:	200005cc 	.word	0x200005cc

080062a0 <_malloc_r>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	1ccd      	adds	r5, r1, #3
 80062a4:	f025 0503 	bic.w	r5, r5, #3
 80062a8:	3508      	adds	r5, #8
 80062aa:	2d0c      	cmp	r5, #12
 80062ac:	bf38      	it	cc
 80062ae:	250c      	movcc	r5, #12
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	4606      	mov	r6, r0
 80062b4:	db01      	blt.n	80062ba <_malloc_r+0x1a>
 80062b6:	42a9      	cmp	r1, r5
 80062b8:	d903      	bls.n	80062c2 <_malloc_r+0x22>
 80062ba:	230c      	movs	r3, #12
 80062bc:	6033      	str	r3, [r6, #0]
 80062be:	2000      	movs	r0, #0
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	f000 fd2f 	bl	8006d24 <__malloc_lock>
 80062c6:	4a21      	ldr	r2, [pc, #132]	; (800634c <_malloc_r+0xac>)
 80062c8:	6814      	ldr	r4, [r2, #0]
 80062ca:	4621      	mov	r1, r4
 80062cc:	b991      	cbnz	r1, 80062f4 <_malloc_r+0x54>
 80062ce:	4c20      	ldr	r4, [pc, #128]	; (8006350 <_malloc_r+0xb0>)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	b91b      	cbnz	r3, 80062dc <_malloc_r+0x3c>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f000 fc57 	bl	8006b88 <_sbrk_r>
 80062da:	6020      	str	r0, [r4, #0]
 80062dc:	4629      	mov	r1, r5
 80062de:	4630      	mov	r0, r6
 80062e0:	f000 fc52 	bl	8006b88 <_sbrk_r>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d124      	bne.n	8006332 <_malloc_r+0x92>
 80062e8:	230c      	movs	r3, #12
 80062ea:	6033      	str	r3, [r6, #0]
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 fd1a 	bl	8006d26 <__malloc_unlock>
 80062f2:	e7e4      	b.n	80062be <_malloc_r+0x1e>
 80062f4:	680b      	ldr	r3, [r1, #0]
 80062f6:	1b5b      	subs	r3, r3, r5
 80062f8:	d418      	bmi.n	800632c <_malloc_r+0x8c>
 80062fa:	2b0b      	cmp	r3, #11
 80062fc:	d90f      	bls.n	800631e <_malloc_r+0x7e>
 80062fe:	600b      	str	r3, [r1, #0]
 8006300:	50cd      	str	r5, [r1, r3]
 8006302:	18cc      	adds	r4, r1, r3
 8006304:	4630      	mov	r0, r6
 8006306:	f000 fd0e 	bl	8006d26 <__malloc_unlock>
 800630a:	f104 000b 	add.w	r0, r4, #11
 800630e:	1d23      	adds	r3, r4, #4
 8006310:	f020 0007 	bic.w	r0, r0, #7
 8006314:	1ac3      	subs	r3, r0, r3
 8006316:	d0d3      	beq.n	80062c0 <_malloc_r+0x20>
 8006318:	425a      	negs	r2, r3
 800631a:	50e2      	str	r2, [r4, r3]
 800631c:	e7d0      	b.n	80062c0 <_malloc_r+0x20>
 800631e:	428c      	cmp	r4, r1
 8006320:	684b      	ldr	r3, [r1, #4]
 8006322:	bf16      	itet	ne
 8006324:	6063      	strne	r3, [r4, #4]
 8006326:	6013      	streq	r3, [r2, #0]
 8006328:	460c      	movne	r4, r1
 800632a:	e7eb      	b.n	8006304 <_malloc_r+0x64>
 800632c:	460c      	mov	r4, r1
 800632e:	6849      	ldr	r1, [r1, #4]
 8006330:	e7cc      	b.n	80062cc <_malloc_r+0x2c>
 8006332:	1cc4      	adds	r4, r0, #3
 8006334:	f024 0403 	bic.w	r4, r4, #3
 8006338:	42a0      	cmp	r0, r4
 800633a:	d005      	beq.n	8006348 <_malloc_r+0xa8>
 800633c:	1a21      	subs	r1, r4, r0
 800633e:	4630      	mov	r0, r6
 8006340:	f000 fc22 	bl	8006b88 <_sbrk_r>
 8006344:	3001      	adds	r0, #1
 8006346:	d0cf      	beq.n	80062e8 <_malloc_r+0x48>
 8006348:	6025      	str	r5, [r4, #0]
 800634a:	e7db      	b.n	8006304 <_malloc_r+0x64>
 800634c:	200005cc 	.word	0x200005cc
 8006350:	200005d0 	.word	0x200005d0

08006354 <__ssputs_r>:
 8006354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	688e      	ldr	r6, [r1, #8]
 800635a:	429e      	cmp	r6, r3
 800635c:	4682      	mov	sl, r0
 800635e:	460c      	mov	r4, r1
 8006360:	4690      	mov	r8, r2
 8006362:	4699      	mov	r9, r3
 8006364:	d837      	bhi.n	80063d6 <__ssputs_r+0x82>
 8006366:	898a      	ldrh	r2, [r1, #12]
 8006368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800636c:	d031      	beq.n	80063d2 <__ssputs_r+0x7e>
 800636e:	6825      	ldr	r5, [r4, #0]
 8006370:	6909      	ldr	r1, [r1, #16]
 8006372:	1a6f      	subs	r7, r5, r1
 8006374:	6965      	ldr	r5, [r4, #20]
 8006376:	2302      	movs	r3, #2
 8006378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800637c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006380:	f109 0301 	add.w	r3, r9, #1
 8006384:	443b      	add	r3, r7
 8006386:	429d      	cmp	r5, r3
 8006388:	bf38      	it	cc
 800638a:	461d      	movcc	r5, r3
 800638c:	0553      	lsls	r3, r2, #21
 800638e:	d530      	bpl.n	80063f2 <__ssputs_r+0x9e>
 8006390:	4629      	mov	r1, r5
 8006392:	f7ff ff85 	bl	80062a0 <_malloc_r>
 8006396:	4606      	mov	r6, r0
 8006398:	b950      	cbnz	r0, 80063b0 <__ssputs_r+0x5c>
 800639a:	230c      	movs	r3, #12
 800639c:	f8ca 3000 	str.w	r3, [sl]
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	463a      	mov	r2, r7
 80063b2:	6921      	ldr	r1, [r4, #16]
 80063b4:	f000 fc92 	bl	8006cdc <memcpy>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	6126      	str	r6, [r4, #16]
 80063c6:	6165      	str	r5, [r4, #20]
 80063c8:	443e      	add	r6, r7
 80063ca:	1bed      	subs	r5, r5, r7
 80063cc:	6026      	str	r6, [r4, #0]
 80063ce:	60a5      	str	r5, [r4, #8]
 80063d0:	464e      	mov	r6, r9
 80063d2:	454e      	cmp	r6, r9
 80063d4:	d900      	bls.n	80063d8 <__ssputs_r+0x84>
 80063d6:	464e      	mov	r6, r9
 80063d8:	4632      	mov	r2, r6
 80063da:	4641      	mov	r1, r8
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	f000 fc88 	bl	8006cf2 <memmove>
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	1b9b      	subs	r3, r3, r6
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	441e      	add	r6, r3
 80063ec:	6026      	str	r6, [r4, #0]
 80063ee:	2000      	movs	r0, #0
 80063f0:	e7dc      	b.n	80063ac <__ssputs_r+0x58>
 80063f2:	462a      	mov	r2, r5
 80063f4:	f000 fc98 	bl	8006d28 <_realloc_r>
 80063f8:	4606      	mov	r6, r0
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d1e2      	bne.n	80063c4 <__ssputs_r+0x70>
 80063fe:	6921      	ldr	r1, [r4, #16]
 8006400:	4650      	mov	r0, sl
 8006402:	f7ff feff 	bl	8006204 <_free_r>
 8006406:	e7c8      	b.n	800639a <__ssputs_r+0x46>

08006408 <_svfiprintf_r>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	461d      	mov	r5, r3
 800640e:	898b      	ldrh	r3, [r1, #12]
 8006410:	061f      	lsls	r7, r3, #24
 8006412:	b09d      	sub	sp, #116	; 0x74
 8006414:	4680      	mov	r8, r0
 8006416:	460c      	mov	r4, r1
 8006418:	4616      	mov	r6, r2
 800641a:	d50f      	bpl.n	800643c <_svfiprintf_r+0x34>
 800641c:	690b      	ldr	r3, [r1, #16]
 800641e:	b96b      	cbnz	r3, 800643c <_svfiprintf_r+0x34>
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	f7ff ff3d 	bl	80062a0 <_malloc_r>
 8006426:	6020      	str	r0, [r4, #0]
 8006428:	6120      	str	r0, [r4, #16]
 800642a:	b928      	cbnz	r0, 8006438 <_svfiprintf_r+0x30>
 800642c:	230c      	movs	r3, #12
 800642e:	f8c8 3000 	str.w	r3, [r8]
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	e0c8      	b.n	80065ca <_svfiprintf_r+0x1c2>
 8006438:	2340      	movs	r3, #64	; 0x40
 800643a:	6163      	str	r3, [r4, #20]
 800643c:	2300      	movs	r3, #0
 800643e:	9309      	str	r3, [sp, #36]	; 0x24
 8006440:	2320      	movs	r3, #32
 8006442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006446:	2330      	movs	r3, #48	; 0x30
 8006448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800644c:	9503      	str	r5, [sp, #12]
 800644e:	f04f 0b01 	mov.w	fp, #1
 8006452:	4637      	mov	r7, r6
 8006454:	463d      	mov	r5, r7
 8006456:	f815 3b01 	ldrb.w	r3, [r5], #1
 800645a:	b10b      	cbz	r3, 8006460 <_svfiprintf_r+0x58>
 800645c:	2b25      	cmp	r3, #37	; 0x25
 800645e:	d13e      	bne.n	80064de <_svfiprintf_r+0xd6>
 8006460:	ebb7 0a06 	subs.w	sl, r7, r6
 8006464:	d00b      	beq.n	800647e <_svfiprintf_r+0x76>
 8006466:	4653      	mov	r3, sl
 8006468:	4632      	mov	r2, r6
 800646a:	4621      	mov	r1, r4
 800646c:	4640      	mov	r0, r8
 800646e:	f7ff ff71 	bl	8006354 <__ssputs_r>
 8006472:	3001      	adds	r0, #1
 8006474:	f000 80a4 	beq.w	80065c0 <_svfiprintf_r+0x1b8>
 8006478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647a:	4453      	add	r3, sl
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
 800647e:	783b      	ldrb	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 809d 	beq.w	80065c0 <_svfiprintf_r+0x1b8>
 8006486:	2300      	movs	r3, #0
 8006488:	f04f 32ff 	mov.w	r2, #4294967295
 800648c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006498:	931a      	str	r3, [sp, #104]	; 0x68
 800649a:	462f      	mov	r7, r5
 800649c:	2205      	movs	r2, #5
 800649e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064a2:	4850      	ldr	r0, [pc, #320]	; (80065e4 <_svfiprintf_r+0x1dc>)
 80064a4:	f7f9 feb4 	bl	8000210 <memchr>
 80064a8:	9b04      	ldr	r3, [sp, #16]
 80064aa:	b9d0      	cbnz	r0, 80064e2 <_svfiprintf_r+0xda>
 80064ac:	06d9      	lsls	r1, r3, #27
 80064ae:	bf44      	itt	mi
 80064b0:	2220      	movmi	r2, #32
 80064b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064b6:	071a      	lsls	r2, r3, #28
 80064b8:	bf44      	itt	mi
 80064ba:	222b      	movmi	r2, #43	; 0x2b
 80064bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064c0:	782a      	ldrb	r2, [r5, #0]
 80064c2:	2a2a      	cmp	r2, #42	; 0x2a
 80064c4:	d015      	beq.n	80064f2 <_svfiprintf_r+0xea>
 80064c6:	9a07      	ldr	r2, [sp, #28]
 80064c8:	462f      	mov	r7, r5
 80064ca:	2000      	movs	r0, #0
 80064cc:	250a      	movs	r5, #10
 80064ce:	4639      	mov	r1, r7
 80064d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064d4:	3b30      	subs	r3, #48	; 0x30
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	d94d      	bls.n	8006576 <_svfiprintf_r+0x16e>
 80064da:	b1b8      	cbz	r0, 800650c <_svfiprintf_r+0x104>
 80064dc:	e00f      	b.n	80064fe <_svfiprintf_r+0xf6>
 80064de:	462f      	mov	r7, r5
 80064e0:	e7b8      	b.n	8006454 <_svfiprintf_r+0x4c>
 80064e2:	4a40      	ldr	r2, [pc, #256]	; (80065e4 <_svfiprintf_r+0x1dc>)
 80064e4:	1a80      	subs	r0, r0, r2
 80064e6:	fa0b f000 	lsl.w	r0, fp, r0
 80064ea:	4318      	orrs	r0, r3
 80064ec:	9004      	str	r0, [sp, #16]
 80064ee:	463d      	mov	r5, r7
 80064f0:	e7d3      	b.n	800649a <_svfiprintf_r+0x92>
 80064f2:	9a03      	ldr	r2, [sp, #12]
 80064f4:	1d11      	adds	r1, r2, #4
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	9103      	str	r1, [sp, #12]
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	db01      	blt.n	8006502 <_svfiprintf_r+0xfa>
 80064fe:	9207      	str	r2, [sp, #28]
 8006500:	e004      	b.n	800650c <_svfiprintf_r+0x104>
 8006502:	4252      	negs	r2, r2
 8006504:	f043 0302 	orr.w	r3, r3, #2
 8006508:	9207      	str	r2, [sp, #28]
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	783b      	ldrb	r3, [r7, #0]
 800650e:	2b2e      	cmp	r3, #46	; 0x2e
 8006510:	d10c      	bne.n	800652c <_svfiprintf_r+0x124>
 8006512:	787b      	ldrb	r3, [r7, #1]
 8006514:	2b2a      	cmp	r3, #42	; 0x2a
 8006516:	d133      	bne.n	8006580 <_svfiprintf_r+0x178>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d1a      	adds	r2, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9203      	str	r2, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfb8      	it	lt
 8006524:	f04f 33ff 	movlt.w	r3, #4294967295
 8006528:	3702      	adds	r7, #2
 800652a:	9305      	str	r3, [sp, #20]
 800652c:	4d2e      	ldr	r5, [pc, #184]	; (80065e8 <_svfiprintf_r+0x1e0>)
 800652e:	7839      	ldrb	r1, [r7, #0]
 8006530:	2203      	movs	r2, #3
 8006532:	4628      	mov	r0, r5
 8006534:	f7f9 fe6c 	bl	8000210 <memchr>
 8006538:	b138      	cbz	r0, 800654a <_svfiprintf_r+0x142>
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	1b40      	subs	r0, r0, r5
 800653e:	fa03 f000 	lsl.w	r0, r3, r0
 8006542:	9b04      	ldr	r3, [sp, #16]
 8006544:	4303      	orrs	r3, r0
 8006546:	3701      	adds	r7, #1
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	7839      	ldrb	r1, [r7, #0]
 800654c:	4827      	ldr	r0, [pc, #156]	; (80065ec <_svfiprintf_r+0x1e4>)
 800654e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006552:	2206      	movs	r2, #6
 8006554:	1c7e      	adds	r6, r7, #1
 8006556:	f7f9 fe5b 	bl	8000210 <memchr>
 800655a:	2800      	cmp	r0, #0
 800655c:	d038      	beq.n	80065d0 <_svfiprintf_r+0x1c8>
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <_svfiprintf_r+0x1e8>)
 8006560:	bb13      	cbnz	r3, 80065a8 <_svfiprintf_r+0x1a0>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	3307      	adds	r3, #7
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	3308      	adds	r3, #8
 800656c:	9303      	str	r3, [sp, #12]
 800656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006570:	444b      	add	r3, r9
 8006572:	9309      	str	r3, [sp, #36]	; 0x24
 8006574:	e76d      	b.n	8006452 <_svfiprintf_r+0x4a>
 8006576:	fb05 3202 	mla	r2, r5, r2, r3
 800657a:	2001      	movs	r0, #1
 800657c:	460f      	mov	r7, r1
 800657e:	e7a6      	b.n	80064ce <_svfiprintf_r+0xc6>
 8006580:	2300      	movs	r3, #0
 8006582:	3701      	adds	r7, #1
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	4619      	mov	r1, r3
 8006588:	250a      	movs	r5, #10
 800658a:	4638      	mov	r0, r7
 800658c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006590:	3a30      	subs	r2, #48	; 0x30
 8006592:	2a09      	cmp	r2, #9
 8006594:	d903      	bls.n	800659e <_svfiprintf_r+0x196>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0c8      	beq.n	800652c <_svfiprintf_r+0x124>
 800659a:	9105      	str	r1, [sp, #20]
 800659c:	e7c6      	b.n	800652c <_svfiprintf_r+0x124>
 800659e:	fb05 2101 	mla	r1, r5, r1, r2
 80065a2:	2301      	movs	r3, #1
 80065a4:	4607      	mov	r7, r0
 80065a6:	e7f0      	b.n	800658a <_svfiprintf_r+0x182>
 80065a8:	ab03      	add	r3, sp, #12
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4622      	mov	r2, r4
 80065ae:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <_svfiprintf_r+0x1ec>)
 80065b0:	a904      	add	r1, sp, #16
 80065b2:	4640      	mov	r0, r8
 80065b4:	f3af 8000 	nop.w
 80065b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80065bc:	4681      	mov	r9, r0
 80065be:	d1d6      	bne.n	800656e <_svfiprintf_r+0x166>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	065b      	lsls	r3, r3, #25
 80065c4:	f53f af35 	bmi.w	8006432 <_svfiprintf_r+0x2a>
 80065c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ca:	b01d      	add	sp, #116	; 0x74
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	ab03      	add	r3, sp, #12
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4622      	mov	r2, r4
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <_svfiprintf_r+0x1ec>)
 80065d8:	a904      	add	r1, sp, #16
 80065da:	4640      	mov	r0, r8
 80065dc:	f000 f9c2 	bl	8006964 <_printf_i>
 80065e0:	e7ea      	b.n	80065b8 <_svfiprintf_r+0x1b0>
 80065e2:	bf00      	nop
 80065e4:	08007500 	.word	0x08007500
 80065e8:	08007506 	.word	0x08007506
 80065ec:	0800750a 	.word	0x0800750a
 80065f0:	00000000 	.word	0x00000000
 80065f4:	08006355 	.word	0x08006355

080065f8 <__sfputc_r>:
 80065f8:	6893      	ldr	r3, [r2, #8]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	b410      	push	{r4}
 8006600:	6093      	str	r3, [r2, #8]
 8006602:	da08      	bge.n	8006616 <__sfputc_r+0x1e>
 8006604:	6994      	ldr	r4, [r2, #24]
 8006606:	42a3      	cmp	r3, r4
 8006608:	db01      	blt.n	800660e <__sfputc_r+0x16>
 800660a:	290a      	cmp	r1, #10
 800660c:	d103      	bne.n	8006616 <__sfputc_r+0x1e>
 800660e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006612:	f7ff bb59 	b.w	8005cc8 <__swbuf_r>
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	1c58      	adds	r0, r3, #1
 800661a:	6010      	str	r0, [r2, #0]
 800661c:	7019      	strb	r1, [r3, #0]
 800661e:	4608      	mov	r0, r1
 8006620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006624:	4770      	bx	lr

08006626 <__sfputs_r>:
 8006626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	4614      	mov	r4, r2
 800662e:	18d5      	adds	r5, r2, r3
 8006630:	42ac      	cmp	r4, r5
 8006632:	d101      	bne.n	8006638 <__sfputs_r+0x12>
 8006634:	2000      	movs	r0, #0
 8006636:	e007      	b.n	8006648 <__sfputs_r+0x22>
 8006638:	463a      	mov	r2, r7
 800663a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff ffda 	bl	80065f8 <__sfputc_r>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d1f3      	bne.n	8006630 <__sfputs_r+0xa>
 8006648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800664c <_vfiprintf_r>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	460c      	mov	r4, r1
 8006652:	b09d      	sub	sp, #116	; 0x74
 8006654:	4617      	mov	r7, r2
 8006656:	461d      	mov	r5, r3
 8006658:	4606      	mov	r6, r0
 800665a:	b118      	cbz	r0, 8006664 <_vfiprintf_r+0x18>
 800665c:	6983      	ldr	r3, [r0, #24]
 800665e:	b90b      	cbnz	r3, 8006664 <_vfiprintf_r+0x18>
 8006660:	f7ff fce2 	bl	8006028 <__sinit>
 8006664:	4b7c      	ldr	r3, [pc, #496]	; (8006858 <_vfiprintf_r+0x20c>)
 8006666:	429c      	cmp	r4, r3
 8006668:	d158      	bne.n	800671c <_vfiprintf_r+0xd0>
 800666a:	6874      	ldr	r4, [r6, #4]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	0718      	lsls	r0, r3, #28
 8006670:	d55e      	bpl.n	8006730 <_vfiprintf_r+0xe4>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d05b      	beq.n	8006730 <_vfiprintf_r+0xe4>
 8006678:	2300      	movs	r3, #0
 800667a:	9309      	str	r3, [sp, #36]	; 0x24
 800667c:	2320      	movs	r3, #32
 800667e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006682:	2330      	movs	r3, #48	; 0x30
 8006684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006688:	9503      	str	r5, [sp, #12]
 800668a:	f04f 0b01 	mov.w	fp, #1
 800668e:	46b8      	mov	r8, r7
 8006690:	4645      	mov	r5, r8
 8006692:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006696:	b10b      	cbz	r3, 800669c <_vfiprintf_r+0x50>
 8006698:	2b25      	cmp	r3, #37	; 0x25
 800669a:	d154      	bne.n	8006746 <_vfiprintf_r+0xfa>
 800669c:	ebb8 0a07 	subs.w	sl, r8, r7
 80066a0:	d00b      	beq.n	80066ba <_vfiprintf_r+0x6e>
 80066a2:	4653      	mov	r3, sl
 80066a4:	463a      	mov	r2, r7
 80066a6:	4621      	mov	r1, r4
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff ffbc 	bl	8006626 <__sfputs_r>
 80066ae:	3001      	adds	r0, #1
 80066b0:	f000 80c2 	beq.w	8006838 <_vfiprintf_r+0x1ec>
 80066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b6:	4453      	add	r3, sl
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	f898 3000 	ldrb.w	r3, [r8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80ba 	beq.w	8006838 <_vfiprintf_r+0x1ec>
 80066c4:	2300      	movs	r3, #0
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ce:	9304      	str	r3, [sp, #16]
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066d6:	931a      	str	r3, [sp, #104]	; 0x68
 80066d8:	46a8      	mov	r8, r5
 80066da:	2205      	movs	r2, #5
 80066dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80066e0:	485e      	ldr	r0, [pc, #376]	; (800685c <_vfiprintf_r+0x210>)
 80066e2:	f7f9 fd95 	bl	8000210 <memchr>
 80066e6:	9b04      	ldr	r3, [sp, #16]
 80066e8:	bb78      	cbnz	r0, 800674a <_vfiprintf_r+0xfe>
 80066ea:	06d9      	lsls	r1, r3, #27
 80066ec:	bf44      	itt	mi
 80066ee:	2220      	movmi	r2, #32
 80066f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066f4:	071a      	lsls	r2, r3, #28
 80066f6:	bf44      	itt	mi
 80066f8:	222b      	movmi	r2, #43	; 0x2b
 80066fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066fe:	782a      	ldrb	r2, [r5, #0]
 8006700:	2a2a      	cmp	r2, #42	; 0x2a
 8006702:	d02a      	beq.n	800675a <_vfiprintf_r+0x10e>
 8006704:	9a07      	ldr	r2, [sp, #28]
 8006706:	46a8      	mov	r8, r5
 8006708:	2000      	movs	r0, #0
 800670a:	250a      	movs	r5, #10
 800670c:	4641      	mov	r1, r8
 800670e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006712:	3b30      	subs	r3, #48	; 0x30
 8006714:	2b09      	cmp	r3, #9
 8006716:	d969      	bls.n	80067ec <_vfiprintf_r+0x1a0>
 8006718:	b360      	cbz	r0, 8006774 <_vfiprintf_r+0x128>
 800671a:	e024      	b.n	8006766 <_vfiprintf_r+0x11a>
 800671c:	4b50      	ldr	r3, [pc, #320]	; (8006860 <_vfiprintf_r+0x214>)
 800671e:	429c      	cmp	r4, r3
 8006720:	d101      	bne.n	8006726 <_vfiprintf_r+0xda>
 8006722:	68b4      	ldr	r4, [r6, #8]
 8006724:	e7a2      	b.n	800666c <_vfiprintf_r+0x20>
 8006726:	4b4f      	ldr	r3, [pc, #316]	; (8006864 <_vfiprintf_r+0x218>)
 8006728:	429c      	cmp	r4, r3
 800672a:	bf08      	it	eq
 800672c:	68f4      	ldreq	r4, [r6, #12]
 800672e:	e79d      	b.n	800666c <_vfiprintf_r+0x20>
 8006730:	4621      	mov	r1, r4
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff fb1a 	bl	8005d6c <__swsetup_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	d09d      	beq.n	8006678 <_vfiprintf_r+0x2c>
 800673c:	f04f 30ff 	mov.w	r0, #4294967295
 8006740:	b01d      	add	sp, #116	; 0x74
 8006742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006746:	46a8      	mov	r8, r5
 8006748:	e7a2      	b.n	8006690 <_vfiprintf_r+0x44>
 800674a:	4a44      	ldr	r2, [pc, #272]	; (800685c <_vfiprintf_r+0x210>)
 800674c:	1a80      	subs	r0, r0, r2
 800674e:	fa0b f000 	lsl.w	r0, fp, r0
 8006752:	4318      	orrs	r0, r3
 8006754:	9004      	str	r0, [sp, #16]
 8006756:	4645      	mov	r5, r8
 8006758:	e7be      	b.n	80066d8 <_vfiprintf_r+0x8c>
 800675a:	9a03      	ldr	r2, [sp, #12]
 800675c:	1d11      	adds	r1, r2, #4
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	9103      	str	r1, [sp, #12]
 8006762:	2a00      	cmp	r2, #0
 8006764:	db01      	blt.n	800676a <_vfiprintf_r+0x11e>
 8006766:	9207      	str	r2, [sp, #28]
 8006768:	e004      	b.n	8006774 <_vfiprintf_r+0x128>
 800676a:	4252      	negs	r2, r2
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	9207      	str	r2, [sp, #28]
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	f898 3000 	ldrb.w	r3, [r8]
 8006778:	2b2e      	cmp	r3, #46	; 0x2e
 800677a:	d10e      	bne.n	800679a <_vfiprintf_r+0x14e>
 800677c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006780:	2b2a      	cmp	r3, #42	; 0x2a
 8006782:	d138      	bne.n	80067f6 <_vfiprintf_r+0x1aa>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	9203      	str	r2, [sp, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb8      	it	lt
 8006790:	f04f 33ff 	movlt.w	r3, #4294967295
 8006794:	f108 0802 	add.w	r8, r8, #2
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	4d33      	ldr	r5, [pc, #204]	; (8006868 <_vfiprintf_r+0x21c>)
 800679c:	f898 1000 	ldrb.w	r1, [r8]
 80067a0:	2203      	movs	r2, #3
 80067a2:	4628      	mov	r0, r5
 80067a4:	f7f9 fd34 	bl	8000210 <memchr>
 80067a8:	b140      	cbz	r0, 80067bc <_vfiprintf_r+0x170>
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	1b40      	subs	r0, r0, r5
 80067ae:	fa03 f000 	lsl.w	r0, r3, r0
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	4303      	orrs	r3, r0
 80067b6:	f108 0801 	add.w	r8, r8, #1
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	f898 1000 	ldrb.w	r1, [r8]
 80067c0:	482a      	ldr	r0, [pc, #168]	; (800686c <_vfiprintf_r+0x220>)
 80067c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c6:	2206      	movs	r2, #6
 80067c8:	f108 0701 	add.w	r7, r8, #1
 80067cc:	f7f9 fd20 	bl	8000210 <memchr>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d037      	beq.n	8006844 <_vfiprintf_r+0x1f8>
 80067d4:	4b26      	ldr	r3, [pc, #152]	; (8006870 <_vfiprintf_r+0x224>)
 80067d6:	bb1b      	cbnz	r3, 8006820 <_vfiprintf_r+0x1d4>
 80067d8:	9b03      	ldr	r3, [sp, #12]
 80067da:	3307      	adds	r3, #7
 80067dc:	f023 0307 	bic.w	r3, r3, #7
 80067e0:	3308      	adds	r3, #8
 80067e2:	9303      	str	r3, [sp, #12]
 80067e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e6:	444b      	add	r3, r9
 80067e8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ea:	e750      	b.n	800668e <_vfiprintf_r+0x42>
 80067ec:	fb05 3202 	mla	r2, r5, r2, r3
 80067f0:	2001      	movs	r0, #1
 80067f2:	4688      	mov	r8, r1
 80067f4:	e78a      	b.n	800670c <_vfiprintf_r+0xc0>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f108 0801 	add.w	r8, r8, #1
 80067fc:	9305      	str	r3, [sp, #20]
 80067fe:	4619      	mov	r1, r3
 8006800:	250a      	movs	r5, #10
 8006802:	4640      	mov	r0, r8
 8006804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006808:	3a30      	subs	r2, #48	; 0x30
 800680a:	2a09      	cmp	r2, #9
 800680c:	d903      	bls.n	8006816 <_vfiprintf_r+0x1ca>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0c3      	beq.n	800679a <_vfiprintf_r+0x14e>
 8006812:	9105      	str	r1, [sp, #20]
 8006814:	e7c1      	b.n	800679a <_vfiprintf_r+0x14e>
 8006816:	fb05 2101 	mla	r1, r5, r1, r2
 800681a:	2301      	movs	r3, #1
 800681c:	4680      	mov	r8, r0
 800681e:	e7f0      	b.n	8006802 <_vfiprintf_r+0x1b6>
 8006820:	ab03      	add	r3, sp, #12
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4622      	mov	r2, r4
 8006826:	4b13      	ldr	r3, [pc, #76]	; (8006874 <_vfiprintf_r+0x228>)
 8006828:	a904      	add	r1, sp, #16
 800682a:	4630      	mov	r0, r6
 800682c:	f3af 8000 	nop.w
 8006830:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006834:	4681      	mov	r9, r0
 8006836:	d1d5      	bne.n	80067e4 <_vfiprintf_r+0x198>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	065b      	lsls	r3, r3, #25
 800683c:	f53f af7e 	bmi.w	800673c <_vfiprintf_r+0xf0>
 8006840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006842:	e77d      	b.n	8006740 <_vfiprintf_r+0xf4>
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	4622      	mov	r2, r4
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <_vfiprintf_r+0x228>)
 800684c:	a904      	add	r1, sp, #16
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f888 	bl	8006964 <_printf_i>
 8006854:	e7ec      	b.n	8006830 <_vfiprintf_r+0x1e4>
 8006856:	bf00      	nop
 8006858:	080074c0 	.word	0x080074c0
 800685c:	08007500 	.word	0x08007500
 8006860:	080074e0 	.word	0x080074e0
 8006864:	080074a0 	.word	0x080074a0
 8006868:	08007506 	.word	0x08007506
 800686c:	0800750a 	.word	0x0800750a
 8006870:	00000000 	.word	0x00000000
 8006874:	08006627 	.word	0x08006627

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4691      	mov	r9, r2
 800687e:	461f      	mov	r7, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	f8c9 3000 	str.w	r3, [r9]
 8006892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006896:	4606      	mov	r6, r0
 8006898:	460c      	mov	r4, r1
 800689a:	b112      	cbz	r2, 80068a2 <_printf_common+0x2a>
 800689c:	3301      	adds	r3, #1
 800689e:	f8c9 3000 	str.w	r3, [r9]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	0699      	lsls	r1, r3, #26
 80068a6:	bf42      	ittt	mi
 80068a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068ac:	3302      	addmi	r3, #2
 80068ae:	f8c9 3000 	strmi.w	r3, [r9]
 80068b2:	6825      	ldr	r5, [r4, #0]
 80068b4:	f015 0506 	ands.w	r5, r5, #6
 80068b8:	d107      	bne.n	80068ca <_printf_common+0x52>
 80068ba:	f104 0a19 	add.w	sl, r4, #25
 80068be:	68e3      	ldr	r3, [r4, #12]
 80068c0:	f8d9 2000 	ldr.w	r2, [r9]
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	42ab      	cmp	r3, r5
 80068c8:	dc28      	bgt.n	800691c <_printf_common+0xa4>
 80068ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	3300      	adds	r3, #0
 80068d2:	bf18      	it	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	0692      	lsls	r2, r2, #26
 80068d8:	d42d      	bmi.n	8006936 <_printf_common+0xbe>
 80068da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068de:	4639      	mov	r1, r7
 80068e0:	4630      	mov	r0, r6
 80068e2:	47c0      	blx	r8
 80068e4:	3001      	adds	r0, #1
 80068e6:	d020      	beq.n	800692a <_printf_common+0xb2>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	68e5      	ldr	r5, [r4, #12]
 80068ec:	f8d9 2000 	ldr.w	r2, [r9]
 80068f0:	f003 0306 	and.w	r3, r3, #6
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	bf08      	it	eq
 80068f8:	1aad      	subeq	r5, r5, r2
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	6922      	ldr	r2, [r4, #16]
 80068fe:	bf0c      	ite	eq
 8006900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006904:	2500      	movne	r5, #0
 8006906:	4293      	cmp	r3, r2
 8006908:	bfc4      	itt	gt
 800690a:	1a9b      	subgt	r3, r3, r2
 800690c:	18ed      	addgt	r5, r5, r3
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	341a      	adds	r4, #26
 8006914:	454d      	cmp	r5, r9
 8006916:	d11a      	bne.n	800694e <_printf_common+0xd6>
 8006918:	2000      	movs	r0, #0
 800691a:	e008      	b.n	800692e <_printf_common+0xb6>
 800691c:	2301      	movs	r3, #1
 800691e:	4652      	mov	r2, sl
 8006920:	4639      	mov	r1, r7
 8006922:	4630      	mov	r0, r6
 8006924:	47c0      	blx	r8
 8006926:	3001      	adds	r0, #1
 8006928:	d103      	bne.n	8006932 <_printf_common+0xba>
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	3501      	adds	r5, #1
 8006934:	e7c3      	b.n	80068be <_printf_common+0x46>
 8006936:	18e1      	adds	r1, r4, r3
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	2030      	movs	r0, #48	; 0x30
 800693c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006940:	4422      	add	r2, r4
 8006942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006946:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800694a:	3302      	adds	r3, #2
 800694c:	e7c5      	b.n	80068da <_printf_common+0x62>
 800694e:	2301      	movs	r3, #1
 8006950:	4622      	mov	r2, r4
 8006952:	4639      	mov	r1, r7
 8006954:	4630      	mov	r0, r6
 8006956:	47c0      	blx	r8
 8006958:	3001      	adds	r0, #1
 800695a:	d0e6      	beq.n	800692a <_printf_common+0xb2>
 800695c:	f109 0901 	add.w	r9, r9, #1
 8006960:	e7d8      	b.n	8006914 <_printf_common+0x9c>
	...

08006964 <_printf_i>:
 8006964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006968:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800696c:	460c      	mov	r4, r1
 800696e:	7e09      	ldrb	r1, [r1, #24]
 8006970:	b085      	sub	sp, #20
 8006972:	296e      	cmp	r1, #110	; 0x6e
 8006974:	4617      	mov	r7, r2
 8006976:	4606      	mov	r6, r0
 8006978:	4698      	mov	r8, r3
 800697a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800697c:	f000 80b3 	beq.w	8006ae6 <_printf_i+0x182>
 8006980:	d822      	bhi.n	80069c8 <_printf_i+0x64>
 8006982:	2963      	cmp	r1, #99	; 0x63
 8006984:	d036      	beq.n	80069f4 <_printf_i+0x90>
 8006986:	d80a      	bhi.n	800699e <_printf_i+0x3a>
 8006988:	2900      	cmp	r1, #0
 800698a:	f000 80b9 	beq.w	8006b00 <_printf_i+0x19c>
 800698e:	2958      	cmp	r1, #88	; 0x58
 8006990:	f000 8083 	beq.w	8006a9a <_printf_i+0x136>
 8006994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006998:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800699c:	e032      	b.n	8006a04 <_printf_i+0xa0>
 800699e:	2964      	cmp	r1, #100	; 0x64
 80069a0:	d001      	beq.n	80069a6 <_printf_i+0x42>
 80069a2:	2969      	cmp	r1, #105	; 0x69
 80069a4:	d1f6      	bne.n	8006994 <_printf_i+0x30>
 80069a6:	6820      	ldr	r0, [r4, #0]
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	0605      	lsls	r5, r0, #24
 80069ac:	f103 0104 	add.w	r1, r3, #4
 80069b0:	d52a      	bpl.n	8006a08 <_printf_i+0xa4>
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da03      	bge.n	80069c2 <_printf_i+0x5e>
 80069ba:	222d      	movs	r2, #45	; 0x2d
 80069bc:	425b      	negs	r3, r3
 80069be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069c2:	486f      	ldr	r0, [pc, #444]	; (8006b80 <_printf_i+0x21c>)
 80069c4:	220a      	movs	r2, #10
 80069c6:	e039      	b.n	8006a3c <_printf_i+0xd8>
 80069c8:	2973      	cmp	r1, #115	; 0x73
 80069ca:	f000 809d 	beq.w	8006b08 <_printf_i+0x1a4>
 80069ce:	d808      	bhi.n	80069e2 <_printf_i+0x7e>
 80069d0:	296f      	cmp	r1, #111	; 0x6f
 80069d2:	d020      	beq.n	8006a16 <_printf_i+0xb2>
 80069d4:	2970      	cmp	r1, #112	; 0x70
 80069d6:	d1dd      	bne.n	8006994 <_printf_i+0x30>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	f043 0320 	orr.w	r3, r3, #32
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	e003      	b.n	80069ea <_printf_i+0x86>
 80069e2:	2975      	cmp	r1, #117	; 0x75
 80069e4:	d017      	beq.n	8006a16 <_printf_i+0xb2>
 80069e6:	2978      	cmp	r1, #120	; 0x78
 80069e8:	d1d4      	bne.n	8006994 <_printf_i+0x30>
 80069ea:	2378      	movs	r3, #120	; 0x78
 80069ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f0:	4864      	ldr	r0, [pc, #400]	; (8006b84 <_printf_i+0x220>)
 80069f2:	e055      	b.n	8006aa0 <_printf_i+0x13c>
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	1d19      	adds	r1, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6011      	str	r1, [r2, #0]
 80069fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a04:	2301      	movs	r3, #1
 8006a06:	e08c      	b.n	8006b22 <_printf_i+0x1be>
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6011      	str	r1, [r2, #0]
 8006a0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a10:	bf18      	it	ne
 8006a12:	b21b      	sxthne	r3, r3
 8006a14:	e7cf      	b.n	80069b6 <_printf_i+0x52>
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	6825      	ldr	r5, [r4, #0]
 8006a1a:	1d18      	adds	r0, r3, #4
 8006a1c:	6010      	str	r0, [r2, #0]
 8006a1e:	0628      	lsls	r0, r5, #24
 8006a20:	d501      	bpl.n	8006a26 <_printf_i+0xc2>
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <_printf_i+0xc8>
 8006a26:	0668      	lsls	r0, r5, #25
 8006a28:	d5fb      	bpl.n	8006a22 <_printf_i+0xbe>
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	4854      	ldr	r0, [pc, #336]	; (8006b80 <_printf_i+0x21c>)
 8006a2e:	296f      	cmp	r1, #111	; 0x6f
 8006a30:	bf14      	ite	ne
 8006a32:	220a      	movne	r2, #10
 8006a34:	2208      	moveq	r2, #8
 8006a36:	2100      	movs	r1, #0
 8006a38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3c:	6865      	ldr	r5, [r4, #4]
 8006a3e:	60a5      	str	r5, [r4, #8]
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	f2c0 8095 	blt.w	8006b70 <_printf_i+0x20c>
 8006a46:	6821      	ldr	r1, [r4, #0]
 8006a48:	f021 0104 	bic.w	r1, r1, #4
 8006a4c:	6021      	str	r1, [r4, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d13d      	bne.n	8006ace <_printf_i+0x16a>
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	f040 808e 	bne.w	8006b74 <_printf_i+0x210>
 8006a58:	4665      	mov	r5, ip
 8006a5a:	2a08      	cmp	r2, #8
 8006a5c:	d10b      	bne.n	8006a76 <_printf_i+0x112>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	07db      	lsls	r3, r3, #31
 8006a62:	d508      	bpl.n	8006a76 <_printf_i+0x112>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	6862      	ldr	r2, [r4, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bfde      	ittt	le
 8006a6c:	2330      	movle	r3, #48	; 0x30
 8006a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a76:	ebac 0305 	sub.w	r3, ip, r5
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	f8cd 8000 	str.w	r8, [sp]
 8006a80:	463b      	mov	r3, r7
 8006a82:	aa03      	add	r2, sp, #12
 8006a84:	4621      	mov	r1, r4
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7ff fef6 	bl	8006878 <_printf_common>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d14d      	bne.n	8006b2c <_printf_i+0x1c8>
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	b005      	add	sp, #20
 8006a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a9a:	4839      	ldr	r0, [pc, #228]	; (8006b80 <_printf_i+0x21c>)
 8006a9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006aa0:	6813      	ldr	r3, [r2, #0]
 8006aa2:	6821      	ldr	r1, [r4, #0]
 8006aa4:	1d1d      	adds	r5, r3, #4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6015      	str	r5, [r2, #0]
 8006aaa:	060a      	lsls	r2, r1, #24
 8006aac:	d50b      	bpl.n	8006ac6 <_printf_i+0x162>
 8006aae:	07ca      	lsls	r2, r1, #31
 8006ab0:	bf44      	itt	mi
 8006ab2:	f041 0120 	orrmi.w	r1, r1, #32
 8006ab6:	6021      	strmi	r1, [r4, #0]
 8006ab8:	b91b      	cbnz	r3, 8006ac2 <_printf_i+0x15e>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	f022 0220 	bic.w	r2, r2, #32
 8006ac0:	6022      	str	r2, [r4, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	e7b7      	b.n	8006a36 <_printf_i+0xd2>
 8006ac6:	064d      	lsls	r5, r1, #25
 8006ac8:	bf48      	it	mi
 8006aca:	b29b      	uxthmi	r3, r3
 8006acc:	e7ef      	b.n	8006aae <_printf_i+0x14a>
 8006ace:	4665      	mov	r5, ip
 8006ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ad8:	5cc3      	ldrb	r3, [r0, r3]
 8006ada:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ade:	460b      	mov	r3, r1
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d1f5      	bne.n	8006ad0 <_printf_i+0x16c>
 8006ae4:	e7b9      	b.n	8006a5a <_printf_i+0xf6>
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	6825      	ldr	r5, [r4, #0]
 8006aea:	6961      	ldr	r1, [r4, #20]
 8006aec:	1d18      	adds	r0, r3, #4
 8006aee:	6010      	str	r0, [r2, #0]
 8006af0:	0628      	lsls	r0, r5, #24
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	d501      	bpl.n	8006afa <_printf_i+0x196>
 8006af6:	6019      	str	r1, [r3, #0]
 8006af8:	e002      	b.n	8006b00 <_printf_i+0x19c>
 8006afa:	066a      	lsls	r2, r5, #25
 8006afc:	d5fb      	bpl.n	8006af6 <_printf_i+0x192>
 8006afe:	8019      	strh	r1, [r3, #0]
 8006b00:	2300      	movs	r3, #0
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	4665      	mov	r5, ip
 8006b06:	e7b9      	b.n	8006a7c <_printf_i+0x118>
 8006b08:	6813      	ldr	r3, [r2, #0]
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	681d      	ldr	r5, [r3, #0]
 8006b10:	6862      	ldr	r2, [r4, #4]
 8006b12:	2100      	movs	r1, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7f9 fb7b 	bl	8000210 <memchr>
 8006b1a:	b108      	cbz	r0, 8006b20 <_printf_i+0x1bc>
 8006b1c:	1b40      	subs	r0, r0, r5
 8006b1e:	6060      	str	r0, [r4, #4]
 8006b20:	6863      	ldr	r3, [r4, #4]
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	2300      	movs	r3, #0
 8006b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2a:	e7a7      	b.n	8006a7c <_printf_i+0x118>
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	462a      	mov	r2, r5
 8006b30:	4639      	mov	r1, r7
 8006b32:	4630      	mov	r0, r6
 8006b34:	47c0      	blx	r8
 8006b36:	3001      	adds	r0, #1
 8006b38:	d0aa      	beq.n	8006a90 <_printf_i+0x12c>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	079b      	lsls	r3, r3, #30
 8006b3e:	d413      	bmi.n	8006b68 <_printf_i+0x204>
 8006b40:	68e0      	ldr	r0, [r4, #12]
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	4298      	cmp	r0, r3
 8006b46:	bfb8      	it	lt
 8006b48:	4618      	movlt	r0, r3
 8006b4a:	e7a3      	b.n	8006a94 <_printf_i+0x130>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	464a      	mov	r2, r9
 8006b50:	4639      	mov	r1, r7
 8006b52:	4630      	mov	r0, r6
 8006b54:	47c0      	blx	r8
 8006b56:	3001      	adds	r0, #1
 8006b58:	d09a      	beq.n	8006a90 <_printf_i+0x12c>
 8006b5a:	3501      	adds	r5, #1
 8006b5c:	68e3      	ldr	r3, [r4, #12]
 8006b5e:	9a03      	ldr	r2, [sp, #12]
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	42ab      	cmp	r3, r5
 8006b64:	dcf2      	bgt.n	8006b4c <_printf_i+0x1e8>
 8006b66:	e7eb      	b.n	8006b40 <_printf_i+0x1dc>
 8006b68:	2500      	movs	r5, #0
 8006b6a:	f104 0919 	add.w	r9, r4, #25
 8006b6e:	e7f5      	b.n	8006b5c <_printf_i+0x1f8>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ac      	bne.n	8006ace <_printf_i+0x16a>
 8006b74:	7803      	ldrb	r3, [r0, #0]
 8006b76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7e:	e76c      	b.n	8006a5a <_printf_i+0xf6>
 8006b80:	08007511 	.word	0x08007511
 8006b84:	08007522 	.word	0x08007522

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4c06      	ldr	r4, [pc, #24]	; (8006ba4 <_sbrk_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4605      	mov	r5, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	6023      	str	r3, [r4, #0]
 8006b94:	f7fb fbf8 	bl	8002388 <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	602b      	str	r3, [r5, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	2000298c 	.word	0x2000298c

08006ba8 <__sread>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	460c      	mov	r4, r1
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	f000 f8e0 	bl	8006d74 <_read_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	bfab      	itete	ge
 8006bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bba:	89a3      	ldrhlt	r3, [r4, #12]
 8006bbc:	181b      	addge	r3, r3, r0
 8006bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bc2:	bfac      	ite	ge
 8006bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc6:	81a3      	strhlt	r3, [r4, #12]
 8006bc8:	bd10      	pop	{r4, pc}

08006bca <__swrite>:
 8006bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	461f      	mov	r7, r3
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	05db      	lsls	r3, r3, #23
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4616      	mov	r6, r2
 8006bda:	d505      	bpl.n	8006be8 <__swrite+0x1e>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	2200      	movs	r2, #0
 8006be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be4:	f000 f868 	bl	8006cb8 <_lseek_r>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	f000 b817 	b.w	8006c30 <_write_r>

08006c02 <__sseek>:
 8006c02:	b510      	push	{r4, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 f855 	bl	8006cb8 <_lseek_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	bf15      	itete	ne
 8006c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1e:	81a3      	strheq	r3, [r4, #12]
 8006c20:	bf18      	it	ne
 8006c22:	81a3      	strhne	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__sclose>:
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 b813 	b.w	8006c54 <_close_r>
	...

08006c30 <_write_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4c07      	ldr	r4, [pc, #28]	; (8006c50 <_write_r+0x20>)
 8006c34:	4605      	mov	r5, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f7fb fb51 	bl	80022e6 <_write>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_write_r+0x1e>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_write_r+0x1e>
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	2000298c 	.word	0x2000298c

08006c54 <_close_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4c06      	ldr	r4, [pc, #24]	; (8006c70 <_close_r+0x1c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	f7fb fb5d 	bl	800231e <_close>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_close_r+0x1a>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_close_r+0x1a>
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	2000298c 	.word	0x2000298c

08006c74 <_fstat_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4c07      	ldr	r4, [pc, #28]	; (8006c94 <_fstat_r+0x20>)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	f7fb fb58 	bl	8002336 <_fstat>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	d102      	bne.n	8006c90 <_fstat_r+0x1c>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	b103      	cbz	r3, 8006c90 <_fstat_r+0x1c>
 8006c8e:	602b      	str	r3, [r5, #0]
 8006c90:	bd38      	pop	{r3, r4, r5, pc}
 8006c92:	bf00      	nop
 8006c94:	2000298c 	.word	0x2000298c

08006c98 <_isatty_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4c06      	ldr	r4, [pc, #24]	; (8006cb4 <_isatty_r+0x1c>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	f7fb fb57 	bl	8002356 <_isatty>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_isatty_r+0x1a>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_isatty_r+0x1a>
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	2000298c 	.word	0x2000298c

08006cb8 <_lseek_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4c07      	ldr	r4, [pc, #28]	; (8006cd8 <_lseek_r+0x20>)
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fb fb50 	bl	800236c <_lseek>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_lseek_r+0x1e>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_lseek_r+0x1e>
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	2000298c 	.word	0x2000298c

08006cdc <memcpy>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	1e43      	subs	r3, r0, #1
 8006ce0:	440a      	add	r2, r1
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	d100      	bne.n	8006ce8 <memcpy+0xc>
 8006ce6:	bd10      	pop	{r4, pc}
 8006ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf0:	e7f7      	b.n	8006ce2 <memcpy+0x6>

08006cf2 <memmove>:
 8006cf2:	4288      	cmp	r0, r1
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	eb01 0302 	add.w	r3, r1, r2
 8006cfa:	d807      	bhi.n	8006d0c <memmove+0x1a>
 8006cfc:	1e42      	subs	r2, r0, #1
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	d00a      	beq.n	8006d18 <memmove+0x26>
 8006d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d0a:	e7f8      	b.n	8006cfe <memmove+0xc>
 8006d0c:	4283      	cmp	r3, r0
 8006d0e:	d9f5      	bls.n	8006cfc <memmove+0xa>
 8006d10:	1881      	adds	r1, r0, r2
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	42d3      	cmn	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memmove+0x28>
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d22:	e7f7      	b.n	8006d14 <memmove+0x22>

08006d24 <__malloc_lock>:
 8006d24:	4770      	bx	lr

08006d26 <__malloc_unlock>:
 8006d26:	4770      	bx	lr

08006d28 <_realloc_r>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	460e      	mov	r6, r1
 8006d30:	b921      	cbnz	r1, 8006d3c <_realloc_r+0x14>
 8006d32:	4611      	mov	r1, r2
 8006d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d38:	f7ff bab2 	b.w	80062a0 <_malloc_r>
 8006d3c:	b922      	cbnz	r2, 8006d48 <_realloc_r+0x20>
 8006d3e:	f7ff fa61 	bl	8006204 <_free_r>
 8006d42:	4625      	mov	r5, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d48:	f000 f826 	bl	8006d98 <_malloc_usable_size_r>
 8006d4c:	42a0      	cmp	r0, r4
 8006d4e:	d20f      	bcs.n	8006d70 <_realloc_r+0x48>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4638      	mov	r0, r7
 8006d54:	f7ff faa4 	bl	80062a0 <_malloc_r>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d0f2      	beq.n	8006d44 <_realloc_r+0x1c>
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4622      	mov	r2, r4
 8006d62:	f7ff ffbb 	bl	8006cdc <memcpy>
 8006d66:	4631      	mov	r1, r6
 8006d68:	4638      	mov	r0, r7
 8006d6a:	f7ff fa4b 	bl	8006204 <_free_r>
 8006d6e:	e7e9      	b.n	8006d44 <_realloc_r+0x1c>
 8006d70:	4635      	mov	r5, r6
 8006d72:	e7e7      	b.n	8006d44 <_realloc_r+0x1c>

08006d74 <_read_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4c07      	ldr	r4, [pc, #28]	; (8006d94 <_read_r+0x20>)
 8006d78:	4605      	mov	r5, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6022      	str	r2, [r4, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fb fa92 	bl	80022ac <_read>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_read_r+0x1e>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_read_r+0x1e>
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	2000298c 	.word	0x2000298c

08006d98 <_malloc_usable_size_r>:
 8006d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9c:	1f18      	subs	r0, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfbc      	itt	lt
 8006da2:	580b      	ldrlt	r3, [r1, r0]
 8006da4:	18c0      	addlt	r0, r0, r3
 8006da6:	4770      	bx	lr

08006da8 <_init>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr

08006db4 <_fini>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr
