
bikeRearviewMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f8  080043f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  20000070  08004470  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08004470  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bde0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e81  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a70  00000000  00000000  0002dd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  0002e778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175a6  00000000  00000000  0002f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c93  00000000  00000000  00046696  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cc10  00000000  00000000  0004f329  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbf39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000315c  00000000  00000000  000dbfb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042b4 	.word	0x080042b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080042b4 	.word	0x080042b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <readNum>:
	u8  alt;
} data[MAX_VEHICLE_CNT];

u8 cnt;

u16 readNum (u8 **str) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	u16 ret = 0ll;
 8000588:	2300      	movs	r3, #0
 800058a:	81fb      	strh	r3, [r7, #14]
	while (**str< '0' || **str> '9') ++ *str;
 800058c:	e004      	b.n	8000598 <readNum+0x18>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b2f      	cmp	r3, #47	; 0x2f
 80005a0:	d9f5      	bls.n	800058e <readNum+0xe>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b39      	cmp	r3, #57	; 0x39
 80005aa:	d8f0      	bhi.n	800058e <readNum+0xe>
	while (**str>='0' && **str<='9') {
 80005ac:	e015      	b.n	80005da <readNum+0x5a>
		ret = (ret<<1) + (ret<<3) + ((**str)^'0');
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b29a      	uxth	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4413      	add	r3, r2
 80005ce:	81fb      	strh	r3, [r7, #14]
		++ *str;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	601a      	str	r2, [r3, #0]
	while (**str>='0' && **str<='9') {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b2f      	cmp	r3, #47	; 0x2f
 80005e2:	d904      	bls.n	80005ee <readNum+0x6e>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b39      	cmp	r3, #57	; 0x39
 80005ec:	d9df      	bls.n	80005ae <readNum+0x2e>
	} return ret;
 80005ee:	89fb      	ldrh	r3, [r7, #14]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <dispose>:

int dispose (unsigned char *str) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	u8 *p = (u8*) strstr((const char *) str, "-=t:");
 8000604:	4934      	ldr	r1, [pc, #208]	; (80006d8 <dispose+0xdc>)
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f002 ff6e 	bl	80034e8 <strstr>
 800060c:	4603      	mov	r3, r0
 800060e:	60bb      	str	r3, [r7, #8]
	cnt = readNum(&p);
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffb3 	bl	8000580 <readNum>
 800061a:	4603      	mov	r3, r0
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <dispose+0xe0>)
 8000620:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<cnt; ++ i) {
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e04c      	b.n	80006c2 <dispose+0xc6>
		data[i].cat  = readNum(&p);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffa7 	bl	8000580 <readNum>
 8000632:	4603      	mov	r3, r0
 8000634:	b2d9      	uxtb	r1, r3
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <dispose+0xe4>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b2c      	cmp	r3, #44	; 0x2c
 8000644:	d001      	beq.n	800064a <dispose+0x4e>
 8000646:	2301      	movs	r3, #1
 8000648:	e042      	b.n	80006d0 <dispose+0xd4>
		data[i].xVal = readNum(&p);
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff96 	bl	8000580 <readNum>
 8000654:	4603      	mov	r3, r0
 8000656:	4619      	mov	r1, r3
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <dispose+0xe4>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	805a      	strh	r2, [r3, #2]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b2c      	cmp	r3, #44	; 0x2c
 800066a:	d001      	beq.n	8000670 <dispose+0x74>
 800066c:	2301      	movs	r3, #1
 800066e:	e02f      	b.n	80006d0 <dispose+0xd4>
		data[i].yVal = readNum(&p);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff83 	bl	8000580 <readNum>
 800067a:	4603      	mov	r3, r0
 800067c:	4619      	mov	r1, r3
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <dispose+0xe4>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4413      	add	r3, r2
 8000686:	460a      	mov	r2, r1
 8000688:	809a      	strh	r2, [r3, #4]
		// printf("[s]%s\r\n", p);
		if (*p ^ ',') return 1;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b2c      	cmp	r3, #44	; 0x2c
 8000690:	d001      	beq.n	8000696 <dispose+0x9a>
 8000692:	2301      	movs	r3, #1
 8000694:	e01c      	b.n	80006d0 <dispose+0xd4>
		data[i].alt  = readNum(&p);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff70 	bl	8000580 <readNum>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b2d9      	uxtb	r1, r3
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <dispose+0xe4>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	4413      	add	r3, r2
 80006ac:	460a      	mov	r2, r1
 80006ae:	719a      	strb	r2, [r3, #6]
		// printf("[s]%s\r\n", p);
		if (*p ^ ';') return 1;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b3b      	cmp	r3, #59	; 0x3b
 80006b6:	d001      	beq.n	80006bc <dispose+0xc0>
 80006b8:	2301      	movs	r3, #1
 80006ba:	e009      	b.n	80006d0 <dispose+0xd4>
	for (int i=0; i<cnt; ++ i) {
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <dispose+0xe0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	dbac      	blt.n	8000628 <dispose+0x2c>
	} return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	080042cc 	.word	0x080042cc
 80006dc:	200004a4 	.word	0x200004a4
 80006e0:	200004a8 	.word	0x200004a8

080006e4 <decoderDebugOutput>:

void decoderDebugOutput () {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	printf("n=%d\r\n", cnt);
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <decoderDebugOutput+0x74>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	481a      	ldr	r0, [pc, #104]	; (800075c <decoderDebugOutput+0x78>)
 80006f2:	f002 fe7d 	bl	80033f0 <iprintf>
	for (int i=0; i<cnt; ++ i) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e023      	b.n	8000744 <decoderDebugOutput+0x60>
		printf("[%d] ALT: %d\r\n", i, data[i].alt);
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <decoderDebugOutput+0x7c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	799b      	ldrb	r3, [r3, #6]
 8000706:	461a      	mov	r2, r3
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	4816      	ldr	r0, [pc, #88]	; (8000764 <decoderDebugOutput+0x80>)
 800070c:	f002 fe70 	bl	80033f0 <iprintf>
		printf("cat = %d\r\n", data[i].cat);
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <decoderDebugOutput+0x7c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000718:	4619      	mov	r1, r3
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <decoderDebugOutput+0x84>)
 800071c:	f002 fe68 	bl	80033f0 <iprintf>
		printf("map = %d, %d\r\n", data[i].xVal, data[i].yVal);
 8000720:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <decoderDebugOutput+0x7c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	4413      	add	r3, r2
 8000728:	885b      	ldrh	r3, [r3, #2]
 800072a:	4619      	mov	r1, r3
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <decoderDebugOutput+0x7c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	4413      	add	r3, r2
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	461a      	mov	r2, r3
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <decoderDebugOutput+0x88>)
 800073a:	f002 fe59 	bl	80033f0 <iprintf>
	for (int i=0; i<cnt; ++ i) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3301      	adds	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <decoderDebugOutput+0x74>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4293      	cmp	r3, r2
 800074e:	dbd5      	blt.n	80006fc <decoderDebugOutput+0x18>
	}
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200004a4 	.word	0x200004a4
 800075c:	080042d4 	.word	0x080042d4
 8000760:	200004a8 	.word	0x200004a8
 8000764:	080042dc 	.word	0x080042dc
 8000768:	080042ec 	.word	0x080042ec
 800076c:	080042f8 	.word	0x080042f8

08000770 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077e:	2201      	movs	r2, #1
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <__io_putchar+0x20>)
 8000782:	f001 ff18 	bl	80025b6 <HAL_UART_Transmit>
	return ch;
 8000786:	687b      	ldr	r3, [r7, #4]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000810 	.word	0x20000810

08000794 <HAL_UART_RxCpltCallback>:
unsigned char UART2RxFlg       = 0;
unsigned int  UART2RxCnt       = 0;
unsigned char UART2Rxtmp[1]    = {0};
unsigned char UART2RxUklRdFlg  = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART2) && UART2RxUklRdFlg) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1a      	ldr	r2, [pc, #104]	; (800080c <HAL_UART_RxCpltCallback+0x78>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12f      	bne.n	8000806 <HAL_UART_RxCpltCallback+0x72>
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <HAL_UART_RxCpltCallback+0x7c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d02b      	beq.n	8000806 <HAL_UART_RxCpltCallback+0x72>
		if (!(UART2Rxtmp[0]^0x0A) || !(UART2Rxtmp[0]^0x0D)) {
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_RxCpltCallback+0x80>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b0a      	cmp	r3, #10
 80007b4:	d003      	beq.n	80007be <HAL_UART_RxCpltCallback+0x2a>
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_UART_RxCpltCallback+0x80>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b0d      	cmp	r3, #13
 80007bc:	d107      	bne.n	80007ce <HAL_UART_RxCpltCallback+0x3a>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_UART_RxCpltCallback+0x84>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d01e      	beq.n	8000804 <HAL_UART_RxCpltCallback+0x70>
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_UART_RxCpltCallback+0x88>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e01a      	b.n	8000804 <HAL_UART_RxCpltCallback+0x70>
		} if (UART2RxCnt < 1024) UART2RxBuf[UART2RxCnt ++] = UART2Rxtmp[0];
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_UART_RxCpltCallback+0x84>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d6:	d20e      	bcs.n	80007f6 <HAL_UART_RxCpltCallback+0x62>
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_UART_RxCpltCallback+0x84>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <HAL_UART_RxCpltCallback+0x84>)
 80007e0:	600a      	str	r2, [r1, #0]
 80007e2:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <HAL_UART_RxCpltCallback+0x80>)
 80007e4:	7811      	ldrb	r1, [r2, #0]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_UART_RxCpltCallback+0x8c>)
 80007e8:	54d1      	strb	r1, [r2, r3]
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
		HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2Rxtmp, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	4909      	ldr	r1, [pc, #36]	; (8000814 <HAL_UART_RxCpltCallback+0x80>)
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <HAL_UART_RxCpltCallback+0x90>)
 80007f0:	f001 ff7a 	bl	80026e8 <HAL_UART_Receive_IT>
 80007f4:	e007      	b.n	8000806 <HAL_UART_RxCpltCallback+0x72>
		else {UART2RxFlg = 1; printf("[UART2IT] buffer overflow\r\n"); return;}
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_UART_RxCpltCallback+0x88>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <HAL_UART_RxCpltCallback+0x94>)
 80007fe:	f002 fe6b 	bl	80034d8 <puts>
 8000802:	e000      	b.n	8000806 <HAL_UART_RxCpltCallback+0x72>
			if (UART2RxCnt) {UART2RxFlg = 1;} return;
 8000804:	bf00      	nop
	}
}
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	20000495 	.word	0x20000495
 8000814:	20000494 	.word	0x20000494
 8000818:	20000490 	.word	0x20000490
 800081c:	2000048c 	.word	0x2000048c
 8000820:	2000008c 	.word	0x2000008c
 8000824:	200008a8 	.word	0x200008a8
 8000828:	08004308 	.word	0x08004308

0800082c <UART2_Clear>:

void UART2_Clear() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
	for (int i=0; i < UART2RxCnt; ++ i) UART2RxBuf[i] = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e007      	b.n	8000848 <UART2_Clear+0x1c>
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <UART2_Clear+0x48>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <UART2_Clear+0x4c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	d3f2      	bcc.n	8000838 <UART2_Clear+0xc>
	UART2RxFlg = UART2RxCnt = UART2RxUklRdFlg = 0;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <UART2_Clear+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <UART2_Clear+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <UART2_Clear+0x4c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <UART2_Clear+0x54>)
 8000866:	701a      	strb	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	2000008c 	.word	0x2000008c
 8000878:	20000490 	.word	0x20000490
 800087c:	20000495 	.word	0x20000495
 8000880:	2000048c 	.word	0x2000048c

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fc0e 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f832 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 f96e 	bl	8000b70 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000894:	f000 f914 	bl	8000ac0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000898:	f000 f940 	bl	8000b1c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800089c:	f000 f888 	bl	80009b0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008a0:	f000 f8d8 	bl	8000a54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UART2RxUklRdFlg = 0;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <main+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //UART2RxUklRd();
  while (1)
  {
	  UART2RxUklRd();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <main+0x58>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	2201      	movs	r2, #1
 80008b2:	490b      	ldr	r1, [pc, #44]	; (80008e0 <main+0x5c>)
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <main+0x60>)
 80008b6:	f001 ff17 	bl	80026e8 <HAL_UART_Receive_IT>
	  if (UART2RxFlg) {
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <main+0x64>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f3      	beq.n	80008aa <main+0x26>
		  printf("%s\r\n", UART2RxBuf);
 80008c2:	490a      	ldr	r1, [pc, #40]	; (80008ec <main+0x68>)
 80008c4:	480a      	ldr	r0, [pc, #40]	; (80008f0 <main+0x6c>)
 80008c6:	f002 fd93 	bl	80033f0 <iprintf>
		  dispose(UART2RxBuf);
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <main+0x68>)
 80008cc:	f7ff fe96 	bl	80005fc <dispose>
		  decoderDebugOutput();
 80008d0:	f7ff ff08 	bl	80006e4 <decoderDebugOutput>
		  UART2_Clear();
 80008d4:	f7ff ffaa 	bl	800082c <UART2_Clear>
	  UART2RxUklRd();
 80008d8:	e7e7      	b.n	80008aa <main+0x26>
 80008da:	bf00      	nop
 80008dc:	20000495 	.word	0x20000495
 80008e0:	20000494 	.word	0x20000494
 80008e4:	200008a8 	.word	0x200008a8
 80008e8:	2000048c 	.word	0x2000048c
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	08004324 	.word	0x08004324

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fd6c 	bl	80033e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <SystemClock_Config+0xb4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemClock_Config+0xb4>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0xb4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <SystemClock_Config+0xb8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <SystemClock_Config+0xb8>)
 800093e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <SystemClock_Config+0xb8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2310      	movs	r3, #16
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800095c:	2300      	movs	r3, #0
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f939 	bl	8001bdc <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000970:	f000 f926 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fb94 	bl	80020bc <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800099a:	f000 f911 	bl	8000bc0 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <MX_ADC1_Init+0x9c>)
 80009c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <MX_ADC1_Init+0xa0>)
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_ADC1_Init+0x98>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a10:	f000 fbbc 	bl	800118c <HAL_ADC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f8d1 	bl	8000bc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_ADC1_Init+0x98>)
 8000a30:	f000 fbf0 	bl	8001214 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f000 f8c1 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200007c8 	.word	0x200007c8
 8000a4c:	40012000 	.word	0x40012000
 8000a50:	0f000001 	.word	0x0f000001

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa6:	f001 fcd5 	bl	8002454 <HAL_SPI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 f886 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000850 	.word	0x20000850
 8000abc:	40013000 	.word	0x40013000

08000ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_USART1_UART_Init+0x54>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_USART1_UART_Init+0x50>)
 8000af8:	f001 fd10 	bl	800251c <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f85d 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  printf("USART1 INIT succ.\r\n");
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART1_UART_Init+0x58>)
 8000b08:	f002 fce6 	bl	80034d8 <puts>

  /* USER CODE END USART1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000810 	.word	0x20000810
 8000b14:	40011000 	.word	0x40011000
 8000b18:	0800432c 	.word	0x0800432c

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART2_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f001 fce2 	bl	800251c <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 f82f 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200008a8 	.word	0x200008a8
 8000b6c:	40004400 	.word	0x40004400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_GPIO_Init+0x4c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MX_GPIO_Init+0x4c>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_GPIO_Init+0x4c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_GPIO_Init+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <MX_GPIO_Init+0x4c>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_GPIO_Init+0x4c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <Error_Handler+0x6>

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_ADC_MspInit+0x7c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d127      	bne.n	8000c8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c86:	f000 fe27 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40012000 	.word	0x40012000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_SPI_MspInit+0xc0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d149      	bne.n	8000d56 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_SPI_MspInit+0xc4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <HAL_SPI_MspInit+0xc8>)
 8000d32:	f000 fdd1 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d36:	2310      	movs	r3, #16
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d46:	2305      	movs	r3, #5
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HAL_SPI_MspInit+0xcc>)
 8000d52:	f000 fdc1 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013000 	.word	0x40013000
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020400 	.word	0x40020400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <HAL_UART_MspInit+0xf8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12d      	bne.n	8000dee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4822      	ldr	r0, [pc, #136]	; (8000e70 <HAL_UART_MspInit+0x100>)
 8000de8:	f000 fd76 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dec:	e038      	b.n	8000e60 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_UART_MspInit+0x104>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d133      	bne.n	8000e60 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0xfc>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e30:	230c      	movs	r3, #12
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e40:	2307      	movs	r3, #7
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_UART_MspInit+0x100>)
 8000e4c:	f000 fd44 	bl	80018d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2026      	movs	r0, #38	; 0x26
 8000e56:	f000 fce6 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5a:	2026      	movs	r0, #38	; 0x26
 8000e5c:	f000 fcff 	bl	800185e <HAL_NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40004400 	.word	0x40004400

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f942 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART2_IRQHandler+0x10>)
 8000ed2:	f001 fc5f 	bl	8002794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200008a8 	.word	0x200008a8

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
	}

return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e009      	b.n	8000f40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fc1b 	bl	8000770 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf1      	blt.n	8000f2c <_write+0x12>
	}
	return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_close>:

int _close(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_isatty>:

int _isatty(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	return 1;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f002 f9ce 	bl	800338c <__errno>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000498 	.word	0x20000498
 8001024:	200008f0 	.word	0x200008f0

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SystemInit+0x28>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SystemInit+0x28>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SystemInit+0x28>)
 800103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001042:	609a      	str	r2, [r3, #8]
#endif
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001058:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800105a:	e003      	b.n	8001064 <LoopCopyDataInit>

0800105c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800105e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001060:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001062:	3104      	adds	r1, #4

08001064 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001068:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800106a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800106c:	d3f6      	bcc.n	800105c <CopyDataInit>
  ldr  r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001070:	e002      	b.n	8001078 <LoopFillZerobss>

08001072 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001072:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001074:	f842 3b04 	str.w	r3, [r2], #4

08001078 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800107a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800107c:	d3f9      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800107e:	f7ff ffd3 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 f989 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fbfd 	bl	8000884 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001090:	08004400 	.word	0x08004400
  ldr  r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001098:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800109c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80010a0:	200008f0 	.word	0x200008f0

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fb9d 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fd74 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fbb5 	bl	800187a <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 fb7d 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	200008e8 	.word	0x200008e8

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200008e8 	.word	0x200008e8

0800118c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e033      	b.n	800120a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fd34 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d118      	bne.n	80011fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	f043 0202 	orr.w	r2, r3, #2
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f94a 	bl	8001478 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f023 0303 	bic.w	r3, r3, #3
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
 80011fa:	e001      	b.n	8001200 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1c>
 800122c:	2302      	movs	r3, #2
 800122e:	e113      	b.n	8001458 <HAL_ADC_ConfigChannel+0x244>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d925      	bls.n	800128c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68d9      	ldr	r1, [r3, #12]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3b1e      	subs	r3, #30
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43da      	mvns	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	400a      	ands	r2, r1
 8001264:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68d9      	ldr	r1, [r3, #12]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	4603      	mov	r3, r0
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4403      	add	r3, r0
 800127e:	3b1e      	subs	r3, #30
 8001280:	409a      	lsls	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	e022      	b.n	80012d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	2207      	movs	r2, #7
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4403      	add	r3, r0
 80012c8:	409a      	lsls	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d824      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b05      	subs	r3, #5
 80012ec:	221f      	movs	r2, #31
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	400a      	ands	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3b05      	subs	r3, #5
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
 8001322:	e04c      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d824      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b23      	subs	r3, #35	; 0x23
 800133e:	221f      	movs	r2, #31
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b23      	subs	r3, #35	; 0x23
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
 8001374:	e023      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b41      	subs	r3, #65	; 0x41
 8001388:	221f      	movs	r2, #31
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b41      	subs	r3, #65	; 0x41
 80013b2:	fa00 f203 	lsl.w	r2, r0, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_ADC_ConfigChannel+0x250>)
 80013c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a28      	ldr	r2, [pc, #160]	; (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <HAL_ADC_ConfigChannel+0x258>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x1f4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d122      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_ADC_ConfigChannel+0x258>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d111      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_ADC_ConfigChannel+0x25c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_ADC_ConfigChannel+0x260>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9a      	lsrs	r2, r3, #18
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40012300 	.word	0x40012300
 8001468:	40012000 	.word	0x40012000
 800146c:	10000012 	.word	0x10000012
 8001470:	20000000 	.word	0x20000000
 8001474:	431bde83 	.word	0x431bde83

08001478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001480:	4b79      	ldr	r3, [pc, #484]	; (8001668 <ADC_Init+0x1f0>)
 8001482:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	431a      	orrs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	021a      	lsls	r2, r3, #8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	4a58      	ldr	r2, [pc, #352]	; (800166c <ADC_Init+0x1f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d022      	beq.n	8001556 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800151e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6899      	ldr	r1, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e00f      	b.n	8001576 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001574:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0202 	bic.w	r2, r2, #2
 8001584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7e1b      	ldrb	r3, [r3, #24]
 8001590:	005a      	lsls	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01b      	beq.n	80015dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	3b01      	subs	r3, #1
 80015d0:	035a      	lsls	r2, r3, #13
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	e007      	b.n	80015ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	3b01      	subs	r3, #1
 8001608:	051a      	lsls	r2, r3, #20
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6899      	ldr	r1, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800162e:	025a      	lsls	r2, r3, #9
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6899      	ldr	r1, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	029a      	lsls	r2, r3, #10
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40012300 	.word	0x40012300
 800166c:	0f000001 	.word	0x0f000001

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff3e 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff31 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d004      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2280      	movs	r2, #128	; 0x80
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e00c      	b.n	80018ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2205      	movs	r2, #5
 80018b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e159      	b.n	8001ba8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8148 	bne.w	8001ba2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d00b      	beq.n	8001932 <HAL_GPIO_Init+0x5a>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001926:	2b11      	cmp	r3, #17
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b12      	cmp	r3, #18
 8001930:	d130      	bne.n	8001994 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0xfc>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b12      	cmp	r3, #18
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a2 	beq.w	8001ba2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_GPIO_Init+0x2e4>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <HAL_GPIO_Init+0x2e4>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_GPIO_Init+0x2e4>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7a:	4a51      	ldr	r2, [pc, #324]	; (8001bc0 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_GPIO_Init+0x2ec>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x202>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_GPIO_Init+0x2f0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x1fe>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a46      	ldr	r2, [pc, #280]	; (8001bcc <HAL_GPIO_Init+0x2f4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x1fa>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_GPIO_Init+0x2f8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x1f6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a44      	ldr	r2, [pc, #272]	; (8001bd4 <HAL_GPIO_Init+0x2fc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x1f2>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e008      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e004      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x204>
 8001ada:	2300      	movs	r3, #0
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aec:	4934      	ldr	r1, [pc, #208]	; (8001bc0 <HAL_GPIO_Init+0x2e8>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b48:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_GPIO_Init+0x300>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f67f aea2 	bls.w	80018f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3724      	adds	r7, #36	; 0x24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e25b      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfa:	4ba3      	ldr	r3, [pc, #652]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d00c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d157      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e236      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x74>
 8001c42:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a90      	ldr	r2, [pc, #576]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a8a      	ldr	r2, [pc, #552]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a87      	ldr	r2, [pc, #540]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c74:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a83      	ldr	r2, [pc, #524]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b81      	ldr	r3, [pc, #516]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fa6e 	bl	8001174 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fa6a 	bl	8001174 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1fb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fa5a 	bl	8001174 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fa56 	bl	8001174 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1e7      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1bb      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4952      	ldr	r1, [pc, #328]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <HAL_RCC_OscConfig+0x2b0>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa0f 	bl	8001174 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fa0b 	bl	8001174 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e19c      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4940      	ldr	r1, [pc, #256]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_OscConfig+0x2b0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f9ee 	bl	8001174 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f9ea 	bl	8001174 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e17b      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x2b4>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff f9ce 	bl	8001174 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff f9ca 	bl	8001174 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e15b      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x200>
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x2b4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7ff f9b7 	bl	8001174 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7ff f9b3 	bl	8001174 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e144      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a0 	beq.w	8001f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x2b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d121      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_RCC_OscConfig+0x2b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_RCC_OscConfig+0x2b8>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f979 	bl	8001174 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e011      	b.n	8001eaa <HAL_RCC_OscConfig+0x2ce>
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
 8001e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7ff f96c 	bl	8001174 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0fd      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x4d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
 8001ebe:	4b7d      	ldr	r3, [pc, #500]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a7c      	ldr	r2, [pc, #496]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x32a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x312>
 8001ed4:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	4b74      	ldr	r3, [pc, #464]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a73      	ldr	r2, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x32a>
 8001eee:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a70      	ldr	r2, [pc, #448]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a6d      	ldr	r2, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f931 	bl	8001174 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f92d 	bl	8001174 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0bc      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x33a>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f91b 	bl	8001174 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff f917 	bl	8001174 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0a6      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a51      	ldr	r2, [pc, #324]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8092 	beq.w	80020a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d05c      	beq.n	8002046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d141      	bne.n	8002018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f8eb 	bl	8001174 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f8e7 	bl	8001174 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e078      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	061b      	lsls	r3, r3, #24
 8001fe4:	4933      	ldr	r1, [pc, #204]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8c0 	bl	8001174 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f8bc 	bl	8001174 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e04d      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
 8002016:	e045      	b.n	80020a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4dc>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff f8a9 	bl	8001174 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f8a5 	bl	8001174 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e036      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x44a>
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e029      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_RCC_OscConfig+0x4d8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	429a      	cmp	r2, r3
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d115      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470060 	.word	0x42470060

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90c      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d044      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d119      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4934      	ldr	r1, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe ffe2 	bl	8001174 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7fe ffde 	bl	8001174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d20c      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4601      	mov	r1, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	fa21 f303 	lsr.w	r3, r1, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ff42 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	08004340 	.word	0x08004340
 8002280:	20000000 	.word	0x20000000
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229e:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d007      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0x32>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d008      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x38>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 808d 	bne.w	80023ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022b6:	60bb      	str	r3, [r7, #8]
       break;
 80022b8:	e08c      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80022bc:	60bb      	str	r3, [r7, #8]
      break;
 80022be:	e089      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c0:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ca:	4b45      	ldr	r3, [pc, #276]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d023      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	099b      	lsrs	r3, r3, #6
 80022dc:	f04f 0400 	mov.w	r4, #0
 80022e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	ea03 0501 	and.w	r5, r3, r1
 80022ec:	ea04 0602 	and.w	r6, r4, r2
 80022f0:	4a3d      	ldr	r2, [pc, #244]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80022f2:	fb02 f106 	mul.w	r1, r2, r6
 80022f6:	2200      	movs	r2, #0
 80022f8:	fb02 f205 	mul.w	r2, r2, r5
 80022fc:	440a      	add	r2, r1
 80022fe:	493a      	ldr	r1, [pc, #232]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002300:	fba5 0101 	umull	r0, r1, r5, r1
 8002304:	1853      	adds	r3, r2, r1
 8002306:	4619      	mov	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f04f 0400 	mov.w	r4, #0
 800230e:	461a      	mov	r2, r3
 8002310:	4623      	mov	r3, r4
 8002312:	f7fd ffb5 	bl	8000280 <__aeabi_uldivmod>
 8002316:	4603      	mov	r3, r0
 8002318:	460c      	mov	r4, r1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e049      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	f04f 0400 	mov.w	r4, #0
 8002328:	f240 11ff 	movw	r1, #511	; 0x1ff
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	ea03 0501 	and.w	r5, r3, r1
 8002334:	ea04 0602 	and.w	r6, r4, r2
 8002338:	4629      	mov	r1, r5
 800233a:	4632      	mov	r2, r6
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	f04f 0400 	mov.w	r4, #0
 8002344:	0154      	lsls	r4, r2, #5
 8002346:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800234a:	014b      	lsls	r3, r1, #5
 800234c:	4619      	mov	r1, r3
 800234e:	4622      	mov	r2, r4
 8002350:	1b49      	subs	r1, r1, r5
 8002352:	eb62 0206 	sbc.w	r2, r2, r6
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	f04f 0400 	mov.w	r4, #0
 800235e:	0194      	lsls	r4, r2, #6
 8002360:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002364:	018b      	lsls	r3, r1, #6
 8002366:	1a5b      	subs	r3, r3, r1
 8002368:	eb64 0402 	sbc.w	r4, r4, r2
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	00e2      	lsls	r2, r4, #3
 8002376:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800237a:	00d9      	lsls	r1, r3, #3
 800237c:	460b      	mov	r3, r1
 800237e:	4614      	mov	r4, r2
 8002380:	195b      	adds	r3, r3, r5
 8002382:	eb44 0406 	adc.w	r4, r4, r6
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	02a2      	lsls	r2, r4, #10
 8002390:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002394:	0299      	lsls	r1, r3, #10
 8002396:	460b      	mov	r3, r1
 8002398:	4614      	mov	r4, r2
 800239a:	4618      	mov	r0, r3
 800239c:	4621      	mov	r1, r4
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f04f 0400 	mov.w	r4, #0
 80023a4:	461a      	mov	r2, r3
 80023a6:	4623      	mov	r3, r4
 80023a8:	f7fd ff6a 	bl	8000280 <__aeabi_uldivmod>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	3301      	adds	r3, #1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	60bb      	str	r3, [r7, #8]
      break;
 80023cc:	e002      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023d0:	60bb      	str	r3, [r7, #8]
      break;
 80023d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d4:	68bb      	ldr	r3, [r7, #8]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	017d7840 	.word	0x017d7840

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002408:	f7ff fff0 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 800240c:	4601      	mov	r1, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4a03      	ldr	r2, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08004350 	.word	0x08004350

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002430:	f7ff ffdc 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002434:	4601      	mov	r1, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0b5b      	lsrs	r3, r3, #13
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4a03      	ldr	r2, [pc, #12]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	08004350 	.word	0x08004350

08002454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e056      	b.n	8002514 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe fc0d 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	ea42 0103 	orr.w	r1, r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	f003 0104 	and.w	r1, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e03f      	b.n	80025ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fc14 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	; 0x24
 800254c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800255e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fb97 	bl	8002c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b088      	sub	sp, #32
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 8083 	bne.w	80026de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_UART_Transmit+0x2e>
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e07b      	b.n	80026e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Transmit+0x40>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e074      	b.n	80026e0 <HAL_UART_Transmit+0x12a>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2221      	movs	r2, #33	; 0x21
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800260c:	f7fe fdb2 	bl	8001174 <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002626:	e042      	b.n	80026ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263e:	d122      	bne.n	8002686 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f9b6 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e042      	b.n	80026e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3302      	adds	r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	e017      	b.n	80026ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	e013      	b.n	80026ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f993 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e01f      	b.n	80026e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	60ba      	str	r2, [r7, #8]
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1b7      	bne.n	8002628 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	2140      	movs	r1, #64	; 0x40
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f97a 	bl	80029bc <UART_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e006      	b.n	80026e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d140      	bne.n	8002784 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_UART_Receive_IT+0x26>
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e039      	b.n	8002786 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_UART_Receive_IT+0x38>
 800271c:	2302      	movs	r3, #2
 800271e:	e032      	b.n	8002786 <HAL_UART_Receive_IT+0x9e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2222      	movs	r2, #34	; 0x22
 8002744:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800275e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_UART_IRQHandler+0x52>
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f9d6 	bl	8002b90 <UART_Receive_IT>
      return;
 80027e4:	e0d1      	b.n	800298a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80b0 	beq.w	800294e <HAL_UART_IRQHandler+0x1ba>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_UART_IRQHandler+0x70>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80a5 	beq.w	800294e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_UART_IRQHandler+0x90>
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_UART_IRQHandler+0xb0>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	f043 0202 	orr.w	r2, r3, #2
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_UART_IRQHandler+0xd0>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	f043 0204 	orr.w	r2, r3, #4
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00f      	beq.n	800288e <HAL_UART_IRQHandler+0xfa>
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <HAL_UART_IRQHandler+0xee>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	f043 0208 	orr.w	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d078      	beq.n	8002988 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_UART_IRQHandler+0x11c>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f970 	bl	8002b90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_UART_IRQHandler+0x144>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d031      	beq.n	800293c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f8b9 	bl	8002a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d123      	bne.n	8002934 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	4a21      	ldr	r2, [pc, #132]	; (8002990 <HAL_UART_IRQHandler+0x1fc>)
 800290a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe ffbe 	bl	8001892 <HAL_DMA_Abort_IT>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002926:	4610      	mov	r0, r2
 8002928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292a:	e00e      	b.n	800294a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f83b 	bl	80029a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002932:	e00a      	b.n	800294a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f837 	bl	80029a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293a:	e006      	b.n	800294a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f833 	bl	80029a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002948:	e01e      	b.n	8002988 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294a:	bf00      	nop
    return;
 800294c:	e01c      	b.n	8002988 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_UART_IRQHandler+0x1d6>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8a6 	bl	8002ab4 <UART_Transmit_IT>
    return;
 8002968:	e00f      	b.n	800298a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_UART_IRQHandler+0x1f6>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8ee 	bl	8002b60 <UART_EndTransmit_IT>
    return;
 8002984:	bf00      	nop
 8002986:	e000      	b.n	800298a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002988:	bf00      	nop
  }
}
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	08002a8d 	.word	0x08002a8d

08002994 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029cc:	e02c      	b.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d028      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <UART_WaitOnFlagUntilTimeout+0x30>
 80029dc:	f7fe fbca 	bl	8001174 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d21d      	bcs.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e00f      	b.n	8002a48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d0c3      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ff7e 	bl	80029a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b21      	cmp	r3, #33	; 0x21
 8002ac6:	d144      	bne.n	8002b52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d11a      	bne.n	8002b08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	1c9a      	adds	r2, r3, #2
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]
 8002afa:	e00e      	b.n	8002b1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]
 8002b06:	e008      	b.n	8002b1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	1c59      	adds	r1, r3, #1
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6211      	str	r1, [r2, #32]
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4619      	mov	r1, r3
 8002b28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff07 	bl	8002994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b22      	cmp	r3, #34	; 0x22
 8002ba2:	d171      	bne.n	8002c88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d123      	bne.n	8002bf6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10e      	bne.n	8002bda <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	1c9a      	adds	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd8:	e029      	b.n	8002c2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf4:	e01b      	b.n	8002c2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6858      	ldr	r0, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6291      	str	r1, [r2, #40]	; 0x28
 8002c0e:	b2c2      	uxtb	r2, r0
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e00c      	b.n	8002c2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	1c58      	adds	r0, r3, #1
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	6288      	str	r0, [r1, #40]	; 0x28
 8002c26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d120      	bne.n	8002c84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0220 	bic.w	r2, r2, #32
 8002c50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fd8a 	bl	8000794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e002      	b.n	8002c8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cd6:	f023 030c 	bic.w	r3, r3, #12
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d02:	f040 818b 	bne.w	800301c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4ac1      	ldr	r2, [pc, #772]	; (8003010 <UART_SetConfig+0x37c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d005      	beq.n	8002d1c <UART_SetConfig+0x88>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4abf      	ldr	r2, [pc, #764]	; (8003014 <UART_SetConfig+0x380>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f040 80bd 	bne.w	8002e96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d1c:	f7ff fb86 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8002d20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	461d      	mov	r5, r3
 8002d26:	f04f 0600 	mov.w	r6, #0
 8002d2a:	46a8      	mov	r8, r5
 8002d2c:	46b1      	mov	r9, r6
 8002d2e:	eb18 0308 	adds.w	r3, r8, r8
 8002d32:	eb49 0409 	adc.w	r4, r9, r9
 8002d36:	4698      	mov	r8, r3
 8002d38:	46a1      	mov	r9, r4
 8002d3a:	eb18 0805 	adds.w	r8, r8, r5
 8002d3e:	eb49 0906 	adc.w	r9, r9, r6
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d56:	4688      	mov	r8, r1
 8002d58:	4691      	mov	r9, r2
 8002d5a:	eb18 0005 	adds.w	r0, r8, r5
 8002d5e:	eb49 0106 	adc.w	r1, r9, r6
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	461d      	mov	r5, r3
 8002d68:	f04f 0600 	mov.w	r6, #0
 8002d6c:	196b      	adds	r3, r5, r5
 8002d6e:	eb46 0406 	adc.w	r4, r6, r6
 8002d72:	461a      	mov	r2, r3
 8002d74:	4623      	mov	r3, r4
 8002d76:	f7fd fa83 	bl	8000280 <__aeabi_uldivmod>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4ba5      	ldr	r3, [pc, #660]	; (8003018 <UART_SetConfig+0x384>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	461d      	mov	r5, r3
 8002d90:	f04f 0600 	mov.w	r6, #0
 8002d94:	46a9      	mov	r9, r5
 8002d96:	46b2      	mov	sl, r6
 8002d98:	eb19 0309 	adds.w	r3, r9, r9
 8002d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8002da0:	4699      	mov	r9, r3
 8002da2:	46a2      	mov	sl, r4
 8002da4:	eb19 0905 	adds.w	r9, r9, r5
 8002da8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dc0:	4689      	mov	r9, r1
 8002dc2:	4692      	mov	sl, r2
 8002dc4:	eb19 0005 	adds.w	r0, r9, r5
 8002dc8:	eb4a 0106 	adc.w	r1, sl, r6
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	f04f 0600 	mov.w	r6, #0
 8002dd6:	196b      	adds	r3, r5, r5
 8002dd8:	eb46 0406 	adc.w	r4, r6, r6
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	f7fd fa4e 	bl	8000280 <__aeabi_uldivmod>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <UART_SetConfig+0x384>)
 8002dec:	fba3 1302 	umull	r1, r3, r3, r2
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	2164      	movs	r1, #100	; 0x64
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	3332      	adds	r3, #50	; 0x32
 8002dfe:	4a86      	ldr	r2, [pc, #536]	; (8003018 <UART_SetConfig+0x384>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e0c:	4498      	add	r8, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	461d      	mov	r5, r3
 8002e12:	f04f 0600 	mov.w	r6, #0
 8002e16:	46a9      	mov	r9, r5
 8002e18:	46b2      	mov	sl, r6
 8002e1a:	eb19 0309 	adds.w	r3, r9, r9
 8002e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e22:	4699      	mov	r9, r3
 8002e24:	46a2      	mov	sl, r4
 8002e26:	eb19 0905 	adds.w	r9, r9, r5
 8002e2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e42:	4689      	mov	r9, r1
 8002e44:	4692      	mov	sl, r2
 8002e46:	eb19 0005 	adds.w	r0, r9, r5
 8002e4a:	eb4a 0106 	adc.w	r1, sl, r6
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	461d      	mov	r5, r3
 8002e54:	f04f 0600 	mov.w	r6, #0
 8002e58:	196b      	adds	r3, r5, r5
 8002e5a:	eb46 0406 	adc.w	r4, r6, r6
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4623      	mov	r3, r4
 8002e62:	f7fd fa0d 	bl	8000280 <__aeabi_uldivmod>
 8002e66:	4603      	mov	r3, r0
 8002e68:	460c      	mov	r4, r1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <UART_SetConfig+0x384>)
 8002e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2164      	movs	r1, #100	; 0x64
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	3332      	adds	r3, #50	; 0x32
 8002e80:	4a65      	ldr	r2, [pc, #404]	; (8003018 <UART_SetConfig+0x384>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	f003 0207 	and.w	r2, r3, #7
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4442      	add	r2, r8
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	e26f      	b.n	8003376 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e96:	f7ff fab5 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8002e9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	f04f 0600 	mov.w	r6, #0
 8002ea4:	46a8      	mov	r8, r5
 8002ea6:	46b1      	mov	r9, r6
 8002ea8:	eb18 0308 	adds.w	r3, r8, r8
 8002eac:	eb49 0409 	adc.w	r4, r9, r9
 8002eb0:	4698      	mov	r8, r3
 8002eb2:	46a1      	mov	r9, r4
 8002eb4:	eb18 0805 	adds.w	r8, r8, r5
 8002eb8:	eb49 0906 	adc.w	r9, r9, r6
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ec8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ecc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ed0:	4688      	mov	r8, r1
 8002ed2:	4691      	mov	r9, r2
 8002ed4:	eb18 0005 	adds.w	r0, r8, r5
 8002ed8:	eb49 0106 	adc.w	r1, r9, r6
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	f04f 0600 	mov.w	r6, #0
 8002ee6:	196b      	adds	r3, r5, r5
 8002ee8:	eb46 0406 	adc.w	r4, r6, r6
 8002eec:	461a      	mov	r2, r3
 8002eee:	4623      	mov	r3, r4
 8002ef0:	f7fd f9c6 	bl	8000280 <__aeabi_uldivmod>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <UART_SetConfig+0x384>)
 8002efc:	fba3 2302 	umull	r2, r3, r3, r2
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	461d      	mov	r5, r3
 8002f0a:	f04f 0600 	mov.w	r6, #0
 8002f0e:	46a9      	mov	r9, r5
 8002f10:	46b2      	mov	sl, r6
 8002f12:	eb19 0309 	adds.w	r3, r9, r9
 8002f16:	eb4a 040a 	adc.w	r4, sl, sl
 8002f1a:	4699      	mov	r9, r3
 8002f1c:	46a2      	mov	sl, r4
 8002f1e:	eb19 0905 	adds.w	r9, r9, r5
 8002f22:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f3a:	4689      	mov	r9, r1
 8002f3c:	4692      	mov	sl, r2
 8002f3e:	eb19 0005 	adds.w	r0, r9, r5
 8002f42:	eb4a 0106 	adc.w	r1, sl, r6
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	f04f 0600 	mov.w	r6, #0
 8002f50:	196b      	adds	r3, r5, r5
 8002f52:	eb46 0406 	adc.w	r4, r6, r6
 8002f56:	461a      	mov	r2, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	f7fd f991 	bl	8000280 <__aeabi_uldivmod>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	460c      	mov	r4, r1
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <UART_SetConfig+0x384>)
 8002f66:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2164      	movs	r1, #100	; 0x64
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a27      	ldr	r2, [pc, #156]	; (8003018 <UART_SetConfig+0x384>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f86:	4498      	add	r8, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	f04f 0600 	mov.w	r6, #0
 8002f90:	46a9      	mov	r9, r5
 8002f92:	46b2      	mov	sl, r6
 8002f94:	eb19 0309 	adds.w	r3, r9, r9
 8002f98:	eb4a 040a 	adc.w	r4, sl, sl
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	46a2      	mov	sl, r4
 8002fa0:	eb19 0905 	adds.w	r9, r9, r5
 8002fa4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fa8:	f04f 0100 	mov.w	r1, #0
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fbc:	4689      	mov	r9, r1
 8002fbe:	4692      	mov	sl, r2
 8002fc0:	eb19 0005 	adds.w	r0, r9, r5
 8002fc4:	eb4a 0106 	adc.w	r1, sl, r6
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	461d      	mov	r5, r3
 8002fce:	f04f 0600 	mov.w	r6, #0
 8002fd2:	196b      	adds	r3, r5, r5
 8002fd4:	eb46 0406 	adc.w	r4, r6, r6
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	f7fd f950 	bl	8000280 <__aeabi_uldivmod>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <UART_SetConfig+0x384>)
 8002fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <UART_SetConfig+0x384>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4442      	add	r2, r8
 800300c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800300e:	e1b2      	b.n	8003376 <UART_SetConfig+0x6e2>
 8003010:	40011000 	.word	0x40011000
 8003014:	40011400 	.word	0x40011400
 8003018:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4ad7      	ldr	r2, [pc, #860]	; (8003380 <UART_SetConfig+0x6ec>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d005      	beq.n	8003032 <UART_SetConfig+0x39e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4ad6      	ldr	r2, [pc, #856]	; (8003384 <UART_SetConfig+0x6f0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	f040 80d1 	bne.w	80031d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003032:	f7ff f9fb 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8003036:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	469a      	mov	sl, r3
 800303c:	f04f 0b00 	mov.w	fp, #0
 8003040:	46d0      	mov	r8, sl
 8003042:	46d9      	mov	r9, fp
 8003044:	eb18 0308 	adds.w	r3, r8, r8
 8003048:	eb49 0409 	adc.w	r4, r9, r9
 800304c:	4698      	mov	r8, r3
 800304e:	46a1      	mov	r9, r4
 8003050:	eb18 080a 	adds.w	r8, r8, sl
 8003054:	eb49 090b 	adc.w	r9, r9, fp
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003064:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003068:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800306c:	4688      	mov	r8, r1
 800306e:	4691      	mov	r9, r2
 8003070:	eb1a 0508 	adds.w	r5, sl, r8
 8003074:	eb4b 0609 	adc.w	r6, fp, r9
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4619      	mov	r1, r3
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f04f 0400 	mov.w	r4, #0
 800308a:	0094      	lsls	r4, r2, #2
 800308c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003090:	008b      	lsls	r3, r1, #2
 8003092:	461a      	mov	r2, r3
 8003094:	4623      	mov	r3, r4
 8003096:	4628      	mov	r0, r5
 8003098:	4631      	mov	r1, r6
 800309a:	f7fd f8f1 	bl	8000280 <__aeabi_uldivmod>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	461a      	mov	r2, r3
 80030a4:	4bb8      	ldr	r3, [pc, #736]	; (8003388 <UART_SetConfig+0x6f4>)
 80030a6:	fba3 2302 	umull	r2, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	469b      	mov	fp, r3
 80030b4:	f04f 0c00 	mov.w	ip, #0
 80030b8:	46d9      	mov	r9, fp
 80030ba:	46e2      	mov	sl, ip
 80030bc:	eb19 0309 	adds.w	r3, r9, r9
 80030c0:	eb4a 040a 	adc.w	r4, sl, sl
 80030c4:	4699      	mov	r9, r3
 80030c6:	46a2      	mov	sl, r4
 80030c8:	eb19 090b 	adds.w	r9, r9, fp
 80030cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030e4:	4689      	mov	r9, r1
 80030e6:	4692      	mov	sl, r2
 80030e8:	eb1b 0509 	adds.w	r5, fp, r9
 80030ec:	eb4c 060a 	adc.w	r6, ip, sl
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f04f 0400 	mov.w	r4, #0
 8003102:	0094      	lsls	r4, r2, #2
 8003104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003108:	008b      	lsls	r3, r1, #2
 800310a:	461a      	mov	r2, r3
 800310c:	4623      	mov	r3, r4
 800310e:	4628      	mov	r0, r5
 8003110:	4631      	mov	r1, r6
 8003112:	f7fd f8b5 	bl	8000280 <__aeabi_uldivmod>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	461a      	mov	r2, r3
 800311c:	4b9a      	ldr	r3, [pc, #616]	; (8003388 <UART_SetConfig+0x6f4>)
 800311e:	fba3 1302 	umull	r1, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2164      	movs	r1, #100	; 0x64
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a95      	ldr	r2, [pc, #596]	; (8003388 <UART_SetConfig+0x6f4>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	4498      	add	r8, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	469b      	mov	fp, r3
 8003142:	f04f 0c00 	mov.w	ip, #0
 8003146:	46d9      	mov	r9, fp
 8003148:	46e2      	mov	sl, ip
 800314a:	eb19 0309 	adds.w	r3, r9, r9
 800314e:	eb4a 040a 	adc.w	r4, sl, sl
 8003152:	4699      	mov	r9, r3
 8003154:	46a2      	mov	sl, r4
 8003156:	eb19 090b 	adds.w	r9, r9, fp
 800315a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800316a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800316e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003172:	4689      	mov	r9, r1
 8003174:	4692      	mov	sl, r2
 8003176:	eb1b 0509 	adds.w	r5, fp, r9
 800317a:	eb4c 060a 	adc.w	r6, ip, sl
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4619      	mov	r1, r3
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	0094      	lsls	r4, r2, #2
 8003192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003196:	008b      	lsls	r3, r1, #2
 8003198:	461a      	mov	r2, r3
 800319a:	4623      	mov	r3, r4
 800319c:	4628      	mov	r0, r5
 800319e:	4631      	mov	r1, r6
 80031a0:	f7fd f86e 	bl	8000280 <__aeabi_uldivmod>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b77      	ldr	r3, [pc, #476]	; (8003388 <UART_SetConfig+0x6f4>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a72      	ldr	r2, [pc, #456]	; (8003388 <UART_SetConfig+0x6f4>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4442      	add	r2, r8
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	e0d0      	b.n	8003376 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031d4:	f7ff f916 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 80031d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	469a      	mov	sl, r3
 80031de:	f04f 0b00 	mov.w	fp, #0
 80031e2:	46d0      	mov	r8, sl
 80031e4:	46d9      	mov	r9, fp
 80031e6:	eb18 0308 	adds.w	r3, r8, r8
 80031ea:	eb49 0409 	adc.w	r4, r9, r9
 80031ee:	4698      	mov	r8, r3
 80031f0:	46a1      	mov	r9, r4
 80031f2:	eb18 080a 	adds.w	r8, r8, sl
 80031f6:	eb49 090b 	adc.w	r9, r9, fp
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003206:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800320a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800320e:	4688      	mov	r8, r1
 8003210:	4691      	mov	r9, r2
 8003212:	eb1a 0508 	adds.w	r5, sl, r8
 8003216:	eb4b 0609 	adc.w	r6, fp, r9
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4619      	mov	r1, r3
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	f04f 0400 	mov.w	r4, #0
 800322c:	0094      	lsls	r4, r2, #2
 800322e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	461a      	mov	r2, r3
 8003236:	4623      	mov	r3, r4
 8003238:	4628      	mov	r0, r5
 800323a:	4631      	mov	r1, r6
 800323c:	f7fd f820 	bl	8000280 <__aeabi_uldivmod>
 8003240:	4603      	mov	r3, r0
 8003242:	460c      	mov	r4, r1
 8003244:	461a      	mov	r2, r3
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <UART_SetConfig+0x6f4>)
 8003248:	fba3 2302 	umull	r2, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	469b      	mov	fp, r3
 8003256:	f04f 0c00 	mov.w	ip, #0
 800325a:	46d9      	mov	r9, fp
 800325c:	46e2      	mov	sl, ip
 800325e:	eb19 0309 	adds.w	r3, r9, r9
 8003262:	eb4a 040a 	adc.w	r4, sl, sl
 8003266:	4699      	mov	r9, r3
 8003268:	46a2      	mov	sl, r4
 800326a:	eb19 090b 	adds.w	r9, r9, fp
 800326e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800327e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003286:	4689      	mov	r9, r1
 8003288:	4692      	mov	sl, r2
 800328a:	eb1b 0509 	adds.w	r5, fp, r9
 800328e:	eb4c 060a 	adc.w	r6, ip, sl
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4619      	mov	r1, r3
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	f04f 0400 	mov.w	r4, #0
 80032a4:	0094      	lsls	r4, r2, #2
 80032a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032aa:	008b      	lsls	r3, r1, #2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4623      	mov	r3, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	4631      	mov	r1, r6
 80032b4:	f7fc ffe4 	bl	8000280 <__aeabi_uldivmod>
 80032b8:	4603      	mov	r3, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	461a      	mov	r2, r3
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <UART_SetConfig+0x6f4>)
 80032c0:	fba3 1302 	umull	r1, r3, r3, r2
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	2164      	movs	r1, #100	; 0x64
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	3332      	adds	r3, #50	; 0x32
 80032d2:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <UART_SetConfig+0x6f4>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032de:	4498      	add	r8, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	469b      	mov	fp, r3
 80032e4:	f04f 0c00 	mov.w	ip, #0
 80032e8:	46d9      	mov	r9, fp
 80032ea:	46e2      	mov	sl, ip
 80032ec:	eb19 0309 	adds.w	r3, r9, r9
 80032f0:	eb4a 040a 	adc.w	r4, sl, sl
 80032f4:	4699      	mov	r9, r3
 80032f6:	46a2      	mov	sl, r4
 80032f8:	eb19 090b 	adds.w	r9, r9, fp
 80032fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800330c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003314:	4689      	mov	r9, r1
 8003316:	4692      	mov	sl, r2
 8003318:	eb1b 0509 	adds.w	r5, fp, r9
 800331c:	eb4c 060a 	adc.w	r6, ip, sl
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	0094      	lsls	r4, r2, #2
 8003334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	461a      	mov	r2, r3
 800333c:	4623      	mov	r3, r4
 800333e:	4628      	mov	r0, r5
 8003340:	4631      	mov	r1, r6
 8003342:	f7fc ff9d 	bl	8000280 <__aeabi_uldivmod>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	461a      	mov	r2, r3
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <UART_SetConfig+0x6f4>)
 800334e:	fba3 1302 	umull	r1, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <UART_SetConfig+0x6f4>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4442      	add	r2, r8
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	e7ff      	b.n	8003376 <UART_SetConfig+0x6e2>
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003380:	40011000 	.word	0x40011000
 8003384:	40011400 	.word	0x40011400
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <__errno>:
 800338c:	4b01      	ldr	r3, [pc, #4]	; (8003394 <__errno+0x8>)
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000000c 	.word	0x2000000c

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4e0d      	ldr	r6, [pc, #52]	; (80033d0 <__libc_init_array+0x38>)
 800339c:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <__libc_init_array+0x3c>)
 800339e:	1ba4      	subs	r4, r4, r6
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	2500      	movs	r5, #0
 80033a4:	42a5      	cmp	r5, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	4e0b      	ldr	r6, [pc, #44]	; (80033d8 <__libc_init_array+0x40>)
 80033aa:	4c0c      	ldr	r4, [pc, #48]	; (80033dc <__libc_init_array+0x44>)
 80033ac:	f000 ff82 	bl	80042b4 <_init>
 80033b0:	1ba4      	subs	r4, r4, r6
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	2500      	movs	r5, #0
 80033b6:	42a5      	cmp	r5, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033c0:	4798      	blx	r3
 80033c2:	3501      	adds	r5, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ca:	4798      	blx	r3
 80033cc:	3501      	adds	r5, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	080043f8 	.word	0x080043f8
 80033d4:	080043f8 	.word	0x080043f8
 80033d8:	080043f8 	.word	0x080043f8
 80033dc:	080043fc 	.word	0x080043fc

080033e0 <memset>:
 80033e0:	4402      	add	r2, r0
 80033e2:	4603      	mov	r3, r0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d100      	bne.n	80033ea <memset+0xa>
 80033e8:	4770      	bx	lr
 80033ea:	f803 1b01 	strb.w	r1, [r3], #1
 80033ee:	e7f9      	b.n	80033e4 <memset+0x4>

080033f0 <iprintf>:
 80033f0:	b40f      	push	{r0, r1, r2, r3}
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <iprintf+0x2c>)
 80033f4:	b513      	push	{r0, r1, r4, lr}
 80033f6:	681c      	ldr	r4, [r3, #0]
 80033f8:	b124      	cbz	r4, 8003404 <iprintf+0x14>
 80033fa:	69a3      	ldr	r3, [r4, #24]
 80033fc:	b913      	cbnz	r3, 8003404 <iprintf+0x14>
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 fa3c 	bl	800387c <__sinit>
 8003404:	ab05      	add	r3, sp, #20
 8003406:	9a04      	ldr	r2, [sp, #16]
 8003408:	68a1      	ldr	r1, [r4, #8]
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fbf5 	bl	8003bfc <_vfiprintf_r>
 8003412:	b002      	add	sp, #8
 8003414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003418:	b004      	add	sp, #16
 800341a:	4770      	bx	lr
 800341c:	2000000c 	.word	0x2000000c

08003420 <_puts_r>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	460e      	mov	r6, r1
 8003424:	4605      	mov	r5, r0
 8003426:	b118      	cbz	r0, 8003430 <_puts_r+0x10>
 8003428:	6983      	ldr	r3, [r0, #24]
 800342a:	b90b      	cbnz	r3, 8003430 <_puts_r+0x10>
 800342c:	f000 fa26 	bl	800387c <__sinit>
 8003430:	69ab      	ldr	r3, [r5, #24]
 8003432:	68ac      	ldr	r4, [r5, #8]
 8003434:	b913      	cbnz	r3, 800343c <_puts_r+0x1c>
 8003436:	4628      	mov	r0, r5
 8003438:	f000 fa20 	bl	800387c <__sinit>
 800343c:	4b23      	ldr	r3, [pc, #140]	; (80034cc <_puts_r+0xac>)
 800343e:	429c      	cmp	r4, r3
 8003440:	d117      	bne.n	8003472 <_puts_r+0x52>
 8003442:	686c      	ldr	r4, [r5, #4]
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	071b      	lsls	r3, r3, #28
 8003448:	d51d      	bpl.n	8003486 <_puts_r+0x66>
 800344a:	6923      	ldr	r3, [r4, #16]
 800344c:	b1db      	cbz	r3, 8003486 <_puts_r+0x66>
 800344e:	3e01      	subs	r6, #1
 8003450:	68a3      	ldr	r3, [r4, #8]
 8003452:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003456:	3b01      	subs	r3, #1
 8003458:	60a3      	str	r3, [r4, #8]
 800345a:	b9e9      	cbnz	r1, 8003498 <_puts_r+0x78>
 800345c:	2b00      	cmp	r3, #0
 800345e:	da2e      	bge.n	80034be <_puts_r+0x9e>
 8003460:	4622      	mov	r2, r4
 8003462:	210a      	movs	r1, #10
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f859 	bl	800351c <__swbuf_r>
 800346a:	3001      	adds	r0, #1
 800346c:	d011      	beq.n	8003492 <_puts_r+0x72>
 800346e:	200a      	movs	r0, #10
 8003470:	e011      	b.n	8003496 <_puts_r+0x76>
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <_puts_r+0xb0>)
 8003474:	429c      	cmp	r4, r3
 8003476:	d101      	bne.n	800347c <_puts_r+0x5c>
 8003478:	68ac      	ldr	r4, [r5, #8]
 800347a:	e7e3      	b.n	8003444 <_puts_r+0x24>
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <_puts_r+0xb4>)
 800347e:	429c      	cmp	r4, r3
 8003480:	bf08      	it	eq
 8003482:	68ec      	ldreq	r4, [r5, #12]
 8003484:	e7de      	b.n	8003444 <_puts_r+0x24>
 8003486:	4621      	mov	r1, r4
 8003488:	4628      	mov	r0, r5
 800348a:	f000 f899 	bl	80035c0 <__swsetup_r>
 800348e:	2800      	cmp	r0, #0
 8003490:	d0dd      	beq.n	800344e <_puts_r+0x2e>
 8003492:	f04f 30ff 	mov.w	r0, #4294967295
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	2b00      	cmp	r3, #0
 800349a:	da04      	bge.n	80034a6 <_puts_r+0x86>
 800349c:	69a2      	ldr	r2, [r4, #24]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dc06      	bgt.n	80034b0 <_puts_r+0x90>
 80034a2:	290a      	cmp	r1, #10
 80034a4:	d004      	beq.n	80034b0 <_puts_r+0x90>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	6022      	str	r2, [r4, #0]
 80034ac:	7019      	strb	r1, [r3, #0]
 80034ae:	e7cf      	b.n	8003450 <_puts_r+0x30>
 80034b0:	4622      	mov	r2, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 f832 	bl	800351c <__swbuf_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d1c9      	bne.n	8003450 <_puts_r+0x30>
 80034bc:	e7e9      	b.n	8003492 <_puts_r+0x72>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	200a      	movs	r0, #10
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	7018      	strb	r0, [r3, #0]
 80034c8:	e7e5      	b.n	8003496 <_puts_r+0x76>
 80034ca:	bf00      	nop
 80034cc:	0800437c 	.word	0x0800437c
 80034d0:	0800439c 	.word	0x0800439c
 80034d4:	0800435c 	.word	0x0800435c

080034d8 <puts>:
 80034d8:	4b02      	ldr	r3, [pc, #8]	; (80034e4 <puts+0xc>)
 80034da:	4601      	mov	r1, r0
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	f7ff bf9f 	b.w	8003420 <_puts_r>
 80034e2:	bf00      	nop
 80034e4:	2000000c 	.word	0x2000000c

080034e8 <strstr>:
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	7803      	ldrb	r3, [r0, #0]
 80034ec:	b17b      	cbz	r3, 800350e <strstr+0x26>
 80034ee:	4604      	mov	r4, r0
 80034f0:	7823      	ldrb	r3, [r4, #0]
 80034f2:	4620      	mov	r0, r4
 80034f4:	1c66      	adds	r6, r4, #1
 80034f6:	b17b      	cbz	r3, 8003518 <strstr+0x30>
 80034f8:	1e4a      	subs	r2, r1, #1
 80034fa:	1e63      	subs	r3, r4, #1
 80034fc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003500:	b14d      	cbz	r5, 8003516 <strstr+0x2e>
 8003502:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003506:	42af      	cmp	r7, r5
 8003508:	4634      	mov	r4, r6
 800350a:	d0f7      	beq.n	80034fc <strstr+0x14>
 800350c:	e7f0      	b.n	80034f0 <strstr+0x8>
 800350e:	780b      	ldrb	r3, [r1, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf18      	it	ne
 8003514:	2000      	movne	r0, #0
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003518:	4618      	mov	r0, r3
 800351a:	e7fc      	b.n	8003516 <strstr+0x2e>

0800351c <__swbuf_r>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	460e      	mov	r6, r1
 8003520:	4614      	mov	r4, r2
 8003522:	4605      	mov	r5, r0
 8003524:	b118      	cbz	r0, 800352e <__swbuf_r+0x12>
 8003526:	6983      	ldr	r3, [r0, #24]
 8003528:	b90b      	cbnz	r3, 800352e <__swbuf_r+0x12>
 800352a:	f000 f9a7 	bl	800387c <__sinit>
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <__swbuf_r+0x98>)
 8003530:	429c      	cmp	r4, r3
 8003532:	d12a      	bne.n	800358a <__swbuf_r+0x6e>
 8003534:	686c      	ldr	r4, [r5, #4]
 8003536:	69a3      	ldr	r3, [r4, #24]
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	071a      	lsls	r2, r3, #28
 800353e:	d52e      	bpl.n	800359e <__swbuf_r+0x82>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	b363      	cbz	r3, 800359e <__swbuf_r+0x82>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1ac0      	subs	r0, r0, r3
 800354a:	6963      	ldr	r3, [r4, #20]
 800354c:	b2f6      	uxtb	r6, r6
 800354e:	4283      	cmp	r3, r0
 8003550:	4637      	mov	r7, r6
 8003552:	dc04      	bgt.n	800355e <__swbuf_r+0x42>
 8003554:	4621      	mov	r1, r4
 8003556:	4628      	mov	r0, r5
 8003558:	f000 f926 	bl	80037a8 <_fflush_r>
 800355c:	bb28      	cbnz	r0, 80035aa <__swbuf_r+0x8e>
 800355e:	68a3      	ldr	r3, [r4, #8]
 8003560:	3b01      	subs	r3, #1
 8003562:	60a3      	str	r3, [r4, #8]
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	6022      	str	r2, [r4, #0]
 800356a:	701e      	strb	r6, [r3, #0]
 800356c:	6963      	ldr	r3, [r4, #20]
 800356e:	3001      	adds	r0, #1
 8003570:	4283      	cmp	r3, r0
 8003572:	d004      	beq.n	800357e <__swbuf_r+0x62>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	07db      	lsls	r3, r3, #31
 8003578:	d519      	bpl.n	80035ae <__swbuf_r+0x92>
 800357a:	2e0a      	cmp	r6, #10
 800357c:	d117      	bne.n	80035ae <__swbuf_r+0x92>
 800357e:	4621      	mov	r1, r4
 8003580:	4628      	mov	r0, r5
 8003582:	f000 f911 	bl	80037a8 <_fflush_r>
 8003586:	b190      	cbz	r0, 80035ae <__swbuf_r+0x92>
 8003588:	e00f      	b.n	80035aa <__swbuf_r+0x8e>
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <__swbuf_r+0x9c>)
 800358c:	429c      	cmp	r4, r3
 800358e:	d101      	bne.n	8003594 <__swbuf_r+0x78>
 8003590:	68ac      	ldr	r4, [r5, #8]
 8003592:	e7d0      	b.n	8003536 <__swbuf_r+0x1a>
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <__swbuf_r+0xa0>)
 8003596:	429c      	cmp	r4, r3
 8003598:	bf08      	it	eq
 800359a:	68ec      	ldreq	r4, [r5, #12]
 800359c:	e7cb      	b.n	8003536 <__swbuf_r+0x1a>
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f80d 	bl	80035c0 <__swsetup_r>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d0cc      	beq.n	8003544 <__swbuf_r+0x28>
 80035aa:	f04f 37ff 	mov.w	r7, #4294967295
 80035ae:	4638      	mov	r0, r7
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	0800437c 	.word	0x0800437c
 80035b8:	0800439c 	.word	0x0800439c
 80035bc:	0800435c 	.word	0x0800435c

080035c0 <__swsetup_r>:
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <__swsetup_r+0xcc>)
 80035c2:	b570      	push	{r4, r5, r6, lr}
 80035c4:	681d      	ldr	r5, [r3, #0]
 80035c6:	4606      	mov	r6, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	b125      	cbz	r5, 80035d6 <__swsetup_r+0x16>
 80035cc:	69ab      	ldr	r3, [r5, #24]
 80035ce:	b913      	cbnz	r3, 80035d6 <__swsetup_r+0x16>
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f953 	bl	800387c <__sinit>
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <__swsetup_r+0xd0>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	d10f      	bne.n	80035fc <__swsetup_r+0x3c>
 80035dc:	686c      	ldr	r4, [r5, #4]
 80035de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	0715      	lsls	r5, r2, #28
 80035e6:	d42c      	bmi.n	8003642 <__swsetup_r+0x82>
 80035e8:	06d0      	lsls	r0, r2, #27
 80035ea:	d411      	bmi.n	8003610 <__swsetup_r+0x50>
 80035ec:	2209      	movs	r2, #9
 80035ee:	6032      	str	r2, [r6, #0]
 80035f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	e03e      	b.n	800367a <__swsetup_r+0xba>
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <__swsetup_r+0xd4>)
 80035fe:	429c      	cmp	r4, r3
 8003600:	d101      	bne.n	8003606 <__swsetup_r+0x46>
 8003602:	68ac      	ldr	r4, [r5, #8]
 8003604:	e7eb      	b.n	80035de <__swsetup_r+0x1e>
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <__swsetup_r+0xd8>)
 8003608:	429c      	cmp	r4, r3
 800360a:	bf08      	it	eq
 800360c:	68ec      	ldreq	r4, [r5, #12]
 800360e:	e7e6      	b.n	80035de <__swsetup_r+0x1e>
 8003610:	0751      	lsls	r1, r2, #29
 8003612:	d512      	bpl.n	800363a <__swsetup_r+0x7a>
 8003614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003616:	b141      	cbz	r1, 800362a <__swsetup_r+0x6a>
 8003618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361c:	4299      	cmp	r1, r3
 800361e:	d002      	beq.n	8003626 <__swsetup_r+0x66>
 8003620:	4630      	mov	r0, r6
 8003622:	f000 fa19 	bl	8003a58 <_free_r>
 8003626:	2300      	movs	r3, #0
 8003628:	6363      	str	r3, [r4, #52]	; 0x34
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	6063      	str	r3, [r4, #4]
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	b94b      	cbnz	r3, 800365a <__swsetup_r+0x9a>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003650:	d003      	beq.n	800365a <__swsetup_r+0x9a>
 8003652:	4621      	mov	r1, r4
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f9bf 	bl	80039d8 <__smakebuf_r>
 800365a:	89a2      	ldrh	r2, [r4, #12]
 800365c:	f012 0301 	ands.w	r3, r2, #1
 8003660:	d00c      	beq.n	800367c <__swsetup_r+0xbc>
 8003662:	2300      	movs	r3, #0
 8003664:	60a3      	str	r3, [r4, #8]
 8003666:	6963      	ldr	r3, [r4, #20]
 8003668:	425b      	negs	r3, r3
 800366a:	61a3      	str	r3, [r4, #24]
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	b953      	cbnz	r3, 8003686 <__swsetup_r+0xc6>
 8003670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003674:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003678:	d1ba      	bne.n	80035f0 <__swsetup_r+0x30>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	0792      	lsls	r2, r2, #30
 800367e:	bf58      	it	pl
 8003680:	6963      	ldrpl	r3, [r4, #20]
 8003682:	60a3      	str	r3, [r4, #8]
 8003684:	e7f2      	b.n	800366c <__swsetup_r+0xac>
 8003686:	2000      	movs	r0, #0
 8003688:	e7f7      	b.n	800367a <__swsetup_r+0xba>
 800368a:	bf00      	nop
 800368c:	2000000c 	.word	0x2000000c
 8003690:	0800437c 	.word	0x0800437c
 8003694:	0800439c 	.word	0x0800439c
 8003698:	0800435c 	.word	0x0800435c

0800369c <__sflush_r>:
 800369c:	898a      	ldrh	r2, [r1, #12]
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	4605      	mov	r5, r0
 80036a4:	0710      	lsls	r0, r2, #28
 80036a6:	460c      	mov	r4, r1
 80036a8:	d458      	bmi.n	800375c <__sflush_r+0xc0>
 80036aa:	684b      	ldr	r3, [r1, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	dc05      	bgt.n	80036bc <__sflush_r+0x20>
 80036b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dc02      	bgt.n	80036bc <__sflush_r+0x20>
 80036b6:	2000      	movs	r0, #0
 80036b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036be:	2e00      	cmp	r6, #0
 80036c0:	d0f9      	beq.n	80036b6 <__sflush_r+0x1a>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c8:	682f      	ldr	r7, [r5, #0]
 80036ca:	6a21      	ldr	r1, [r4, #32]
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	d032      	beq.n	8003736 <__sflush_r+0x9a>
 80036d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	075a      	lsls	r2, r3, #29
 80036d6:	d505      	bpl.n	80036e4 <__sflush_r+0x48>
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	1ac0      	subs	r0, r0, r3
 80036dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036de:	b10b      	cbz	r3, 80036e4 <__sflush_r+0x48>
 80036e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036e2:	1ac0      	subs	r0, r0, r3
 80036e4:	2300      	movs	r3, #0
 80036e6:	4602      	mov	r2, r0
 80036e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ea:	6a21      	ldr	r1, [r4, #32]
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b0      	blx	r6
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	d106      	bne.n	8003704 <__sflush_r+0x68>
 80036f6:	6829      	ldr	r1, [r5, #0]
 80036f8:	291d      	cmp	r1, #29
 80036fa:	d848      	bhi.n	800378e <__sflush_r+0xf2>
 80036fc:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <__sflush_r+0x108>)
 80036fe:	40ca      	lsrs	r2, r1
 8003700:	07d6      	lsls	r6, r2, #31
 8003702:	d544      	bpl.n	800378e <__sflush_r+0xf2>
 8003704:	2200      	movs	r2, #0
 8003706:	6062      	str	r2, [r4, #4]
 8003708:	04d9      	lsls	r1, r3, #19
 800370a:	6922      	ldr	r2, [r4, #16]
 800370c:	6022      	str	r2, [r4, #0]
 800370e:	d504      	bpl.n	800371a <__sflush_r+0x7e>
 8003710:	1c42      	adds	r2, r0, #1
 8003712:	d101      	bne.n	8003718 <__sflush_r+0x7c>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b903      	cbnz	r3, 800371a <__sflush_r+0x7e>
 8003718:	6560      	str	r0, [r4, #84]	; 0x54
 800371a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800371c:	602f      	str	r7, [r5, #0]
 800371e:	2900      	cmp	r1, #0
 8003720:	d0c9      	beq.n	80036b6 <__sflush_r+0x1a>
 8003722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003726:	4299      	cmp	r1, r3
 8003728:	d002      	beq.n	8003730 <__sflush_r+0x94>
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f994 	bl	8003a58 <_free_r>
 8003730:	2000      	movs	r0, #0
 8003732:	6360      	str	r0, [r4, #52]	; 0x34
 8003734:	e7c0      	b.n	80036b8 <__sflush_r+0x1c>
 8003736:	2301      	movs	r3, #1
 8003738:	4628      	mov	r0, r5
 800373a:	47b0      	blx	r6
 800373c:	1c41      	adds	r1, r0, #1
 800373e:	d1c8      	bne.n	80036d2 <__sflush_r+0x36>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0c5      	beq.n	80036d2 <__sflush_r+0x36>
 8003746:	2b1d      	cmp	r3, #29
 8003748:	d001      	beq.n	800374e <__sflush_r+0xb2>
 800374a:	2b16      	cmp	r3, #22
 800374c:	d101      	bne.n	8003752 <__sflush_r+0xb6>
 800374e:	602f      	str	r7, [r5, #0]
 8003750:	e7b1      	b.n	80036b6 <__sflush_r+0x1a>
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	e7ad      	b.n	80036b8 <__sflush_r+0x1c>
 800375c:	690f      	ldr	r7, [r1, #16]
 800375e:	2f00      	cmp	r7, #0
 8003760:	d0a9      	beq.n	80036b6 <__sflush_r+0x1a>
 8003762:	0793      	lsls	r3, r2, #30
 8003764:	680e      	ldr	r6, [r1, #0]
 8003766:	bf08      	it	eq
 8003768:	694b      	ldreq	r3, [r1, #20]
 800376a:	600f      	str	r7, [r1, #0]
 800376c:	bf18      	it	ne
 800376e:	2300      	movne	r3, #0
 8003770:	eba6 0807 	sub.w	r8, r6, r7
 8003774:	608b      	str	r3, [r1, #8]
 8003776:	f1b8 0f00 	cmp.w	r8, #0
 800377a:	dd9c      	ble.n	80036b6 <__sflush_r+0x1a>
 800377c:	4643      	mov	r3, r8
 800377e:	463a      	mov	r2, r7
 8003780:	6a21      	ldr	r1, [r4, #32]
 8003782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003784:	4628      	mov	r0, r5
 8003786:	47b0      	blx	r6
 8003788:	2800      	cmp	r0, #0
 800378a:	dc06      	bgt.n	800379a <__sflush_r+0xfe>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	e78e      	b.n	80036b8 <__sflush_r+0x1c>
 800379a:	4407      	add	r7, r0
 800379c:	eba8 0800 	sub.w	r8, r8, r0
 80037a0:	e7e9      	b.n	8003776 <__sflush_r+0xda>
 80037a2:	bf00      	nop
 80037a4:	20400001 	.word	0x20400001

080037a8 <_fflush_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	690b      	ldr	r3, [r1, #16]
 80037ac:	4605      	mov	r5, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	b1db      	cbz	r3, 80037ea <_fflush_r+0x42>
 80037b2:	b118      	cbz	r0, 80037bc <_fflush_r+0x14>
 80037b4:	6983      	ldr	r3, [r0, #24]
 80037b6:	b90b      	cbnz	r3, 80037bc <_fflush_r+0x14>
 80037b8:	f000 f860 	bl	800387c <__sinit>
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <_fflush_r+0x48>)
 80037be:	429c      	cmp	r4, r3
 80037c0:	d109      	bne.n	80037d6 <_fflush_r+0x2e>
 80037c2:	686c      	ldr	r4, [r5, #4]
 80037c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c8:	b17b      	cbz	r3, 80037ea <_fflush_r+0x42>
 80037ca:	4621      	mov	r1, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d2:	f7ff bf63 	b.w	800369c <__sflush_r>
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <_fflush_r+0x4c>)
 80037d8:	429c      	cmp	r4, r3
 80037da:	d101      	bne.n	80037e0 <_fflush_r+0x38>
 80037dc:	68ac      	ldr	r4, [r5, #8]
 80037de:	e7f1      	b.n	80037c4 <_fflush_r+0x1c>
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <_fflush_r+0x50>)
 80037e2:	429c      	cmp	r4, r3
 80037e4:	bf08      	it	eq
 80037e6:	68ec      	ldreq	r4, [r5, #12]
 80037e8:	e7ec      	b.n	80037c4 <_fflush_r+0x1c>
 80037ea:	2000      	movs	r0, #0
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	bf00      	nop
 80037f0:	0800437c 	.word	0x0800437c
 80037f4:	0800439c 	.word	0x0800439c
 80037f8:	0800435c 	.word	0x0800435c

080037fc <std>:
 80037fc:	2300      	movs	r3, #0
 80037fe:	b510      	push	{r4, lr}
 8003800:	4604      	mov	r4, r0
 8003802:	e9c0 3300 	strd	r3, r3, [r0]
 8003806:	6083      	str	r3, [r0, #8]
 8003808:	8181      	strh	r1, [r0, #12]
 800380a:	6643      	str	r3, [r0, #100]	; 0x64
 800380c:	81c2      	strh	r2, [r0, #14]
 800380e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003812:	6183      	str	r3, [r0, #24]
 8003814:	4619      	mov	r1, r3
 8003816:	2208      	movs	r2, #8
 8003818:	305c      	adds	r0, #92	; 0x5c
 800381a:	f7ff fde1 	bl	80033e0 <memset>
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <std+0x38>)
 8003820:	6263      	str	r3, [r4, #36]	; 0x24
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <std+0x3c>)
 8003824:	62a3      	str	r3, [r4, #40]	; 0x28
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <std+0x40>)
 8003828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <std+0x44>)
 800382c:	6224      	str	r4, [r4, #32]
 800382e:	6323      	str	r3, [r4, #48]	; 0x30
 8003830:	bd10      	pop	{r4, pc}
 8003832:	bf00      	nop
 8003834:	08004159 	.word	0x08004159
 8003838:	0800417b 	.word	0x0800417b
 800383c:	080041b3 	.word	0x080041b3
 8003840:	080041d7 	.word	0x080041d7

08003844 <_cleanup_r>:
 8003844:	4901      	ldr	r1, [pc, #4]	; (800384c <_cleanup_r+0x8>)
 8003846:	f000 b885 	b.w	8003954 <_fwalk_reent>
 800384a:	bf00      	nop
 800384c:	080037a9 	.word	0x080037a9

08003850 <__sfmoreglue>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	1e4a      	subs	r2, r1, #1
 8003854:	2568      	movs	r5, #104	; 0x68
 8003856:	4355      	muls	r5, r2
 8003858:	460e      	mov	r6, r1
 800385a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800385e:	f000 f949 	bl	8003af4 <_malloc_r>
 8003862:	4604      	mov	r4, r0
 8003864:	b140      	cbz	r0, 8003878 <__sfmoreglue+0x28>
 8003866:	2100      	movs	r1, #0
 8003868:	e9c0 1600 	strd	r1, r6, [r0]
 800386c:	300c      	adds	r0, #12
 800386e:	60a0      	str	r0, [r4, #8]
 8003870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003874:	f7ff fdb4 	bl	80033e0 <memset>
 8003878:	4620      	mov	r0, r4
 800387a:	bd70      	pop	{r4, r5, r6, pc}

0800387c <__sinit>:
 800387c:	6983      	ldr	r3, [r0, #24]
 800387e:	b510      	push	{r4, lr}
 8003880:	4604      	mov	r4, r0
 8003882:	bb33      	cbnz	r3, 80038d2 <__sinit+0x56>
 8003884:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003888:	6503      	str	r3, [r0, #80]	; 0x50
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <__sinit+0x58>)
 800388c:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <__sinit+0x5c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6282      	str	r2, [r0, #40]	; 0x28
 8003892:	4298      	cmp	r0, r3
 8003894:	bf04      	itt	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	6183      	streq	r3, [r0, #24]
 800389a:	f000 f81f 	bl	80038dc <__sfp>
 800389e:	6060      	str	r0, [r4, #4]
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 f81b 	bl	80038dc <__sfp>
 80038a6:	60a0      	str	r0, [r4, #8]
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 f817 	bl	80038dc <__sfp>
 80038ae:	2200      	movs	r2, #0
 80038b0:	60e0      	str	r0, [r4, #12]
 80038b2:	2104      	movs	r1, #4
 80038b4:	6860      	ldr	r0, [r4, #4]
 80038b6:	f7ff ffa1 	bl	80037fc <std>
 80038ba:	2201      	movs	r2, #1
 80038bc:	2109      	movs	r1, #9
 80038be:	68a0      	ldr	r0, [r4, #8]
 80038c0:	f7ff ff9c 	bl	80037fc <std>
 80038c4:	2202      	movs	r2, #2
 80038c6:	2112      	movs	r1, #18
 80038c8:	68e0      	ldr	r0, [r4, #12]
 80038ca:	f7ff ff97 	bl	80037fc <std>
 80038ce:	2301      	movs	r3, #1
 80038d0:	61a3      	str	r3, [r4, #24]
 80038d2:	bd10      	pop	{r4, pc}
 80038d4:	08004358 	.word	0x08004358
 80038d8:	08003845 	.word	0x08003845

080038dc <__sfp>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <__sfp+0x70>)
 80038e0:	681e      	ldr	r6, [r3, #0]
 80038e2:	69b3      	ldr	r3, [r6, #24]
 80038e4:	4607      	mov	r7, r0
 80038e6:	b913      	cbnz	r3, 80038ee <__sfp+0x12>
 80038e8:	4630      	mov	r0, r6
 80038ea:	f7ff ffc7 	bl	800387c <__sinit>
 80038ee:	3648      	adds	r6, #72	; 0x48
 80038f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	d503      	bpl.n	8003900 <__sfp+0x24>
 80038f8:	6833      	ldr	r3, [r6, #0]
 80038fa:	b133      	cbz	r3, 800390a <__sfp+0x2e>
 80038fc:	6836      	ldr	r6, [r6, #0]
 80038fe:	e7f7      	b.n	80038f0 <__sfp+0x14>
 8003900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003904:	b16d      	cbz	r5, 8003922 <__sfp+0x46>
 8003906:	3468      	adds	r4, #104	; 0x68
 8003908:	e7f4      	b.n	80038f4 <__sfp+0x18>
 800390a:	2104      	movs	r1, #4
 800390c:	4638      	mov	r0, r7
 800390e:	f7ff ff9f 	bl	8003850 <__sfmoreglue>
 8003912:	6030      	str	r0, [r6, #0]
 8003914:	2800      	cmp	r0, #0
 8003916:	d1f1      	bne.n	80038fc <__sfp+0x20>
 8003918:	230c      	movs	r3, #12
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4604      	mov	r4, r0
 800391e:	4620      	mov	r0, r4
 8003920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <__sfp+0x74>)
 8003924:	6665      	str	r5, [r4, #100]	; 0x64
 8003926:	e9c4 5500 	strd	r5, r5, [r4]
 800392a:	60a5      	str	r5, [r4, #8]
 800392c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003930:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003934:	2208      	movs	r2, #8
 8003936:	4629      	mov	r1, r5
 8003938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800393c:	f7ff fd50 	bl	80033e0 <memset>
 8003940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003948:	e7e9      	b.n	800391e <__sfp+0x42>
 800394a:	bf00      	nop
 800394c:	08004358 	.word	0x08004358
 8003950:	ffff0001 	.word	0xffff0001

08003954 <_fwalk_reent>:
 8003954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003958:	4680      	mov	r8, r0
 800395a:	4689      	mov	r9, r1
 800395c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003960:	2600      	movs	r6, #0
 8003962:	b914      	cbnz	r4, 800396a <_fwalk_reent+0x16>
 8003964:	4630      	mov	r0, r6
 8003966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800396e:	3f01      	subs	r7, #1
 8003970:	d501      	bpl.n	8003976 <_fwalk_reent+0x22>
 8003972:	6824      	ldr	r4, [r4, #0]
 8003974:	e7f5      	b.n	8003962 <_fwalk_reent+0xe>
 8003976:	89ab      	ldrh	r3, [r5, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d907      	bls.n	800398c <_fwalk_reent+0x38>
 800397c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003980:	3301      	adds	r3, #1
 8003982:	d003      	beq.n	800398c <_fwalk_reent+0x38>
 8003984:	4629      	mov	r1, r5
 8003986:	4640      	mov	r0, r8
 8003988:	47c8      	blx	r9
 800398a:	4306      	orrs	r6, r0
 800398c:	3568      	adds	r5, #104	; 0x68
 800398e:	e7ee      	b.n	800396e <_fwalk_reent+0x1a>

08003990 <__swhatbuf_r>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	460e      	mov	r6, r1
 8003994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003998:	2900      	cmp	r1, #0
 800399a:	b096      	sub	sp, #88	; 0x58
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	da07      	bge.n	80039b2 <__swhatbuf_r+0x22>
 80039a2:	2300      	movs	r3, #0
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	89b3      	ldrh	r3, [r6, #12]
 80039a8:	061a      	lsls	r2, r3, #24
 80039aa:	d410      	bmi.n	80039ce <__swhatbuf_r+0x3e>
 80039ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b0:	e00e      	b.n	80039d0 <__swhatbuf_r+0x40>
 80039b2:	466a      	mov	r2, sp
 80039b4:	f000 fc36 	bl	8004224 <_fstat_r>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	dbf2      	blt.n	80039a2 <__swhatbuf_r+0x12>
 80039bc:	9a01      	ldr	r2, [sp, #4]
 80039be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039c6:	425a      	negs	r2, r3
 80039c8:	415a      	adcs	r2, r3
 80039ca:	602a      	str	r2, [r5, #0]
 80039cc:	e7ee      	b.n	80039ac <__swhatbuf_r+0x1c>
 80039ce:	2340      	movs	r3, #64	; 0x40
 80039d0:	2000      	movs	r0, #0
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	b016      	add	sp, #88	; 0x58
 80039d6:	bd70      	pop	{r4, r5, r6, pc}

080039d8 <__smakebuf_r>:
 80039d8:	898b      	ldrh	r3, [r1, #12]
 80039da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039dc:	079d      	lsls	r5, r3, #30
 80039de:	4606      	mov	r6, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	d507      	bpl.n	80039f4 <__smakebuf_r+0x1c>
 80039e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	2301      	movs	r3, #1
 80039ee:	6163      	str	r3, [r4, #20]
 80039f0:	b002      	add	sp, #8
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	ab01      	add	r3, sp, #4
 80039f6:	466a      	mov	r2, sp
 80039f8:	f7ff ffca 	bl	8003990 <__swhatbuf_r>
 80039fc:	9900      	ldr	r1, [sp, #0]
 80039fe:	4605      	mov	r5, r0
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f877 	bl	8003af4 <_malloc_r>
 8003a06:	b948      	cbnz	r0, 8003a1c <__smakebuf_r+0x44>
 8003a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a0c:	059a      	lsls	r2, r3, #22
 8003a0e:	d4ef      	bmi.n	80039f0 <__smakebuf_r+0x18>
 8003a10:	f023 0303 	bic.w	r3, r3, #3
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	e7e3      	b.n	80039e4 <__smakebuf_r+0xc>
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <__smakebuf_r+0x7c>)
 8003a1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	6020      	str	r0, [r4, #0]
 8003a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	9b00      	ldr	r3, [sp, #0]
 8003a2c:	6163      	str	r3, [r4, #20]
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	6120      	str	r0, [r4, #16]
 8003a32:	b15b      	cbz	r3, 8003a4c <__smakebuf_r+0x74>
 8003a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f000 fc05 	bl	8004248 <_isatty_r>
 8003a3e:	b128      	cbz	r0, 8003a4c <__smakebuf_r+0x74>
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	431d      	orrs	r5, r3
 8003a50:	81a5      	strh	r5, [r4, #12]
 8003a52:	e7cd      	b.n	80039f0 <__smakebuf_r+0x18>
 8003a54:	08003845 	.word	0x08003845

08003a58 <_free_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4605      	mov	r5, r0
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d045      	beq.n	8003aec <_free_r+0x94>
 8003a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a64:	1f0c      	subs	r4, r1, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfb8      	it	lt
 8003a6a:	18e4      	addlt	r4, r4, r3
 8003a6c:	f000 fc0e 	bl	800428c <__malloc_lock>
 8003a70:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <_free_r+0x98>)
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	4610      	mov	r0, r2
 8003a76:	b933      	cbnz	r3, 8003a86 <_free_r+0x2e>
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	6014      	str	r4, [r2, #0]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a82:	f000 bc04 	b.w	800428e <__malloc_unlock>
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	d90c      	bls.n	8003aa4 <_free_r+0x4c>
 8003a8a:	6821      	ldr	r1, [r4, #0]
 8003a8c:	1862      	adds	r2, r4, r1
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bf04      	itt	eq
 8003a92:	681a      	ldreq	r2, [r3, #0]
 8003a94:	685b      	ldreq	r3, [r3, #4]
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	bf04      	itt	eq
 8003a9a:	1852      	addeq	r2, r2, r1
 8003a9c:	6022      	streq	r2, [r4, #0]
 8003a9e:	6004      	str	r4, [r0, #0]
 8003aa0:	e7ec      	b.n	8003a7c <_free_r+0x24>
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	b10a      	cbz	r2, 8003aac <_free_r+0x54>
 8003aa8:	42a2      	cmp	r2, r4
 8003aaa:	d9fa      	bls.n	8003aa2 <_free_r+0x4a>
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	1858      	adds	r0, r3, r1
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d10b      	bne.n	8003acc <_free_r+0x74>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	4401      	add	r1, r0
 8003ab8:	1858      	adds	r0, r3, r1
 8003aba:	4282      	cmp	r2, r0
 8003abc:	6019      	str	r1, [r3, #0]
 8003abe:	d1dd      	bne.n	8003a7c <_free_r+0x24>
 8003ac0:	6810      	ldr	r0, [r2, #0]
 8003ac2:	6852      	ldr	r2, [r2, #4]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	4401      	add	r1, r0
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	e7d7      	b.n	8003a7c <_free_r+0x24>
 8003acc:	d902      	bls.n	8003ad4 <_free_r+0x7c>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	e7d3      	b.n	8003a7c <_free_r+0x24>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	1821      	adds	r1, r4, r0
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	bf04      	itt	eq
 8003adc:	6811      	ldreq	r1, [r2, #0]
 8003ade:	6852      	ldreq	r2, [r2, #4]
 8003ae0:	6062      	str	r2, [r4, #4]
 8003ae2:	bf04      	itt	eq
 8003ae4:	1809      	addeq	r1, r1, r0
 8003ae6:	6021      	streq	r1, [r4, #0]
 8003ae8:	605c      	str	r4, [r3, #4]
 8003aea:	e7c7      	b.n	8003a7c <_free_r+0x24>
 8003aec:	bd38      	pop	{r3, r4, r5, pc}
 8003aee:	bf00      	nop
 8003af0:	2000049c 	.word	0x2000049c

08003af4 <_malloc_r>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	1ccd      	adds	r5, r1, #3
 8003af8:	f025 0503 	bic.w	r5, r5, #3
 8003afc:	3508      	adds	r5, #8
 8003afe:	2d0c      	cmp	r5, #12
 8003b00:	bf38      	it	cc
 8003b02:	250c      	movcc	r5, #12
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	4606      	mov	r6, r0
 8003b08:	db01      	blt.n	8003b0e <_malloc_r+0x1a>
 8003b0a:	42a9      	cmp	r1, r5
 8003b0c:	d903      	bls.n	8003b16 <_malloc_r+0x22>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	2000      	movs	r0, #0
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	f000 fbb9 	bl	800428c <__malloc_lock>
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <_malloc_r+0xac>)
 8003b1c:	6814      	ldr	r4, [r2, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	b991      	cbnz	r1, 8003b48 <_malloc_r+0x54>
 8003b22:	4c20      	ldr	r4, [pc, #128]	; (8003ba4 <_malloc_r+0xb0>)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	b91b      	cbnz	r3, 8003b30 <_malloc_r+0x3c>
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 fb05 	bl	8004138 <_sbrk_r>
 8003b2e:	6020      	str	r0, [r4, #0]
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f000 fb00 	bl	8004138 <_sbrk_r>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d124      	bne.n	8003b86 <_malloc_r+0x92>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 fba4 	bl	800428e <__malloc_unlock>
 8003b46:	e7e4      	b.n	8003b12 <_malloc_r+0x1e>
 8003b48:	680b      	ldr	r3, [r1, #0]
 8003b4a:	1b5b      	subs	r3, r3, r5
 8003b4c:	d418      	bmi.n	8003b80 <_malloc_r+0x8c>
 8003b4e:	2b0b      	cmp	r3, #11
 8003b50:	d90f      	bls.n	8003b72 <_malloc_r+0x7e>
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	50cd      	str	r5, [r1, r3]
 8003b56:	18cc      	adds	r4, r1, r3
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f000 fb98 	bl	800428e <__malloc_unlock>
 8003b5e:	f104 000b 	add.w	r0, r4, #11
 8003b62:	1d23      	adds	r3, r4, #4
 8003b64:	f020 0007 	bic.w	r0, r0, #7
 8003b68:	1ac3      	subs	r3, r0, r3
 8003b6a:	d0d3      	beq.n	8003b14 <_malloc_r+0x20>
 8003b6c:	425a      	negs	r2, r3
 8003b6e:	50e2      	str	r2, [r4, r3]
 8003b70:	e7d0      	b.n	8003b14 <_malloc_r+0x20>
 8003b72:	428c      	cmp	r4, r1
 8003b74:	684b      	ldr	r3, [r1, #4]
 8003b76:	bf16      	itet	ne
 8003b78:	6063      	strne	r3, [r4, #4]
 8003b7a:	6013      	streq	r3, [r2, #0]
 8003b7c:	460c      	movne	r4, r1
 8003b7e:	e7eb      	b.n	8003b58 <_malloc_r+0x64>
 8003b80:	460c      	mov	r4, r1
 8003b82:	6849      	ldr	r1, [r1, #4]
 8003b84:	e7cc      	b.n	8003b20 <_malloc_r+0x2c>
 8003b86:	1cc4      	adds	r4, r0, #3
 8003b88:	f024 0403 	bic.w	r4, r4, #3
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d005      	beq.n	8003b9c <_malloc_r+0xa8>
 8003b90:	1a21      	subs	r1, r4, r0
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 fad0 	bl	8004138 <_sbrk_r>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0cf      	beq.n	8003b3c <_malloc_r+0x48>
 8003b9c:	6025      	str	r5, [r4, #0]
 8003b9e:	e7db      	b.n	8003b58 <_malloc_r+0x64>
 8003ba0:	2000049c 	.word	0x2000049c
 8003ba4:	200004a0 	.word	0x200004a0

08003ba8 <__sfputc_r>:
 8003ba8:	6893      	ldr	r3, [r2, #8]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	b410      	push	{r4}
 8003bb0:	6093      	str	r3, [r2, #8]
 8003bb2:	da08      	bge.n	8003bc6 <__sfputc_r+0x1e>
 8003bb4:	6994      	ldr	r4, [r2, #24]
 8003bb6:	42a3      	cmp	r3, r4
 8003bb8:	db01      	blt.n	8003bbe <__sfputc_r+0x16>
 8003bba:	290a      	cmp	r1, #10
 8003bbc:	d103      	bne.n	8003bc6 <__sfputc_r+0x1e>
 8003bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc2:	f7ff bcab 	b.w	800351c <__swbuf_r>
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	1c58      	adds	r0, r3, #1
 8003bca:	6010      	str	r0, [r2, #0]
 8003bcc:	7019      	strb	r1, [r3, #0]
 8003bce:	4608      	mov	r0, r1
 8003bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <__sfputs_r>:
 8003bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd8:	4606      	mov	r6, r0
 8003bda:	460f      	mov	r7, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	18d5      	adds	r5, r2, r3
 8003be0:	42ac      	cmp	r4, r5
 8003be2:	d101      	bne.n	8003be8 <__sfputs_r+0x12>
 8003be4:	2000      	movs	r0, #0
 8003be6:	e007      	b.n	8003bf8 <__sfputs_r+0x22>
 8003be8:	463a      	mov	r2, r7
 8003bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f7ff ffda 	bl	8003ba8 <__sfputc_r>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d1f3      	bne.n	8003be0 <__sfputs_r+0xa>
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bfc <_vfiprintf_r>:
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	460c      	mov	r4, r1
 8003c02:	b09d      	sub	sp, #116	; 0x74
 8003c04:	4617      	mov	r7, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	4606      	mov	r6, r0
 8003c0a:	b118      	cbz	r0, 8003c14 <_vfiprintf_r+0x18>
 8003c0c:	6983      	ldr	r3, [r0, #24]
 8003c0e:	b90b      	cbnz	r3, 8003c14 <_vfiprintf_r+0x18>
 8003c10:	f7ff fe34 	bl	800387c <__sinit>
 8003c14:	4b7c      	ldr	r3, [pc, #496]	; (8003e08 <_vfiprintf_r+0x20c>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d158      	bne.n	8003ccc <_vfiprintf_r+0xd0>
 8003c1a:	6874      	ldr	r4, [r6, #4]
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	0718      	lsls	r0, r3, #28
 8003c20:	d55e      	bpl.n	8003ce0 <_vfiprintf_r+0xe4>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <_vfiprintf_r+0xe4>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c32:	2330      	movs	r3, #48	; 0x30
 8003c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c38:	9503      	str	r5, [sp, #12]
 8003c3a:	f04f 0b01 	mov.w	fp, #1
 8003c3e:	46b8      	mov	r8, r7
 8003c40:	4645      	mov	r5, r8
 8003c42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c46:	b10b      	cbz	r3, 8003c4c <_vfiprintf_r+0x50>
 8003c48:	2b25      	cmp	r3, #37	; 0x25
 8003c4a:	d154      	bne.n	8003cf6 <_vfiprintf_r+0xfa>
 8003c4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c50:	d00b      	beq.n	8003c6a <_vfiprintf_r+0x6e>
 8003c52:	4653      	mov	r3, sl
 8003c54:	463a      	mov	r2, r7
 8003c56:	4621      	mov	r1, r4
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f7ff ffbc 	bl	8003bd6 <__sfputs_r>
 8003c5e:	3001      	adds	r0, #1
 8003c60:	f000 80c2 	beq.w	8003de8 <_vfiprintf_r+0x1ec>
 8003c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c66:	4453      	add	r3, sl
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	f898 3000 	ldrb.w	r3, [r8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80ba 	beq.w	8003de8 <_vfiprintf_r+0x1ec>
 8003c74:	2300      	movs	r3, #0
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c86:	931a      	str	r3, [sp, #104]	; 0x68
 8003c88:	46a8      	mov	r8, r5
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c90:	485e      	ldr	r0, [pc, #376]	; (8003e0c <_vfiprintf_r+0x210>)
 8003c92:	f7fc faa5 	bl	80001e0 <memchr>
 8003c96:	9b04      	ldr	r3, [sp, #16]
 8003c98:	bb78      	cbnz	r0, 8003cfa <_vfiprintf_r+0xfe>
 8003c9a:	06d9      	lsls	r1, r3, #27
 8003c9c:	bf44      	itt	mi
 8003c9e:	2220      	movmi	r2, #32
 8003ca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ca4:	071a      	lsls	r2, r3, #28
 8003ca6:	bf44      	itt	mi
 8003ca8:	222b      	movmi	r2, #43	; 0x2b
 8003caa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cae:	782a      	ldrb	r2, [r5, #0]
 8003cb0:	2a2a      	cmp	r2, #42	; 0x2a
 8003cb2:	d02a      	beq.n	8003d0a <_vfiprintf_r+0x10e>
 8003cb4:	9a07      	ldr	r2, [sp, #28]
 8003cb6:	46a8      	mov	r8, r5
 8003cb8:	2000      	movs	r0, #0
 8003cba:	250a      	movs	r5, #10
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc2:	3b30      	subs	r3, #48	; 0x30
 8003cc4:	2b09      	cmp	r3, #9
 8003cc6:	d969      	bls.n	8003d9c <_vfiprintf_r+0x1a0>
 8003cc8:	b360      	cbz	r0, 8003d24 <_vfiprintf_r+0x128>
 8003cca:	e024      	b.n	8003d16 <_vfiprintf_r+0x11a>
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <_vfiprintf_r+0x214>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d101      	bne.n	8003cd6 <_vfiprintf_r+0xda>
 8003cd2:	68b4      	ldr	r4, [r6, #8]
 8003cd4:	e7a2      	b.n	8003c1c <_vfiprintf_r+0x20>
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <_vfiprintf_r+0x218>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	bf08      	it	eq
 8003cdc:	68f4      	ldreq	r4, [r6, #12]
 8003cde:	e79d      	b.n	8003c1c <_vfiprintf_r+0x20>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f7ff fc6c 	bl	80035c0 <__swsetup_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d09d      	beq.n	8003c28 <_vfiprintf_r+0x2c>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b01d      	add	sp, #116	; 0x74
 8003cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf6:	46a8      	mov	r8, r5
 8003cf8:	e7a2      	b.n	8003c40 <_vfiprintf_r+0x44>
 8003cfa:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <_vfiprintf_r+0x210>)
 8003cfc:	1a80      	subs	r0, r0, r2
 8003cfe:	fa0b f000 	lsl.w	r0, fp, r0
 8003d02:	4318      	orrs	r0, r3
 8003d04:	9004      	str	r0, [sp, #16]
 8003d06:	4645      	mov	r5, r8
 8003d08:	e7be      	b.n	8003c88 <_vfiprintf_r+0x8c>
 8003d0a:	9a03      	ldr	r2, [sp, #12]
 8003d0c:	1d11      	adds	r1, r2, #4
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	db01      	blt.n	8003d1a <_vfiprintf_r+0x11e>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e004      	b.n	8003d24 <_vfiprintf_r+0x128>
 8003d1a:	4252      	negs	r2, r2
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	9207      	str	r2, [sp, #28]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	f898 3000 	ldrb.w	r3, [r8]
 8003d28:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2a:	d10e      	bne.n	8003d4a <_vfiprintf_r+0x14e>
 8003d2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d30:	2b2a      	cmp	r3, #42	; 0x2a
 8003d32:	d138      	bne.n	8003da6 <_vfiprintf_r+0x1aa>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	9203      	str	r2, [sp, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bfb8      	it	lt
 8003d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d44:	f108 0802 	add.w	r8, r8, #2
 8003d48:	9305      	str	r3, [sp, #20]
 8003d4a:	4d33      	ldr	r5, [pc, #204]	; (8003e18 <_vfiprintf_r+0x21c>)
 8003d4c:	f898 1000 	ldrb.w	r1, [r8]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fc fa44 	bl	80001e0 <memchr>
 8003d58:	b140      	cbz	r0, 8003d6c <_vfiprintf_r+0x170>
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	4303      	orrs	r3, r0
 8003d66:	f108 0801 	add.w	r8, r8, #1
 8003d6a:	9304      	str	r3, [sp, #16]
 8003d6c:	f898 1000 	ldrb.w	r1, [r8]
 8003d70:	482a      	ldr	r0, [pc, #168]	; (8003e1c <_vfiprintf_r+0x220>)
 8003d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d76:	2206      	movs	r2, #6
 8003d78:	f108 0701 	add.w	r7, r8, #1
 8003d7c:	f7fc fa30 	bl	80001e0 <memchr>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d037      	beq.n	8003df4 <_vfiprintf_r+0x1f8>
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <_vfiprintf_r+0x224>)
 8003d86:	bb1b      	cbnz	r3, 8003dd0 <_vfiprintf_r+0x1d4>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	3307      	adds	r3, #7
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	3308      	adds	r3, #8
 8003d92:	9303      	str	r3, [sp, #12]
 8003d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d96:	444b      	add	r3, r9
 8003d98:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9a:	e750      	b.n	8003c3e <_vfiprintf_r+0x42>
 8003d9c:	fb05 3202 	mla	r2, r5, r2, r3
 8003da0:	2001      	movs	r0, #1
 8003da2:	4688      	mov	r8, r1
 8003da4:	e78a      	b.n	8003cbc <_vfiprintf_r+0xc0>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f108 0801 	add.w	r8, r8, #1
 8003dac:	9305      	str	r3, [sp, #20]
 8003dae:	4619      	mov	r1, r3
 8003db0:	250a      	movs	r5, #10
 8003db2:	4640      	mov	r0, r8
 8003db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db8:	3a30      	subs	r2, #48	; 0x30
 8003dba:	2a09      	cmp	r2, #9
 8003dbc:	d903      	bls.n	8003dc6 <_vfiprintf_r+0x1ca>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0c3      	beq.n	8003d4a <_vfiprintf_r+0x14e>
 8003dc2:	9105      	str	r1, [sp, #20]
 8003dc4:	e7c1      	b.n	8003d4a <_vfiprintf_r+0x14e>
 8003dc6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4680      	mov	r8, r0
 8003dce:	e7f0      	b.n	8003db2 <_vfiprintf_r+0x1b6>
 8003dd0:	ab03      	add	r3, sp, #12
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <_vfiprintf_r+0x228>)
 8003dd8:	a904      	add	r1, sp, #16
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f3af 8000 	nop.w
 8003de0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003de4:	4681      	mov	r9, r0
 8003de6:	d1d5      	bne.n	8003d94 <_vfiprintf_r+0x198>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	065b      	lsls	r3, r3, #25
 8003dec:	f53f af7e 	bmi.w	8003cec <_vfiprintf_r+0xf0>
 8003df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003df2:	e77d      	b.n	8003cf0 <_vfiprintf_r+0xf4>
 8003df4:	ab03      	add	r3, sp, #12
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4622      	mov	r2, r4
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <_vfiprintf_r+0x228>)
 8003dfc:	a904      	add	r1, sp, #16
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f000 f888 	bl	8003f14 <_printf_i>
 8003e04:	e7ec      	b.n	8003de0 <_vfiprintf_r+0x1e4>
 8003e06:	bf00      	nop
 8003e08:	0800437c 	.word	0x0800437c
 8003e0c:	080043bc 	.word	0x080043bc
 8003e10:	0800439c 	.word	0x0800439c
 8003e14:	0800435c 	.word	0x0800435c
 8003e18:	080043c2 	.word	0x080043c2
 8003e1c:	080043c6 	.word	0x080043c6
 8003e20:	00000000 	.word	0x00000000
 8003e24:	08003bd7 	.word	0x08003bd7

08003e28 <_printf_common>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	4691      	mov	r9, r2
 8003e2e:	461f      	mov	r7, r3
 8003e30:	688a      	ldr	r2, [r1, #8]
 8003e32:	690b      	ldr	r3, [r1, #16]
 8003e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bfb8      	it	lt
 8003e3c:	4613      	movlt	r3, r2
 8003e3e:	f8c9 3000 	str.w	r3, [r9]
 8003e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e46:	4606      	mov	r6, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	b112      	cbz	r2, 8003e52 <_printf_common+0x2a>
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c9 3000 	str.w	r3, [r9]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	0699      	lsls	r1, r3, #26
 8003e56:	bf42      	ittt	mi
 8003e58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e5c:	3302      	addmi	r3, #2
 8003e5e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e62:	6825      	ldr	r5, [r4, #0]
 8003e64:	f015 0506 	ands.w	r5, r5, #6
 8003e68:	d107      	bne.n	8003e7a <_printf_common+0x52>
 8003e6a:	f104 0a19 	add.w	sl, r4, #25
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	f8d9 2000 	ldr.w	r2, [r9]
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	42ab      	cmp	r3, r5
 8003e78:	dc28      	bgt.n	8003ecc <_printf_common+0xa4>
 8003e7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	3300      	adds	r3, #0
 8003e82:	bf18      	it	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	0692      	lsls	r2, r2, #26
 8003e88:	d42d      	bmi.n	8003ee6 <_printf_common+0xbe>
 8003e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e8e:	4639      	mov	r1, r7
 8003e90:	4630      	mov	r0, r6
 8003e92:	47c0      	blx	r8
 8003e94:	3001      	adds	r0, #1
 8003e96:	d020      	beq.n	8003eda <_printf_common+0xb2>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	68e5      	ldr	r5, [r4, #12]
 8003e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8003ea0:	f003 0306 	and.w	r3, r3, #6
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	bf08      	it	eq
 8003ea8:	1aad      	subeq	r5, r5, r2
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	bf0c      	ite	eq
 8003eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb4:	2500      	movne	r5, #0
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bfc4      	itt	gt
 8003eba:	1a9b      	subgt	r3, r3, r2
 8003ebc:	18ed      	addgt	r5, r5, r3
 8003ebe:	f04f 0900 	mov.w	r9, #0
 8003ec2:	341a      	adds	r4, #26
 8003ec4:	454d      	cmp	r5, r9
 8003ec6:	d11a      	bne.n	8003efe <_printf_common+0xd6>
 8003ec8:	2000      	movs	r0, #0
 8003eca:	e008      	b.n	8003ede <_printf_common+0xb6>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4652      	mov	r2, sl
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	47c0      	blx	r8
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d103      	bne.n	8003ee2 <_printf_common+0xba>
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee2:	3501      	adds	r5, #1
 8003ee4:	e7c3      	b.n	8003e6e <_printf_common+0x46>
 8003ee6:	18e1      	adds	r1, r4, r3
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	2030      	movs	r0, #48	; 0x30
 8003eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef0:	4422      	add	r2, r4
 8003ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efa:	3302      	adds	r3, #2
 8003efc:	e7c5      	b.n	8003e8a <_printf_common+0x62>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4622      	mov	r2, r4
 8003f02:	4639      	mov	r1, r7
 8003f04:	4630      	mov	r0, r6
 8003f06:	47c0      	blx	r8
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d0e6      	beq.n	8003eda <_printf_common+0xb2>
 8003f0c:	f109 0901 	add.w	r9, r9, #1
 8003f10:	e7d8      	b.n	8003ec4 <_printf_common+0x9c>
	...

08003f14 <_printf_i>:
 8003f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	7e09      	ldrb	r1, [r1, #24]
 8003f20:	b085      	sub	sp, #20
 8003f22:	296e      	cmp	r1, #110	; 0x6e
 8003f24:	4617      	mov	r7, r2
 8003f26:	4606      	mov	r6, r0
 8003f28:	4698      	mov	r8, r3
 8003f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f2c:	f000 80b3 	beq.w	8004096 <_printf_i+0x182>
 8003f30:	d822      	bhi.n	8003f78 <_printf_i+0x64>
 8003f32:	2963      	cmp	r1, #99	; 0x63
 8003f34:	d036      	beq.n	8003fa4 <_printf_i+0x90>
 8003f36:	d80a      	bhi.n	8003f4e <_printf_i+0x3a>
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	f000 80b9 	beq.w	80040b0 <_printf_i+0x19c>
 8003f3e:	2958      	cmp	r1, #88	; 0x58
 8003f40:	f000 8083 	beq.w	800404a <_printf_i+0x136>
 8003f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f4c:	e032      	b.n	8003fb4 <_printf_i+0xa0>
 8003f4e:	2964      	cmp	r1, #100	; 0x64
 8003f50:	d001      	beq.n	8003f56 <_printf_i+0x42>
 8003f52:	2969      	cmp	r1, #105	; 0x69
 8003f54:	d1f6      	bne.n	8003f44 <_printf_i+0x30>
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	6813      	ldr	r3, [r2, #0]
 8003f5a:	0605      	lsls	r5, r0, #24
 8003f5c:	f103 0104 	add.w	r1, r3, #4
 8003f60:	d52a      	bpl.n	8003fb8 <_printf_i+0xa4>
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da03      	bge.n	8003f72 <_printf_i+0x5e>
 8003f6a:	222d      	movs	r2, #45	; 0x2d
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f72:	486f      	ldr	r0, [pc, #444]	; (8004130 <_printf_i+0x21c>)
 8003f74:	220a      	movs	r2, #10
 8003f76:	e039      	b.n	8003fec <_printf_i+0xd8>
 8003f78:	2973      	cmp	r1, #115	; 0x73
 8003f7a:	f000 809d 	beq.w	80040b8 <_printf_i+0x1a4>
 8003f7e:	d808      	bhi.n	8003f92 <_printf_i+0x7e>
 8003f80:	296f      	cmp	r1, #111	; 0x6f
 8003f82:	d020      	beq.n	8003fc6 <_printf_i+0xb2>
 8003f84:	2970      	cmp	r1, #112	; 0x70
 8003f86:	d1dd      	bne.n	8003f44 <_printf_i+0x30>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	e003      	b.n	8003f9a <_printf_i+0x86>
 8003f92:	2975      	cmp	r1, #117	; 0x75
 8003f94:	d017      	beq.n	8003fc6 <_printf_i+0xb2>
 8003f96:	2978      	cmp	r1, #120	; 0x78
 8003f98:	d1d4      	bne.n	8003f44 <_printf_i+0x30>
 8003f9a:	2378      	movs	r3, #120	; 0x78
 8003f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fa0:	4864      	ldr	r0, [pc, #400]	; (8004134 <_printf_i+0x220>)
 8003fa2:	e055      	b.n	8004050 <_printf_i+0x13c>
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	1d19      	adds	r1, r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6011      	str	r1, [r2, #0]
 8003fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e08c      	b.n	80040d2 <_printf_i+0x1be>
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6011      	str	r1, [r2, #0]
 8003fbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fc0:	bf18      	it	ne
 8003fc2:	b21b      	sxthne	r3, r3
 8003fc4:	e7cf      	b.n	8003f66 <_printf_i+0x52>
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6010      	str	r0, [r2, #0]
 8003fce:	0628      	lsls	r0, r5, #24
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0xc2>
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	e002      	b.n	8003fdc <_printf_i+0xc8>
 8003fd6:	0668      	lsls	r0, r5, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0xbe>
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	4854      	ldr	r0, [pc, #336]	; (8004130 <_printf_i+0x21c>)
 8003fde:	296f      	cmp	r1, #111	; 0x6f
 8003fe0:	bf14      	ite	ne
 8003fe2:	220a      	movne	r2, #10
 8003fe4:	2208      	moveq	r2, #8
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fec:	6865      	ldr	r5, [r4, #4]
 8003fee:	60a5      	str	r5, [r4, #8]
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	f2c0 8095 	blt.w	8004120 <_printf_i+0x20c>
 8003ff6:	6821      	ldr	r1, [r4, #0]
 8003ff8:	f021 0104 	bic.w	r1, r1, #4
 8003ffc:	6021      	str	r1, [r4, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d13d      	bne.n	800407e <_printf_i+0x16a>
 8004002:	2d00      	cmp	r5, #0
 8004004:	f040 808e 	bne.w	8004124 <_printf_i+0x210>
 8004008:	4665      	mov	r5, ip
 800400a:	2a08      	cmp	r2, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x112>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x112>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	; 0x30
 800401e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004022:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004026:	ebac 0305 	sub.w	r3, ip, r5
 800402a:	6123      	str	r3, [r4, #16]
 800402c:	f8cd 8000 	str.w	r8, [sp]
 8004030:	463b      	mov	r3, r7
 8004032:	aa03      	add	r2, sp, #12
 8004034:	4621      	mov	r1, r4
 8004036:	4630      	mov	r0, r6
 8004038:	f7ff fef6 	bl	8003e28 <_printf_common>
 800403c:	3001      	adds	r0, #1
 800403e:	d14d      	bne.n	80040dc <_printf_i+0x1c8>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b005      	add	sp, #20
 8004046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404a:	4839      	ldr	r0, [pc, #228]	; (8004130 <_printf_i+0x21c>)
 800404c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004050:	6813      	ldr	r3, [r2, #0]
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	1d1d      	adds	r5, r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6015      	str	r5, [r2, #0]
 800405a:	060a      	lsls	r2, r1, #24
 800405c:	d50b      	bpl.n	8004076 <_printf_i+0x162>
 800405e:	07ca      	lsls	r2, r1, #31
 8004060:	bf44      	itt	mi
 8004062:	f041 0120 	orrmi.w	r1, r1, #32
 8004066:	6021      	strmi	r1, [r4, #0]
 8004068:	b91b      	cbnz	r3, 8004072 <_printf_i+0x15e>
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	f022 0220 	bic.w	r2, r2, #32
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	2210      	movs	r2, #16
 8004074:	e7b7      	b.n	8003fe6 <_printf_i+0xd2>
 8004076:	064d      	lsls	r5, r1, #25
 8004078:	bf48      	it	mi
 800407a:	b29b      	uxthmi	r3, r3
 800407c:	e7ef      	b.n	800405e <_printf_i+0x14a>
 800407e:	4665      	mov	r5, ip
 8004080:	fbb3 f1f2 	udiv	r1, r3, r2
 8004084:	fb02 3311 	mls	r3, r2, r1, r3
 8004088:	5cc3      	ldrb	r3, [r0, r3]
 800408a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800408e:	460b      	mov	r3, r1
 8004090:	2900      	cmp	r1, #0
 8004092:	d1f5      	bne.n	8004080 <_printf_i+0x16c>
 8004094:	e7b9      	b.n	800400a <_printf_i+0xf6>
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	6961      	ldr	r1, [r4, #20]
 800409c:	1d18      	adds	r0, r3, #4
 800409e:	6010      	str	r0, [r2, #0]
 80040a0:	0628      	lsls	r0, r5, #24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	d501      	bpl.n	80040aa <_printf_i+0x196>
 80040a6:	6019      	str	r1, [r3, #0]
 80040a8:	e002      	b.n	80040b0 <_printf_i+0x19c>
 80040aa:	066a      	lsls	r2, r5, #25
 80040ac:	d5fb      	bpl.n	80040a6 <_printf_i+0x192>
 80040ae:	8019      	strh	r1, [r3, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	6123      	str	r3, [r4, #16]
 80040b4:	4665      	mov	r5, ip
 80040b6:	e7b9      	b.n	800402c <_printf_i+0x118>
 80040b8:	6813      	ldr	r3, [r2, #0]
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	681d      	ldr	r5, [r3, #0]
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	2100      	movs	r1, #0
 80040c4:	4628      	mov	r0, r5
 80040c6:	f7fc f88b 	bl	80001e0 <memchr>
 80040ca:	b108      	cbz	r0, 80040d0 <_printf_i+0x1bc>
 80040cc:	1b40      	subs	r0, r0, r5
 80040ce:	6060      	str	r0, [r4, #4]
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2300      	movs	r3, #0
 80040d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040da:	e7a7      	b.n	800402c <_printf_i+0x118>
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	462a      	mov	r2, r5
 80040e0:	4639      	mov	r1, r7
 80040e2:	4630      	mov	r0, r6
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0aa      	beq.n	8004040 <_printf_i+0x12c>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	079b      	lsls	r3, r3, #30
 80040ee:	d413      	bmi.n	8004118 <_printf_i+0x204>
 80040f0:	68e0      	ldr	r0, [r4, #12]
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	4298      	cmp	r0, r3
 80040f6:	bfb8      	it	lt
 80040f8:	4618      	movlt	r0, r3
 80040fa:	e7a3      	b.n	8004044 <_printf_i+0x130>
 80040fc:	2301      	movs	r3, #1
 80040fe:	464a      	mov	r2, r9
 8004100:	4639      	mov	r1, r7
 8004102:	4630      	mov	r0, r6
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d09a      	beq.n	8004040 <_printf_i+0x12c>
 800410a:	3501      	adds	r5, #1
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	9a03      	ldr	r2, [sp, #12]
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	42ab      	cmp	r3, r5
 8004114:	dcf2      	bgt.n	80040fc <_printf_i+0x1e8>
 8004116:	e7eb      	b.n	80040f0 <_printf_i+0x1dc>
 8004118:	2500      	movs	r5, #0
 800411a:	f104 0919 	add.w	r9, r4, #25
 800411e:	e7f5      	b.n	800410c <_printf_i+0x1f8>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ac      	bne.n	800407e <_printf_i+0x16a>
 8004124:	7803      	ldrb	r3, [r0, #0]
 8004126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800412a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800412e:	e76c      	b.n	800400a <_printf_i+0xf6>
 8004130:	080043cd 	.word	0x080043cd
 8004134:	080043de 	.word	0x080043de

08004138 <_sbrk_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4c06      	ldr	r4, [pc, #24]	; (8004154 <_sbrk_r+0x1c>)
 800413c:	2300      	movs	r3, #0
 800413e:	4605      	mov	r5, r0
 8004140:	4608      	mov	r0, r1
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	f7fc ff3a 	bl	8000fbc <_sbrk>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_sbrk_r+0x1a>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	b103      	cbz	r3, 8004152 <_sbrk_r+0x1a>
 8004150:	602b      	str	r3, [r5, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	200008ec 	.word	0x200008ec

08004158 <__sread>:
 8004158:	b510      	push	{r4, lr}
 800415a:	460c      	mov	r4, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	f000 f896 	bl	8004290 <_read_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	bfab      	itete	ge
 8004168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800416a:	89a3      	ldrhlt	r3, [r4, #12]
 800416c:	181b      	addge	r3, r3, r0
 800416e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004172:	bfac      	ite	ge
 8004174:	6563      	strge	r3, [r4, #84]	; 0x54
 8004176:	81a3      	strhlt	r3, [r4, #12]
 8004178:	bd10      	pop	{r4, pc}

0800417a <__swrite>:
 800417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	461f      	mov	r7, r3
 8004180:	898b      	ldrh	r3, [r1, #12]
 8004182:	05db      	lsls	r3, r3, #23
 8004184:	4605      	mov	r5, r0
 8004186:	460c      	mov	r4, r1
 8004188:	4616      	mov	r6, r2
 800418a:	d505      	bpl.n	8004198 <__swrite+0x1e>
 800418c:	2302      	movs	r3, #2
 800418e:	2200      	movs	r2, #0
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f868 	bl	8004268 <_lseek_r>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800419e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	4632      	mov	r2, r6
 80041a6:	463b      	mov	r3, r7
 80041a8:	4628      	mov	r0, r5
 80041aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ae:	f000 b817 	b.w	80041e0 <_write_r>

080041b2 <__sseek>:
 80041b2:	b510      	push	{r4, lr}
 80041b4:	460c      	mov	r4, r1
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 f855 	bl	8004268 <_lseek_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	bf15      	itete	ne
 80041c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ce:	81a3      	strheq	r3, [r4, #12]
 80041d0:	bf18      	it	ne
 80041d2:	81a3      	strhne	r3, [r4, #12]
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <__sclose>:
 80041d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041da:	f000 b813 	b.w	8004204 <_close_r>
	...

080041e0 <_write_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4c07      	ldr	r4, [pc, #28]	; (8004200 <_write_r+0x20>)
 80041e4:	4605      	mov	r5, r0
 80041e6:	4608      	mov	r0, r1
 80041e8:	4611      	mov	r1, r2
 80041ea:	2200      	movs	r2, #0
 80041ec:	6022      	str	r2, [r4, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f7fc fe93 	bl	8000f1a <_write>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_write_r+0x1e>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_write_r+0x1e>
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	200008ec 	.word	0x200008ec

08004204 <_close_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4c06      	ldr	r4, [pc, #24]	; (8004220 <_close_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4605      	mov	r5, r0
 800420c:	4608      	mov	r0, r1
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	f7fc fe9f 	bl	8000f52 <_close>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_close_r+0x1a>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b103      	cbz	r3, 800421e <_close_r+0x1a>
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	200008ec 	.word	0x200008ec

08004224 <_fstat_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4c07      	ldr	r4, [pc, #28]	; (8004244 <_fstat_r+0x20>)
 8004228:	2300      	movs	r3, #0
 800422a:	4605      	mov	r5, r0
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	f7fc fe9a 	bl	8000f6a <_fstat>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d102      	bne.n	8004240 <_fstat_r+0x1c>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	b103      	cbz	r3, 8004240 <_fstat_r+0x1c>
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	200008ec 	.word	0x200008ec

08004248 <_isatty_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4c06      	ldr	r4, [pc, #24]	; (8004264 <_isatty_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	f7fc fe99 	bl	8000f8a <_isatty>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_isatty_r+0x1a>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	b103      	cbz	r3, 8004262 <_isatty_r+0x1a>
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200008ec 	.word	0x200008ec

08004268 <_lseek_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4c07      	ldr	r4, [pc, #28]	; (8004288 <_lseek_r+0x20>)
 800426c:	4605      	mov	r5, r0
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	2200      	movs	r2, #0
 8004274:	6022      	str	r2, [r4, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f7fc fe92 	bl	8000fa0 <_lseek>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_lseek_r+0x1e>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	b103      	cbz	r3, 8004286 <_lseek_r+0x1e>
 8004284:	602b      	str	r3, [r5, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	200008ec 	.word	0x200008ec

0800428c <__malloc_lock>:
 800428c:	4770      	bx	lr

0800428e <__malloc_unlock>:
 800428e:	4770      	bx	lr

08004290 <_read_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4c07      	ldr	r4, [pc, #28]	; (80042b0 <_read_r+0x20>)
 8004294:	4605      	mov	r5, r0
 8004296:	4608      	mov	r0, r1
 8004298:	4611      	mov	r1, r2
 800429a:	2200      	movs	r2, #0
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	f7fc fe1e 	bl	8000ee0 <_read>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d102      	bne.n	80042ae <_read_r+0x1e>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	b103      	cbz	r3, 80042ae <_read_r+0x1e>
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	200008ec 	.word	0x200008ec

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
